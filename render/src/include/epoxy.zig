pub extern fn epoxy_extension_in_string(extension_list: [*c]const u8, ext: [*c]const u8) bool;
pub const GLenum = c_uint;
pub const GLboolean = u8;
pub const GLbitfield = c_uint;
pub const GLvoid = c_void;
pub const GLbyte = i8;
pub const GLubyte = u8;
pub const GLshort = i16;
pub const GLushort = u16;
pub const GLint = c_int;
pub const GLuint = c_uint;
pub const GLclampx = i32;
pub const GLsizei = c_int;
pub const GLfloat = f32;
pub const GLclampf = f32;
pub const GLdouble = f64;
pub const GLclampd = f64;
pub const GLeglClientBufferEXT = ?*c_void;
pub const GLeglImageOES = ?*c_void;
pub const GLchar = u8;
pub const GLcharARB = u8;
pub const GLhandleARB = c_uint;
pub const GLhalf = u16;
pub const GLhalfARB = u16;
pub const GLfixed = i32;
pub const GLintptr = c_long;
pub const GLintptrARB = c_long;
pub const GLsizeiptr = c_long;
pub const GLsizeiptrARB = c_long;
pub const GLint64 = i64;
pub const GLint64EXT = i64;
pub const GLuint64 = u64;
pub const GLuint64EXT = u64;
pub const struct___GLsync = @OpaqueType();
pub const GLsync = ?*struct___GLsync;
pub const struct__cl_context = @OpaqueType();
pub const struct__cl_event = @OpaqueType();
pub const GLDEBUGPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) callconv(.C) void;
pub const GLDEBUGPROCARB = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) callconv(.C) void;
pub const GLDEBUGPROCKHR = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar, ?*const c_void) callconv(.C) void;
pub const GLDEBUGPROCAMD = ?fn (GLuint, GLenum, GLenum, GLsizei, [*c]const GLchar, ?*c_void) callconv(.C) void;
pub const GLhalfNV = c_ushort;
pub const GLvdpauSurfaceNV = GLintptr;
pub const GLVULKANPROCNV = ?fn () callconv(.C) void;
pub const PFNGLACCUMPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLACCUMXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLACQUIREKEYEDMUTEXWIN32EXTPROC = ?fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub const PFNGLACTIVEPROGRAMEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLACTIVESHADERPROGRAMEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLACTIVESTENCILFACEEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVETEXTUREPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVETEXTUREARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLACTIVEVARYINGNVPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP1ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP2ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFRAGMENTOP3ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLALPHAFUNCPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLALPHAFUNCQCOMPROC = ?fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLALPHAFUNCXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLALPHAFUNCXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLALPHATOCOVERAGEDITHERCONTROLNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLAPPLYFRAMEBUFFERATTACHMENTCMAAINTELPROC = ?fn () callconv(.C) void;
pub const PFNGLAPPLYTEXTUREEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLAREPROGRAMSRESIDENTNVPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARETEXTURESRESIDENTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARETEXTURESRESIDENTEXTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub const PFNGLARRAYELEMENTPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLARRAYELEMENTEXTPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLARRAYOBJECTATIPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLASYNCCOPYBUFFERSUBDATANVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCCOPYIMAGESUBDATANVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub const PFNGLASYNCMARKERSGIXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLATTACHOBJECTARBPROC = ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLATTACHSHADERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBEGINCONDITIONALRENDERNVXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINFRAGMENTSHADERATIPROC = ?fn () callconv(.C) void;
pub const PFNGLBEGINOCCLUSIONQUERYNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFMONITORAMDPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBEGINQUERYINDEXEDPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINTRANSFORMFEEDBACKNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBEGINVERTEXSHADEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLBEGINVIDEOCAPTURENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDATTRIBLOCATIONARBPROC = ?fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub const PFNGLBINDBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASEEXTPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERBASENVPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETEXTPROC = ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFEROFFSETNVPROC = ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGEEXTPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERRANGENVPROC = ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDBUFFERSBASEPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDBUFFERSRANGEPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONEXTPROC = ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGDATALOCATIONINDEXEDEXTPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLBINDFRAGMENTSHADERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFEREXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDFRAMEBUFFEROESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREPROC = ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTUREEXTPROC = ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub const PFNGLBINDIMAGETEXTURESPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDLIGHTPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMATERIALPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDMULTITEXTUREEXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPARAMETEREXTPROC = ?fn (GLenum) callconv(.C) GLuint;
pub const PFNGLBINDPROGRAMARBPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDPROGRAMPIPELINEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFERPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFEREXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDRENDERBUFFEROESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDSAMPLERSPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDSHADINGRATEIMAGENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDTEXGENPARAMETEREXTPROC = ?fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTUREPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLBINDTEXTUREUNITPARAMETEREXTPROC = ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub const PFNGLBINDTEXTURESPROC = ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDTRANSFORMFEEDBACKNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXARRAYOESPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERPROC = ?fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLBINDVERTEXBUFFERSPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLBINDVERTEXSHADEREXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC = ?fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub const PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLBINORMAL3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLBINORMAL3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLBINORMAL3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLBINORMAL3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLBINORMAL3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLBINORMAL3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLBINORMAL3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLBINORMALPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLBITMAPPROC = ?fn (GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBITMAPXOESPROC = ?fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLBLENDBARRIERPROC = ?fn () callconv(.C) void;
pub const PFNGLBLENDBARRIERKHRPROC = ?fn () callconv(.C) void;
pub const PFNGLBLENDBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLBLENDCOLORPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDCOLOREXTPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLBLENDCOLORXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLBLENDEQUATIONPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONINDEXEDAMDPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONOESPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEOESPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIARBPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIEXTPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONSEPARATEIOESPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIARBPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDEQUATIONIOESPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEEXTPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINGRPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEOESPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIARBPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIEXTPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCSEPARATEIOESPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIARBPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIEXTPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDFUNCIOESPROC = ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLBLENDPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERANGLEPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFEREXTPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITFRAMEBUFFERNVPROC = ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBLITNAMEDFRAMEBUFFERPROC = ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLBUFFERADDRESSRANGENVPROC = ?fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub const PFNGLBUFFERATTACHMEMORYNVPROC = ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERDATAPROC = ?fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLBUFFERDATAARBPROC = ?fn (GLenum, GLsizeiptrARB, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLBUFFERPAGECOMMITMENTARBPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLBUFFERPARAMETERIAPPLEPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEPROC = ?fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEEXTPROC = ?fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEEXTERNALEXTPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLBUFFERSTORAGEMEMEXTPROC = ?fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAPROC = ?fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLBUFFERSUBDATAARBPROC = ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const c_void) callconv(.C) void;
pub const PFNGLCALLCOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCALLLISTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCALLLISTSPROC = ?fn (GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCHECKFRAMEBUFFERSTATUSPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKFRAMEBUFFERSTATUSOESPROC = ?fn (GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSPROC = ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC = ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLCLAMPCOLORPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLAMPCOLORARBPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLEARPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLCLEARACCUMPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCLEARACCUMXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARBUFFERDATAPROC = ?fn (GLenum, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARBUFFERSUBDATAPROC = ?fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARBUFFERFIPROC = ?fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERFVPROC = ?fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARBUFFERIVPROC = ?fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARBUFFERUIVPROC = ?fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCLEARCOLORIIEXTPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCLEARCOLORIUIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCLEARCOLORXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARCOLORXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCLEARDEPTHPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHDNVPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLCLEARDEPTHFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLCLEARDEPTHFOESPROC = ?fn (GLclampf) callconv(.C) void;
pub const PFNGLCLEARDEPTHXPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLCLEARDEPTHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLCLEARINDEXPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAPROC = ?fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERDATAEXTPROC = ?fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFIPROC = ?fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERFVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERIVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLCLEARNAMEDFRAMEBUFFERUIVPROC = ?fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARPIXELLOCALSTORAGEUIEXTPROC = ?fn (GLsizei, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCLEARSTENCILPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEPROC = ?fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARTEXIMAGEEXTPROC = ?fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLEARTEXSUBIMAGEEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVETEXTUREARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCLIENTATTRIBDEFAULTEXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLCLIENTWAITSEMAPHOREUI64NVXPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLCLIENTWAITSYNCPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLCLIENTWAITSYNCAPPLEPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub const PFNGLCLIPCONTROLPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLIPCONTROLEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCLIPPLANEPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLCLIPPLANEFPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEFIMGPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEFOESPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCLIPPLANEXPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCLIPPLANEXIMGPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCLIPPLANEXOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3BPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLCOLOR3BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLCOLOR3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLCOLOR3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLCOLOR3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCOLOR3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLCOLOR3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLCOLOR3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLCOLOR3UBPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLCOLOR3UBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLCOLOR3UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLOR3UIVPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLOR3USPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLCOLOR3USVPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLCOLOR3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4BPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLCOLOR4BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLCOLOR4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLCOLOR4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLCOLOR4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLCOLOR4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLCOLOR4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLCOLOR4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLCOLOR4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLCOLOR4UBPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FSUNPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX2FVSUNPROC = ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FSUNPROC = ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLOR4UBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLCOLOR4UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLOR4UIVPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLOR4USPROC = ?fn (GLushort, GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLCOLOR4USVPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLCOLOR4XPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLCOLOR4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOLORFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP1ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP2ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORFRAGMENTOP3ATIPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOLORMASKPROC = ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKINDEXEDEXTPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKIPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKIEXTPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMASKIOESPROC = ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOLORMATERIALPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOLORP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLCOLORP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLCOLORPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOLORPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOLORPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLCOLORPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOLORSUBTABLEEXTPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOLORTABLEPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERFVSGIPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOLORTABLEPARAMETERIVSGIPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMBINERINPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLCOMBINEROUTPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFNVPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERFVNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCOMBINERPARAMETERIVNVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMBINERSTAGEPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOMMANDLISTSEGMENTSNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOMPILECOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCOMPILESHADERPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLCOMPILESHADERARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLCOMPILESHADERINCLUDEARBPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE1DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE2DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DARBPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXIMAGE3DOESPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXSUBIMAGE3DOESPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERFNVPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONSERVATIVERASTERPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER1DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCONVOLUTIONFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLCONVOLUTIONPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATAPROC = ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYBUFFERSUBDATANVPROC = ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEPROC = ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORSUBTABLEEXTPROC = ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLEPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATANVPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYIMAGESUBDATAOESPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLCOPYPATHNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLCOPYPIXELSPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXSUBIMAGE3DOESPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLCOPYTEXTURELEVELSAPPLEPROC = ?fn (GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLCOVERFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERFILLPATHNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERSTROKEPATHNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMASKNVPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCOVERAGEMODULATIONTABLENVPROC = ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLCOVERAGEOPERATIONNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCREATEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATECOMMANDLISTSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEMEMORYOBJECTSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPERFQUERYINTELPROC = ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRAMPROC = ?fn () callconv(.C) GLuint;
pub const PFNGLCREATEPROGRAMOBJECTARBPROC = ?fn () callconv(.C) GLhandleARB;
pub const PFNGLCREATEPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEPROGRESSFENCENVXPROC = ?fn () callconv(.C) GLuint;
pub const PFNGLCREATEQUERIESPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATERENDERBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESAMPLERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESHADERPROC = ?fn (GLenum) callconv(.C) GLuint;
pub const PFNGLCREATESHADEROBJECTARBPROC = ?fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLCREATESHADERPROGRAMEXTPROC = ?fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROGRAMVPROC = ?fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESHADERPROGRAMVEXTPROC = ?fn (GLenum, GLsizei, [*c][*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLCREATESTATESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATESYNCFROMCLEVENTARBPROC = ?fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) callconv(.C) GLsync;
pub const PFNGLCREATETEXTURESPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATETRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCREATEVERTEXARRAYSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLCULLFACEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLCULLPARAMETERDVEXTPROC = ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLCULLPARAMETERFVEXTPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLCURRENTPALETTEMATRIXARBPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLCURRENTPALETTEMATRIXOESPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKPROC = ?fn (GLDEBUGPROC, ?*const c_void) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKAMDPROC = ?fn (GLDEBUGPROCAMD, ?*c_void) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKARBPROC = ?fn (GLDEBUGPROCARB, ?*const c_void) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECALLBACKKHRPROC = ?fn (GLDEBUGPROCKHR, ?*const c_void) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGECONTROLKHRPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEENABLEAMDPROC = ?fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTAMDPROC = ?fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTARBPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEBUGMESSAGEINSERTKHRPROC = ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDEFORMSGIXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3DSGIXPROC = ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEFORMATIONMAP3FSGIXPROC = ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDELETEASYNCMARKERSSGIXPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEBUFFERSARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETECOMMANDLISTSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESAPPLEPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFENCESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAGMENTSHADERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEFRAMEBUFFERSOESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETELISTSPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEMEMORYOBJECTSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETENAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLDELETENAMESAMDPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEOBJECTARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLDELETEOCCLUSIONQUERIESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPATHSNVPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDELETEPERFMONITORSAMDPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLDELETEPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMPIPELINESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEPROGRAMSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESARBPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERIESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEQUERYRESOURCETAGNVPROC = ?fn (GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETERENDERBUFFERSOESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESAMPLERSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESEMAPHORESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESHADERPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDELETESTATESNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETESYNCPROC = ?fn (GLsync) callconv(.C) void;
pub const PFNGLDELETESYNCAPPLEPROC = ?fn (GLsync) callconv(.C) void;
pub const PFNGLDELETETEXTURESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETEXTURESEXTPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETETRANSFORMFEEDBACKSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSAPPLEPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXARRAYSOESPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLDELETEVERTEXSHADEREXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSEXTPROC = ?fn (GLclampd, GLclampd) callconv(.C) void;
pub const PFNGLDEPTHBOUNDSDNVPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHFUNCPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDEPTHMASKPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLDEPTHRANGEPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYFVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYFVOESPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDFNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEINDEXEDFOESPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEDNVPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLDEPTHRANGEFPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDEPTHRANGEFOESPROC = ?fn (GLclampf, GLclampf) callconv(.C) void;
pub const PFNGLDEPTHRANGEXPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDEPTHRANGEXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDETACHOBJECTARBPROC = ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub const PFNGLDETACHSHADERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDETAILTEXFUNCSGISPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLDISABLEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLECLIENTSTATEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEDRIVERCONTROLQCOMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYATTRIBEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXARRAYEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEVERTEXATTRIBARRAYARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLDISABLEIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEINVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISABLEIOESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDISCARDFRAMEBUFFEREXTPROC = ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEGROUPSIZEARBPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDISPATCHCOMPUTEINDIRECTPROC = ?fn (GLintptr) callconv(.C) void;
pub const PFNGLDRAWARRAYSPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSEXTPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINDIRECTPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDANGLEPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDARBPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC = ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEEXTPROC = ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDEXTPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWARRAYSINSTANCEDNVPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWBUFFERPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSARBPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSATIPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSEXTPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWBUFFERSINDEXEDEXTPROC = ?fn (GLint, [*c]const GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLDRAWBUFFERSNVPROC = ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSADDRESSNVPROC = ?fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSNVPROC = ?fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESADDRESSNVPROC = ?fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWCOMMANDSSTATESNVPROC = ?fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTARRAYATIPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSBASEVERTEXOESPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINDIRECTPROC = ?fn (GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDANGLEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDARBPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXOESPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDEXTPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLDRAWELEMENTSINSTANCEDNVPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLDRAWMESHARRAYSSUNPROC = ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSINDIRECTNVPROC = ?fn (GLintptr) callconv(.C) void;
pub const PFNGLDRAWMESHTASKSNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWPIXELSPROC = ?fn (GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTARRAYATIPROC = ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXEXTPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSBASEVERTEXOESPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLDRAWRANGEELEMENTSEXTPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLDRAWTEXFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDRAWTEXFVOESPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLDRAWTEXIOESPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLDRAWTEXIVOESPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLDRAWTEXSOESPROC = ?fn (GLshort, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLDRAWTEXSVOESPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLDRAWTEXTURENVPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLDRAWTEXXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLDRAWTEXXVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC = ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDEXTPROC = ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC = ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub const PFNGLDRAWVKIMAGENVPROC = ?fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETRENDERBUFFERSTORAGEOESPROC = ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXSTORAGEEXTPROC = ?fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURE2DOESPROC = ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub const PFNGLEGLIMAGETARGETTEXTURESTORAGEEXTPROC = ?fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLEDGEFLAGFORMATNVPROC = ?fn (GLsizei) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERPROC = ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTEREXTPROC = ?fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub const PFNGLEDGEFLAGPOINTERLISTIBMPROC = ?fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub const PFNGLEDGEFLAGVPROC = ?fn ([*c]const GLboolean) callconv(.C) void;
pub const PFNGLELEMENTPOINTERAPPLEPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLELEMENTPOINTERATIPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLENABLEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLECLIENTSTATEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEDRIVERCONTROLQCOMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEVARIANTCLIENTSTATEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYATTRIBEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXARRAYEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEVERTEXATTRIBARRAYARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENABLEIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEINVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENABLEIOESPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDPROC = ?fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERPROC = ?fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLENDCONDITIONALRENDERNVXPROC = ?fn () callconv(.C) void;
pub const PFNGLENDFRAGMENTSHADERATIPROC = ?fn () callconv(.C) void;
pub const PFNGLENDLISTPROC = ?fn () callconv(.C) void;
pub const PFNGLENDOCCLUSIONQUERYNVPROC = ?fn () callconv(.C) void;
pub const PFNGLENDPERFMONITORAMDPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDPERFQUERYINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLENDQUERYPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYARBPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLENDQUERYINDEXEDPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLENDTILINGQCOMPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKEXTPROC = ?fn () callconv(.C) void;
pub const PFNGLENDTRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLENDVERTEXSHADEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLENDVIDEOCAPTURENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLEVALCOORD1DPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD1DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD1FPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD1FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD1XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD1XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLEVALCOORD2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLEVALCOORD2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLEVALCOORD2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLEVALMAPSNVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLEVALMESH1PROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLEVALMESH2PROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLEVALPOINT1PROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLEVALPOINT2PROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLEVALUATEDEPTHVALUESARBPROC = ?fn () callconv(.C) void;
pub const PFNGLEXECUTEPROGRAMNVPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLEXTGETBUFFERPOINTERVQCOMPROC = ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLEXTGETBUFFERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETFRAMEBUFFERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETPROGRAMBINARYSOURCEQCOMPROC = ?fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETPROGRAMSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETRENDERBUFFERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETSHADERSQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETTEXLEVELPARAMETERIVQCOMPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTGETTEXSUBIMAGEQCOMPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLEXTGETTEXTURESQCOMPROC = ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLEXTISPROGRAMBINARYQCOMPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLEXTTEXOBJECTSTATEOVERRIDEIQCOMPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLEXTRACTCOMPONENTEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLFEEDBACKBUFFERPROC = ?fn (GLsizei, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLFEEDBACKBUFFERXOESPROC = ?fn (GLsizei, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFENCESYNCPROC = ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFENCESYNCAPPLEPROC = ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub const PFNGLFINALCOMBINERINPUTNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLFINISHPROC = ?fn () callconv(.C) void;
pub const PFNGLFINISHASYNCSGIXPROC = ?fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLFINISHFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHFENCENVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFINISHOBJECTAPPLEPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFINISHTEXTURESUNXPROC = ?fn () callconv(.C) void;
pub const PFNGLFLUSHPROC = ?fn () callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDBUFFERRANGEEXTPROC = ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLFLUSHPIXELDATARANGENVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLFLUSHRASTERSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLFLUSHSTATICDATAIBMPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC = ?fn (GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLFLUSHVERTEXARRAYRANGENVPROC = ?fn () callconv(.C) void;
pub const PFNGLFOGCOORDFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLFOGCOORDPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLFOGCOORDDPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDEXTPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDDVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLFOGCOORDFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFEXTPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDFVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGCOORDHNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLFOGCOORDHVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLFOGFUNCSGISPROC = ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFOGFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFOGIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFOGIVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFOGXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLFOGXVPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFOGXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLFRAGMENTCOLORMATERIALSGIXPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLFRAGMENTCOVERAGECOLORNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFSGIXPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELFVSGIXPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTMODELIVSGIXPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFSGIXPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTFVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTISGIXPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTLIGHTIVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFSGIXPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALFVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALISGIXPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAGMENTMATERIALIVSGIXPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLFRAMETERMINATORGREMEDYPROC = ?fn () callconv(.C) void;
pub const PFNGLFRAMEZOOMSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLFRAMEBUFFERFETCHBARRIERQCOMPROC = ?fn () callconv(.C) void;
pub const PFNGLFRAMEBUFFERFOVEATIONCONFIGQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERFOVEATIONPARAMETERSQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPARAMETERIMESAPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?fn (GLuint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERREADBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFERPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERRENDERBUFFEROESPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE1DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DDOWNSAMPLEIMGPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DMULTISAMPLEIMGPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE2DOESPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURE3DOESPROC = ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREARBPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREEXTPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEARBPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERARBPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYERDOWNSAMPLEIMGPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTISAMPLEMULTIVIEWOVRPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREMULTIVIEWOVRPROC = ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub const PFNGLFRAMEBUFFERTEXTUREOESPROC = ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLFREEOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLFRONTFACEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLFRUSTUMPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLFRUSTUMFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRUSTUMFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLFRUSTUMXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLFRUSTUMXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLGENASYNCMARKERSSGIXPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENBUFFERSARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFENCESAPPLEPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFENCESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAGMENTSHADERSATIPROC = ?fn (GLuint) callconv(.C) GLuint;
pub const PFNGLGENFRAMEBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENFRAMEBUFFERSOESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENLISTSPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENNAMESAMDPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENOCCLUSIONQUERIESNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPATHSNVPROC = ?fn (GLsizei) callconv(.C) GLuint;
pub const PFNGLGENPERFMONITORSAMDPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMPIPELINESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENPROGRAMSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESARBPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERIESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENQUERYRESOURCETAGNVPROC = ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENRENDERBUFFERSOESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSAMPLERSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSEMAPHORESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENSYMBOLSEXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGENTEXTURESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTEXTURESEXTPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENTRANSFORMFEEDBACKSNVPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSAPPLEPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXARRAYSOESPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGENVERTEXSHADERSEXTPROC = ?fn (GLuint) callconv(.C) GLuint;
pub const PFNGLGENERATEMIPMAPPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMIPMAPOESPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLGENERATEMULTITEXMIPMAPEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGENERATETEXTUREMIPMAPEXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEATTRIBARBPROC = ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINENAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC = ?fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMARBPROC = ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMBLOCKIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMNAMEPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETACTIVEUNIFORMSIVPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETACTIVEVARYINGNVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTFVATIPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETARRAYOBJECTIVATIPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETATTACHEDOBJECTSARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub const PFNGLGETATTACHEDSHADERSPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETATTRIBLOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETATTRIBLOCATIONARBPROC = ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETBOOLEANINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANI_VPROC = ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBOOLEANVPROC = ?fn (GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERI64VPROC = ?fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETBUFFERPARAMETERUI64VNVPROC = ?fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVPROC = ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVARBPROC = ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETBUFFERPOINTERVOESPROC = ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAPROC = ?fn (GLenum, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub const PFNGLGETBUFFERSUBDATAARBPROC = ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*c_void) callconv(.C) void;
pub const PFNGLGETCLIPPLANEPROC = ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEFOESPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCLIPPLANEXOESPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOLORTABLEEXTPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERFVSGIPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLEPARAMETERIVSGIPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOLORTABLESGIPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCOMMANDHEADERNVPROC = ?fn (GLenum, GLuint) callconv(.C) GLuint;
pub const PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC = ?fn (GLenum, GLenum, GLint, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEPROC = ?fn (GLenum, GLint, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXIMAGEARBPROC = ?fn (GLenum, GLint, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEPROC = ?fn (GLuint, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC = ?fn (GLuint, GLenum, GLint, ?*c_void) callconv(.C) void;
pub const PFNGLGETCOMPRESSEDTEXTURESUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTERPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONFILTEREXTPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETCONVOLUTIONPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETCOVERAGEMODULATIONTABLENVPROC = ?fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDEBUGMESSAGELOGPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGAMDPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGARBPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDEBUGMESSAGELOGKHRPROC = ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub const PFNGLGETDETAILTEXFUNCSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETDOUBLEINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDOUBLEVPROC = ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETDRIVERCONTROLSTRINGQCOMPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETDRIVERCONTROLSQCOMPROC = ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETERRORPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETFENCEIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFIRSTPERFQUERYIDINTELPROC = ?fn ([*c]GLuint) callconv(.C) void;
pub const PFNGLGETFIXEDVPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFIXEDVOESPROC = ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETFLOATINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VNVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATI_VOESPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFLOATVPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFOGFUNCSGISPROC = ?fn ([*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGDATAINDEXPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATAINDEXEXTPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATALOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGDATALOCATIONEXTPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETFRAGMENTLIGHTFVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTLIGHTIVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALFVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAGMENTMATERIALIVSGIXPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVOESPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERFVAMDPROC = ?fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPARAMETERIVMESAPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETFRAMEBUFFERPIXELLOCALSTORAGESIZEEXTPROC = ?fn (GLuint) callconv(.C) GLsizei;
pub const PFNGLGETGRAPHICSRESETSTATUSPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETGRAPHICSRESETSTATUSARBPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETGRAPHICSRESETSTATUSEXTPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETGRAPHICSRESETSTATUSKHRPROC = ?fn () callconv(.C) GLenum;
pub const PFNGLGETHANDLEARBPROC = ?fn (GLenum) callconv(.C) GLhandleARB;
pub const PFNGLGETHISTOGRAMPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETHISTOGRAMEXTPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETHISTOGRAMPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETIMAGEHANDLEARBPROC = ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETIMAGEHANDLENVPROC = ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub const PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINFOLOGARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETINSTRUMENTSSGIXPROC = ?fn () callconv(.C) GLint;
pub const PFNGLGETINTEGER64I_VPROC = ?fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGER64VPROC = ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGER64VAPPLEPROC = ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTEGERINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERI_VPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTEGERUI64I_VNVPROC = ?fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERUI64VNVPROC = ?fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETINTEGERVPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATSAMPLEIVNVPROC = ?fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATI64VPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETINTERNALFORMATIVPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETINVARIANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETINVARIANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETINVARIANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLIGHTFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLIGHTIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLIGHTXOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLIGHTXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLIGHTXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERFVSGIXPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLISTPARAMETERIVSGIXPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETLOCALCONSTANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERFVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPATTRIBPARAMETERIVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPCONTROLPOINTSNVPROC = ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*c_void) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPDVPROC = ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMAPFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMAPIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMAPXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMATERIALIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMATERIALXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMATERIALXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTDETACHEDRESOURCESUIVNVPROC = ?fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMEMORYOBJECTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETMINMAXEXTPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMINMAXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXENVFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXENVIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXGENDVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETMULTITEXGENFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXGENIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXIMAGEEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTITEXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETMULTISAMPLEFVNVPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERI64VPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub const PFNGLGETNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERFVAMDPROC = ?fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMSTRINGEXTPROC = ?fn (GLuint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETNAMEDPROGRAMIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETNAMEDSTRINGIVARBPROC = ?fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNEXTPERFQUERYIDINTELPROC = ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTBUFFERIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTLABELPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTLABELKHRPROC = ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERFVARBPROC = ?fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVAPPLEPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTPARAMETERIVARBPROC = ?fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELPROC = ?fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOBJECTPTRLABELKHRPROC = ?fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETOCCLUSIONQUERYUIVNVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHCOLORGENIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHCOMMANDSNVPROC = ?fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPATHCOORDSNVPROC = ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHDASHARRAYNVPROC = ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHLENGTHNVPROC = ?fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub const PFNGLGETPATHMETRICRANGENVPROC = ?fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHMETRICSNVPROC = ?fn (GLbitfield, GLsizei, GLenum, ?*const c_void, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERFVNVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHPARAMETERIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPATHSPACINGNVPROC = ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENFVNVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPATHTEXGENIVNVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPERFCOUNTERINFOINTELPROC = ?fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERDATAAMDPROC = ?fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERINFOAMDPROC = ?fn (GLuint, GLuint, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORCOUNTERSAMDPROC = ?fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSTRINGAMDPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPERFMONITORGROUPSAMDPROC = ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYDATAINTELPROC = ?fn (GLuint, GLuint, GLsizei, ?*c_void, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYIDBYNAMEINTELPROC = ?fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPERFQUERYINFOINTELPROC = ?fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPIXELMAPFVPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELMAPUIVPROC = ?fn (GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPIXELMAPUSVPROC = ?fn (GLenum, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETPIXELMAPXVPROC = ?fn (GLenum, GLint, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPOINTERINDEXEDVEXTPROC = ?fn (GLenum, GLuint, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETPOINTERI_VEXTPROC = ?fn (GLenum, GLuint, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETPOINTERVPROC = ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETPOINTERVEXTPROC = ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETPOINTERVKHRPROC = ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETPOLYGONSTIPPLEPROC = ?fn ([*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETPROGRAMBINARYOESPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIIVNVPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERDVARBPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMENVPARAMETERFVARBPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMINTERFACEIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC = ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC = ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC = ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERDVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETPROGRAMPARAMETERFVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEINFOLOGEXTPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMPIPELINEIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCELOCATIONINDEXEXTPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETPROGRAMRESOURCENAMEPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEFVNVPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETPROGRAMRESOURCEIVPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTAGEIVPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGARBPROC = ?fn (GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETPROGRAMSTRINGNVPROC = ?fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC = ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETPROGRAMIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTI64VPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTIVPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUI64VPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYBUFFEROBJECTUIVPROC = ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub const PFNGLGETQUERYINDEXEDIVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVARBPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVARBPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYOBJECTUIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETQUERYIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYIVARBPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETQUERYIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETRENDERBUFFERPARAMETERIVOESPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIIVOESPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIUIVOESPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSAMPLERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSEMAPHOREPARAMETERUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTERPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void, ?*c_void, ?*c_void) callconv(.C) void;
pub const PFNGLGETSEPARABLEFILTEREXTPROC = ?fn (GLenum, GLenum, GLenum, ?*c_void, ?*c_void, ?*c_void) callconv(.C) void;
pub const PFNGLGETSHADERINFOLOGPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERPRECISIONFORMATPROC = ?fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETSHADERSOURCEARBPROC = ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub const PFNGLGETSHADERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHADINGRATEIMAGEPALETTENVPROC = ?fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub const PFNGLGETSHADINGRATESAMPLELOCATIONIVNVPROC = ?fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSHARPENTEXFUNCSGISPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETSTAGEINDEXNVPROC = ?fn (GLenum) callconv(.C) GLushort;
pub const PFNGLGETSTRINGPROC = ?fn (GLenum) callconv(.C) [*c]const GLubyte;
pub const PFNGLGETSTRINGIPROC = ?fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub const PFNGLGETSUBROUTINEINDEXPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC = ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETSYNCIVPROC = ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETSYNCIVAPPLEPROC = ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERFVATIPROC = ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXBUMPPARAMETERIVATIPROC = ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXENVFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXENVIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXENVXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXENVXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXFILTERFUNCSGISPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENDVPROC = ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETTEXGENFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENFVOESPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXGENIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXGENIVOESPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXGENXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXIMAGEPROC = ?fn (GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERFVPROC = ?fn (GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERIVPROC = ?fn (GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXLEVELPARAMETERXVOESPROC = ?fn (GLenum, GLint, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIIVOESPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIUIVOESPROC = ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC = ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub const PFNGLGETTEXTUREHANDLEARBPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREHANDLEIMGPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREHANDLENVPROC = ?fn (GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTUREIMAGEPROC = ?fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETTEXTUREIMAGEEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVPROC = ?fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVPROC = ?fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTUREPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTEXTURESAMPLERHANDLEARBPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLEIMGPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESAMPLERHANDLENVPROC = ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub const PFNGLGETTEXTURESUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETTRACKMATRIXIVNVPROC = ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC = ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC = ?fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI64_VPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKI_VPROC = ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSFORMFEEDBACKIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETTRANSLATEDSHADERSOURCEANGLEPROC = ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub const PFNGLGETUNIFORMBLOCKINDEXPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub const PFNGLGETUNIFORMBUFFERSIZEEXTPROC = ?fn (GLuint, GLint) callconv(.C) GLint;
pub const PFNGLGETUNIFORMINDICESPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMLOCATIONPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETUNIFORMLOCATIONARBPROC = ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub const PFNGLGETUNIFORMOFFSETEXTPROC = ?fn (GLuint, GLint) callconv(.C) GLintptr;
pub const PFNGLGETUNIFORMSUBROUTINEUIVPROC = ?fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMDVPROC = ?fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETUNIFORMFVPROC = ?fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMFVARBPROC = ?fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VARBPROC = ?fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETUNIFORMI64VNVPROC = ?fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMIVPROC = ?fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMIVARBPROC = ?fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VARBPROC = ?fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETUNIFORMUI64VNVPROC = ?fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVPROC = ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNIFORMUIVEXTPROC = ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEI_VEXTPROC = ?fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETUNSIGNEDBYTEVEXTPROC = ?fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTARRAYOBJECTIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTBOOLEANVEXTPROC = ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub const PFNGLGETVARIANTFLOATVEXTPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVARIANTINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVARIANTPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETVARYINGLOCATIONNVPROC = ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub const PFNGLGETVERTEXARRAYINDEXED64IVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINDEXEDIVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERI_VEXTPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYINTEGERVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERI_VEXTPROC = ?fn (GLuint, GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYPOINTERVEXTPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETVERTEXARRAYIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIUIVEXTPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLDVEXTPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VARBPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBLUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVARBPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBPOINTERVNVPROC = ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVARBPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBDVNVPROC = ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVARBPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBFVNVPROC = ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVARBPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVERTEXATTRIBIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMDVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMFVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTURESTREAMIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOCAPTUREIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOIVNVPROC = ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLGETVIDEOUI64VNVPROC = ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub const PFNGLGETVIDEOUIVNVPROC = ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETVKPROCADDRNVPROC = ?fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub const PFNGLGETNCOLORTABLEPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCOLORTABLEARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEPROC = ?fn (GLenum, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC = ?fn (GLenum, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNCONVOLUTIONFILTERARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNHISTOGRAMARBPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNMAPDVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPDVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNMAPFVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPFVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNMAPIVPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNMAPIVARBPROC = ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNMINMAXPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNMINMAXARBPROC = ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVPROC = ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPFVARBPROC = ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUIVARBPROC = ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVPROC = ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPIXELMAPUSVARBPROC = ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEPROC = ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNPOLYGONSTIPPLEARBPROC = ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) callconv(.C) void;
pub const PFNGLGETNSEPARABLEFILTERARBPROC = ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEPROC = ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNTEXIMAGEARBPROC = ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMDVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMFVKHRPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub const PFNGLGETNUNIFORMI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMIVKHRPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGETNUNIFORMUIVKHRPROC = ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORBSUNPROC = ?fn (GLbyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORDSUNPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORFSUNPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORISUNPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORSSUNPROC = ?fn (GLshort) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUBSUNPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUISUNPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLGLOBALALPHAFACTORUSSUNPROC = ?fn (GLushort) callconv(.C) void;
pub const PFNGLHINTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLHINTPGIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLHISTOGRAMPROC = ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLHISTOGRAMEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLIGLOOINTERFACESGIXPROC = ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFHPPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERFVHPPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIHPPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMAGETRANSFORMPARAMETERIVHPPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYFDEXTPROC = ?fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32HANDLEEXTPROC = ?fn (GLuint, GLuint64, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLIMPORTMEMORYWIN32NAMEEXTPROC = ?fn (GLuint, GLuint64, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREFDEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32HANDLEEXTPROC = ?fn (GLuint, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLIMPORTSEMAPHOREWIN32NAMEEXTPROC = ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLIMPORTSYNCEXTPROC = ?fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub const PFNGLINDEXFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLINDEXFUNCEXTPROC = ?fn (GLenum, GLclampf) callconv(.C) void;
pub const PFNGLINDEXMASKPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLINDEXMATERIALEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLINDEXPOINTERPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLINDEXPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLINDEXPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLINDEXDPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLINDEXDVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLINDEXFPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLINDEXFVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLINDEXIPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLINDEXIVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLINDEXSPROC = ?fn (GLshort) callconv(.C) void;
pub const PFNGLINDEXSVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLINDEXUBPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLINDEXUBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLINDEXXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLINDEXXVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLINITNAMESPROC = ?fn () callconv(.C) void;
pub const PFNGLINSERTCOMPONENTEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLINSERTEVENTMARKEREXTPROC = ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLINSTRUMENTSBUFFERSGIXPROC = ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLINTERLEAVEDARRAYSPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLINTERPOLATEPATHSNVPROC = ?fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERDATAPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLINVALIDATEBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLINVALIDATEFRAMEBUFFERPROC = ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERDATAPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLINVALIDATENAMEDFRAMEBUFFERSUBDATAPROC = ?fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATESUBFRAMEBUFFERPROC = ?fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLINVALIDATETEXIMAGEPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLINVALIDATETEXSUBIMAGEPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLISASYNCMARKERSGIXPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISBUFFERRESIDENTNVPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLISCOMMANDLISTNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLISENABLEDINDEXEDEXTPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDIPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDIEXTPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDINVPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISENABLEDIOESPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFENCENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISFRAMEBUFFEROESPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISIMAGEHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISLISTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISMEMORYOBJECTEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEAMDPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEDBUFFERRESIDENTNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISNAMEDSTRINGARBPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub const PFNGLISOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISOCCLUSIONQUERYNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPATHNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPOINTINFILLPATHNVPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPOINTINSTROKEPATHNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISPROGRAMPIPELINEEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYARBPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISQUERYEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISRENDERBUFFEROESPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSAMPLERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSEMAPHOREEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSHADERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSTATENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISSYNCPROC = ?fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLISSYNCAPPLEPROC = ?fn (GLsync) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREEXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTEXTUREHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) GLboolean;
pub const PFNGLISTRANSFORMFEEDBACKPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISTRANSFORMFEEDBACKNVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVARIANTENABLEDEXTPROC = ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXARRAYOESPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLISVERTEXATTRIBENABLEDAPPLEPROC = ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub const PFNGLLGPUCOPYIMAGESUBDATANVXPROC = ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLLGPUINTERLOCKNVXPROC = ?fn () callconv(.C) void;
pub const PFNGLLGPUNAMEDBUFFERSUBDATANVXPROC = ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLLABELOBJECTEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLLIGHTENVISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLLIGHTMODELFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLIGHTMODELFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLIGHTMODELIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLLIGHTMODELIVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLIGHTMODELXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTMODELXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLIGHTFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLIGHTIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLLIGHTIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLIGHTXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLIGHTXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLLINESTIPPLEPROC = ?fn (GLint, GLushort) callconv(.C) void;
pub const PFNGLLINEWIDTHPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLLINEWIDTHXPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLLINEWIDTHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLLINKPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLLINKPROGRAMARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLLISTBASEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLLISTDRAWCOMMANDSSTATESCLIENTNVPROC = ?fn (GLuint, GLuint, [*c]?*const c_void, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub const PFNGLLISTPARAMETERFSGIXPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERFVSGIXPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLLISTPARAMETERISGIXPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLLISTPARAMETERIVSGIXPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLLOADIDENTITYPROC = ?fn () callconv(.C) void;
pub const PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLLOADMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADMATRIXXPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOADMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOADNAMEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLLOADPALETTEFROMMODELVIEWMATRIXOESPROC = ?fn () callconv(.C) void;
pub const PFNGLLOADPROGRAMNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXDARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXFARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLLOADTRANSPOSEMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLLOCKARRAYSEXTPROC = ?fn (GLint, GLsizei) callconv(.C) void;
pub const PFNGLLOGICOPPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERNONRESIDENTNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMAKEBUFFERRESIDENTNVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTARBPROC = ?fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKEIMAGEHANDLERESIDENTNVPROC = ?fn (GLuint64, GLenum) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLMAKENAMEDBUFFERRESIDENTNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTARBPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAKETEXTUREHANDLERESIDENTNVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLMAP1DPROC = ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAP1FPROC = ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAP1XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAP2DPROC = ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAP2FPROC = ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAP2XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub const PFNGLMAPBUFFERPROC = ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub const PFNGLMAPBUFFERARBPROC = ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub const PFNGLMAPBUFFEROESPROC = ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub const PFNGLMAPBUFFERRANGEPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub const PFNGLMAPBUFFERRANGEEXTPROC = ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub const PFNGLMAPCONTROLPOINTSNVPROC = ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const c_void) callconv(.C) void;
pub const PFNGLMAPGRID1DPROC = ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMAPGRID1FPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMAPGRID1XOESPROC = ?fn (GLint, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPGRID2DPROC = ?fn (GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMAPGRID2FPROC = ?fn (GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMAPGRID2XOESPROC = ?fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMAPNAMEDBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) ?*c_void;
pub const PFNGLMAPNAMEDBUFFEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) ?*c_void;
pub const PFNGLMAPNAMEDBUFFERRANGEPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub const PFNGLMAPNAMEDBUFFERRANGEEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub const PFNGLMAPOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) ?*c_void;
pub const PFNGLMAPPARAMETERFVNVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPPARAMETERIVNVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMAPTEXTURE2DINTELPROC = ?fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*c_void;
pub const PFNGLMAPVERTEXATTRIB1DAPPLEPROC = ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB1FAPPLEPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2DAPPLEPROC = ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMAPVERTEXATTRIB2FAPPLEPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATERIALFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMATERIALFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATERIALIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMATERIALIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMATERIALXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATERIALXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMATRIXFRUSTUMEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTERARBPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLMATRIXINDEXPOINTEROESPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLMATRIXINDEXUBVARBPROC = ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLMATRIXINDEXUIVARBPROC = ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMATRIXINDEXUSVARBPROC = ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X2FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOAD3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADIDENTITYEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSE3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADTRANSPOSEFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXLOADDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXLOADFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMODEPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXMULT3X2FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULT3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSE3X3FNVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTTRANSPOSEFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXMULTDEXTPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMATRIXMULTFEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMATRIXORTHOEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXPOPEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXPUSHEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLMATRIXROTATEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXROTATEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXSCALEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXSCALEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEDEXTPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMATRIXTRANSLATEFEXTPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSARBPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLMAXSHADERCOMPILERTHREADSKHRPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLMEMORYBARRIERPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYBARRIERBYREGIONPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYBARRIEREXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLMEMORYOBJECTPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGARBPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLMINSAMPLESHADINGOESPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLMINMAXPROC = ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMINMAXEXTPROC = ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub const PFNGLMULTMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTMATRIXXPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXDARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXFARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTTRANSPOSEMATRIXXOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSEXTPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSCOUNTNVPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTBINDLESSNVPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTPROC = ?fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTCOUNTARBPROC = ?fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWARRAYSINDIRECTEXTPROC = ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC = ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSBASEVERTEXEXTPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSEXTPROC = ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSCOUNTNVPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTBINDLESSNVPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTPROC = ?fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTCOUNTARBPROC = ?fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWELEMENTSINDIRECTEXTPROC = ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTCOUNTNVPROC = ?fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWMESHTASKSINDIRECTNVPROC = ?fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC = ?fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWARRAYSIBMPROC = ?fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTIMODEDRAWELEMENTSIBMPROC = ?fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub const PFNGLMULTITEXBUFFEREXTPROC = ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BOESPROC = ?fn (GLenum, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DARBPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FARBPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HNVPROC = ?fn (GLenum, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IARBPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SARBPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD1XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BOESPROC = ?fn (GLenum, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DARBPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FARBPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IARBPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SARBPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XOESPROC = ?fn (GLenum, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD2XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BOESPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DARBPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FARBPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IARBPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SARBPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD3XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BOESPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4BVOESPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DARBPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4DVARBPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FARBPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4FVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HNVPROC = ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4HVNVPROC = ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4IVARBPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SARBPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4SVARBPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XOESPROC = ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORD4XVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP1UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP2UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP3UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDP4UIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXCOORDPOINTEREXTPROC = ?fn (GLenum, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXENVFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXENVIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXENVIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENDEXTPROC = ?fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENDVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLMULTITEXGENFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXGENIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXGENIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLMULTITEXPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTITEXRENDERBUFFEREXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTITEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTICASTBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLMULTICASTBLITFRAMEBUFFERNVPROC = ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub const PFNGLMULTICASTBUFFERSUBDATANVPROC = ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLMULTICASTCOPYBUFFERSUBDATANVPROC = ?fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLMULTICASTCOPYIMAGESUBDATANVPROC = ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLMULTICASTFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTI64VNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUI64VNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub const PFNGLMULTICASTGETQUERYOBJECTUIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub const PFNGLMULTICASTSCISSORARRAYVNVXPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTARRAYVNVXPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTVIEWPORTPOSITIONWSCALENVXPROC = ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLMULTICASTWAITSYNCNVPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERATTACHMEMORYNVPROC = ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERDATAEXTPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTARBPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERPAGECOMMITMENTEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTPROC = ?fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEEXTERNALEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSTORAGEMEMEXTPROC = ?fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLNAMEDBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub const PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC = ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERDRAWBUFFERSPROC = ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERREADBUFFERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFERPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVARBPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLELOCATIONSFVNVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERSAMPLEPOSITIONSFVAMDPROC = ?fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREPROC = ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYERPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC = ?fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC = ?fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC = ?fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC = ?fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC = ?fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC = ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNAMEDPROGRAMSTRINGEXTPROC = ?fn (GLuint, GLenum, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLNAMEDSTRINGARBPROC = ?fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLNEWLISTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLNEWOBJECTBUFFERATIPROC = ?fn (GLsizei, ?*const c_void, GLenum) callconv(.C) GLuint;
pub const PFNGLNORMAL3BPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMAL3BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMAL3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMAL3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMAL3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMAL3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLNORMAL3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMAL3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLNORMAL3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMAL3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLNORMAL3XPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLNORMAL3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLNORMALFORMATNVPROC = ?fn (GLenum, GLsizei) callconv(.C) void;
pub const PFNGLNORMALP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLNORMALP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLNORMALPOINTERPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLNORMALPOINTEREXTPROC = ?fn (GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLNORMALPOINTERLISTIBMPROC = ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLNORMALPOINTERVINTELPROC = ?fn (GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BATIPROC = ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3BVATIPROC = ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IATIPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLNORMALSTREAM3SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLOBJECTLABELPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTLABELKHRPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELPROC = ?fn (?*const c_void, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPTRLABELKHRPROC = ?fn (?*const c_void, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLOBJECTPURGEABLEAPPLEPROC = ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLOBJECTUNPURGEABLEAPPLEPROC = ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub const PFNGLORTHOPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLORTHOFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLORTHOFOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLORTHOXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLORTHOXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPNTRIANGLESFATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPNTRIANGLESIATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPASSTEXCOORDATIPROC = ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLPASSTHROUGHPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLPASSTHROUGHXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPATCHPARAMETERFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIEXTPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATCHPARAMETERIOESPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHCOLORGENNVPROC = ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHCOMMANDSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHCOORDSNVPROC = ?fn (GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHCOVERDEPTHFUNCNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPATHDASHARRAYNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHFOGGENNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPATHGLYPHINDEXARRAYNVPROC = ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHINDEXRANGENVPROC = ?fn (GLenum, ?*const c_void, GLbitfield, GLuint, GLfloat, GLuint) callconv(.C) GLenum;
pub const PFNGLPATHGLYPHRANGENVPROC = ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHGLYPHSNVPROC = ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLsizei, GLenum, ?*const c_void, GLenum, GLuint, GLfloat) callconv(.C) void;
pub const PFNGLPATHMEMORYGLYPHINDEXARRAYNVPROC = ?fn (GLuint, GLenum, GLsizeiptr, ?*const c_void, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub const PFNGLPATHPARAMETERFNVPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERFVNVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPATHPARAMETERINVPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPATHPARAMETERIVNVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPATHSTENCILDEPTHOFFSETNVPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPATHSTENCILFUNCNVPROC = ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLPATHSTRINGNVPROC = ?fn (GLuint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHSUBCOMMANDSNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHSUBCOORDSNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLPATHTEXGENNVPROC = ?fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPAUSETRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLPAUSETRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLPIXELDATARANGENVPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLPIXELMAPFVPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELMAPUIVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPIXELMAPUSVPROC = ?fn (GLenum, GLsizei, [*c]const GLushort) callconv(.C) void;
pub const PFNGLPIXELMAPXPROC = ?fn (GLenum, GLint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPIXELSTOREFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELSTOREIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELSTOREXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFSGISPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERFVSGISPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERISGISPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENPARAMETERIVSGISPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELTEXGENSGIXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPIXELTRANSFERFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFERXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFEXTPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIEXTPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPIXELZOOMPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPIXELZOOMXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOINTALONGPATHNVPROC = ?fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub const PFNGLPOINTPARAMETERFPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFARBPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFEXTPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFSGISPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVARBPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVEXTPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERFVSGISPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERINVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERIVNVPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXOESPROC = ?fn (GLenum, GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTPARAMETERXVOESPROC = ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLPOINTSIZEPOINTEROESPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLPOINTSIZEXPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPOINTSIZEXOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLPOLLASYNCSGIXPROC = ?fn ([*c]GLuint) callconv(.C) GLint;
pub const PFNGLPOLLINSTRUMENTSSGIXPROC = ?fn ([*c]GLint) callconv(.C) GLint;
pub const PFNGLPOLYGONMODEPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLPOLYGONMODENVPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETCLAMPEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETEXTPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOLYGONOFFSETXOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLPOLYGONSTIPPLEPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLPOPATTRIBPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPCLIENTATTRIBPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPDEBUGGROUPKHRPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPGROUPMARKEREXTPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPMATRIXPROC = ?fn () callconv(.C) void;
pub const PFNGLPOPNAMEPROC = ?fn () callconv(.C) void;
pub const PFNGLPRESENTFRAMEDUALFILLNVPROC = ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLPRESENTFRAMEKEYEDNVPROC = ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXARBPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXEXTPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVEBOUNDINGBOXOESPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTINDEXNVPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLPRIMITIVERESTARTNVPROC = ?fn () callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESEXTPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub const PFNGLPRIORITIZETEXTURESXOESPROC = ?fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLPROGRAMBINARYPROC = ?fn (GLuint, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLPROGRAMBINARYOESPROC = ?fn (GLuint, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC = ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DARBPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4DVARBPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FARBPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETER4FVARBPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4INVPROC = ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4IVNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UINVPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERI4UIVNVPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERS4FVEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4IVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DARBPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4DVARBPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FARBPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETER4FVARBPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4INVPROC = ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UINVPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC = ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DNVPROC = ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4DVNVPROC = ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FNVPROC = ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETER4FVNVPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIARBPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4DVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMPARAMETERS4FVNVPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMPATHFRAGMENTINPUTGENNVPROC = ?fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMSTRINGARBPROC = ?fn (GLenum, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DPROC = ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DEXTPROC = ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FPROC = ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FEXTPROC = ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64ARBPROC = ?fn (GLuint, GLint, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64NVPROC = ?fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IEXTPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64ARBPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIEXTPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM1UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IEXTPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIPROC = ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM2UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM3UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DEXTPROC = ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FEXTPROC = ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64ARBPROC = ?fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64NVPROC = ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4I64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4IVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64ARBPROC = ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIEXTPROC = ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORM4UIVEXTPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64ARBPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64IMGPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC = ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VARBPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VIMGPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC = ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64NVPROC = ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMUNIFORMUI64VNVPROC = ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLPROGRAMVERTEXLIMITNVPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPROVOKINGVERTEXEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLPUSHATTRIBPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLPUSHDEBUGGROUPPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHDEBUGGROUPKHRPROC = ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHGROUPMARKEREXTPROC = ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub const PFNGLPUSHMATRIXPROC = ?fn () callconv(.C) void;
pub const PFNGLPUSHNAMEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLQUERYCOUNTERPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLQUERYCOUNTEREXTPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLQUERYMATRIXXOESPROC = ?fn ([*c]GLfixed, [*c]GLint) callconv(.C) GLbitfield;
pub const PFNGLQUERYOBJECTPARAMETERUIAMDPROC = ?fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLQUERYRESOURCENVPROC = ?fn (GLenum, GLint, GLuint, [*c]GLint) callconv(.C) GLint;
pub const PFNGLQUERYRESOURCETAGNVPROC = ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub const PFNGLRASTERPOS2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLRASTERPOS2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLRASTERPOS2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLRASTERPOS3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLRASTERPOS3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRASTERPOS4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLRASTERPOS4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLRASTERPOS4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLRASTERPOS4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLRASTERPOS4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRASTERPOS4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLRASTERSAMPLESEXTPROC = ?fn (GLuint, GLboolean) callconv(.C) void;
pub const PFNGLREADBUFFERPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLREADBUFFERINDEXEDEXTPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLREADBUFFERNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLREADINSTRUMENTSSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLREADPIXELSPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub const PFNGLREADNPIXELSPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLREADNPIXELSARBPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLREADNPIXELSEXTPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLREADNPIXELSKHRPROC = ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLRECTDPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLRECTDVPROC = ?fn ([*c]const GLdouble, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLRECTFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLRECTFVPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLRECTIPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLRECTIVPROC = ?fn ([*c]const GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLRECTSPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLRECTSVPROC = ?fn ([*c]const GLshort, [*c]const GLshort) callconv(.C) void;
pub const PFNGLRECTXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLRECTXVOESPROC = ?fn ([*c]const GLfixed, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLREFERENCEPLANESGIXPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLRELEASEKEYEDMUTEXWIN32EXTPROC = ?fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub const PFNGLRELEASESHADERCOMPILERPROC = ?fn () callconv(.C) void;
pub const PFNGLRENDERGPUMASKNVPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLRENDERMODEPROC = ?fn (GLenum) callconv(.C) GLint;
pub const PFNGLRENDERBUFFERSTORAGEPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEANGLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEAPPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEADVANCEDAMDPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLEIMGPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEMULTISAMPLENVPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLRENDERBUFFERSTORAGEOESPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEPOINTERSUNPROC = ?fn (GLenum, GLsizei, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBSUNPROC = ?fn (GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUBVSUNPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUISUNPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC = ?fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUIVSUNPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSSUNPROC = ?fn (GLushort) callconv(.C) void;
pub const PFNGLREPLACEMENTCODEUSVSUNPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLREQUESTRESIDENTPROGRAMSNVPROC = ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESETHISTOGRAMEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMEMORYOBJECTPARAMETERNVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESETMINMAXEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLRESIZEBUFFERSMESAPROC = ?fn () callconv(.C) void;
pub const PFNGLRESOLVEDEPTHVALUESNVPROC = ?fn () callconv(.C) void;
pub const PFNGLRESOLVEMULTISAMPLEFRAMEBUFFERAPPLEPROC = ?fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKPROC = ?fn () callconv(.C) void;
pub const PFNGLRESUMETRANSFORMFEEDBACKNVPROC = ?fn () callconv(.C) void;
pub const PFNGLROTATEDPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLROTATEFPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLROTATEXPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLROTATEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEPROC = ?fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEARBPROC = ?fn (GLfloat, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEXPROC = ?fn (GLclampx, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLECOVERAGEXOESPROC = ?fn (GLclampx, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMAPATIPROC = ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSAMPLEMASKEXTPROC = ?fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMASKINDEXEDNVPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSAMPLEMASKSGISPROC = ?fn (GLclampf, GLboolean) callconv(.C) void;
pub const PFNGLSAMPLEMASKIPROC = ?fn (GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLEPATTERNSGISPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIIVOESPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIUIVOESPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLSAMPLERPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCALEDPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSCALEFPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSCALEXPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSCALEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLSCISSORPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORARRAYVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORARRAYVOESPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVEARRAYVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSOREXCLUSIVENVPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDNVPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDOESPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVNVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSCISSORINDEXEDVOESPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBEXTPROC = ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UBVEXTPROC = ?fn ([*c]const GLubyte) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3UIVEXTPROC = ?fn ([*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USEXTPROC = ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLOR3USVEXTPROC = ?fn ([*c]const GLushort) callconv(.C) void;
pub const PFNGLSECONDARYCOLORFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLSECONDARYCOLORPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLSELECTBUFFERPROC = ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub const PFNGLSELECTPERFMONITORCOUNTERSAMDPROC = ?fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub const PFNGLSEMAPHOREPARAMETERUI64VEXTPROC = ?fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void, ?*const c_void) callconv(.C) void;
pub const PFNGLSEPARABLEFILTER2DEXTPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void, ?*const c_void) callconv(.C) void;
pub const PFNGLSETFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLSETFENCENVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLSETFRAGMENTSHADERCONSTANTATIPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSETINVARIANTEXTPROC = ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLSETLOCALCONSTANTEXTPROC = ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLSETMULTISAMPLEFVAMDPROC = ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSHADEMODELPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSHADERBINARYPROC = ?fn (GLsizei, [*c]const GLuint, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub const PFNGLSHADEROP1EXTPROC = ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP2EXTPROC = ?fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADEROP3EXTPROC = ?fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADERSOURCEPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADERSOURCEARBPROC = ?fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADERSTORAGEBLOCKBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEBARRIERNVPROC = ?fn (GLboolean) callconv(.C) void;
pub const PFNGLSHADINGRATEIMAGEPALETTENVPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERCUSTOMNVPROC = ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLSHADINGRATESAMPLEORDERNVPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLSHARPENTEXFUNCSGISPROC = ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREEXTPROC = ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLSIGNALSEMAPHOREUI64NVXPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKFENCENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLSIGNALVKSEMAPHORENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERPROC = ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSPECIALIZESHADERARBPROC = ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFSGIXPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERFVSGIXPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERISGIXPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLSPRITEPARAMETERIVSGIXPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLSTARTINSTRUMENTSSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLSTARTTILINGQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) callconv(.C) void;
pub const PFNGLSTATECAPTURENVPROC = ?fn (GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILCLEARTAGEXTPROC = ?fn (GLsizei, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILFILLPATHNVPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCPROC = ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEPROC = ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILFUNCSEPARATEATIPROC = ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLSTENCILMASKSEPARATEPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILOPPROC = ?fn (GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPSEPARATEATIPROC = ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSTENCILOPVALUEAMDPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILSTROKEPATHNVPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERFILLPATHNVPROC = ?fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHINSTANCEDNVPROC = ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLSTENCILTHENCOVERSTROKEPATHNVPROC = ?fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub const PFNGLSTOPINSTRUMENTSSGIXPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLSTRINGMARKERGREMEDYPROC = ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLSUBPIXELPRECISIONBIASNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLSWIZZLEEXTPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLSYNCTEXTUREINTELPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLTAGSAMPLEBUFFERSGIXPROC = ?fn () callconv(.C) void;
pub const PFNGLTANGENT3BEXTPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3BVEXTPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTANGENT3DEXTPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3DVEXTPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTANGENT3FEXTPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3FVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTANGENT3IEXTPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTANGENT3IVEXTPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTANGENT3SEXTPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTANGENT3SVEXTPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTANGENTPOINTEREXTPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLTBUFFERMASK3DFXPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLTESSELLATIONFACTORAMDPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLTESSELLATIONMODEAMDPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTESTFENCEAPPLEPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTFENCENVPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLTESTOBJECTAPPLEPROC = ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub const PFNGLTEXATTACHMEMORYNVPROC = ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXBUFFERPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERARBPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFEREXTPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFEROESPROC = ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEPROC = ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEEXTPROC = ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXBUFFERRANGEOESPROC = ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERFVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXBUMPPARAMETERIVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD1BOESPROC = ?fn (GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD1DPROC = ?fn (GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD1DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD1FPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD1FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD1HNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD1IPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLTEXCOORD1IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD1SPROC = ?fn (GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD1SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD1XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD1XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2BOESPROC = ?fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVERTEX3FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD2HNVPROC = ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLTEXCOORD2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD2XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3BOESPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXCOORD3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD3XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4BOESPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLTEXCOORD4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXCOORD4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FSUNPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVERTEX4FVSUNPROC = ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXCOORD4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLTEXCOORD4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLTEXCOORD4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLTEXCOORD4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLTEXCOORD4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORD4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXCOORDFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP1UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP2UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLTEXCOORDPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLTEXENVFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXENVFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXENVIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXENVIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXENVXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXENVXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXFILTERFUNCSGISPROC = ?fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENDPROC = ?fn (GLenum, GLenum, GLdouble) callconv(.C) void;
pub const PFNGLTEXGENDVPROC = ?fn (GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLTEXGENFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXGENFOESPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXGENFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENFVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXGENIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXGENIOESPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXGENIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXGENIVOESPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXGENXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXGENXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC = ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXIMAGE3DOESPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXIMAGE4DSGISPROC = ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTARBPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXPAGECOMMITMENTEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIIVOESPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVEXTPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIUIVOESPROC = ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXPARAMETERFPROC = ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXPARAMETERFVPROC = ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXPARAMETERIPROC = ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERIVPROC = ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXPARAMETERXPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXOESPROC = ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXPARAMETERXVOESPROC = ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub const PFNGLTEXRENDERBUFFERNVPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE1DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE2DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGE3DMULTISAMPLEOESPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM1DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM2DMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGEMEM3DMULTISAMPLEEXTPROC = ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXSTORAGESPARSEAMDPROC = ?fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE1DEXTPROC = ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE2DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DEXTPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE3DOESPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXSUBIMAGE4DSGISPROC = ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTUREATTACHMEMORYNVPROC = ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTUREBARRIERPROC = ?fn () callconv(.C) void;
pub const PFNGLTEXTUREBARRIERNVPROC = ?fn () callconv(.C) void;
pub const PFNGLTEXTUREBUFFERPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFEREXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEPROC = ?fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTUREBUFFERRANGEEXTPROC = ?fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTEXTURECOLORMASKSGISPROC = ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREFOVEATIONPARAMETERSQCOMPROC = ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC = ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC = ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC = ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURELIGHTEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREMATERIALEXTPROC = ?fn (GLenum, GLenum) callconv(.C) void;
pub const PFNGLTEXTURENORMALEXTPROC = ?fn (GLenum) callconv(.C) void;
pub const PFNGLTEXTUREPAGECOMMITMENTEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVPROC = ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIUIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFPROC = ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFEXTPROC = ?fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVPROC = ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERFVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIEXTPROC = ?fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVPROC = ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTUREPARAMETERIVEXTPROC = ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLTEXTURERANGEAPPLEPROC = ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURERENDERBUFFEREXTPROC = ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE1DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC = ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM1DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM2DMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGEMEM3DMULTISAMPLEEXTPROC = ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub const PFNGLTEXTURESTORAGESPARSEAMDPROC = ?fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DPROC = ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE1DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DPROC = ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE2DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DPROC = ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTURESUBIMAGE3DEXTPROC = ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub const PFNGLTEXTUREVIEWPROC = ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREVIEWEXTPROC = ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTEXTUREVIEWOESPROC = ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRACKMATRIXNVPROC = ?fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC = ?fn (GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERBASEPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKBUFFERRANGEPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC = ?fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC = ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub const PFNGLTRANSFORMPATHNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLTRANSLATEDPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLTRANSLATEFPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLTRANSLATEXPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLTRANSLATEXOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLUNIFORM1DPROC = ?fn (GLint, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM1FPROC = ?fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FARBPROC = ?fn (GLint, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM1IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1I64ARBPROC = ?fn (GLint, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64NVPROC = ?fn (GLint, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM1I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1IARBPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM1IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM1UIPROC = ?fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UI64ARBPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64NVPROC = ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM1UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM1UIEXTPROC = ?fn (GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM1UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2DPROC = ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM2FPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FARBPROC = ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM2IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2I64ARBPROC = ?fn (GLint, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM2I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2IARBPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM2UIPROC = ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM2UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM2UIEXTPROC = ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM2UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3DPROC = ?fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM3FPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FARBPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM3IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3I64ARBPROC = ?fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM3I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3IARBPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM3UIPROC = ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM3UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM3UIEXTPROC = ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM3UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4DPROC = ?fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4DVPROC = ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORM4FPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FARBPROC = ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4FVARBPROC = ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORM4IPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4I64ARBPROC = ?fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64NVPROC = ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4I64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub const PFNGLUNIFORM4I64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4IARBPROC = ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4IVARBPROC = ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLUNIFORM4UIPROC = ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UI64ARBPROC = ?fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64NVPROC = ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORM4UI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORM4UIEXTPROC = ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORM4UIVEXTPROC = ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORMBLOCKBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORMBUFFEREXTPROC = ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64ARBPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64IMGPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64NVPROC = ?fn (GLint, GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VARBPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VIMGPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMHANDLEUI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X3FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX2X4FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X2FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX3X4FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4FVARBPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X2FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3DVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMMATRIX4X3FVNVPROC = ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLUNIFORMSUBROUTINESUIVPROC = ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub const PFNGLUNIFORMUI64NVPROC = ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub const PFNGLUNIFORMUI64VNVPROC = ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLUNLOCKARRAYSEXTPROC = ?fn () callconv(.C) void;
pub const PFNGLUNMAPBUFFERPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPBUFFERARBPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPBUFFEROESPROC = ?fn (GLenum) callconv(.C) GLboolean;
pub const PFNGLUNMAPNAMEDBUFFERPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUNMAPNAMEDBUFFEREXTPROC = ?fn (GLuint) callconv(.C) GLboolean;
pub const PFNGLUNMAPOBJECTBUFFERATIPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLUNMAPTEXTURE2DINTELPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLUPDATEOBJECTBUFFERATIPROC = ?fn (GLuint, GLuint, GLsizei, ?*const c_void, GLenum) callconv(.C) void;
pub const PFNGLUPLOADGPUMASKNVXPROC = ?fn (GLbitfield) callconv(.C) void;
pub const PFNGLUSEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLUSEPROGRAMOBJECTARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESPROC = ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLUSEPROGRAMSTAGESEXTPROC = ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub const PFNGLUSESHADERPROGRAMEXTPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVDPAUFININVPROC = ?fn () callconv(.C) void;
pub const PFNGLVDPAUGETSURFACEIVNVPROC = ?fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub const PFNGLVDPAUINITNVPROC = ?fn (?*const c_void, ?*const c_void) callconv(.C) void;
pub const PFNGLVDPAUISSURFACENVPROC = ?fn (GLvdpauSurfaceNV) callconv(.C) GLboolean;
pub const PFNGLVDPAUMAPSURFACESNVPROC = ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC = ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACENVPROC = ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUREGISTERVIDEOSURFACEWITHPICTURESTRUCTURENVPROC = ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub const PFNGLVDPAUSURFACEACCESSNVPROC = ?fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub const PFNGLVDPAUUNMAPSURFACESNVPROC = ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVDPAUUNREGISTERSURFACENVPROC = ?fn (GLvdpauSurfaceNV) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMARBPROC = ?fn (GLhandleARB) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLVALIDATEPROGRAMPIPELINEEXTPROC = ?fn (GLuint) callconv(.C) void;
pub const PFNGLVARIANTARRAYOBJECTATIPROC = ?fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVARIANTPOINTEREXTPROC = ?fn (GLuint, GLenum, GLuint, ?*const c_void) callconv(.C) void;
pub const PFNGLVARIANTBVEXTPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVARIANTDVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVARIANTFVEXTPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVARIANTIVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVARIANTSVEXTPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVARIANTUBVEXTPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVARIANTUIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVARIANTUSVEXTPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEX2BOESPROC = ?fn (GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEX2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEX2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEX2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEX2HNVPROC = ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEX2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEX2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEX2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEX2XOESPROC = ?fn (GLfixed) callconv(.C) void;
pub const PFNGLVERTEX2XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3BOESPROC = ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEX3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEX3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEX3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEX3HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEX3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEX3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEX3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEX3XOESPROC = ?fn (GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX3XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4BOESPROC = ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4BVOESPROC = ?fn ([*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEX4DPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEX4DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEX4FPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEX4FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEX4HNVPROC = ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4HVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEX4IPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEX4IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEX4SPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEX4SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEX4XOESPROC = ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub const PFNGLVERTEX4XVOESPROC = ?fn ([*c]const GLfixed) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBBINDINGPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBIFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYATTRIBLFORMATPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYBINDINGDIVISORPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYCOLOROFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYEDGEFLAGOFFSETEXTPROC = ?fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYELEMENTBUFFERPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYFOGCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYINDEXOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYMULTITEXCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYNORMALOFFSETEXTPROC = ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYPARAMETERIAPPLEPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGEAPPLEPROC = ?fn (GLsizei, ?*c_void) callconv(.C) void;
pub const PFNGLVERTEXARRAYRANGENVPROC = ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXARRAYSECONDARYCOLOROFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYTEXCOORDOFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBDIVISOREXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBIOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXATTRIBOFFSETEXTPROC = ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERPROC = ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXBUFFERSPROC = ?fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub const PFNGLVERTEXARRAYVERTEXOFFSETEXTPROC = ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DARBPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DNVPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FARBPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FNVPROC = ?fn (GLuint, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HNVPROC = ?fn (GLuint, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SARBPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SNVPROC = ?fn (GLuint, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB1SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DARBPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DNVPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FARBPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FNVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SARBPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SNVPROC = ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB2SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DARBPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DNVPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FARBPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SARBPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SNVPROC = ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB3SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NBVARBPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NIVARBPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NSVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBARBPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUBVARBPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUIVARBPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4NUSVARBPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4BVARBPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DARBPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DNVPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVARBPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4DVNVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FARBPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVARBPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4FVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HNVPROC = ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4HVNVPROC = ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4IVARBPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SARBPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SNVPROC = ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVARBPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4SVNVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBNVPROC = ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVARBPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UBVNVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4UIVARBPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIB4USVARBPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBARRAYOBJECTATIPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBBINDINGPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORANGLEPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORARBPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISOREXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBDIVISORNVPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IEXTPROC = ?fn (GLuint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIEXTPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI1UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IEXTPROC = ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIEXTPROC = ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI2UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IEXTPROC = ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI3UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4BVEXTPROC = ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IEXTPROC = ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4IVEXTPROC = ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4SVEXTPROC = ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UBVEXTPROC = ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIEXTPROC = ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4UIVEXTPROC = ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBI4USVEXTPROC = ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATPROC = ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBIPOINTEREXTPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DEXTPROC = ?fn (GLuint, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64NVPROC = ?fn (GLuint, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64ARBPROC = ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64NVPROC = ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VARBPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL1UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DEXTPROC = ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL2UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DEXTPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL3UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DEXTPROC = ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4DVEXTPROC = ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64NVPROC = ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4I64VNVPROC = ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64NVPROC = ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBL4UI64VNVPROC = ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATPROC = ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLFORMATNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBLPOINTEREXTPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP1UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP2UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP3UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIPROC = ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBP4UIVPROC = ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPARAMETERIAMDPROC = ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERARBPROC = ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBPOINTERNVPROC = ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS1SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS2SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS3SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4DVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4FVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4HVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4SVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXATTRIBS4UBVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLVERTEXBINDINGDIVISORPROC = ?fn (GLuint, GLuint) callconv(.C) void;
pub const PFNGLVERTEXBLENDARBPROC = ?fn (GLint) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVFATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXBLENDENVIATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXFORMATNVPROC = ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub const PFNGLVERTEXP2UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP2UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP3UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIPROC = ?fn (GLenum, GLuint) callconv(.C) void;
pub const PFNGLVERTEXP4UIVPROC = ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXPOINTERLISTIBMPROC = ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub const PFNGLVERTEXPOINTERVINTELPROC = ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DATIPROC = ?fn (GLenum, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FATIPROC = ?fn (GLenum, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IATIPROC = ?fn (GLenum, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SATIPROC = ?fn (GLenum, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM1SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DATIPROC = ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FATIPROC = ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IATIPROC = ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SATIPROC = ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM2SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IATIPROC = ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM3SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DATIPROC = ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4DVATIPROC = ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FATIPROC = ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4FVATIPROC = ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IATIPROC = ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4IVATIPROC = ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SATIPROC = ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLVERTEXSTREAM4SVATIPROC = ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTPOINTEREXTPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFEXTPROC = ?fn (GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTFVEXTPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHNVPROC = ?fn (GLhalfNV) callconv(.C) void;
pub const PFNGLVERTEXWEIGHTHVNVPROC = ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub const PFNGLVIDEOCAPTURENVPROC = ?fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC = ?fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub const PFNGLVIEWPORTPROC = ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVNVPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTARRAYVOESPROC = ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFNVPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFOESPROC = ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVNVPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTINDEXEDFVOESPROC = ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTPOSITIONWSCALENVPROC = ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLVIEWPORTSWIZZLENVPROC = ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREEXTPROC = ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub const PFNGLWAITSEMAPHOREUI64NVXPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub const PFNGLWAITSYNCPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLWAITSYNCAPPLEPROC = ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub const PFNGLWAITVKSEMAPHORENVPROC = ?fn (GLuint64) callconv(.C) void;
pub const PFNGLWEIGHTPATHSNVPROC = ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTPOINTERARBPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLWEIGHTPOINTEROESPROC = ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub const PFNGLWEIGHTBVARBPROC = ?fn (GLint, [*c]const GLbyte) callconv(.C) void;
pub const PFNGLWEIGHTDVARBPROC = ?fn (GLint, [*c]const GLdouble) callconv(.C) void;
pub const PFNGLWEIGHTFVARBPROC = ?fn (GLint, [*c]const GLfloat) callconv(.C) void;
pub const PFNGLWEIGHTIVARBPROC = ?fn (GLint, [*c]const GLint) callconv(.C) void;
pub const PFNGLWEIGHTSVARBPROC = ?fn (GLint, [*c]const GLshort) callconv(.C) void;
pub const PFNGLWEIGHTUBVARBPROC = ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub const PFNGLWEIGHTUIVARBPROC = ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub const PFNGLWEIGHTUSVARBPROC = ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub const PFNGLWINDOWPOS2DPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DARBPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DMESAPROC = ?fn (GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS2FPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FARBPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FMESAPROC = ?fn (GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS2IPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IARBPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IMESAPROC = ?fn (GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVARBPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS2SPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SARBPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SMESAPROC = ?fn (GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVARBPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS2SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3DPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DARBPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DMESAPROC = ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVARBPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS3FPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FARBPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FMESAPROC = ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVARBPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS3IPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IARBPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IMESAPROC = ?fn (GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVARBPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS3SPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SARBPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SMESAPROC = ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVARBPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS3SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4DMESAPROC = ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4DVMESAPROC = ?fn ([*c]const GLdouble) callconv(.C) void;
pub const PFNGLWINDOWPOS4FMESAPROC = ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4FVMESAPROC = ?fn ([*c]const GLfloat) callconv(.C) void;
pub const PFNGLWINDOWPOS4IMESAPROC = ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4IVMESAPROC = ?fn ([*c]const GLint) callconv(.C) void;
pub const PFNGLWINDOWPOS4SMESAPROC = ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub const PFNGLWINDOWPOS4SVMESAPROC = ?fn ([*c]const GLshort) callconv(.C) void;
pub const PFNGLWINDOWRECTANGLESEXTPROC = ?fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub const PFNGLWRITEMASKEXTPROC = ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glAccum: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glAccumxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glAcquireKeyedMutexWin32EXT: ?fn (GLuint, GLuint64, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glActiveProgramEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glActiveShaderProgram: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glActiveShaderProgramEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glActiveStencilFaceEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glActiveTexture: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glActiveTextureARB: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glActiveVaryingNV: ?fn (GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glAlphaFragmentOp1ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAlphaFragmentOp2ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAlphaFragmentOp3ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAlphaFunc: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glAlphaFuncQCOM: ?fn (GLenum, GLclampf) callconv(.C) void;
pub extern var epoxy_glAlphaFuncx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glAlphaFuncxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glAlphaToCoverageDitherControlNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glApplyFramebufferAttachmentCMAAINTEL: ?fn () callconv(.C) void;
pub extern var epoxy_glApplyTextureEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glAreProgramsResidentNV: ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub extern var epoxy_glAreTexturesResident: ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub extern var epoxy_glAreTexturesResidentEXT: ?fn (GLsizei, [*c]const GLuint, [*c]GLboolean) callconv(.C) GLboolean;
pub extern var epoxy_glArrayElement: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glArrayElementEXT: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glArrayObjectATI: ?fn (GLenum, GLint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glAsyncCopyBufferSubDataNVX: ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub extern var epoxy_glAsyncCopyImageSubDataNVX: ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64, GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) GLuint;
pub extern var epoxy_glAsyncMarkerSGIX: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glAttachObjectARB: ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub extern var epoxy_glAttachShader: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBegin: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginConditionalRender: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBeginConditionalRenderNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBeginConditionalRenderNVX: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginFragmentShaderATI: ?fn () callconv(.C) void;
pub extern var epoxy_glBeginOcclusionQueryNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginPerfMonitorAMD: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginPerfQueryINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQuery: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQueryARB: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQueryEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginQueryIndexed: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBeginTransformFeedback: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginTransformFeedbackEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginTransformFeedbackNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBeginVertexShaderEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glBeginVideoCaptureNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindAttribLocation: ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindAttribLocationARB: ?fn (GLhandleARB, GLuint, [*c]const GLcharARB) callconv(.C) void;
pub extern var epoxy_glBindBuffer: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferARB: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferBase: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferBaseEXT: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferBaseNV: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindBufferOffsetEXT: ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub extern var epoxy_glBindBufferOffsetNV: ?fn (GLenum, GLuint, GLuint, GLintptr) callconv(.C) void;
pub extern var epoxy_glBindBufferRange: ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindBufferRangeEXT: ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindBufferRangeNV: ?fn (GLenum, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindBuffersBase: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindBuffersRange: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocation: ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocationEXT: ?fn (GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocationIndexed: ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragDataLocationIndexedEXT: ?fn (GLuint, GLuint, GLuint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glBindFragmentShaderATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindFramebuffer: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindFramebufferEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindFramebufferOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindImageTexture: ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBindImageTextureEXT: ?fn (GLuint, GLuint, GLint, GLboolean, GLint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glBindImageTextures: ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindLightParameterEXT: ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindMaterialParameterEXT: ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindMultiTextureEXT: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindParameterEXT: ?fn (GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindProgramARB: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindProgramNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindProgramPipeline: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindProgramPipelineEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindRenderbuffer: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindRenderbufferEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindRenderbufferOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindSampler: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindSamplers: ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindShadingRateImageNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindTexGenParameterEXT: ?fn (GLenum, GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindTexture: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTextureEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTextureUnit: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTextureUnitParameterEXT: ?fn (GLenum, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glBindTextures: ?fn (GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glBindTransformFeedback: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindTransformFeedbackNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexArray: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexArrayAPPLE: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexArrayOES: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVertexBuffer: ?fn (GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub extern var epoxy_glBindVertexBuffers: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub extern var epoxy_glBindVertexShaderEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glBindVideoCaptureStreamBufferNV: ?fn (GLuint, GLuint, GLenum, GLintptrARB) callconv(.C) void;
pub extern var epoxy_glBindVideoCaptureStreamTextureNV: ?fn (GLuint, GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glBinormal3bEXT: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glBinormal3bvEXT: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glBinormal3dEXT: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glBinormal3dvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glBinormal3fEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glBinormal3fvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glBinormal3iEXT: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glBinormal3ivEXT: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glBinormal3sEXT: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glBinormal3svEXT: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glBinormalPointerEXT: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glBitmap: ?fn (GLsizei, GLsizei, GLfloat, GLfloat, GLfloat, GLfloat, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glBitmapxOES: ?fn (GLsizei, GLsizei, GLfixed, GLfixed, GLfixed, GLfixed, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glBlendBarrier: ?fn () callconv(.C) void;
pub extern var epoxy_glBlendBarrierKHR: ?fn () callconv(.C) void;
pub extern var epoxy_glBlendBarrierNV: ?fn () callconv(.C) void;
pub extern var epoxy_glBlendColor: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glBlendColorEXT: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glBlendColorxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glBlendEquation: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationIndexedAMD: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationOES: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparate: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateIndexedAMD: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateOES: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparatei: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateiARB: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateiEXT: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationSeparateiOES: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationi: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationiARB: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationiEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendEquationiOES: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunc: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncIndexedAMD: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparate: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateEXT: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateINGR: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateIndexedAMD: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateOES: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparatei: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateiARB: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateiEXT: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFuncSeparateiOES: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunci: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunciARB: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunciEXT: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendFunciOES: ?fn (GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glBlendParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glBlitFramebuffer: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitFramebufferANGLE: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitFramebufferEXT: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitFramebufferNV: ?fn (GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBlitNamedFramebuffer: ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glBufferAddressRangeNV: ?fn (GLenum, GLuint, GLuint64EXT, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glBufferAttachMemoryNV: ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glBufferData: ?fn (GLenum, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub extern var epoxy_glBufferDataARB: ?fn (GLenum, GLsizeiptrARB, ?*const c_void, GLenum) callconv(.C) void;
pub extern var epoxy_glBufferPageCommitmentARB: ?fn (GLenum, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub extern var epoxy_glBufferParameteriAPPLE: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glBufferStorage: ?fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub extern var epoxy_glBufferStorageEXT: ?fn (GLenum, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub extern var epoxy_glBufferStorageExternalEXT: ?fn (GLenum, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub extern var epoxy_glBufferStorageMemEXT: ?fn (GLenum, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glBufferSubData: ?fn (GLenum, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glBufferSubDataARB: ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCallCommandListNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCallList: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCallLists: ?fn (GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCheckFramebufferStatus: ?fn (GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckFramebufferStatusEXT: ?fn (GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckFramebufferStatusOES: ?fn (GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckNamedFramebufferStatus: ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glCheckNamedFramebufferStatusEXT: ?fn (GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glClampColor: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClampColorARB: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClear: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glClearAccum: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glClearAccumxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glClearBufferData: ?fn (GLenum, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearBufferSubData: ?fn (GLenum, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearBufferfi: ?fn (GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub extern var epoxy_glClearBufferfv: ?fn (GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClearBufferiv: ?fn (GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glClearBufferuiv: ?fn (GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glClearColor: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glClearColorIiEXT: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glClearColorIuiEXT: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glClearColorx: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glClearColorxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glClearDepth: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glClearDepthdNV: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glClearDepthf: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glClearDepthfOES: ?fn (GLclampf) callconv(.C) void;
pub extern var epoxy_glClearDepthx: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glClearDepthxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glClearIndex: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferData: ?fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferDataEXT: ?fn (GLuint, GLenum, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferSubData: ?fn (GLuint, GLenum, GLintptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearNamedBufferSubDataEXT: ?fn (GLuint, GLenum, GLsizeiptr, GLsizeiptr, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferfi: ?fn (GLuint, GLenum, GLint, GLfloat, GLint) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferfv: ?fn (GLuint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferiv: ?fn (GLuint, GLenum, GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glClearNamedFramebufferuiv: ?fn (GLuint, GLenum, GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glClearPixelLocalStorageuiEXT: ?fn (GLsizei, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glClearStencil: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glClearTexImage: ?fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearTexImageEXT: ?fn (GLuint, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearTexSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClearTexSubImageEXT: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glClientActiveTexture: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glClientActiveTextureARB: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glClientActiveVertexStreamATI: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glClientAttribDefaultEXT: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glClientWaitSemaphoreui64NVX: ?fn (GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glClientWaitSync: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub extern var epoxy_glClientWaitSyncAPPLE: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) GLenum;
pub extern var epoxy_glClipControl: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClipControlEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glClipPlane: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glClipPlanef: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClipPlanefIMG: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClipPlanefOES: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glClipPlanex: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glClipPlanexIMG: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glClipPlanexOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glColor3b: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glColor3bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glColor3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glColor3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glColor3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glColor3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColor3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glColor3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glColor3ub: ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glColor3ubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glColor3ui: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColor3uiv: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColor3us: ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glColor3usv: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glColor3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glColor3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glColor4b: ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glColor4bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glColor4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glColor4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glColor4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4fNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor4hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glColor4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glColor4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColor4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glColor4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glColor4ub: ?fn (GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex2fSUN: ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex2fvSUN: ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex3fSUN: ?fn (GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubVertex3fvSUN: ?fn ([*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColor4ubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glColor4ui: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColor4uiv: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColor4us: ?fn (GLushort, GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glColor4usv: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glColor4x: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glColor4xOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glColor4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glColorFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glColorFragmentOp1ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColorFragmentOp2ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColorFragmentOp3ATI: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glColorMask: ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaskIndexedEXT: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaski: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaskiEXT: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaskiOES: ?fn (GLuint, GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glColorMaterial: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glColorP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glColorP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColorP4ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glColorP4uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glColorPointer: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glColorPointerEXT: ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glColorPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glColorPointervINTEL: ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub extern var epoxy_glColorSubTable: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glColorSubTableEXT: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glColorTable: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glColorTableEXT: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glColorTableParameterfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColorTableParameterfvSGI: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glColorTableParameteriv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColorTableParameterivSGI: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glColorTableSGI: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCombinerInputNV: ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glCombinerOutputNV: ?fn (GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLenum, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glCombinerParameterfNV: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glCombinerParameterfvNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCombinerParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glCombinerParameterivNV: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glCombinerStageParameterfvNV: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCommandListSegmentsNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glCompileCommandListNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCompileShader: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glCompileShaderARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glCompileShaderIncludeARB: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexImage1DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexImage2DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexImage3DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexSubImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexSubImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedMultiTexSubImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage1D: ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage1DARB: ?fn (GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage2D: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage2DARB: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage3D: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage3DARB: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexImage3DOES: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage1D: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage1DARB: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage2D: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage2DARB: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage3D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage3DARB: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTexSubImage3DOES: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureImage1DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureImage2DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureImage3DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage1D: ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage2D: ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage3D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glCompressedTextureSubImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glConservativeRasterParameterfNV: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glConservativeRasterParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter1D: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter1DEXT: ?fn (GLenum, GLenum, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter2D: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glConvolutionFilter2DEXT: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterfEXT: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterfvEXT: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glConvolutionParameteri: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameteriEXT: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameteriv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterivEXT: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glConvolutionParameterxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glCopyBufferSubData: ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glCopyBufferSubDataNV: ?fn (GLenum, GLenum, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glCopyColorSubTable: ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyColorSubTableEXT: ?fn (GLenum, GLsizei, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyColorTable: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyColorTableSGI: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter1D: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter2D: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyConvolutionFilter2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubData: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubDataEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubDataNV: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyImageSubDataOES: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexImage1DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexImage2DEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexSubImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexSubImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyMultiTexSubImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyNamedBufferSubData: ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glCopyPathNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glCopyPixels: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum) callconv(.C) void;
pub extern var epoxy_glCopyTexImage1D: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexImage1DEXT: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexImage2D: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexImage2DEXT: ?fn (GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage1D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage1DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage2D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage2DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage3D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage3DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTexSubImage3DOES: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureImage1DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTextureImage2DEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glCopyTextureLevelsAPPLE: ?fn (GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage1D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage2D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage3D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCopyTextureSubImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glCoverFillPathInstancedNV: ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCoverFillPathNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glCoverStrokePathInstancedNV: ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCoverStrokePathNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glCoverageMaskNV: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glCoverageModulationNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glCoverageModulationTableNV: ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glCoverageOperationNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glCreateBuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateCommandListsNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateFramebuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateMemoryObjectsEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreatePerfQueryINTEL: ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateProgram: ?fn () callconv(.C) GLuint;
pub extern var epoxy_glCreateProgramObjectARB: ?fn () callconv(.C) GLhandleARB;
pub extern var epoxy_glCreateProgramPipelines: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateProgressFenceNVX: ?fn () callconv(.C) GLuint;
pub extern var epoxy_glCreateQueries: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateRenderbuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateSamplers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateShader: ?fn (GLenum) callconv(.C) GLuint;
pub extern var epoxy_glCreateShaderObjectARB: ?fn (GLenum) callconv(.C) GLhandleARB;
pub extern var epoxy_glCreateShaderProgramEXT: ?fn (GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glCreateShaderProgramv: ?fn (GLenum, GLsizei, [*c]const [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glCreateShaderProgramvEXT: ?fn (GLenum, GLsizei, [*c][*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glCreateStatesNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateSyncFromCLeventARB: ?fn (?*struct__cl_context, ?*struct__cl_event, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glCreateTextures: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateTransformFeedbacks: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCreateVertexArrays: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glCullFace: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glCullParameterdvEXT: ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glCullParameterfvEXT: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glCurrentPaletteMatrixARB: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glCurrentPaletteMatrixOES: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallback: ?fn (GLDEBUGPROC, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallbackAMD: ?fn (GLDEBUGPROCAMD, ?*c_void) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallbackARB: ?fn (GLDEBUGPROCARB, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDebugMessageCallbackKHR: ?fn (GLDEBUGPROCKHR, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDebugMessageControl: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageControlARB: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageControlKHR: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageEnableAMD: ?fn (GLenum, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsert: ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsertAMD: ?fn (GLenum, GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsertARB: ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDebugMessageInsertKHR: ?fn (GLenum, GLenum, GLuint, GLenum, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDeformSGIX: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glDeformationMap3dSGIX: ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glDeformationMap3fSGIX: ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDeleteAsyncMarkersSGIX: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDeleteBuffers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteBuffersARB: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteCommandListsNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFencesAPPLE: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFencesNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFragmentShaderATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFramebuffers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFramebuffersEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteFramebuffersOES: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteLists: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDeleteMemoryObjectsEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteNamedStringARB: ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glDeleteNamesAMD: ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteObjectARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glDeleteOcclusionQueriesNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeletePathsNV: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDeletePerfMonitorsAMD: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glDeletePerfQueryINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramPipelines: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramPipelinesEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramsARB: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteProgramsNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueries: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueriesARB: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueriesEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteQueryResourceTagNV: ?fn (GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glDeleteRenderbuffers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteRenderbuffersEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteRenderbuffersOES: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteSamplers: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteSemaphoresEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteShader: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteStatesNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteSync: ?fn (GLsync) callconv(.C) void;
pub extern var epoxy_glDeleteSyncAPPLE: ?fn (GLsync) callconv(.C) void;
pub extern var epoxy_glDeleteTextures: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteTexturesEXT: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteTransformFeedbacks: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteTransformFeedbacksNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexArrays: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexArraysAPPLE: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexArraysOES: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glDeleteVertexShaderEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDepthBoundsEXT: ?fn (GLclampd, GLclampd) callconv(.C) void;
pub extern var epoxy_glDepthBoundsdNV: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthFunc: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDepthMask: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glDepthRange: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangeArrayfvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangeArrayfvOES: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangeArrayv: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangeIndexed: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangeIndexedfNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangeIndexedfOES: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangedNV: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glDepthRangef: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDepthRangefOES: ?fn (GLclampf, GLclampf) callconv(.C) void;
pub extern var epoxy_glDepthRangex: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glDepthRangexOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glDetachObjectARB: ?fn (GLhandleARB, GLhandleARB) callconv(.C) void;
pub extern var epoxy_glDetachShader: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDetailTexFuncSGIS: ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDisable: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDisableClientState: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDisableClientStateIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableClientStateiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableDriverControlQCOM: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisableIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVariantClientStateEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexArrayAttrib: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexArrayAttribEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexArrayEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glDisableVertexAttribAPPLE: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glDisableVertexAttribArray: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisableVertexAttribArrayARB: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glDisablei: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableiNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDisableiOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDiscardFramebufferEXT: ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDispatchCompute: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDispatchComputeGroupSizeARB: ?fn (GLuint, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDispatchComputeIndirect: ?fn (GLintptr) callconv(.C) void;
pub extern var epoxy_glDrawArrays: ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysEXT: ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysIndirect: ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstanced: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedANGLE: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedARB: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedBaseInstance: ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedBaseInstanceEXT: ?fn (GLenum, GLint, GLsizei, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedEXT: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawArraysInstancedNV: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawBuffer: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffers: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersARB: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersATI: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersEXT: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawBuffersIndexedEXT: ?fn (GLint, [*c]const GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glDrawBuffersNV: ?fn (GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glDrawCommandsAddressNV: ?fn (GLenum, [*c]const GLuint64, [*c]const GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawCommandsNV: ?fn (GLenum, GLuint, [*c]const GLintptr, [*c]const GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawCommandsStatesAddressNV: ?fn ([*c]const GLuint64, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawCommandsStatesNV: ?fn (GLuint, [*c]const GLintptr, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementArrayAPPLE: ?fn (GLenum, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementArrayATI: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElements: ?fn (GLenum, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDrawElementsBaseVertex: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsBaseVertexEXT: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsBaseVertexOES: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsIndirect: ?fn (GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstanced: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedANGLE: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedARB: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseInstance: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseInstanceEXT: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertex: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexBaseInstance: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexBaseInstanceEXT: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexEXT: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedBaseVertexOES: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedEXT: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawElementsInstancedNV: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawMeshArraysSUN: ?fn (GLenum, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawMeshTasksIndirectNV: ?fn (GLintptr) callconv(.C) void;
pub extern var epoxy_glDrawMeshTasksNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawPixels: ?fn (GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementArrayAPPLE: ?fn (GLenum, GLuint, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementArrayATI: ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawRangeElements: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsBaseVertex: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsBaseVertexEXT: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsBaseVertexOES: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glDrawRangeElementsEXT: ?fn (GLenum, GLuint, GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glDrawTexfOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDrawTexfvOES: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glDrawTexiOES: ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glDrawTexivOES: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glDrawTexsOES: ?fn (GLshort, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glDrawTexsvOES: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glDrawTextureNV: ?fn (GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glDrawTexxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glDrawTexxvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedback: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackInstanced: ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackInstancedEXT: ?fn (GLenum, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackStream: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glDrawTransformFeedbackStreamInstanced: ?fn (GLenum, GLuint, GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glDrawVkImageNV: ?fn (GLuint64, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetRenderbufferStorageOES: ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetTexStorageEXT: ?fn (GLenum, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetTexture2DOES: ?fn (GLenum, GLeglImageOES) callconv(.C) void;
pub extern var epoxy_glEGLImageTargetTextureStorageEXT: ?fn (GLuint, GLeglImageOES, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glEdgeFlag: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glEdgeFlagFormatNV: ?fn (GLsizei) callconv(.C) void;
pub extern var epoxy_glEdgeFlagPointer: ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glEdgeFlagPointerEXT: ?fn (GLsizei, GLsizei, [*c]const GLboolean) callconv(.C) void;
pub extern var epoxy_glEdgeFlagPointerListIBM: ?fn (GLint, [*c][*c]const GLboolean, GLint) callconv(.C) void;
pub extern var epoxy_glEdgeFlagv: ?fn ([*c]const GLboolean) callconv(.C) void;
pub extern var epoxy_glElementPointerAPPLE: ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glElementPointerATI: ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glEnable: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEnableClientState: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEnableClientStateIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableClientStateiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableDriverControlQCOM: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnableIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVariantClientStateEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexArrayAttrib: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexArrayAttribEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexArrayEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glEnableVertexAttribAPPLE: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glEnableVertexAttribArray: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnableVertexAttribArrayARB: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEnablei: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableiEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableiNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnableiOES: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEnd: ?fn () callconv(.C) void;
pub extern var epoxy_glEndConditionalRender: ?fn () callconv(.C) void;
pub extern var epoxy_glEndConditionalRenderNV: ?fn () callconv(.C) void;
pub extern var epoxy_glEndConditionalRenderNVX: ?fn () callconv(.C) void;
pub extern var epoxy_glEndFragmentShaderATI: ?fn () callconv(.C) void;
pub extern var epoxy_glEndList: ?fn () callconv(.C) void;
pub extern var epoxy_glEndOcclusionQueryNV: ?fn () callconv(.C) void;
pub extern var epoxy_glEndPerfMonitorAMD: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEndPerfQueryINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEndQuery: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEndQueryARB: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEndQueryEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glEndQueryIndexed: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glEndTilingQCOM: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glEndTransformFeedback: ?fn () callconv(.C) void;
pub extern var epoxy_glEndTransformFeedbackEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glEndTransformFeedbackNV: ?fn () callconv(.C) void;
pub extern var epoxy_glEndVertexShaderEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glEndVideoCaptureNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glEvalCoord1d: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord1dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord1f: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord1fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord1xOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalCoord1xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalCoord2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glEvalCoord2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glEvalCoord2xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalCoord2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glEvalMapsNV: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glEvalMesh1: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glEvalMesh2: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glEvalPoint1: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glEvalPoint2: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glEvaluateDepthValuesARB: ?fn () callconv(.C) void;
pub extern var epoxy_glExecuteProgramNV: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glExtGetBufferPointervQCOM: ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glExtGetBuffersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetFramebuffersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetProgramBinarySourceQCOM: ?fn (GLuint, GLenum, [*c]GLchar, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetProgramsQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetRenderbuffersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetShadersQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetTexLevelParameterivQCOM: ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtGetTexSubImageQCOM: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glExtGetTexturesQCOM: ?fn ([*c]GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glExtIsProgramBinaryQCOM: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glExtTexObjectStateOverrideiQCOM: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glExtractComponentEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glFeedbackBuffer: ?fn (GLsizei, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glFeedbackBufferxOES: ?fn (GLsizei, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glFenceSync: ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glFenceSyncAPPLE: ?fn (GLenum, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glFinalCombinerInputNV: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glFinish: ?fn () callconv(.C) void;
pub extern var epoxy_glFinishAsyncSGIX: ?fn ([*c]GLuint) callconv(.C) GLint;
pub extern var epoxy_glFinishFenceAPPLE: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFinishFenceNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFinishObjectAPPLE: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFinishTextureSUNX: ?fn () callconv(.C) void;
pub extern var epoxy_glFlush: ?fn () callconv(.C) void;
pub extern var epoxy_glFlushMappedBufferRange: ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedBufferRangeAPPLE: ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedBufferRangeEXT: ?fn (GLenum, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedNamedBufferRange: ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushMappedNamedBufferRangeEXT: ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glFlushPixelDataRangeNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glFlushRasterSGIX: ?fn () callconv(.C) void;
pub extern var epoxy_glFlushStaticDataIBM: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glFlushVertexArrayRangeAPPLE: ?fn (GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glFlushVertexArrayRangeNV: ?fn () callconv(.C) void;
pub extern var epoxy_glFogCoordFormatNV: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glFogCoordPointer: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glFogCoordPointerEXT: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glFogCoordPointerListIBM: ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glFogCoordd: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoorddEXT: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoorddv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoorddvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glFogCoordf: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordfEXT: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordfv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordfvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogCoordhNV: ?fn (GLhalfNV) callconv(.C) void;
pub extern var epoxy_glFogCoordhvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glFogFuncSGIS: ?fn (GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFogfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFogi: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFogiv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFogx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glFogxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glFogxv: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glFogxvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glFragmentColorMaterialSGIX: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glFragmentCoverageColorNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFragmentLightModelfSGIX: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightModelfvSGIX: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightModeliSGIX: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFragmentLightModelivSGIX: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFragmentLightfSGIX: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightfvSGIX: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentLightiSGIX: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFragmentLightivSGIX: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialfSGIX: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialfvSGIX: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialiSGIX: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFragmentMaterialivSGIX: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glFrameTerminatorGREMEDY: ?fn () callconv(.C) void;
pub extern var epoxy_glFrameZoomSGIX: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferDrawBufferEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferDrawBuffersEXT: ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferFetchBarrierEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glFramebufferFetchBarrierQCOM: ?fn () callconv(.C) void;
pub extern var epoxy_glFramebufferFoveationConfigQCOM: ?fn (GLuint, GLuint, GLuint, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferFoveationParametersQCOM: ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferParameteri: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferParameteriMESA: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferPixelLocalStorageSizeEXT: ?fn (GLuint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferReadBufferEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferRenderbuffer: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferRenderbufferEXT: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferRenderbufferOES: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glFramebufferSampleLocationsfvARB: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferSampleLocationsfvNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferSamplePositionsfvAMD: ?fn (GLenum, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture1D: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture1DEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2D: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DDownsampleIMG: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DMultisampleEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DMultisampleIMG: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture2DOES: ?fn (GLenum, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture3D: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture3DEXT: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTexture3DOES: ?fn (GLenum, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureARB: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureEXT: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureFaceARB: ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureFaceEXT: ?fn (GLenum, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayer: ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayerARB: ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayerDownsampleIMG: ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureLayerEXT: ?fn (GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureMultisampleMultiviewOVR: ?fn (GLenum, GLenum, GLuint, GLint, GLsizei, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureMultiviewOVR: ?fn (GLenum, GLenum, GLuint, GLint, GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glFramebufferTextureOES: ?fn (GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glFreeObjectBufferATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glFrontFace: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glFrustum: ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glFrustumf: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glFrustumfOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glFrustumx: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glFrustumxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glGenAsyncMarkersSGIX: ?fn (GLsizei) callconv(.C) GLuint;
pub extern var epoxy_glGenBuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenBuffersARB: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFencesAPPLE: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFencesNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFragmentShadersATI: ?fn (GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGenFramebuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFramebuffersEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenFramebuffersOES: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenLists: ?fn (GLsizei) callconv(.C) GLuint;
pub extern var epoxy_glGenNamesAMD: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenOcclusionQueriesNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenPathsNV: ?fn (GLsizei) callconv(.C) GLuint;
pub extern var epoxy_glGenPerfMonitorsAMD: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramPipelines: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramPipelinesEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramsARB: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenProgramsNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueries: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueriesARB: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueriesEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenQueryResourceTagNV: ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGenRenderbuffers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenRenderbuffersEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenRenderbuffersOES: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenSamplers: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenSemaphoresEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenSymbolsEXT: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGenTextures: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenTexturesEXT: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenTransformFeedbacks: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenTransformFeedbacksNV: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexArrays: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexArraysAPPLE: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexArraysOES: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGenVertexShadersEXT: ?fn (GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGenerateMipmap: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateMipmapEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateMipmapOES: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateMultiTexMipmapEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glGenerateTextureMipmap: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glGenerateTextureMipmapEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glGetActiveAtomicCounterBufferiv: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveAttrib: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveAttribARB: ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetActiveSubroutineName: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveSubroutineUniformName: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveSubroutineUniformiv: ?fn (GLuint, GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveUniform: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformARB: ?fn (GLhandleARB, GLuint, GLsizei, [*c]GLsizei, [*c]GLint, [*c]GLenum, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformBlockName: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformBlockiv: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformName: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetActiveUniformsiv: ?fn (GLuint, GLsizei, [*c]const GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetActiveVaryingNV: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetArrayObjectfvATI: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetArrayObjectivATI: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetAttachedObjectsARB: ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLhandleARB) callconv(.C) void;
pub extern var epoxy_glGetAttachedShaders: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetAttribLocation: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetAttribLocationARB: ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub extern var epoxy_glGetBooleanIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetBooleani_v: ?fn (GLenum, GLuint, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetBooleanv: ?fn (GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetBufferParameteri64v: ?fn (GLenum, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetBufferParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetBufferParameterivARB: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetBufferParameterui64vNV: ?fn (GLenum, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetBufferPointerv: ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetBufferPointervARB: ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetBufferPointervOES: ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetBufferSubData: ?fn (GLenum, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetBufferSubDataARB: ?fn (GLenum, GLintptrARB, GLsizeiptrARB, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetClipPlane: ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetClipPlanef: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetClipPlanefOES: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetClipPlanex: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetClipPlanexOES: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetColorTable: ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetColorTableEXT: ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterfvSGI: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetColorTableParameterivSGI: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetColorTableSGI: ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetCombinerInputParameterfvNV: ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetCombinerInputParameterivNV: ?fn (GLenum, GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetCombinerOutputParameterfvNV: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetCombinerOutputParameterivNV: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetCombinerStageParameterfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetCommandHeaderNV: ?fn (GLenum, GLuint) callconv(.C) GLuint;
pub extern var epoxy_glGetCompressedMultiTexImageEXT: ?fn (GLenum, GLenum, GLint, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetCompressedTexImage: ?fn (GLenum, GLint, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetCompressedTexImageARB: ?fn (GLenum, GLint, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetCompressedTextureImage: ?fn (GLuint, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetCompressedTextureImageEXT: ?fn (GLuint, GLenum, GLint, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetCompressedTextureSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetConvolutionFilter: ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetConvolutionFilterEXT: ?fn (GLenum, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetConvolutionParameterxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetCoverageModulationTableNV: ?fn (GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetDebugMessageLog: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDebugMessageLogAMD: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLuint, [*c]GLuint, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDebugMessageLogARB: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDebugMessageLogKHR: ?fn (GLuint, GLsizei, [*c]GLenum, [*c]GLenum, [*c]GLuint, [*c]GLenum, [*c]GLsizei, [*c]GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetDetailTexFuncSGIS: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetDoubleIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDoublei_v: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDoublei_vEXT: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDoublev: ?fn (GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetDriverControlStringQCOM: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetDriverControlsQCOM: ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetError: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetFenceivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFinalCombinerInputParameterfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFinalCombinerInputParameterivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFirstPerfQueryIdINTEL: ?fn ([*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetFixedv: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetFixedvOES: ?fn (GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetFloatIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_v: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_vEXT: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_vNV: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloati_vOES: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFloatv: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFogFuncSGIS: ?fn ([*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFragDataIndex: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragDataIndexEXT: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragDataLocation: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragDataLocationEXT: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetFragmentLightfvSGIX: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFragmentLightivSGIX: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFragmentMaterialfvSGIX: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFragmentMaterialivSGIX: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferAttachmentParameteriv: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferAttachmentParameterivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferAttachmentParameterivOES: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameterfvAMD: ?fn (GLenum, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferParameterivMESA: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetFramebufferPixelLocalStorageSizeEXT: ?fn (GLuint) callconv(.C) GLsizei;
pub extern var epoxy_glGetGraphicsResetStatus: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetGraphicsResetStatusARB: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetGraphicsResetStatusEXT: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetGraphicsResetStatusKHR: ?fn () callconv(.C) GLenum;
pub extern var epoxy_glGetHandleARB: ?fn (GLenum) callconv(.C) GLhandleARB;
pub extern var epoxy_glGetHistogram: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetHistogramEXT: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetHistogramParameterxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetImageHandleARB: ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub extern var epoxy_glGetImageHandleNV: ?fn (GLuint, GLint, GLboolean, GLint, GLenum) callconv(.C) GLuint64;
pub extern var epoxy_glGetImageTransformParameterfvHP: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetImageTransformParameterivHP: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInfoLogARB: ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetInstrumentsSGIX: ?fn () callconv(.C) GLint;
pub extern var epoxy_glGetInteger64i_v: ?fn (GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetInteger64v: ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetInteger64vAPPLE: ?fn (GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetIntegerIndexedvEXT: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetIntegeri_v: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetIntegeri_vEXT: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetIntegerui64i_vNV: ?fn (GLenum, GLuint, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetIntegerui64vNV: ?fn (GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetIntegerv: ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInternalformatSampleivNV: ?fn (GLenum, GLenum, GLsizei, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInternalformati64v: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetInternalformativ: ?fn (GLenum, GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetInvariantBooleanvEXT: ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetInvariantFloatvEXT: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetInvariantIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetLightfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetLightiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetLightxOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetLightxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetLightxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetListParameterfvSGIX: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetListParameterivSGIX: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetLocalConstantBooleanvEXT: ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetLocalConstantFloatvEXT: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetLocalConstantIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapAttribParameterfvNV: ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMapAttribParameterivNV: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapControlPointsNV: ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLboolean, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetMapParameterfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMapParameterivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapdv: ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetMapfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMapiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMapxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMaterialfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMaterialiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMaterialxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMaterialxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMaterialxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetMemoryObjectDetachedResourcesuivNV: ?fn (GLuint, GLenum, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetMemoryObjectParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMinmax: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetMinmaxEXT: ?fn (GLenum, GLboolean, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMinmaxParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexEnvfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexEnvivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexGendvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetMultiTexGenfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexGenivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexImageEXT: ?fn (GLenum, GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetMultiTexLevelParameterfvEXT: ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexLevelParameterivEXT: ?fn (GLenum, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterIivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterIuivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultiTexParameterivEXT: ?fn (GLenum, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetMultisamplefv: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetMultisamplefvNV: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameteri64v: ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferParameterui64vNV: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferPointerv: ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferPointervEXT: ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferSubData: ?fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetNamedBufferSubDataEXT: ?fn (GLuint, GLintptr, GLsizeiptr, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferAttachmentParameteriv: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferAttachmentParameterivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferParameterfvAMD: ?fn (GLuint, GLenum, GLuint, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedFramebufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterIivEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterIuivEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterdvEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramLocalParameterfvEXT: ?fn (GLuint, GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramStringEXT: ?fn (GLuint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetNamedProgramivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedRenderbufferParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedRenderbufferParameterivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNamedStringARB: ?fn (GLint, [*c]const GLchar, GLsizei, [*c]GLint, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetNamedStringivARB: ?fn (GLint, [*c]const GLchar, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetNextPerfQueryIdINTEL: ?fn (GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetObjectBufferfvATI: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetObjectBufferivATI: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetObjectLabel: ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectLabelEXT: ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectLabelKHR: ?fn (GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectParameterfvARB: ?fn (GLhandleARB, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetObjectParameterivAPPLE: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetObjectParameterivARB: ?fn (GLhandleARB, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetObjectPtrLabel: ?fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetObjectPtrLabelKHR: ?fn (?*const c_void, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetOcclusionQueryivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetOcclusionQueryuivNV: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPathColorGenfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathColorGenivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPathCommandsNV: ?fn (GLuint, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetPathCoordsNV: ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathDashArrayNV: ?fn (GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathLengthNV: ?fn (GLuint, GLsizei, GLsizei) callconv(.C) GLfloat;
pub extern var epoxy_glGetPathMetricRangeNV: ?fn (GLbitfield, GLuint, GLsizei, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathMetricsNV: ?fn (GLbitfield, GLsizei, GLenum, ?*const c_void, GLuint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathParameterfvNV: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathParameterivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPathSpacingNV: ?fn (GLenum, GLsizei, GLenum, ?*const c_void, GLuint, GLfloat, GLfloat, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathTexGenfvNV: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPathTexGenivNV: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPerfCounterInfoINTEL: ?fn (GLuint, GLuint, GLuint, [*c]GLchar, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCounterDataAMD: ?fn (GLuint, GLenum, GLsizei, [*c]GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCounterInfoAMD: ?fn (GLuint, GLuint, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCounterStringAMD: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorCountersAMD: ?fn (GLuint, [*c]GLint, [*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorGroupStringAMD: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetPerfMonitorGroupsAMD: ?fn ([*c]GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfQueryDataINTEL: ?fn (GLuint, GLuint, GLsizei, ?*c_void, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfQueryIdByNameINTEL: ?fn ([*c]GLchar, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPerfQueryInfoINTEL: ?fn (GLuint, GLuint, [*c]GLchar, [*c]GLuint, [*c]GLuint, [*c]GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPixelMapfv: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPixelMapuiv: ?fn (GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetPixelMapusv: ?fn (GLenum, [*c]GLushort) callconv(.C) void;
pub extern var epoxy_glGetPixelMapxv: ?fn (GLenum, GLint, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetPixelTexGenParameterfvSGIS: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPixelTexGenParameterivSGIS: ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPixelTransformParameterfvEXT: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetPixelTransformParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetPointerIndexedvEXT: ?fn (GLenum, GLuint, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetPointeri_vEXT: ?fn (GLenum, GLuint, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetPointerv: ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetPointervEXT: ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetPointervKHR: ?fn (GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetPolygonStipple: ?fn ([*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetProgramBinary: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetProgramBinaryOES: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterIivNV: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterIuivNV: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterdvARB: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramEnvParameterfvARB: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramInfoLog: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramInterfaceiv: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterIivNV: ?fn (GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterIuivNV: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterdvARB: ?fn (GLenum, GLuint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramLocalParameterfvARB: ?fn (GLenum, GLuint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramNamedParameterdvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramNamedParameterfvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramParameterdvNV: ?fn (GLenum, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetProgramParameterfvNV: ?fn (GLenum, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineInfoLog: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineInfoLogEXT: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramPipelineivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramResourceIndex: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetProgramResourceLocation: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetProgramResourceLocationIndex: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetProgramResourceLocationIndexEXT: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetProgramResourceName: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetProgramResourcefvNV: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetProgramResourceiv: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramStageiv: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramStringARB: ?fn (GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetProgramStringNV: ?fn (GLuint, GLenum, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetProgramSubroutineParameteruivNV: ?fn (GLenum, GLuint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetProgramiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramivARB: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetProgramivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjecti64v: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjectiv: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjectui64v: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryBufferObjectuiv: ?fn (GLuint, GLuint, GLenum, GLintptr) callconv(.C) void;
pub extern var epoxy_glGetQueryIndexediv: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjecti64v: ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjecti64vEXT: ?fn (GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectivARB: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectui64v: ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectui64vEXT: ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectuivARB: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetQueryObjectuivEXT: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetQueryiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryivARB: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetQueryivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetRenderbufferParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetRenderbufferParameterivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetRenderbufferParameterivOES: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIivOES: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIuivEXT: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterIuivOES: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameterfv: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetSamplerParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSemaphoreParameterui64vEXT: ?fn (GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetSeparableFilter: ?fn (GLenum, GLenum, GLenum, ?*c_void, ?*c_void, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetSeparableFilterEXT: ?fn (GLenum, GLenum, GLenum, ?*c_void, ?*c_void, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetShaderInfoLog: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetShaderPrecisionFormat: ?fn (GLenum, GLenum, [*c]GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetShaderSource: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetShaderSourceARB: ?fn (GLhandleARB, GLsizei, [*c]GLsizei, [*c]GLcharARB) callconv(.C) void;
pub extern var epoxy_glGetShaderiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetShadingRateImagePaletteNV: ?fn (GLuint, GLuint, [*c]GLenum) callconv(.C) void;
pub extern var epoxy_glGetShadingRateSampleLocationivNV: ?fn (GLenum, GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSharpenTexFuncSGIS: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetStageIndexNV: ?fn (GLenum) callconv(.C) GLushort;
pub extern var epoxy_glGetString: ?fn (GLenum) callconv(.C) [*c]const GLubyte;
pub extern var epoxy_glGetStringi: ?fn (GLenum, GLuint) callconv(.C) [*c]const GLubyte;
pub extern var epoxy_glGetSubroutineIndex: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetSubroutineUniformLocation: ?fn (GLuint, GLenum, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetSynciv: ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetSyncivAPPLE: ?fn (GLsync, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexBumpParameterfvATI: ?fn (GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexBumpParameterivATI: ?fn (GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexEnvfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexEnviv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexEnvxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexEnvxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexFilterFuncSGIS: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexGendv: ?fn (GLenum, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetTexGenfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexGenfvOES: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexGeniv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexGenivOES: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexGenxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexImage: ?fn (GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetTexLevelParameterfv: ?fn (GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexLevelParameteriv: ?fn (GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexLevelParameterxvOES: ?fn (GLenum, GLint, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIiv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIivEXT: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIivOES: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIuiv: ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIuivEXT: ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterIuivOES: ?fn (GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterPointervAPPLE: ?fn (GLenum, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetTexParameterfv: ?fn (GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTexParameteriv: ?fn (GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTexParameterxv: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTexParameterxvOES: ?fn (GLenum, GLenum, [*c]GLfixed) callconv(.C) void;
pub extern var epoxy_glGetTextureHandleARB: ?fn (GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureHandleIMG: ?fn (GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureHandleNV: ?fn (GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureImage: ?fn (GLuint, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetTextureImageEXT: ?fn (GLuint, GLenum, GLint, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameterfv: ?fn (GLuint, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameterfvEXT: ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameteriv: ?fn (GLuint, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureLevelParameterivEXT: ?fn (GLuint, GLenum, GLint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterIuivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterfv: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterfvEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetTextureParameteriv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureParameterivEXT: ?fn (GLuint, GLenum, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTextureSamplerHandleARB: ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureSamplerHandleIMG: ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureSamplerHandleNV: ?fn (GLuint, GLuint) callconv(.C) GLuint64;
pub extern var epoxy_glGetTextureSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetTrackMatrixivNV: ?fn (GLenum, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackVarying: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackVaryingEXT: ?fn (GLuint, GLuint, GLsizei, [*c]GLsizei, [*c]GLsizei, [*c]GLenum, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackVaryingNV: ?fn (GLuint, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbacki64_v: ?fn (GLuint, GLenum, GLuint, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbacki_v: ?fn (GLuint, GLenum, GLuint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTransformFeedbackiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetTranslatedShaderSourceANGLE: ?fn (GLuint, GLsizei, [*c]GLsizei, [*c]GLchar) callconv(.C) void;
pub extern var epoxy_glGetUniformBlockIndex: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLuint;
pub extern var epoxy_glGetUniformBufferSizeEXT: ?fn (GLuint, GLint) callconv(.C) GLint;
pub extern var epoxy_glGetUniformIndices: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUniformLocation: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetUniformLocationARB: ?fn (GLhandleARB, [*c]const GLcharARB) callconv(.C) GLint;
pub extern var epoxy_glGetUniformOffsetEXT: ?fn (GLuint, GLint) callconv(.C) GLintptr;
pub extern var epoxy_glGetUniformSubroutineuiv: ?fn (GLenum, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUniformdv: ?fn (GLuint, GLint, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetUniformfv: ?fn (GLuint, GLint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetUniformfvARB: ?fn (GLhandleARB, GLint, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetUniformi64vARB: ?fn (GLuint, GLint, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetUniformi64vNV: ?fn (GLuint, GLint, [*c]GLint64EXT) callconv(.C) void;
pub extern var epoxy_glGetUniformiv: ?fn (GLuint, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetUniformivARB: ?fn (GLhandleARB, GLint, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetUniformui64vARB: ?fn (GLuint, GLint, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetUniformui64vNV: ?fn (GLuint, GLint, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetUniformuiv: ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUniformuivEXT: ?fn (GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetUnsignedBytei_vEXT: ?fn (GLenum, GLuint, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetUnsignedBytevEXT: ?fn (GLenum, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetVariantArrayObjectfvATI: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVariantArrayObjectivATI: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVariantBooleanvEXT: ?fn (GLuint, GLenum, [*c]GLboolean) callconv(.C) void;
pub extern var epoxy_glGetVariantFloatvEXT: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVariantIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVariantPointervEXT: ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetVaryingLocationNV: ?fn (GLuint, [*c]const GLchar) callconv(.C) GLint;
pub extern var epoxy_glGetVertexArrayIndexed64iv: ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayIndexediv: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayIntegeri_vEXT: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayIntegervEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayPointeri_vEXT: ?fn (GLuint, GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayPointervEXT: ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetVertexArrayiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribArrayObjectfvATI: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribArrayObjectivATI: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIivEXT: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIuiv: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribIuivEXT: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLdv: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLdvEXT: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLi64vNV: ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLui64vARB: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribLui64vNV: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribPointerv: ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribPointervARB: ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribPointervNV: ?fn (GLuint, GLenum, [*c]?*c_void) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribdv: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribdvARB: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribdvNV: ?fn (GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribfv: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribfvARB: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribfvNV: ?fn (GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribiv: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribivARB: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVertexAttribivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureStreamdvNV: ?fn (GLuint, GLuint, GLenum, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureStreamfvNV: ?fn (GLuint, GLuint, GLenum, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureStreamivNV: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoCaptureivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoi64vNV: ?fn (GLuint, GLenum, [*c]GLint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVideoivNV: ?fn (GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetVideoui64vNV: ?fn (GLuint, GLenum, [*c]GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glGetVideouivNV: ?fn (GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetVkProcAddrNV: ?fn ([*c]const GLchar) callconv(.C) GLVULKANPROCNV;
pub extern var epoxy_glGetnColorTable: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnColorTableARB: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnCompressedTexImage: ?fn (GLenum, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnCompressedTexImageARB: ?fn (GLenum, GLint, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnConvolutionFilter: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnConvolutionFilterARB: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnHistogram: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnHistogramARB: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnMapdv: ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnMapdvARB: ?fn (GLenum, GLenum, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnMapfv: ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnMapfvARB: ?fn (GLenum, GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnMapiv: ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnMapivARB: ?fn (GLenum, GLenum, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnMinmax: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnMinmaxARB: ?fn (GLenum, GLboolean, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapfv: ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapfvARB: ?fn (GLenum, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapuiv: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapuivARB: ?fn (GLenum, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapusv: ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub extern var epoxy_glGetnPixelMapusvARB: ?fn (GLenum, GLsizei, [*c]GLushort) callconv(.C) void;
pub extern var epoxy_glGetnPolygonStipple: ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetnPolygonStippleARB: ?fn (GLsizei, [*c]GLubyte) callconv(.C) void;
pub extern var epoxy_glGetnSeparableFilter: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnSeparableFilterARB: ?fn (GLenum, GLenum, GLenum, GLsizei, ?*c_void, GLsizei, ?*c_void, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnTexImage: ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnTexImageARB: ?fn (GLenum, GLint, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glGetnUniformdv: ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnUniformdvARB: ?fn (GLuint, GLint, GLsizei, [*c]GLdouble) callconv(.C) void;
pub extern var epoxy_glGetnUniformfv: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformfvARB: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformfvEXT: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformfvKHR: ?fn (GLuint, GLint, GLsizei, [*c]GLfloat) callconv(.C) void;
pub extern var epoxy_glGetnUniformi64vARB: ?fn (GLuint, GLint, GLsizei, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glGetnUniformiv: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformivARB: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformivEXT: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformivKHR: ?fn (GLuint, GLint, GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glGetnUniformui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glGetnUniformuiv: ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnUniformuivARB: ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGetnUniformuivKHR: ?fn (GLuint, GLint, GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorbSUN: ?fn (GLbyte) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactordSUN: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorfSUN: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactoriSUN: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorsSUN: ?fn (GLshort) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorubSUN: ?fn (GLubyte) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactoruiSUN: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glGlobalAlphaFactorusSUN: ?fn (GLushort) callconv(.C) void;
pub extern var epoxy_glHint: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glHintPGI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glHistogram: ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glHistogramEXT: ?fn (GLenum, GLsizei, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glIglooInterfaceSGIX: ?fn (GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glImageTransformParameterfHP: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glImageTransformParameterfvHP: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glImageTransformParameteriHP: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glImageTransformParameterivHP: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glImportMemoryFdEXT: ?fn (GLuint, GLuint64, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glImportMemoryWin32HandleEXT: ?fn (GLuint, GLuint64, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glImportMemoryWin32NameEXT: ?fn (GLuint, GLuint64, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glImportSemaphoreFdEXT: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glImportSemaphoreWin32HandleEXT: ?fn (GLuint, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glImportSemaphoreWin32NameEXT: ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glImportSyncEXT: ?fn (GLenum, GLintptr, GLbitfield) callconv(.C) GLsync;
pub extern var epoxy_glIndexFormatNV: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glIndexFuncEXT: ?fn (GLenum, GLclampf) callconv(.C) void;
pub extern var epoxy_glIndexMask: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glIndexMaterialEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glIndexPointer: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glIndexPointerEXT: ?fn (GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glIndexPointerListIBM: ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glIndexd: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glIndexdv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glIndexf: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glIndexfv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glIndexi: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glIndexiv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glIndexs: ?fn (GLshort) callconv(.C) void;
pub extern var epoxy_glIndexsv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glIndexub: ?fn (GLubyte) callconv(.C) void;
pub extern var epoxy_glIndexubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glIndexxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glIndexxvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glInitNames: ?fn () callconv(.C) void;
pub extern var epoxy_glInsertComponentEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glInsertEventMarkerEXT: ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glInstrumentsBufferSGIX: ?fn (GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glInterleavedArrays: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glInterpolatePathsNV: ?fn (GLuint, GLuint, GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glInvalidateBufferData: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glInvalidateBufferSubData: ?fn (GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glInvalidateFramebuffer: ?fn (GLenum, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glInvalidateNamedFramebufferData: ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glInvalidateNamedFramebufferSubData: ?fn (GLuint, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glInvalidateSubFramebuffer: ?fn (GLenum, GLsizei, [*c]const GLenum, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glInvalidateTexImage: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glInvalidateTexSubImage: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glIsAsyncMarkerSGIX: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsBuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsBufferARB: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsBufferResidentNV: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glIsCommandListNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnabled: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnabledIndexedEXT: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnabledi: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnablediEXT: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnablediNV: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsEnablediOES: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFenceAPPLE: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFenceNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFramebuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFramebufferEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsFramebufferOES: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsImageHandleResidentARB: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsImageHandleResidentNV: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsList: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsMemoryObjectEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsNameAMD: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsNamedBufferResidentNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsNamedStringARB: ?fn (GLint, [*c]const GLchar) callconv(.C) GLboolean;
pub extern var epoxy_glIsObjectBufferATI: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsOcclusionQueryNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsPathNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsPointInFillPathNV: ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub extern var epoxy_glIsPointInStrokePathNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgram: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramARB: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramPipeline: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsProgramPipelineEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsQuery: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsQueryARB: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsQueryEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsRenderbuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsRenderbufferEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsRenderbufferOES: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsSampler: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsSemaphoreEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsShader: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsStateNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsSync: ?fn (GLsync) callconv(.C) GLboolean;
pub extern var epoxy_glIsSyncAPPLE: ?fn (GLsync) callconv(.C) GLboolean;
pub extern var epoxy_glIsTexture: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsTextureEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsTextureHandleResidentARB: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsTextureHandleResidentNV: ?fn (GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glIsTransformFeedback: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsTransformFeedbackNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVariantEnabledEXT: ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexArray: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexArrayAPPLE: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexArrayOES: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glIsVertexAttribEnabledAPPLE: ?fn (GLuint, GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glLGPUCopyImageSubDataNVX: ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glLGPUInterlockNVX: ?fn () callconv(.C) void;
pub extern var epoxy_glLGPUNamedBufferSubDataNVX: ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glLabelObjectEXT: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glLightEnviSGIX: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glLightModelf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glLightModelfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLightModeli: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glLightModeliv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glLightModelx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightModelxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightModelxv: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLightModelxvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLightf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glLightfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLighti: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glLightiv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glLightx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glLightxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLightxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLineStipple: ?fn (GLint, GLushort) callconv(.C) void;
pub extern var epoxy_glLineWidth: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glLineWidthx: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glLineWidthxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glLinkProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glLinkProgramARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glListBase: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glListDrawCommandsStatesClientNV: ?fn (GLuint, GLuint, [*c]?*const c_void, [*c]const GLsizei, [*c]const GLuint, [*c]const GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glListParameterfSGIX: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glListParameterfvSGIX: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glListParameteriSGIX: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glListParameterivSGIX: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glLoadIdentity: ?fn () callconv(.C) void;
pub extern var epoxy_glLoadIdentityDeformationMapSGIX: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glLoadMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glLoadMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLoadMatrixx: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLoadMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLoadName: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glLoadPaletteFromModelViewMatrixOES: ?fn () callconv(.C) void;
pub extern var epoxy_glLoadProgramNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixdARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixfARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glLoadTransposeMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glLockArraysEXT: ?fn (GLint, GLsizei) callconv(.C) void;
pub extern var epoxy_glLogicOp: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMakeBufferNonResidentNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMakeBufferResidentNV: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleNonResidentARB: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleNonResidentNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleResidentARB: ?fn (GLuint64, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeImageHandleResidentNV: ?fn (GLuint64, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeNamedBufferNonResidentNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glMakeNamedBufferResidentNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleNonResidentARB: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleNonResidentNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleResidentARB: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMakeTextureHandleResidentNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glMap1d: ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMap1f: ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMap1xOES: ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub extern var epoxy_glMap2d: ?fn (GLenum, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMap2f: ?fn (GLenum, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMap2xOES: ?fn (GLenum, GLfixed, GLfixed, GLint, GLint, GLfixed, GLfixed, GLint, GLint, GLfixed) callconv(.C) void;
pub extern var epoxy_glMapBuffer: ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub extern var epoxy_glMapBufferARB: ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub extern var epoxy_glMapBufferOES: ?fn (GLenum, GLenum) callconv(.C) ?*c_void;
pub extern var epoxy_glMapBufferRange: ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub extern var epoxy_glMapBufferRangeEXT: ?fn (GLenum, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub extern var epoxy_glMapControlPointsNV: ?fn (GLenum, GLuint, GLenum, GLsizei, GLsizei, GLint, GLint, GLboolean, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMapGrid1d: ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMapGrid1f: ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMapGrid1xOES: ?fn (GLint, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMapGrid2d: ?fn (GLint, GLdouble, GLdouble, GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMapGrid2f: ?fn (GLint, GLfloat, GLfloat, GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMapGrid2xOES: ?fn (GLint, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMapNamedBuffer: ?fn (GLuint, GLenum) callconv(.C) ?*c_void;
pub extern var epoxy_glMapNamedBufferEXT: ?fn (GLuint, GLenum) callconv(.C) ?*c_void;
pub extern var epoxy_glMapNamedBufferRange: ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub extern var epoxy_glMapNamedBufferRangeEXT: ?fn (GLuint, GLintptr, GLsizeiptr, GLbitfield) callconv(.C) ?*c_void;
pub extern var epoxy_glMapObjectBufferATI: ?fn (GLuint) callconv(.C) ?*c_void;
pub extern var epoxy_glMapParameterfvNV: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMapParameterivNV: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMapTexture2DINTEL: ?fn (GLuint, GLint, GLbitfield, [*c]GLint, [*c]GLenum) callconv(.C) ?*c_void;
pub extern var epoxy_glMapVertexAttrib1dAPPLE: ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMapVertexAttrib1fAPPLE: ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMapVertexAttrib2dAPPLE: ?fn (GLuint, GLuint, GLdouble, GLdouble, GLint, GLint, GLdouble, GLdouble, GLint, GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMapVertexAttrib2fAPPLE: ?fn (GLuint, GLuint, GLfloat, GLfloat, GLint, GLint, GLfloat, GLfloat, GLint, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMaterialf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMaterialfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMateriali: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMaterialiv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMaterialx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glMaterialxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glMaterialxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMaterialxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMatrixFrustumEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixIndexPointerARB: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMatrixIndexPointerOES: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMatrixIndexubvARB: ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glMatrixIndexuivARB: ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMatrixIndexusvARB: ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glMatrixLoad3x2fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoad3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoadIdentityEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixLoadTranspose3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoadTransposedEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixLoadTransposefEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixLoaddEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixLoadfEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMode: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixMult3x2fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMult3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMultTranspose3x3fNV: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMultTransposedEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixMultTransposefEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixMultdEXT: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixMultfEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixOrthoEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixPopEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixPushEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glMatrixRotatedEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixRotatefEXT: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixScaledEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixScalefEXT: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMatrixTranslatedEXT: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMatrixTranslatefEXT: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMaxShaderCompilerThreadsARB: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glMaxShaderCompilerThreadsKHR: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glMemoryBarrier: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glMemoryBarrierByRegion: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glMemoryBarrierEXT: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glMemoryObjectParameterivEXT: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMinSampleShading: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glMinSampleShadingARB: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glMinSampleShadingOES: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glMinmax: ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glMinmaxEXT: ?fn (GLenum, GLenum, GLboolean) callconv(.C) void;
pub extern var epoxy_glMultMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultMatrixx: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixd: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixdARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixf: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixfARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultTransposeMatrixxOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiDrawArrays: ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysEXT: ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirect: ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectAMD: ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectBindlessCountNV: ?fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectBindlessNV: ?fn (GLenum, ?*const c_void, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectCount: ?fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectCountARB: ?fn (GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawArraysIndirectEXT: ?fn (GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementArrayAPPLE: ?fn (GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElements: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsBaseVertex: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsBaseVertexEXT: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsEXT: ?fn (GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirect: ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectAMD: ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectBindlessCountNV: ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectBindlessNV: ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectCount: ?fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectCountARB: ?fn (GLenum, GLenum, ?*const c_void, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawElementsIndirectEXT: ?fn (GLenum, GLenum, ?*const c_void, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawMeshTasksIndirectCountNV: ?fn (GLintptr, GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawMeshTasksIndirectNV: ?fn (GLintptr, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiDrawRangeElementArrayAPPLE: ?fn (GLenum, GLuint, GLuint, [*c]const GLint, [*c]const GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMultiModeDrawArraysIBM: ?fn ([*c]const GLenum, [*c]const GLint, [*c]const GLsizei, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiModeDrawElementsIBM: ?fn ([*c]const GLenum, [*c]const GLsizei, GLenum, [*c]const ?*const c_void, GLsizei, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexBufferEXT: ?fn (GLenum, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1bOES: ?fn (GLenum, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1d: ?fn (GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1dARB: ?fn (GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1f: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1fARB: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1hNV: ?fn (GLenum, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1i: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1iARB: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1s: ?fn (GLenum, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1sARB: ?fn (GLenum, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1xOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord1xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2bOES: ?fn (GLenum, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2d: ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2dARB: ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2f: ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2fARB: ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2hNV: ?fn (GLenum, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2i: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2iARB: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2s: ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2sARB: ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2xOES: ?fn (GLenum, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord2xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3bOES: ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3d: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3dARB: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3f: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3fARB: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3hNV: ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3i: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3iARB: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3s: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3sARB: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3xOES: ?fn (GLenum, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord3xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4bOES: ?fn (GLenum, GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4bvOES: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4d: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4dARB: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4dv: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4dvARB: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4f: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4fARB: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4fv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4fvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4hNV: ?fn (GLenum, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4hvNV: ?fn (GLenum, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4i: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4iARB: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4iv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4ivARB: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4s: ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4sARB: ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4sv: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4svARB: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4x: ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4xOES: ?fn (GLenum, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoord4xvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP1ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP1uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP2ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP2uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP3ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP3uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP4ui: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordP4uiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexCoordPointerEXT: ?fn (GLenum, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMultiTexEnvfEXT: ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexEnvfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexEnviEXT: ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexEnvivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexGendEXT: ?fn (GLenum, GLenum, GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexGendvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glMultiTexGenfEXT: ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexGenfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexGeniEXT: ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexGenivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMultiTexImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMultiTexImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterIivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterIuivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterfEXT: ?fn (GLenum, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterfvEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMultiTexParameteriEXT: ?fn (GLenum, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexParameterivEXT: ?fn (GLenum, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMultiTexRenderbufferEXT: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glMultiTexSubImage1DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMultiTexSubImage2DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMultiTexSubImage3DEXT: ?fn (GLenum, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMulticastBarrierNV: ?fn () callconv(.C) void;
pub extern var epoxy_glMulticastBlitFramebufferNV: ?fn (GLuint, GLuint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLint, GLbitfield, GLenum) callconv(.C) void;
pub extern var epoxy_glMulticastBufferSubDataNV: ?fn (GLbitfield, GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glMulticastCopyBufferSubDataNV: ?fn (GLuint, GLbitfield, GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glMulticastCopyImageSubDataNV: ?fn (GLuint, GLbitfield, GLuint, GLenum, GLint, GLint, GLint, GLint, GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glMulticastFramebufferSampleLocationsfvNV: ?fn (GLuint, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjecti64vNV: ?fn (GLuint, GLuint, GLenum, [*c]GLint64) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjectivNV: ?fn (GLuint, GLuint, GLenum, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjectui64vNV: ?fn (GLuint, GLuint, GLenum, [*c]GLuint64) callconv(.C) void;
pub extern var epoxy_glMulticastGetQueryObjectuivNV: ?fn (GLuint, GLuint, GLenum, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glMulticastScissorArrayvNVX: ?fn (GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glMulticastViewportArrayvNVX: ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glMulticastViewportPositionWScaleNVX: ?fn (GLuint, GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glMulticastWaitSyncNV: ?fn (GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferAttachMemoryNV: ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glNamedBufferData: ?fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedBufferDataEXT: ?fn (GLuint, GLsizeiptr, ?*const c_void, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedBufferPageCommitmentARB: ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub extern var epoxy_glNamedBufferPageCommitmentEXT: ?fn (GLuint, GLintptr, GLsizeiptr, GLboolean) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorage: ?fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorageEXT: ?fn (GLuint, GLsizeiptr, ?*const c_void, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorageExternalEXT: ?fn (GLuint, GLintptr, GLsizeiptr, GLeglClientBufferEXT, GLbitfield) callconv(.C) void;
pub extern var epoxy_glNamedBufferStorageMemEXT: ?fn (GLuint, GLsizeiptr, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glNamedBufferSubData: ?fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glNamedBufferSubDataEXT: ?fn (GLuint, GLintptr, GLsizeiptr, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glNamedCopyBufferSubDataEXT: ?fn (GLuint, GLuint, GLintptr, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferDrawBuffer: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferDrawBuffers: ?fn (GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferParameteriEXT: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferReadBuffer: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferRenderbuffer: ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferRenderbufferEXT: ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferSampleLocationsfvARB: ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferSampleLocationsfvNV: ?fn (GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferSamplePositionsfvAMD: ?fn (GLuint, GLuint, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture: ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture1DEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture2DEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTexture3DEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureEXT: ?fn (GLuint, GLenum, GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureFaceEXT: ?fn (GLuint, GLenum, GLuint, GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureLayer: ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedFramebufferTextureLayerEXT: ?fn (GLuint, GLenum, GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4dEXT: ?fn (GLuint, GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4dvEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4fEXT: ?fn (GLuint, GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameter4fvEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4iEXT: ?fn (GLuint, GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4ivEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4uiEXT: ?fn (GLuint, GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameterI4uivEXT: ?fn (GLuint, GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParameters4fvEXT: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParametersI4ivEXT: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNamedProgramLocalParametersI4uivEXT: ?fn (GLuint, GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glNamedProgramStringEXT: ?fn (GLuint, GLenum, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorage: ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageEXT: ?fn (GLuint, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisample: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisampleAdvancedAMD: ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisampleCoverageEXT: ?fn (GLuint, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedRenderbufferStorageMultisampleEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glNamedStringARB: ?fn (GLenum, GLint, [*c]const GLchar, GLint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glNewList: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glNewObjectBufferATI: ?fn (GLsizei, ?*const c_void, GLenum) callconv(.C) GLuint;
pub extern var epoxy_glNormal3b: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glNormal3bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glNormal3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glNormal3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glNormal3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNormal3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glNormal3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glNormal3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNormal3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNormal3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glNormal3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glNormal3x: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glNormal3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glNormal3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glNormalFormatNV: ?fn (GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glNormalP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glNormalP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glNormalPointer: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glNormalPointerEXT: ?fn (GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glNormalPointerListIBM: ?fn (GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glNormalPointervINTEL: ?fn (GLenum, [*c]?*const c_void) callconv(.C) void;
pub extern var epoxy_glNormalStream3bATI: ?fn (GLenum, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glNormalStream3bvATI: ?fn (GLenum, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glNormalStream3dATI: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glNormalStream3dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glNormalStream3fATI: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glNormalStream3fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glNormalStream3iATI: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glNormalStream3ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glNormalStream3sATI: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glNormalStream3svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glObjectLabel: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectLabelKHR: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectPtrLabel: ?fn (?*const c_void, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectPtrLabelKHR: ?fn (?*const c_void, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glObjectPurgeableAPPLE: ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glObjectUnpurgeableAPPLE: ?fn (GLenum, GLuint, GLenum) callconv(.C) GLenum;
pub extern var epoxy_glOrtho: ?fn (GLdouble, GLdouble, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glOrthof: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glOrthofOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glOrthox: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glOrthoxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPNTrianglesfATI: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPNTrianglesiATI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPassTexCoordATI: ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glPassThrough: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glPassThroughxOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glPatchParameterfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPatchParameteri: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPatchParameteriEXT: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPatchParameteriOES: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPathColorGenNV: ?fn (GLenum, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPathCommandsNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glPathCoordsNV: ?fn (GLuint, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glPathCoverDepthFuncNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPathDashArrayNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPathFogGenNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPathGlyphIndexArrayNV: ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub extern var epoxy_glPathGlyphIndexRangeNV: ?fn (GLenum, ?*const c_void, GLbitfield, GLuint, GLfloat, GLuint) callconv(.C) GLenum;
pub extern var epoxy_glPathGlyphRangeNV: ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLuint, GLsizei, GLenum, GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathGlyphsNV: ?fn (GLuint, GLenum, ?*const c_void, GLbitfield, GLsizei, GLenum, ?*const c_void, GLenum, GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathMemoryGlyphIndexArrayNV: ?fn (GLuint, GLenum, GLsizeiptr, ?*const c_void, GLsizei, GLuint, GLsizei, GLuint, GLfloat) callconv(.C) GLenum;
pub extern var epoxy_glPathParameterfNV: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathParameterfvNV: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPathParameteriNV: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPathParameterivNV: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPathStencilDepthOffsetNV: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPathStencilFuncNV: ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glPathStringNV: ?fn (GLuint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glPathSubCommandsNV: ?fn (GLuint, GLsizei, GLsizei, GLsizei, [*c]const GLubyte, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glPathSubCoordsNV: ?fn (GLuint, GLsizei, GLsizei, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glPathTexGenNV: ?fn (GLenum, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPauseTransformFeedback: ?fn () callconv(.C) void;
pub extern var epoxy_glPauseTransformFeedbackNV: ?fn () callconv(.C) void;
pub extern var epoxy_glPixelDataRangeNV: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glPixelMapfv: ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelMapuiv: ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glPixelMapusv: ?fn (GLenum, GLsizei, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glPixelMapx: ?fn (GLenum, GLint, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glPixelStoref: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelStorei: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelStorex: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameterfSGIS: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameterfvSGIS: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameteriSGIS: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelTexGenParameterivSGIS: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPixelTexGenSGIX: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPixelTransferf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTransferi: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelTransferxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameterfEXT: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameterfvEXT: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameteriEXT: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPixelTransformParameterivEXT: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPixelZoom: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPixelZoomxOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPointAlongPathNV: ?fn (GLuint, GLsizei, GLsizei, GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat, [*c]GLfloat) callconv(.C) GLboolean;
pub extern var epoxy_glPointParameterf: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfARB: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfEXT: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfSGIS: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfv: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfvARB: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfvEXT: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameterfvSGIS: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPointParameteri: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPointParameteriNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glPointParameteriv: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPointParameterivNV: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glPointParameterx: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPointParameterxOES: ?fn (GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glPointParameterxv: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glPointParameterxvOES: ?fn (GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glPointSize: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glPointSizePointerOES: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glPointSizex: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glPointSizexOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glPollAsyncSGIX: ?fn ([*c]GLuint) callconv(.C) GLint;
pub extern var epoxy_glPollInstrumentsSGIX: ?fn ([*c]GLint) callconv(.C) GLint;
pub extern var epoxy_glPolygonMode: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glPolygonModeNV: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glPolygonOffset: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetClamp: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetClampEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetEXT: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetx: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPolygonOffsetxOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glPolygonStipple: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glPopAttrib: ?fn () callconv(.C) void;
pub extern var epoxy_glPopClientAttrib: ?fn () callconv(.C) void;
pub extern var epoxy_glPopDebugGroup: ?fn () callconv(.C) void;
pub extern var epoxy_glPopDebugGroupKHR: ?fn () callconv(.C) void;
pub extern var epoxy_glPopGroupMarkerEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glPopMatrix: ?fn () callconv(.C) void;
pub extern var epoxy_glPopName: ?fn () callconv(.C) void;
pub extern var epoxy_glPresentFrameDualFillNV: ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glPresentFrameKeyedNV: ?fn (GLuint, GLuint64EXT, GLuint, GLuint, GLenum, GLenum, GLuint, GLuint, GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBox: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBoxARB: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBoxEXT: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveBoundingBoxOES: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glPrimitiveRestartIndex: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glPrimitiveRestartIndexNV: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glPrimitiveRestartNV: ?fn () callconv(.C) void;
pub extern var epoxy_glPrioritizeTextures: ?fn (GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glPrioritizeTexturesEXT: ?fn (GLsizei, [*c]const GLuint, [*c]const GLclampf) callconv(.C) void;
pub extern var epoxy_glPrioritizeTexturesxOES: ?fn (GLsizei, [*c]const GLuint, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glProgramBinary: ?fn (GLuint, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glProgramBinaryOES: ?fn (GLuint, GLenum, ?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glProgramBufferParametersIivNV: ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramBufferParametersIuivNV: ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramBufferParametersfvNV: ?fn (GLenum, GLuint, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4dARB: ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4dvARB: ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4fARB: ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameter4fvARB: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4iNV: ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4ivNV: ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4uiNV: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameterI4uivNV: ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParameters4fvEXT: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramEnvParametersI4ivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramEnvParametersI4uivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4dARB: ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4dvARB: ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4fARB: ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameter4fvARB: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4iNV: ?fn (GLenum, GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4ivNV: ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4uiNV: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameterI4uivNV: ?fn (GLenum, GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParameters4fvEXT: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramLocalParametersI4ivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramLocalParametersI4uivNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4dNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4dvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4fNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramNamedParameter4fvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramParameter4dNV: ?fn (GLenum, GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramParameter4dvNV: ?fn (GLenum, GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramParameter4fNV: ?fn (GLenum, GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramParameter4fvNV: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProgramParameteriARB: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProgramParameteriEXT: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProgramParameters4dvNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramParameters4fvNV: ?fn (GLenum, GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramPathFragmentInputGenNV: ?fn (GLuint, GLint, GLenum, GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramStringARB: ?fn (GLenum, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glProgramSubroutineParametersuivNV: ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1d: ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1dEXT: ?fn (GLuint, GLint, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform1f: ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1fEXT: ?fn (GLuint, GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64ARB: ?fn (GLuint, GLint, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64NV: ?fn (GLuint, GLint, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1iEXT: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64ARB: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64NV: ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform1ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform1uiEXT: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform1uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2d: ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2dEXT: ?fn (GLuint, GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform2f: ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2fEXT: ?fn (GLuint, GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64ARB: ?fn (GLuint, GLint, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64NV: ?fn (GLuint, GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2iEXT: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui: ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64ARB: ?fn (GLuint, GLint, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64NV: ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform2ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform2uiEXT: ?fn (GLuint, GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform2uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3d: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3dEXT: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform3f: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3fEXT: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64ARB: ?fn (GLuint, GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64NV: ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3iEXT: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui: ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64ARB: ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64NV: ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform3ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform3uiEXT: ?fn (GLuint, GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform3uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4d: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4dEXT: ?fn (GLuint, GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4dv: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4dvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniform4f: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4fEXT: ?fn (GLuint, GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4fv: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4fvEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64ARB: ?fn (GLuint, GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64NV: ?fn (GLuint, GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4i64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4iEXT: ?fn (GLuint, GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4iv: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui: ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64ARB: ?fn (GLuint, GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64NV: ?fn (GLuint, GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniform4ui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniform4uiEXT: ?fn (GLuint, GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4uiv: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniform4uivEXT: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64ARB: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64IMG: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64NV: ?fn (GLuint, GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64vARB: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64vIMG: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformHandleui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x3fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix2x4fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x2fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix3x4fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x2fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3dv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3dvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3fv: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformMatrix4x3fvEXT: ?fn (GLuint, GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glProgramUniformui64NV: ?fn (GLuint, GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramUniformui64vNV: ?fn (GLuint, GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glProgramVertexLimitNV: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glProvokingVertex: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glProvokingVertexEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glPushAttrib: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glPushClientAttrib: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glPushClientAttribDefaultEXT: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glPushDebugGroup: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glPushDebugGroupKHR: ?fn (GLenum, GLuint, GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glPushGroupMarkerEXT: ?fn (GLsizei, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glPushMatrix: ?fn () callconv(.C) void;
pub extern var epoxy_glPushName: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glQueryCounter: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glQueryCounterEXT: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glQueryMatrixxOES: ?fn ([*c]GLfixed, [*c]GLint) callconv(.C) GLbitfield;
pub extern var epoxy_glQueryObjectParameteruiAMD: ?fn (GLenum, GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glQueryResourceNV: ?fn (GLenum, GLint, GLuint, [*c]GLint) callconv(.C) GLint;
pub extern var epoxy_glQueryResourceTagNV: ?fn (GLint, [*c]const GLchar) callconv(.C) void;
pub extern var epoxy_glRasterPos2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos2xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRasterPos4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRasterPos4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRasterPos4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRasterPos4xOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterPos4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glRasterSamplesEXT: ?fn (GLuint, GLboolean) callconv(.C) void;
pub extern var epoxy_glReadBuffer: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glReadBufferIndexedEXT: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glReadBufferNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glReadInstrumentsSGIX: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glReadPixels: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*c_void) callconv(.C) void;
pub extern var epoxy_glReadnPixels: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glReadnPixelsARB: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glReadnPixelsEXT: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glReadnPixelsKHR: ?fn (GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glRectd: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRectdv: ?fn ([*c]const GLdouble, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glRectf: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRectfv: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glRecti: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glRectiv: ?fn ([*c]const GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glRects: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glRectsv: ?fn ([*c]const GLshort, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glRectxOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRectxvOES: ?fn ([*c]const GLfixed, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glReferencePlaneSGIX: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glReleaseKeyedMutexWin32EXT: ?fn (GLuint, GLuint64) callconv(.C) GLboolean;
pub extern var epoxy_glReleaseShaderCompiler: ?fn () callconv(.C) void;
pub extern var epoxy_glRenderGpuMaskNV: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glRenderMode: ?fn (GLenum) callconv(.C) GLint;
pub extern var epoxy_glRenderbufferStorage: ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageEXT: ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleANGLE: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleAPPLE: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleAdvancedAMD: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleCoverageNV: ?fn (GLenum, GLsizei, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleIMG: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageMultisampleNV: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glRenderbufferStorageOES: ?fn (GLenum, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glReplacementCodePointerSUN: ?fn (GLenum, GLsizei, [*c]?*const c_void) callconv(.C) void;
pub extern var epoxy_glReplacementCodeubSUN: ?fn (GLubyte) callconv(.C) void;
pub extern var epoxy_glReplacementCodeubvSUN: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4fNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4ubVertex3fSUN: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiColor4ubVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiSUN: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiTexCoord2fVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiVertex3fSUN: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuiVertex3fvSUN: ?fn ([*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glReplacementCodeuivSUN: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glReplacementCodeusSUN: ?fn (GLushort) callconv(.C) void;
pub extern var epoxy_glReplacementCodeusvSUN: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glRequestResidentProgramsNV: ?fn (GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glResetHistogram: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResetHistogramEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResetMemoryObjectParameterNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glResetMinmax: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResetMinmaxEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glResizeBuffersMESA: ?fn () callconv(.C) void;
pub extern var epoxy_glResolveDepthValuesNV: ?fn () callconv(.C) void;
pub extern var epoxy_glResolveMultisampleFramebufferAPPLE: ?fn () callconv(.C) void;
pub extern var epoxy_glResumeTransformFeedback: ?fn () callconv(.C) void;
pub extern var epoxy_glResumeTransformFeedbackNV: ?fn () callconv(.C) void;
pub extern var epoxy_glRotated: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glRotatef: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glRotatex: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glRotatexOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glSampleCoverage: ?fn (GLfloat, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleCoverageARB: ?fn (GLfloat, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleCoveragex: ?fn (GLclampx, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleCoveragexOES: ?fn (GLclampx, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleMapATI: ?fn (GLuint, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glSampleMaskEXT: ?fn (GLclampf, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleMaskIndexedNV: ?fn (GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glSampleMaskSGIS: ?fn (GLclampf, GLboolean) callconv(.C) void;
pub extern var epoxy_glSampleMaski: ?fn (GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glSamplePatternEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glSamplePatternSGIS: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIiv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIivEXT: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIivOES: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIuiv: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIuivEXT: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterIuivOES: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSamplerParameterf: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glSamplerParameterfv: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSamplerParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glSamplerParameteriv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScaled: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glScalef: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glScalex: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glScalexOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glScissor: ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorArrayv: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorArrayvNV: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorArrayvOES: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorExclusiveArrayvNV: ?fn (GLuint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorExclusiveNV: ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexed: ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexedNV: ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexedOES: ?fn (GLuint, GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glScissorIndexedv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorIndexedvNV: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glScissorIndexedvOES: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3b: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3bEXT: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3bv: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3bvEXT: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3dEXT: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3dvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3fEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3fvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3iEXT: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ivEXT: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3sEXT: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3svEXT: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ub: ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ubEXT: ?fn (GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ubv: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ubvEXT: ?fn ([*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3ui: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3uiEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3uiv: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3uivEXT: ?fn ([*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3us: ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3usEXT: ?fn (GLushort, GLushort, GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3usv: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColor3usvEXT: ?fn ([*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glSecondaryColorFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glSecondaryColorP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColorP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSecondaryColorPointer: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glSecondaryColorPointerEXT: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glSecondaryColorPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glSelectBuffer: ?fn (GLsizei, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glSelectPerfMonitorCountersAMD: ?fn (GLuint, GLboolean, GLuint, GLint, [*c]GLuint) callconv(.C) void;
pub extern var epoxy_glSemaphoreParameterui64vEXT: ?fn (GLuint, GLenum, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glSeparableFilter2D: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glSeparableFilter2DEXT: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glSetFenceAPPLE: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glSetFenceNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glSetFragmentShaderConstantATI: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSetInvariantEXT: ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glSetLocalConstantEXT: ?fn (GLuint, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glSetMultisamplefvAMD: ?fn (GLenum, GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glShadeModel: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glShaderBinary: ?fn (GLsizei, [*c]const GLuint, GLenum, ?*const c_void, GLsizei) callconv(.C) void;
pub extern var epoxy_glShaderOp1EXT: ?fn (GLenum, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShaderOp2EXT: ?fn (GLenum, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShaderOp3EXT: ?fn (GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShaderSource: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glShaderSourceARB: ?fn (GLhandleARB, GLsizei, [*c][*c]const GLcharARB, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glShaderStorageBlockBinding: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glShadingRateImageBarrierNV: ?fn (GLboolean) callconv(.C) void;
pub extern var epoxy_glShadingRateImagePaletteNV: ?fn (GLuint, GLuint, GLsizei, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glShadingRateSampleOrderCustomNV: ?fn (GLenum, GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glShadingRateSampleOrderNV: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glSharpenTexFuncSGIS: ?fn (GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSignalSemaphoreEXT: ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glSignalSemaphoreui64NVX: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glSignalVkFenceNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glSignalVkSemaphoreNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glSpecializeShader: ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSpecializeShaderARB: ?fn (GLuint, [*c]const GLchar, GLuint, [*c]const GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glSpriteParameterfSGIX: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glSpriteParameterfvSGIX: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glSpriteParameteriSGIX: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glSpriteParameterivSGIX: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glStartInstrumentsSGIX: ?fn () callconv(.C) void;
pub extern var epoxy_glStartTilingQCOM: ?fn (GLuint, GLuint, GLuint, GLuint, GLbitfield) callconv(.C) void;
pub extern var epoxy_glStateCaptureNV: ?fn (GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilClearTagEXT: ?fn (GLsizei, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFillPathInstancedNV: ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilFillPathNV: ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFunc: ?fn (GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFuncSeparate: ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilFuncSeparateATI: ?fn (GLenum, GLenum, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilMask: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glStencilMaskSeparate: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilOp: ?fn (GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilOpSeparate: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilOpSeparateATI: ?fn (GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilOpValueAMD: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilStrokePathInstancedNV: ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilStrokePathNV: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverFillPathInstancedNV: ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLenum, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverFillPathNV: ?fn (GLuint, GLenum, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverStrokePathInstancedNV: ?fn (GLsizei, GLenum, ?*const c_void, GLuint, GLint, GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glStencilThenCoverStrokePathNV: ?fn (GLuint, GLint, GLuint, GLenum) callconv(.C) void;
pub extern var epoxy_glStopInstrumentsSGIX: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glStringMarkerGREMEDY: ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glSubpixelPrecisionBiasNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glSwizzleEXT: ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glSyncTextureINTEL: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glTagSampleBufferSGIX: ?fn () callconv(.C) void;
pub extern var epoxy_glTangent3bEXT: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTangent3bvEXT: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTangent3dEXT: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTangent3dvEXT: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTangent3fEXT: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTangent3fvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTangent3iEXT: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTangent3ivEXT: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTangent3sEXT: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTangent3svEXT: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTangentPointerEXT: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTbufferMask3DFX: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glTessellationFactorAMD: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glTessellationModeAMD: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glTestFenceAPPLE: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glTestFenceNV: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glTestObjectAPPLE: ?fn (GLenum, GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glTexAttachMemoryNV: ?fn (GLenum, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexBuffer: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferARB: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferEXT: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferOES: ?fn (GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexBufferRange: ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTexBufferRangeEXT: ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTexBufferRangeOES: ?fn (GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTexBumpParameterfvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexBumpParameterivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord1bOES: ?fn (GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord1bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord1d: ?fn (GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord1dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord1f: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord1fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord1hNV: ?fn (GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord1hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord1i: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord1iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord1s: ?fn (GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord1sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord1xOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord1xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord2bOES: ?fn (GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord2bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4fNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4fNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4ubVertex3fSUN: ?fn (GLfloat, GLfloat, GLubyte, GLubyte, GLubyte, GLubyte, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fColor4ubVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLubyte, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fNormal3fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fNormal3fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fVertex3fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fVertex3fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord2hNV: ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord2hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord2xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord3bOES: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord3bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord3xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord4bOES: ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord4bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glTexCoord4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexCoord4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fColor4fNormal3fVertex4fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fColor4fNormal3fVertex4fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fVertex4fSUN: ?fn (GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fVertex4fvSUN: ?fn ([*c]const GLfloat, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexCoord4hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord4hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glTexCoord4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexCoord4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glTexCoord4xOES: ?fn (GLfixed, GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoord4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexCoordFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexCoordP1ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP1uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP2ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP2uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP4ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordP4uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexCoordPointer: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexCoordPointerEXT: ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexCoordPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glTexCoordPointervINTEL: ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexEnvf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexEnvfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexEnvi: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexEnviv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexEnvx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexEnvxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexEnvxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexEnvxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexFilterFuncSGIS: ?fn (GLenum, GLenum, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGend: ?fn (GLenum, GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glTexGendv: ?fn (GLenum, GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glTexGenf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGenfOES: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGenfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGenfvOES: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexGeni: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexGeniOES: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexGeniv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexGenivOES: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexGenxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexGenxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexImage1D: ?fn (GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexImage2D: ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexImage2DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage2DMultisampleCoverageNV: ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage3D: ?fn (GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexImage3DEXT: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexImage3DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage3DMultisampleCoverageNV: ?fn (GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexImage3DOES: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexImage4DSGIS: ?fn (GLenum, GLint, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexPageCommitmentARB: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexPageCommitmentEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexParameterIiv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterIivEXT: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterIivOES: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterIuiv: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexParameterIuivEXT: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexParameterIuivOES: ?fn (GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTexParameterf: ?fn (GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTexParameterfv: ?fn (GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTexParameteri: ?fn (GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTexParameteriv: ?fn (GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTexParameterx: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexParameterxOES: ?fn (GLenum, GLenum, GLfixed) callconv(.C) void;
pub extern var epoxy_glTexParameterxv: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexParameterxvOES: ?fn (GLenum, GLenum, [*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glTexRenderbufferNV: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTexStorage1D: ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage1DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage2D: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage2DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage2DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexStorage3D: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage3DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTexStorage3DMultisample: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexStorage3DMultisampleOES: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTexStorageMem1DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem2DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem2DMultisampleEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem3DEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageMem3DMultisampleEXT: ?fn (GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTexStorageSparseAMD: ?fn (GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub extern var epoxy_glTexSubImage1D: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexSubImage1DEXT: ?fn (GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexSubImage2D: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexSubImage2DEXT: ?fn (GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexSubImage3D: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexSubImage3DEXT: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexSubImage3DOES: ?fn (GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTexSubImage4DSGIS: ?fn (GLenum, GLint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureAttachMemoryNV: ?fn (GLuint, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureBarrier: ?fn () callconv(.C) void;
pub extern var epoxy_glTextureBarrierNV: ?fn () callconv(.C) void;
pub extern var epoxy_glTextureBuffer: ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureBufferEXT: ?fn (GLuint, GLenum, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureBufferRange: ?fn (GLuint, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTextureBufferRangeEXT: ?fn (GLuint, GLenum, GLenum, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTextureColorMaskSGIS: ?fn (GLboolean, GLboolean, GLboolean, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureFoveationParametersQCOM: ?fn (GLuint, GLuint, GLuint, GLfloat, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureImage2DMultisampleCoverageNV: ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureImage2DMultisampleNV: ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLsizei, GLsizei, GLint, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureImage3DMultisampleCoverageNV: ?fn (GLuint, GLenum, GLsizei, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureImage3DMultisampleNV: ?fn (GLuint, GLenum, GLsizei, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureLightEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glTextureMaterialEXT: ?fn (GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glTextureNormalEXT: ?fn (GLenum) callconv(.C) void;
pub extern var epoxy_glTexturePageCommitmentEXT: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureParameterIiv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameterIivEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameterIuiv: ?fn (GLuint, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTextureParameterIuivEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glTextureParameterf: ?fn (GLuint, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameterfEXT: ?fn (GLuint, GLenum, GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameterfv: ?fn (GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameterfvEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTextureParameteri: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameteriEXT: ?fn (GLuint, GLenum, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameteriv: ?fn (GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureParameterivEXT: ?fn (GLuint, GLenum, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glTextureRangeAPPLE: ?fn (GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureRenderbufferEXT: ?fn (GLuint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureStorage1D: ?fn (GLuint, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage1DEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage2D: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage2DEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage2DMultisample: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorage2DMultisampleEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorage3D: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage3DEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glTextureStorage3DMultisample: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorage3DMultisampleEXT: ?fn (GLuint, GLenum, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem1DEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem2DEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem2DMultisampleEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem3DEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageMem3DMultisampleEXT: ?fn (GLuint, GLsizei, GLenum, GLsizei, GLsizei, GLsizei, GLboolean, GLuint, GLuint64) callconv(.C) void;
pub extern var epoxy_glTextureStorageSparseAMD: ?fn (GLuint, GLenum, GLenum, GLsizei, GLsizei, GLsizei, GLsizei, GLbitfield) callconv(.C) void;
pub extern var epoxy_glTextureSubImage1D: ?fn (GLuint, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureSubImage1DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureSubImage2D: ?fn (GLuint, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureSubImage2DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureSubImage3D: ?fn (GLuint, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureSubImage3DEXT: ?fn (GLuint, GLenum, GLint, GLint, GLint, GLint, GLsizei, GLsizei, GLsizei, GLenum, GLenum, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glTextureView: ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureViewEXT: ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTextureViewOES: ?fn (GLuint, GLenum, GLuint, GLenum, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTrackMatrixNV: ?fn (GLenum, GLuint, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackAttribsNV: ?fn (GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackBufferBase: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackBufferRange: ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizeiptr) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackStreamAttribsNV: ?fn (GLsizei, [*c]const GLint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackVaryings: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackVaryingsEXT: ?fn (GLuint, GLsizei, [*c]const [*c]const GLchar, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformFeedbackVaryingsNV: ?fn (GLuint, GLsizei, [*c]const GLint, GLenum) callconv(.C) void;
pub extern var epoxy_glTransformPathNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glTranslated: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glTranslatef: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glTranslatex: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glTranslatexOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glUniform1d: ?fn (GLint, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform1dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform1f: ?fn (GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1fARB: ?fn (GLint, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform1i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform1i64ARB: ?fn (GLint, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform1i64NV: ?fn (GLint, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform1i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1iARB: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform1iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform1ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform1ui: ?fn (GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform1ui64ARB: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform1ui64NV: ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform1ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform1uiEXT: ?fn (GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform1uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform1uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2d: ?fn (GLint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform2dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform2f: ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2fARB: ?fn (GLint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform2i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform2i64ARB: ?fn (GLint, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform2i64NV: ?fn (GLint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform2i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2iARB: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform2iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform2ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform2ui: ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2ui64ARB: ?fn (GLint, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform2ui64NV: ?fn (GLint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform2ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform2uiEXT: ?fn (GLint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform2uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3d: ?fn (GLint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform3dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform3f: ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3fARB: ?fn (GLint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform3i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform3i64ARB: ?fn (GLint, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform3i64NV: ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform3i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3iARB: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform3iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform3ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform3ui: ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3ui64ARB: ?fn (GLint, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform3ui64NV: ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform3ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform3uiEXT: ?fn (GLint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform3uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4d: ?fn (GLint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform4dv: ?fn (GLint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniform4f: ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4fARB: ?fn (GLint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4fv: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4fvARB: ?fn (GLint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniform4i: ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform4i64ARB: ?fn (GLint, GLint64, GLint64, GLint64, GLint64) callconv(.C) void;
pub extern var epoxy_glUniform4i64NV: ?fn (GLint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4i64vARB: ?fn (GLint, GLsizei, [*c]const GLint64) callconv(.C) void;
pub extern var epoxy_glUniform4i64vNV: ?fn (GLint, GLsizei, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4iARB: ?fn (GLint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glUniform4iv: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform4ivARB: ?fn (GLint, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glUniform4ui: ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4ui64ARB: ?fn (GLint, GLuint64, GLuint64, GLuint64, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform4ui64NV: ?fn (GLint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4ui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniform4ui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniform4uiEXT: ?fn (GLint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4uiv: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniform4uivEXT: ?fn (GLint, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniformBlockBinding: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniformBufferEXT: ?fn (GLuint, GLint, GLuint) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64ARB: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64IMG: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64NV: ?fn (GLint, GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64vARB: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64vIMG: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformHandleui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2fvARB: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x3dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x3fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x3fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x4dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x4fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix2x4fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3fvARB: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x2dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x2fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x2fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x4dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x4fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix3x4fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4fvARB: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x2dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x2fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x2fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x3dv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x3fv: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformMatrix4x3fvNV: ?fn (GLint, GLsizei, GLboolean, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glUniformSubroutinesuiv: ?fn (GLenum, GLsizei, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glUniformui64NV: ?fn (GLint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUniformui64vNV: ?fn (GLint, GLsizei, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glUnlockArraysEXT: ?fn () callconv(.C) void;
pub extern var epoxy_glUnmapBuffer: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapBufferARB: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapBufferOES: ?fn (GLenum) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapNamedBuffer: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapNamedBufferEXT: ?fn (GLuint) callconv(.C) GLboolean;
pub extern var epoxy_glUnmapObjectBufferATI: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glUnmapTexture2DINTEL: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glUpdateObjectBufferATI: ?fn (GLuint, GLuint, GLsizei, ?*const c_void, GLenum) callconv(.C) void;
pub extern var epoxy_glUploadGpuMaskNVX: ?fn (GLbitfield) callconv(.C) void;
pub extern var epoxy_glUseProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glUseProgramObjectARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glUseProgramStages: ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub extern var epoxy_glUseProgramStagesEXT: ?fn (GLuint, GLbitfield, GLuint) callconv(.C) void;
pub extern var epoxy_glUseShaderProgramEXT: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVDPAUFiniNV: ?fn () callconv(.C) void;
pub extern var epoxy_glVDPAUGetSurfaceivNV: ?fn (GLvdpauSurfaceNV, GLenum, GLsizei, [*c]GLsizei, [*c]GLint) callconv(.C) void;
pub extern var epoxy_glVDPAUInitNV: ?fn (?*const c_void, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVDPAUIsSurfaceNV: ?fn (GLvdpauSurfaceNV) callconv(.C) GLboolean;
pub extern var epoxy_glVDPAUMapSurfacesNV: ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub extern var epoxy_glVDPAURegisterOutputSurfaceNV: ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub extern var epoxy_glVDPAURegisterVideoSurfaceNV: ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint) callconv(.C) GLvdpauSurfaceNV;
pub extern var epoxy_glVDPAURegisterVideoSurfaceWithPictureStructureNV: ?fn (?*const c_void, GLenum, GLsizei, [*c]const GLuint, GLboolean) callconv(.C) GLvdpauSurfaceNV;
pub extern var epoxy_glVDPAUSurfaceAccessNV: ?fn (GLvdpauSurfaceNV, GLenum) callconv(.C) void;
pub extern var epoxy_glVDPAUUnmapSurfacesNV: ?fn (GLsizei, [*c]const GLvdpauSurfaceNV) callconv(.C) void;
pub extern var epoxy_glVDPAUUnregisterSurfaceNV: ?fn (GLvdpauSurfaceNV) callconv(.C) void;
pub extern var epoxy_glValidateProgram: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glValidateProgramARB: ?fn (GLhandleARB) callconv(.C) void;
pub extern var epoxy_glValidateProgramPipeline: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glValidateProgramPipelineEXT: ?fn (GLuint) callconv(.C) void;
pub extern var epoxy_glVariantArrayObjectATI: ?fn (GLuint, GLenum, GLsizei, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVariantPointerEXT: ?fn (GLuint, GLenum, GLuint, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVariantbvEXT: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVariantdvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVariantfvEXT: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVariantivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVariantsvEXT: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVariantubvEXT: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVariantuivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVariantusvEXT: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertex2bOES: ?fn (GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex2bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex2hNV: ?fn (GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex2hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertex2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertex2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertex2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertex2xOES: ?fn (GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex2xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex3bOES: ?fn (GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex3bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex3hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex3hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertex3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertex3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertex3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertex3xOES: ?fn (GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex3xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex4bOES: ?fn (GLbyte, GLbyte, GLbyte, GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex4bvOES: ?fn ([*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertex4d: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex4dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertex4f: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex4fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertex4hNV: ?fn (GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex4hvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertex4i: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertex4iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertex4s: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertex4sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertex4xOES: ?fn (GLfixed, GLfixed, GLfixed) callconv(.C) void;
pub extern var epoxy_glVertex4xvOES: ?fn ([*c]const GLfixed) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribBinding: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribFormat: ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribIFormat: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayAttribLFormat: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayBindVertexBufferEXT: ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexArrayBindingDivisor: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayColorOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayEdgeFlagOffsetEXT: ?fn (GLuint, GLuint, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayElementBuffer: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayFogCoordOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayIndexOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayMultiTexCoordOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayNormalOffsetEXT: ?fn (GLuint, GLuint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayParameteriAPPLE: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexArrayRangeAPPLE: ?fn (GLsizei, ?*c_void) callconv(.C) void;
pub extern var epoxy_glVertexArrayRangeNV: ?fn (GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexArraySecondaryColorOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayTexCoordOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribBindingEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribDivisorEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribFormatEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribIFormatEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribIOffsetEXT: ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribLFormatEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribLOffsetEXT: ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexAttribOffsetEXT: ?fn (GLuint, GLuint, GLuint, GLint, GLenum, GLboolean, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexBindingDivisorEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexBuffer: ?fn (GLuint, GLuint, GLuint, GLintptr, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexBuffers: ?fn (GLuint, GLuint, GLsizei, [*c]const GLuint, [*c]const GLintptr, [*c]const GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexArrayVertexOffsetEXT: ?fn (GLuint, GLuint, GLint, GLenum, GLsizei, GLintptr) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1d: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dARB: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dNV: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1f: ?fn (GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fARB: ?fn (GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fNV: ?fn (GLuint, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1hNV: ?fn (GLuint, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1s: ?fn (GLuint, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1sARB: ?fn (GLuint, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1sNV: ?fn (GLuint, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib1svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2d: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dARB: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dNV: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2f: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fARB: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2hNV: ?fn (GLuint, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2s: ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2sARB: ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2sNV: ?fn (GLuint, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib2svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3d: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dARB: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dNV: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3f: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fARB: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fNV: ?fn (GLuint, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3hNV: ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3s: ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3sARB: ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3sNV: ?fn (GLuint, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib3svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nbv: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NbvARB: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Niv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NivARB: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nsv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NsvARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nub: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NubARB: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nubv: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NubvARB: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nuiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NuivARB: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4Nusv: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4NusvARB: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4bv: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4bvARB: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4d: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dARB: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dNV: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dvARB: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4dvNV: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4f: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fARB: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fNV: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fvARB: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4fvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4hNV: ?fn (GLuint, GLhalfNV, GLhalfNV, GLhalfNV, GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4hvNV: ?fn (GLuint, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ivARB: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4s: ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4sARB: ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4sNV: ?fn (GLuint, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4svARB: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4svNV: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubNV: ?fn (GLuint, GLubyte, GLubyte, GLubyte, GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubv: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubvARB: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4ubvNV: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4uivARB: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4usv: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttrib4usvARB: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttribArrayObjectATI: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribBinding: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisor: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorANGLE: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorARB: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribDivisorNV: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribFormat: ?fn (GLuint, GLint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribFormatNV: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1i: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1iEXT: ?fn (GLuint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1ui: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1uiEXT: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI1uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2i: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2iEXT: ?fn (GLuint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2ui: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2uiEXT: ?fn (GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI2uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3i: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3iEXT: ?fn (GLuint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3ui: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3uiEXT: ?fn (GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI3uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4bv: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4bvEXT: ?fn (GLuint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4i: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4iEXT: ?fn (GLuint, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4iv: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ivEXT: ?fn (GLuint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4sv: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4svEXT: ?fn (GLuint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ubv: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ubvEXT: ?fn (GLuint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4ui: ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4uiEXT: ?fn (GLuint, GLuint, GLuint, GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4uiv: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4uivEXT: ?fn (GLuint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4usv: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttribI4usvEXT: ?fn (GLuint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glVertexAttribIFormat: ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribIFormatNV: ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexAttribIPointer: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexAttribIPointerEXT: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1d: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1dEXT: ?fn (GLuint, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1i64NV: ?fn (GLuint, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64ARB: ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64NV: ?fn (GLuint, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64vARB: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL1ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2d: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2dEXT: ?fn (GLuint, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2i64NV: ?fn (GLuint, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2ui64NV: ?fn (GLuint, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL2ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3d: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3dEXT: ?fn (GLuint, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3i64NV: ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3ui64NV: ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL3ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4d: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4dEXT: ?fn (GLuint, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4dv: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4dvEXT: ?fn (GLuint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4i64NV: ?fn (GLuint, GLint64EXT, GLint64EXT, GLint64EXT, GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4i64vNV: ?fn (GLuint, [*c]const GLint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4ui64NV: ?fn (GLuint, GLuint64EXT, GLuint64EXT, GLuint64EXT, GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribL4ui64vNV: ?fn (GLuint, [*c]const GLuint64EXT) callconv(.C) void;
pub extern var epoxy_glVertexAttribLFormat: ?fn (GLuint, GLint, GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribLFormatNV: ?fn (GLuint, GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexAttribLPointer: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexAttribLPointerEXT: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexAttribP1ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP1uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP2ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP2uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP3ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP3uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP4ui: ?fn (GLuint, GLenum, GLboolean, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribP4uiv: ?fn (GLuint, GLenum, GLboolean, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexAttribParameteriAMD: ?fn (GLuint, GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexAttribPointer: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexAttribPointerARB: ?fn (GLuint, GLint, GLenum, GLboolean, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexAttribPointerNV: ?fn (GLuint, GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs1svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs2svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs3svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4dvNV: ?fn (GLuint, GLsizei, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4fvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4hvNV: ?fn (GLuint, GLsizei, [*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4svNV: ?fn (GLuint, GLsizei, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexAttribs4ubvNV: ?fn (GLuint, GLsizei, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glVertexBindingDivisor: ?fn (GLuint, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexBlendARB: ?fn (GLint) callconv(.C) void;
pub extern var epoxy_glVertexBlendEnvfATI: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexBlendEnviATI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexFormatNV: ?fn (GLint, GLenum, GLsizei) callconv(.C) void;
pub extern var epoxy_glVertexP2ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP2uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP3ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP3uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP4ui: ?fn (GLenum, GLuint) callconv(.C) void;
pub extern var epoxy_glVertexP4uiv: ?fn (GLenum, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glVertexPointer: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexPointerEXT: ?fn (GLint, GLenum, GLsizei, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexPointerListIBM: ?fn (GLint, GLenum, GLint, [*c]?*const c_void, GLint) callconv(.C) void;
pub extern var epoxy_glVertexPointervINTEL: ?fn (GLint, GLenum, [*c]?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexStream1dATI: ?fn (GLenum, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream1dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream1fATI: ?fn (GLenum, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream1fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream1iATI: ?fn (GLenum, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream1ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream1sATI: ?fn (GLenum, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream1svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream2dATI: ?fn (GLenum, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream2dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream2fATI: ?fn (GLenum, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream2fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream2iATI: ?fn (GLenum, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream2ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream2sATI: ?fn (GLenum, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream2svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream3dATI: ?fn (GLenum, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream3dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream3fATI: ?fn (GLenum, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream3fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream3iATI: ?fn (GLenum, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream3ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream3sATI: ?fn (GLenum, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream3svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream4dATI: ?fn (GLenum, GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream4dvATI: ?fn (GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVertexStream4fATI: ?fn (GLenum, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream4fvATI: ?fn (GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexStream4iATI: ?fn (GLenum, GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream4ivATI: ?fn (GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glVertexStream4sATI: ?fn (GLenum, GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glVertexStream4svATI: ?fn (GLenum, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glVertexWeightPointerEXT: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glVertexWeightfEXT: ?fn (GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexWeightfvEXT: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVertexWeighthNV: ?fn (GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVertexWeighthvNV: ?fn ([*c]const GLhalfNV) callconv(.C) void;
pub extern var epoxy_glVideoCaptureNV: ?fn (GLuint, [*c]GLuint, [*c]GLuint64EXT) callconv(.C) GLenum;
pub extern var epoxy_glVideoCaptureStreamParameterdvNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glVideoCaptureStreamParameterfvNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glVideoCaptureStreamParameterivNV: ?fn (GLuint, GLuint, GLenum, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glViewport: ?fn (GLint, GLint, GLsizei, GLsizei) callconv(.C) void;
pub extern var epoxy_glViewportArrayv: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportArrayvNV: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportArrayvOES: ?fn (GLuint, GLsizei, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedf: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfNV: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfOES: ?fn (GLuint, GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfv: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfvNV: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportIndexedfvOES: ?fn (GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportPositionWScaleNV: ?fn (GLuint, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glViewportSwizzleNV: ?fn (GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern var epoxy_glWaitSemaphoreEXT: ?fn (GLuint, GLuint, [*c]const GLuint, GLuint, [*c]const GLuint, [*c]const GLenum) callconv(.C) void;
pub extern var epoxy_glWaitSemaphoreui64NVX: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLuint64) callconv(.C) void;
pub extern var epoxy_glWaitSync: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub extern var epoxy_glWaitSyncAPPLE: ?fn (GLsync, GLbitfield, GLuint64) callconv(.C) void;
pub extern var epoxy_glWaitVkSemaphoreNV: ?fn (GLuint64) callconv(.C) void;
pub extern var epoxy_glWeightPathsNV: ?fn (GLuint, GLsizei, [*c]const GLuint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWeightPointerARB: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glWeightPointerOES: ?fn (GLint, GLenum, GLsizei, ?*const c_void) callconv(.C) void;
pub extern var epoxy_glWeightbvARB: ?fn (GLint, [*c]const GLbyte) callconv(.C) void;
pub extern var epoxy_glWeightdvARB: ?fn (GLint, [*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWeightfvARB: ?fn (GLint, [*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWeightivARB: ?fn (GLint, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWeightsvARB: ?fn (GLint, [*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWeightubvARB: ?fn (GLint, [*c]const GLubyte) callconv(.C) void;
pub extern var epoxy_glWeightuivARB: ?fn (GLint, [*c]const GLuint) callconv(.C) void;
pub extern var epoxy_glWeightusvARB: ?fn (GLint, [*c]const GLushort) callconv(.C) void;
pub extern var epoxy_glWindowPos2d: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dARB: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dMESA: ?fn (GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dvARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2dvMESA: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos2f: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fARB: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fMESA: ?fn (GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fvARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2fvMESA: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos2i: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2iARB: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2iMESA: ?fn (GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2ivARB: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2ivMESA: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos2s: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2sARB: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2sMESA: ?fn (GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2svARB: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos2svMESA: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3d: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dARB: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dMESA: ?fn (GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dv: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dvARB: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3dvMESA: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos3f: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fARB: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fMESA: ?fn (GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fv: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fvARB: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3fvMESA: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos3i: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3iARB: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3iMESA: ?fn (GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3iv: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3ivARB: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3ivMESA: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos3s: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3sARB: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3sMESA: ?fn (GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3sv: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3svARB: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos3svMESA: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos4dMESA: ?fn (GLdouble, GLdouble, GLdouble, GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos4dvMESA: ?fn ([*c]const GLdouble) callconv(.C) void;
pub extern var epoxy_glWindowPos4fMESA: ?fn (GLfloat, GLfloat, GLfloat, GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos4fvMESA: ?fn ([*c]const GLfloat) callconv(.C) void;
pub extern var epoxy_glWindowPos4iMESA: ?fn (GLint, GLint, GLint, GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos4ivMESA: ?fn ([*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWindowPos4sMESA: ?fn (GLshort, GLshort, GLshort, GLshort) callconv(.C) void;
pub extern var epoxy_glWindowPos4svMESA: ?fn ([*c]const GLshort) callconv(.C) void;
pub extern var epoxy_glWindowRectanglesEXT: ?fn (GLenum, GLsizei, [*c]const GLint) callconv(.C) void;
pub extern var epoxy_glWriteMaskEXT: ?fn (GLuint, GLuint, GLenum, GLenum, GLenum, GLenum) callconv(.C) void;
pub extern fn epoxy_has_gl_extension(extension: [*c]const u8) bool;
pub extern fn epoxy_is_desktop_gl() bool;
pub extern fn epoxy_gl_version() c_int;
pub extern fn epoxy_glsl_version() c_int;
pub const epoxy_resolver_stub_t = ?fn () callconv(.C) void;
pub const epoxy_resolver_failure_handler_t = ?fn ([*c]const u8) callconv(.C) epoxy_resolver_stub_t;
pub extern fn epoxy_set_resolver_failure_handler(handler: epoxy_resolver_failure_handler_t) epoxy_resolver_failure_handler_t;
pub const GL_TEXCOORD1_BIT_PGI = 0x10000000;
pub inline fn glVertexArrayVertexBuffers(arg_6: GLuint, arg_7: GLuint, arg_8: GLsizei, arg_9: [*c]const GLuint, arg_10: [*c]const GLintptr, arg_11: [*c]const GLsizei) void {
    return epoxy_glVertexArrayVertexBuffers.?(arg_6, arg_7, arg_8, arg_9, arg_10, arg_11);
}
pub const GL_HALF_FLOAT_OES = 0x8D61;
pub const GL_CON_0_ATI = 0x8941;
pub const __SSE4_2__ = 1;
pub inline fn glListParameteriSGIX(arg_12: GLuint, arg_13: GLenum, arg_14: GLint) void {
    return epoxy_glListParameteriSGIX.?(arg_12, arg_13, arg_14);
}
pub inline fn glGetTextureParameterIiv(arg_15: GLuint, arg_16: GLenum, arg_17: [*c]GLint) void {
    return epoxy_glGetTextureParameterIiv.?(arg_15, arg_16, arg_17);
}
pub inline fn glDeformationMap3fSGIX(arg_18: GLenum, arg_19: GLfloat, arg_20: GLfloat, arg_21: GLint, arg_22: GLint, arg_23: GLfloat, arg_24: GLfloat, arg_25: GLint, arg_26: GLint, arg_27: GLfloat, arg_28: GLfloat, arg_29: GLint, arg_30: GLint, arg_31: [*c]const GLfloat) void {
    return epoxy_glDeformationMap3fSGIX.?(arg_18, arg_19, arg_20, arg_21, arg_22, arg_23, arg_24, arg_25, arg_26, arg_27, arg_28, arg_29, arg_30, arg_31);
}
pub const GL_TEXTURE_REDUCTION_MODE_ARB = 0x9366;
pub const GL_SRC_ALPHA_SATURATE = 0x0308;
pub const __STDC_UTF_16__ = 1;
pub const GL_NV_texture_compression_vtc = 1;
pub inline fn glFinishFenceAPPLE(arg_32: GLuint) void {
    return epoxy_glFinishFenceAPPLE.?(arg_32);
}
pub inline fn glGetSamplerParameterIivOES(arg_33: GLuint, arg_34: GLenum, arg_35: [*c]GLint) void {
    return epoxy_glGetSamplerParameterIivOES.?(arg_33, arg_34, arg_35);
}
pub const GL_MATRIX23_ARB = 0x88D7;
pub const GL_LOWER_LEFT = 0x8CA1;
pub const GL_LAYOUT_TRANSFER_DST_EXT = 0x9593;
pub inline fn glGetTextureImage(arg_36: GLuint, arg_37: GLint, arg_38: GLenum, arg_39: GLenum, arg_40: GLsizei, arg_41: ?*c_void) void {
    return epoxy_glGetTextureImage.?(arg_36, arg_37, arg_38, arg_39, arg_40, arg_41);
}
pub const GL_SECONDARY_COLOR_ARRAY_TYPE_EXT = 0x845B;
pub const GL_HALF_FLOAT = 0x140B;
pub const GL_FRAGMENT_PROGRAM_ARB = 0x8804;
pub inline fn glBlendEquationSeparatei(arg_42: GLuint, arg_43: GLenum, arg_44: GLenum) void {
    return epoxy_glBlendEquationSeparatei.?(arg_42, arg_43, arg_44);
}
pub const GL_QUERY_BY_REGION_WAIT_NV = 0x8E15;
pub inline fn glFlush() void {
    return epoxy_glFlush.?();
}
pub const GL_UNDEFINED_APPLE = 0x8A1C;
pub const GL_MAP_INVALIDATE_RANGE_BIT_EXT = 0x0004;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_AMD = 0x9199;
pub const GL_BACK = 0x0405;
pub inline fn glVertexAttribParameteriAMD(arg_45: GLuint, arg_46: GLenum, arg_47: GLint) void {
    return epoxy_glVertexAttribParameteriAMD.?(arg_45, arg_46, arg_47);
}
pub const GL_OUTPUT_COLOR1_EXT = 0x879C;
pub const GL_MAP1_TANGENT_EXT = 0x8444;
pub const GL_INTENSITY16 = 0x804D;
pub const GL_COMPUTE_SUBROUTINE = 0x92ED;
pub const GL_LAYOUT_DEPTH_STENCIL_READ_ONLY_EXT = 0x9590;
pub const GL_DUAL_ALPHA16_SGIS = 0x8113;
pub const GL_MATRIX26_ARB = 0x88DA;
pub const GL_ARB_pixel_buffer_object = 1;
pub const GL_TEXTURE_UNSIGNED_REMAP_MODE_NV = 0x888F;
pub const GL_EXT_texture_format_sRGB_override = 1;
pub const GL_UNDEFINED_VERTEX_EXT = 0x8260;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_ARB = 0x9144;
pub const GL_CONVOLUTION_2D = 0x8011;
pub inline fn glDrawTransformFeedbackStreamInstanced(arg_48: GLenum, arg_49: GLuint, arg_50: GLuint, arg_51: GLsizei) void {
    return epoxy_glDrawTransformFeedbackStreamInstanced.?(arg_48, arg_49, arg_50, arg_51);
}
pub inline fn glClearBufferfi(arg_52: GLenum, arg_53: GLint, arg_54: GLfloat, arg_55: GLint) void {
    return epoxy_glClearBufferfi.?(arg_52, arg_53, arg_54, arg_55);
}
pub const WCHAR_MAX = __WCHAR_MAX;
pub const GL_CLIP_PLANE5 = 0x3005;
pub const GL_RGBA4_OES = 0x8056;
pub const GL_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x8809;
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE = 0x9104;
pub inline fn glGetnPixelMapusvARB(arg_56: GLenum, arg_57: GLsizei, arg_58: [*c]GLushort) void {
    return epoxy_glGetnPixelMapusvARB.?(arg_56, arg_57, arg_58);
}
pub inline fn glWindowPos4fvMESA(arg_59: [*c]const GLfloat) void {
    return epoxy_glWindowPos4fvMESA.?(arg_59);
}
pub inline fn glTexSubImage1D(arg_60: GLenum, arg_61: GLint, arg_62: GLint, arg_63: GLsizei, arg_64: GLenum, arg_65: GLenum, arg_66: ?*const c_void) void {
    return epoxy_glTexSubImage1D.?(arg_60, arg_61, arg_62, arg_63, arg_64, arg_65, arg_66);
}
pub const GL_TEXTURE_GREEN_TYPE_ARB = 0x8C11;
pub const GL_GREMEDY_string_marker = 1;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x906A;
pub const GL_LOSE_CONTEXT_ON_RESET_KHR = 0x8252;
pub const GL_DRAW_BUFFER13_EXT = 0x8832;
pub const GL_LOCATION_INDEX_EXT = 0x930F;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5 = 0x93D5;
pub const GL_MAP2_COLOR_4 = 0x0DB0;
pub inline fn glVertexArrayColorOffsetEXT(arg_67: GLuint, arg_68: GLuint, arg_69: GLint, arg_70: GLenum, arg_71: GLsizei, arg_72: GLintptr) void {
    return epoxy_glVertexArrayColorOffsetEXT.?(arg_67, arg_68, arg_69, arg_70, arg_71, arg_72);
}
pub const GL_VERTEX_SHADER_INVOCATIONS_ARB = 0x82F0;
pub const GL_NV_query_resource = 1;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_OES = 0x9309;
pub const GL_LUMINANCE6_ALPHA2 = 0x8044;
pub inline fn glInsertComponentEXT(arg_73: GLuint, arg_74: GLuint, arg_75: GLuint) void {
    return epoxy_glInsertComponentEXT.?(arg_73, arg_74, arg_75);
}
pub const GL_TRIANGLE_STRIP_ADJACENCY_ARB = 0x000D;
pub const GL_RG = 0x8227;
pub const GL_FRAGMENT_INPUT_NV = 0x936D;
pub inline fn glGetNamedProgramivEXT(arg_76: GLuint, arg_77: GLenum, arg_78: GLenum, arg_79: [*c]GLint) void {
    return epoxy_glGetNamedProgramivEXT.?(arg_76, arg_77, arg_78, arg_79);
}
pub const GL_YCBYCR8_422_NV = 0x9031;
pub const GL_EXT_fog_coord = 1;
pub inline fn glGetSeparableFilter(arg_80: GLenum, arg_81: GLenum, arg_82: GLenum, arg_83: ?*c_void, arg_84: ?*c_void, arg_85: ?*c_void) void {
    return epoxy_glGetSeparableFilter.?(arg_80, arg_81, arg_82, arg_83, arg_84, arg_85);
}
pub const GL_TEXTURE_FIXED_SAMPLE_LOCATIONS = 0x9107;
pub inline fn glGetLightfv(arg_86: GLenum, arg_87: GLenum, arg_88: [*c]GLfloat) void {
    return epoxy_glGetLightfv.?(arg_86, arg_87, arg_88);
}
pub const __unix__ = 1;
pub const GL_PROGRAM_ERROR_POSITION_NV = 0x864B;
pub const GL_UNSIGNED_INT_VEC3 = 0x8DC7;
pub inline fn glLoadPaletteFromModelViewMatrixOES() void {
    return epoxy_glLoadPaletteFromModelViewMatrixOES.?();
}
pub inline fn glWindowPos3dARB(arg_89: GLdouble, arg_90: GLdouble, arg_91: GLdouble) void {
    return epoxy_glWindowPos3dARB.?(arg_89, arg_90, arg_91);
}
pub const __ADX__ = 1;
pub const GL_PREVIOUS_ARB = 0x8578;
pub inline fn glGetAttachedObjectsARB(arg_92: GLhandleARB, arg_93: GLsizei, arg_94: [*c]GLsizei, arg_95: [*c]GLhandleARB) void {
    return epoxy_glGetAttachedObjectsARB.?(arg_92, arg_93, arg_94, arg_95);
}
pub const GL_SEPARATE_SPECULAR_COLOR = 0x81FA;
pub inline fn glTexStorageMem2DEXT(arg_96: GLenum, arg_97: GLsizei, arg_98: GLenum, arg_99: GLsizei, arg_100: GLsizei, arg_101: GLuint, arg_102: GLuint64) void {
    return epoxy_glTexStorageMem2DEXT.?(arg_96, arg_97, arg_98, arg_99, arg_100, arg_101, arg_102);
}
pub const GL_UNSIGNED_INT_10F_11F_11F_REV = 0x8C3B;
pub const GL_INTERLEAVED_ATTRIBS_NV = 0x8C8C;
pub inline fn glEGLImageTargetTexture2DOES(arg_103: GLenum, arg_104: GLeglImageOES) void {
    return epoxy_glEGLImageTargetTexture2DOES.?(arg_103, arg_104);
}
pub const GL_RGBA8I = 0x8D8E;
pub const GL_COLOR_ARRAY_STRIDE_EXT = 0x8083;
pub inline fn glGetFenceivNV(arg_105: GLuint, arg_106: GLenum, arg_107: [*c]GLint) void {
    return epoxy_glGetFenceivNV.?(arg_105, arg_106, arg_107);
}
pub inline fn glVertexAttrib4dvNV(arg_108: GLuint, arg_109: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib4dvNV.?(arg_108, arg_109);
}
pub const GL_GEOMETRY_OUTPUT_TYPE_ARB = 0x8DDC;
pub const __USE_XOPEN2K = 1;
pub inline fn glGetProgramLocalParameterIuivNV(arg_110: GLenum, arg_111: GLuint, arg_112: [*c]GLuint) void {
    return epoxy_glGetProgramLocalParameterIuivNV.?(arg_110, arg_111, arg_112);
}
pub const GL_EXT_sRGB_write_control = 1;
pub inline fn glTexCoord2hvNV(arg_113: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord2hvNV.?(arg_113);
}
pub const GL_INT_SAMPLER_2D_MULTISAMPLE = 0x9109;
pub const GL_TASK_SHADER_NV = 0x955A;
pub inline fn glProgramUniform3ui64ARB(arg_114: GLuint, arg_115: GLint, arg_116: GLuint64, arg_117: GLuint64, arg_118: GLuint64) void {
    return epoxy_glProgramUniform3ui64ARB.?(arg_114, arg_115, arg_116, arg_117, arg_118);
}
pub inline fn glGetImageTransformParameterivHP(arg_119: GLenum, arg_120: GLenum, arg_121: [*c]GLint) void {
    return epoxy_glGetImageTransformParameterivHP.?(arg_119, arg_120, arg_121);
}
pub const SCNxFAST8 = "hhx";
pub const GL_UNSIGNED_INT_SAMPLER_2D = 0x8DD2;
pub const GL_MAX_NAME_LENGTH = 0x92F6;
pub inline fn glSubpixelPrecisionBiasNV(arg_122: GLuint, arg_123: GLuint) void {
    return epoxy_glSubpixelPrecisionBiasNV.?(arg_122, arg_123);
}
pub const GL_ARB_texture_compression_bptc = 1;
pub const GL_RENDERBUFFER_HEIGHT_EXT = 0x8D43;
pub inline fn glGetMemoryObjectDetachedResourcesuivNV(arg_124: GLuint, arg_125: GLenum, arg_126: GLint, arg_127: GLsizei, arg_128: [*c]GLuint) void {
    return epoxy_glGetMemoryObjectDetachedResourcesuivNV.?(arg_124, arg_125, arg_126, arg_127, arg_128);
}
pub const __LDBL_MAX__ = @as(c_longdouble, 1.18973149535723176502e+4932);
pub const GL_DRAW_INDIRECT_ADDRESS_NV = 0x8F41;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_OES = 0x92D3;
pub inline fn glGetnCompressedTexImageARB(arg_129: GLenum, arg_130: GLint, arg_131: GLsizei, arg_132: ?*c_void) void {
    return epoxy_glGetnCompressedTexImageARB.?(arg_129, arg_130, arg_131, arg_132);
}
pub const GL_EXT_draw_elements_base_vertex = 1;
pub const GL_STREAM_READ_ARB = 0x88E1;
pub const GL_LUMINANCE16_ALPHA16_EXT = 0x8048;
pub const GL_CLIENT_PIXEL_STORE_BIT = 0x00000001;
pub const GL_CURRENT_TEXTURE_COORDS = 0x0B03;
pub inline fn glDeleteBuffers(arg_133: GLsizei, arg_134: [*c]const GLuint) void {
    return epoxy_glDeleteBuffers.?(arg_133, arg_134);
}
pub const GL_ALPHA16I_EXT = 0x8D8A;
pub const GL_ATTRIB_ARRAY_STRIDE_NV = 0x8624;
pub inline fn glLoadMatrixd(arg_135: [*c]const GLdouble) void {
    return epoxy_glLoadMatrixd.?(arg_135);
}
pub const GL_TEXTURE_BINDING_1D_ARRAY_EXT = 0x8C1C;
pub const GL_CONSERVE_MEMORY_HINT_PGI = 0x1A1FD;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING_ARB = 0x889F;
pub const GL_MAP1_VERTEX_ATTRIB7_4_NV = 0x8667;
pub const GL_CLIP_DISTANCE6_APPLE = 0x3006;
pub const GL_COLOR_CLEAR_UNCLAMPED_VALUE_ATI = 0x8835;
pub const GL_EXT_primitive_bounding_box = 1;
pub const GL_CLAMP_TO_BORDER_OES = 0x812D;
pub inline fn glGetHistogramParameterfvEXT(arg_136: GLenum, arg_137: GLenum, arg_138: [*c]GLfloat) void {
    return epoxy_glGetHistogramParameterfvEXT.?(arg_136, arg_137, arg_138);
}
pub const GL_ALPHA32F_EXT = 0x8816;
pub const GL_PROJECTION_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898E;
pub const GL_PROXY_TEXTURE_CUBE_MAP_EXT = 0x851B;
pub inline fn glVertexAttribs2hvNV(arg_139: GLuint, arg_140: GLsizei, arg_141: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs2hvNV.?(arg_139, arg_140, arg_141);
}
pub const GL_NUM_INSTRUCTIONS_PER_PASS_ATI = 0x8971;
pub const GL_CONTEXT_FLAG_DEBUG_BIT_KHR = 0x00000002;
pub inline fn glEnableiNV(arg_142: GLenum, arg_143: GLuint) void {
    return epoxy_glEnableiNV.?(arg_142, arg_143);
}
pub const GL_MAX_TESS_PATCH_COMPONENTS_EXT = 0x8E84;
pub const GL_PROGRAM_MATRIX_STACK_DEPTH_EXT = 0x8E2F;
pub const GL_NV_framebuffer_multisample = 1;
pub const GL_SAMPLER_2D_RECT_ARB = 0x8B63;
pub const GL_RGB16UI_EXT = 0x8D77;
pub const __FSGSBASE__ = 1;
pub const GL_IDENTITY_NV = 0x862A;
pub const GL_CURRENT_BIT = 0x00000001;
pub const GL_TEXTURE7 = 0x84C7;
pub const GL_OUTPUT_TEXTURE_COORD9_EXT = 0x87A6;
pub const GL_SGIS_detail_texture = 1;
pub const GL_FRAGMENTS_INSTRUMENT_SGIX = 0x8313;
pub inline fn glGetProgramPipelineInfoLog(arg_144: GLuint, arg_145: GLsizei, arg_146: [*c]GLsizei, arg_147: [*c]GLchar) void {
    return epoxy_glGetProgramPipelineInfoLog.?(arg_144, arg_145, arg_146, arg_147);
}
pub const GL_MAX_DEPTH_TEXTURE_SAMPLES = 0x910F;
pub const GL_SGIX_list_priority = 1;
pub const GL_TIMEOUT_EXPIRED = 0x911B;
pub const GL_NV_conservative_raster_dilate = 1;
pub const GL_BOOL = 0x8B56;
pub const GL_MATRIX11_ARB = 0x88CB;
pub inline fn glDeletePerfMonitorsAMD(arg_148: GLsizei, arg_149: [*c]GLuint) void {
    return epoxy_glDeletePerfMonitorsAMD.?(arg_148, arg_149);
}
pub inline fn glWindowPos2svMESA(arg_150: [*c]const GLshort) void {
    return epoxy_glWindowPos2svMESA.?(arg_150);
}
pub const GL_SGIX_sprite = 1;
pub const __INT8_FMTd__ = "hhd";
pub inline fn glMultiTexCoord2sARB(arg_151: GLenum, arg_152: GLshort, arg_153: GLshort) void {
    return epoxy_glMultiTexCoord2sARB.?(arg_151, arg_152, arg_153);
}
pub const GL_BLEND_EQUATION_ALPHA = 0x883D;
pub inline fn glGetSamplerParameterIuivOES(arg_154: GLuint, arg_155: GLenum, arg_156: [*c]GLuint) void {
    return epoxy_glGetSamplerParameterIuivOES.?(arg_154, arg_155, arg_156);
}
pub const __LDBL_DECIMAL_DIG__ = 21;
pub const GL_ACTIVE_TEXTURE = 0x84E0;
pub const GL_ARB_half_float_pixel = 1;
pub const GL_R = 0x2002;
pub inline fn glGetImageHandleNV(arg_157: GLuint, arg_158: GLint, arg_159: GLboolean, arg_160: GLint, arg_161: GLenum) GLuint64 {
    return epoxy_glGetImageHandleNV.?(arg_157, arg_158, arg_159, arg_160, arg_161);
}
pub const GL_SRGB_DECODE_ARB = 0x8299;
pub const GL_FRAGMENT_COLOR_MATERIAL_SGIX = 0x8401;
pub const GL_EXT_texture_sRGB_R8 = 1;
pub inline fn glExtractComponentEXT(arg_162: GLuint, arg_163: GLuint, arg_164: GLuint) void {
    return epoxy_glExtractComponentEXT.?(arg_162, arg_163, arg_164);
}
pub const GL_COMBINE4_NV = 0x8503;
pub inline fn glNamedRenderbufferStorage(arg_165: GLuint, arg_166: GLenum, arg_167: GLsizei, arg_168: GLsizei) void {
    return epoxy_glNamedRenderbufferStorage.?(arg_165, arg_166, arg_167, arg_168);
}
pub inline fn glCheckFramebufferStatus(arg_169: GLenum) GLenum {
    return epoxy_glCheckFramebufferStatus.?(arg_169);
}
pub const GL_DOT_PRODUCT_DIFFUSE_CUBE_MAP_NV = 0x86F1;
pub const GL_SUBGROUP_SIZE_KHR = 0x9532;
pub const GL_TRANSPOSE_PROJECTION_MATRIX = 0x84E4;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS = 0x8E81;
pub const GL_ARB_invalidate_subdata = 1;
pub const GL_SRC_ALPHA = 0x0302;
pub inline fn glGenerateMipmapOES(arg_170: GLenum) void {
    return epoxy_glGenerateMipmapOES.?(arg_170);
}
pub inline fn glTexCoord2bOES(arg_171: GLbyte, arg_172: GLbyte) void {
    return epoxy_glTexCoord2bOES.?(arg_171, arg_172);
}
pub const GL_COLOR_TABLE_LUMINANCE_SIZE_SGI = 0x80DE;
pub inline fn glBlendFunciOES(arg_173: GLuint, arg_174: GLenum, arg_175: GLenum) void {
    return epoxy_glBlendFunciOES.?(arg_173, arg_174, arg_175);
}
pub inline fn glStringMarkerGREMEDY(arg_176: GLsizei, arg_177: ?*const c_void) void {
    return epoxy_glStringMarkerGREMEDY.?(arg_176, arg_177);
}
pub const GL_OPTIMAL_TILING_EXT = 0x9584;
pub const GL_OES_matrix_palette = 1;
pub const GL_DOUBLE_MAT4x3 = 0x8F4E;
pub inline fn glNamedBufferStorageExternalEXT(arg_178: GLuint, arg_179: GLintptr, arg_180: GLsizeiptr, arg_181: GLeglClientBufferEXT, arg_182: GLbitfield) void {
    return epoxy_glNamedBufferStorageExternalEXT.?(arg_178, arg_179, arg_180, arg_181, arg_182);
}
pub const GL_SRGB8_ALPHA8_EXT = 0x8C43;
pub const GL_TESS_CONTROL_SHADER_OES = 0x8E88;
pub const GL_RESAMPLE_ZERO_FILL_OML = 0x8987;
pub const GL_PROXY_HISTOGRAM_EXT = 0x8025;
pub const GL_VERTEX_STREAM6_ATI = 0x8772;
pub inline fn glMultiTexCoord4f(arg_183: GLenum, arg_184: GLfloat, arg_185: GLfloat, arg_186: GLfloat, arg_187: GLfloat) void {
    return epoxy_glMultiTexCoord4f.?(arg_183, arg_184, arg_185, arg_186, arg_187);
}
pub const GL_ARB_pipeline_statistics_query = 1;
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE = 0x80D4;
pub const GL_FRACTIONAL_EVEN_OES = 0x8E7C;
pub inline fn glOrthox(arg_188: GLfixed, arg_189: GLfixed, arg_190: GLfixed, arg_191: GLfixed, arg_192: GLfixed, arg_193: GLfixed) void {
    return epoxy_glOrthox.?(arg_188, arg_189, arg_190, arg_191, arg_192, arg_193);
}
pub const __BLKCNT64_T_TYPE = __SQUAD_TYPE;
pub inline fn glGetnUniformuivARB(arg_194: GLuint, arg_195: GLint, arg_196: GLsizei, arg_197: [*c]GLuint) void {
    return epoxy_glGetnUniformuivARB.?(arg_194, arg_195, arg_196, arg_197);
}
pub const GL_TEXTURE_BINDING_RECTANGLE = 0x84F6;
pub inline fn glUniform3uiEXT(arg_198: GLint, arg_199: GLuint, arg_200: GLuint, arg_201: GLuint) void {
    return epoxy_glUniform3uiEXT.?(arg_198, arg_199, arg_200, arg_201);
}
pub const GL_RGBA8UI = 0x8D7C;
pub inline fn glGetnConvolutionFilterARB(arg_202: GLenum, arg_203: GLenum, arg_204: GLenum, arg_205: GLsizei, arg_206: ?*c_void) void {
    return epoxy_glGetnConvolutionFilterARB.?(arg_202, arg_203, arg_204, arg_205, arg_206);
}
pub inline fn glVertexAttrib3hNV(arg_207: GLuint, arg_208: GLhalfNV, arg_209: GLhalfNV, arg_210: GLhalfNV) void {
    return epoxy_glVertexAttrib3hNV.?(arg_207, arg_208, arg_209, arg_210);
}
pub const PRIdLEAST32 = "d";
pub inline fn glWindowPos3i(arg_211: GLint, arg_212: GLint, arg_213: GLint) void {
    return epoxy_glWindowPos3i.?(arg_211, arg_212, arg_213);
}
pub const GL_ALPHA4 = 0x803B;
pub const GL_DEBUG_TYPE_PUSH_GROUP = 0x8269;
pub inline fn glSpecializeShader(arg_214: GLuint, arg_215: [*c]const GLchar, arg_216: GLuint, arg_217: [*c]const GLuint, arg_218: [*c]const GLuint) void {
    return epoxy_glSpecializeShader.?(arg_214, arg_215, arg_216, arg_217, arg_218);
}
pub const GL_VERTEX_SHADER_EXT = 0x8780;
pub const GL_MATRIX12_ARB = 0x88CC;
pub const GL_PERFQUERY_DONOT_FLUSH_INTEL = 0x83F9;
pub const GL_ARB_shading_language_packing = 1;
pub inline fn glGetMultiTexGenivEXT(arg_219: GLenum, arg_220: GLenum, arg_221: GLenum, arg_222: [*c]GLint) void {
    return epoxy_glGetMultiTexGenivEXT.?(arg_219, arg_220, arg_221, arg_222);
}
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(arg_223: GLuint, arg_224: GLfloat, arg_225: GLfloat, arg_226: GLfloat, arg_227: GLfloat, arg_228: GLfloat, arg_229: GLfloat, arg_230: GLfloat, arg_231: GLfloat, arg_232: GLfloat, arg_233: GLfloat, arg_234: GLfloat, arg_235: GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN.?(arg_223, arg_224, arg_225, arg_226, arg_227, arg_228, arg_229, arg_230, arg_231, arg_232, arg_233, arg_234, arg_235);
}
pub const GL_TEXTURE_BUFFER_BINDING_EXT = 0x8C2A;
pub const GL_TOP_LEVEL_ARRAY_STRIDE = 0x930D;
pub const GL_LUMINANCE16UI_EXT = 0x8D7A;
pub const GL_INT_SAMPLER_2D_RECT = 0x8DCD;
pub const GL_ARB_compute_shader = 1;
pub inline fn glVariantuivEXT(arg_236: GLuint, arg_237: [*c]const GLuint) void {
    return epoxy_glVariantuivEXT.?(arg_236, arg_237);
}
pub const GL_REPLICATE_BORDER = 0x8153;
pub inline fn glTexCoord2fColor4ubVertex3fvSUN(arg_238: [*c]const GLfloat, arg_239: [*c]const GLubyte, arg_240: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fColor4ubVertex3fvSUN.?(arg_238, arg_239, arg_240);
}
pub inline fn glLoadProgramNV(arg_241: GLenum, arg_242: GLuint, arg_243: GLsizei, arg_244: [*c]const GLubyte) void {
    return epoxy_glLoadProgramNV.?(arg_241, arg_242, arg_243, arg_244);
}
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY = 0x900B;
pub const GL_EXT_shader_non_constant_global_initializers = 1;
pub inline fn glFogCoordPointer(arg_245: GLenum, arg_246: GLsizei, arg_247: ?*const c_void) void {
    return epoxy_glFogCoordPointer.?(arg_245, arg_246, arg_247);
}
pub const GL_FONT_X_MIN_BOUNDS_BIT_NV = 0x00010000;
pub const GL_UNSIGNED_INT_10_10_10_2 = 0x8036;
pub const GL_REG_16_ATI = 0x8931;
pub const GL_HSL_COLOR = 0x92AF;
pub const GL_APPLE_vertex_array_object = 1;
pub const GL_DRAW_BUFFER7_NV = 0x882C;
pub inline fn glEnableiEXT(arg_248: GLenum, arg_249: GLuint) void {
    return epoxy_glEnableiEXT.?(arg_248, arg_249);
}
pub inline fn glDrawTexfOES(arg_250: GLfloat, arg_251: GLfloat, arg_252: GLfloat, arg_253: GLfloat, arg_254: GLfloat) void {
    return epoxy_glDrawTexfOES.?(arg_250, arg_251, arg_252, arg_253, arg_254);
}
pub const GL_EXT_blend_func_separate = 1;
pub inline fn glLoadIdentityDeformationMapSGIX(arg_255: GLbitfield) void {
    return epoxy_glLoadIdentityDeformationMapSGIX.?(arg_255);
}
pub const INT_LEAST64_MAX = __INT64_C(9223372036854775807);
pub inline fn glProgramEnvParameterI4uivNV(arg_256: GLenum, arg_257: GLuint, arg_258: [*c]const GLuint) void {
    return epoxy_glProgramEnvParameterI4uivNV.?(arg_256, arg_257, arg_258);
}
pub inline fn glMultiDrawElementsBaseVertexEXT(arg_259: GLenum, arg_260: [*c]const GLsizei, arg_261: GLenum, arg_262: [*c]const ?*const c_void, arg_263: GLsizei, arg_264: [*c]const GLint) void {
    return epoxy_glMultiDrawElementsBaseVertexEXT.?(arg_259, arg_260, arg_261, arg_262, arg_263, arg_264);
}
pub inline fn glColor4fNormal3fVertex3fSUN(arg_265: GLfloat, arg_266: GLfloat, arg_267: GLfloat, arg_268: GLfloat, arg_269: GLfloat, arg_270: GLfloat, arg_271: GLfloat, arg_272: GLfloat, arg_273: GLfloat, arg_274: GLfloat) void {
    return epoxy_glColor4fNormal3fVertex3fSUN.?(arg_265, arg_266, arg_267, arg_268, arg_269, arg_270, arg_271, arg_272, arg_273, arg_274);
}
pub inline fn glPathParameteriNV(arg_275: GLuint, arg_276: GLenum, arg_277: GLint) void {
    return epoxy_glPathParameteriNV.?(arg_275, arg_276, arg_277);
}
pub inline fn glFragmentLightModeliSGIX(arg_278: GLenum, arg_279: GLint) void {
    return epoxy_glFragmentLightModeliSGIX.?(arg_278, arg_279);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_EXT = 0x8C8E;
pub inline fn glColor4d(arg_280: GLdouble, arg_281: GLdouble, arg_282: GLdouble, arg_283: GLdouble) void {
    return epoxy_glColor4d.?(arg_280, arg_281, arg_282, arg_283);
}
pub const GL_MAP_READ_BIT = 0x0001;
pub const GL_OVERLAY = 0x9296;
pub const GL_EVAL_TRIANGULAR_2D_NV = 0x86C1;
pub inline fn glSecondaryColor3d(arg_284: GLdouble, arg_285: GLdouble, arg_286: GLdouble) void {
    return epoxy_glSecondaryColor3d.?(arg_284, arg_285, arg_286);
}
pub const GL_VERTEX_ATTRIB_ARRAY12_NV = 0x865C;
pub inline fn __NTHNL(fct: var) @TypeOf(__attribute__(__nothrow__) ++ fct) {
    return __attribute__(__nothrow__) ++ fct;
}
pub inline fn glTexStorage2D(arg_287: GLenum, arg_288: GLsizei, arg_289: GLenum, arg_290: GLsizei, arg_291: GLsizei) void {
    return epoxy_glTexStorage2D.?(arg_287, arg_288, arg_289, arg_290, arg_291);
}
pub inline fn glGetnTexImage(arg_292: GLenum, arg_293: GLint, arg_294: GLenum, arg_295: GLenum, arg_296: GLsizei, arg_297: ?*c_void) void {
    return epoxy_glGetnTexImage.?(arg_292, arg_293, arg_294, arg_295, arg_296, arg_297);
}
pub const GL_OVERLAY_KHR = 0x9296;
pub inline fn glDeleteBuffersARB(arg_298: GLsizei, arg_299: [*c]const GLuint) void {
    return epoxy_glDeleteBuffersARB.?(arg_298, arg_299);
}
pub const GL_2PASS_1_SGIS = 0x80A3;
pub const GL_READ_FRAMEBUFFER_NV = 0x8CA8;
pub const GL_PACK_COMPRESSED_BLOCK_SIZE = 0x912E;
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_OES = 0x8CDA;
pub inline fn glGetFogFuncSGIS(arg_300: [*c]GLfloat) void {
    return epoxy_glGetFogFuncSGIS.?(arg_300);
}
pub const GL_SRC_IN_NV = 0x928A;
pub const GL_ARB_instanced_arrays = 1;
pub const GL_1PASS_EXT = 0x80A1;
pub inline fn glUniform2ui(arg_301: GLint, arg_302: GLuint, arg_303: GLuint) void {
    return epoxy_glUniform2ui.?(arg_301, arg_302, arg_303);
}
pub const GL_TEXTURE_RANGE_LENGTH_APPLE = 0x85B7;
pub const GL_FOG_COORDINATE = 0x8451;
pub const GL_VIDEO_COLOR_CONVERSION_MATRIX_NV = 0x9029;
pub const GL_BGR_EXT = 0x80E0;
pub const __INT16_TYPE__ = c_short;
pub const __PCLMUL__ = 1;
pub const GL_SMALL_CW_ARC_TO_NV = 0x14;
pub const GL_DEPTH_CLAMP_NEAR_AMD = 0x901E;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_MESH_SHADER_NV = 0x959E;
pub inline fn glGetTransformFeedbackVarying(arg_304: GLuint, arg_305: GLuint, arg_306: GLsizei, arg_307: [*c]GLsizei, arg_308: [*c]GLsizei, arg_309: [*c]GLenum, arg_310: [*c]GLchar) void {
    return epoxy_glGetTransformFeedbackVarying.?(arg_304, arg_305, arg_306, arg_307, arg_308, arg_309, arg_310);
}
pub inline fn glGetPerfQueryIdByNameINTEL(arg_311: [*c]GLchar, arg_312: [*c]GLuint) void {
    return epoxy_glGetPerfQueryIdByNameINTEL.?(arg_311, arg_312);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED_NV = 0x8E23;
pub inline fn glColorSubTable(arg_313: GLenum, arg_314: GLsizei, arg_315: GLsizei, arg_316: GLenum, arg_317: GLenum, arg_318: ?*const c_void) void {
    return epoxy_glColorSubTable.?(arg_313, arg_314, arg_315, arg_316, arg_317, arg_318);
}
pub const GL_T2F_C4F_N3F_V3F = 0x2A2C;
pub const GL_TEXTURE_DEPTH_SIZE_ARB = 0x884A;
pub const GL_PIXEL_MAG_FILTER_EXT = 0x8331;
pub const GL_LAYOUT_LINEAR_CPU_CACHED_INTEL = 2;
pub const GL_OES_stencil4 = 1;
pub const GL_NV_shadow_samplers_cube = 1;
pub const GL_UNKNOWN_CONTEXT_RESET_ARB = 0x8255;
pub const GL_VERSION_4_2 = 1;
pub const GL_WEIGHT_ARRAY_STRIDE_ARB = 0x86AA;
pub const GL_RGBA4_DXT5_S3TC = 0x83A5;
pub inline fn glTexCoord4s(arg_319: GLshort, arg_320: GLshort, arg_321: GLshort, arg_322: GLshort) void {
    return epoxy_glTexCoord4s.?(arg_319, arg_320, arg_321, arg_322);
}
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5E;
pub const GL_ARRAY_BUFFER_ARB = 0x8892;
pub inline fn glMapVertexAttrib2dAPPLE(arg_323: GLuint, arg_324: GLuint, arg_325: GLdouble, arg_326: GLdouble, arg_327: GLint, arg_328: GLint, arg_329: GLdouble, arg_330: GLdouble, arg_331: GLint, arg_332: GLint, arg_333: [*c]const GLdouble) void {
    return epoxy_glMapVertexAttrib2dAPPLE.?(arg_323, arg_324, arg_325, arg_326, arg_327, arg_328, arg_329, arg_330, arg_331, arg_332, arg_333);
}
pub const GL_RGB5_A1_EXT = 0x8057;
pub const GL_GEOMETRY_OUTPUT_TYPE = 0x8918;
pub const GL_DRAW_BUFFER9_EXT = 0x882E;
pub const GL_COLOR_ATTACHMENT8_EXT = 0x8CE8;
pub inline fn glDepthRangeIndexedfNV(arg_334: GLuint, arg_335: GLfloat, arg_336: GLfloat) void {
    return epoxy_glDepthRangeIndexedfNV.?(arg_334, arg_335, arg_336);
}
pub const GL_STENCIL_BUFFER_BIT4_QCOM = 0x00100000;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_CLASS = 0x90C9;
pub inline fn glUniformMatrix4x2fvNV(arg_337: GLint, arg_338: GLsizei, arg_339: GLboolean, arg_340: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x2fvNV.?(arg_337, arg_338, arg_339, arg_340);
}
pub const GL_COLOR_ATTACHMENT23 = 0x8CF7;
pub const GL_SCREEN_COORDINATES_REND = 0x8490;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT = 0x8B8B;
pub inline fn glClearNamedBufferDataEXT(arg_341: GLuint, arg_342: GLenum, arg_343: GLenum, arg_344: GLenum, arg_345: ?*const c_void) void {
    return epoxy_glClearNamedBufferDataEXT.?(arg_341, arg_342, arg_343, arg_344, arg_345);
}
pub const __INT_FAST64_MAX__ = @as(c_long, 9223372036854775807);
pub inline fn glPNTrianglesfATI(arg_346: GLenum, arg_347: GLfloat) void {
    return epoxy_glPNTrianglesfATI.?(arg_346, arg_347);
}
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_OES = 0x92D4;
pub inline fn glReplacementCodeuiColor4ubVertex3fvSUN(arg_348: [*c]const GLuint, arg_349: [*c]const GLubyte, arg_350: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiColor4ubVertex3fvSUN.?(arg_348, arg_349, arg_350);
}
pub inline fn glGetnMapiv(arg_351: GLenum, arg_352: GLenum, arg_353: GLsizei, arg_354: [*c]GLint) void {
    return epoxy_glGetnMapiv.?(arg_351, arg_352, arg_353, arg_354);
}
pub inline fn glClearDepthx(arg_355: GLfixed) void {
    return epoxy_glClearDepthx.?(arg_355);
}
pub const GL_SHADER_STORAGE_BUFFER = 0x90D2;
pub inline fn UINT8_C(c: var) @TypeOf(c) {
    return c;
}
pub const GL_POST_COLOR_MATRIX_RED_BIAS_SGI = 0x80B8;
pub inline fn glUniform1ui64vARB(arg_356: GLint, arg_357: GLsizei, arg_358: [*c]const GLuint64) void {
    return epoxy_glUniform1ui64vARB.?(arg_356, arg_357, arg_358);
}
pub const GL_TRANSFORM_FEEDBACK_BINDING = 0x8E25;
pub const GL_HISTOGRAM_BLUE_SIZE_EXT = 0x802A;
pub const GL_VIRTUAL_PAGE_SIZE_Z_EXT = 0x9197;
pub inline fn glFragmentColorMaterialSGIX(arg_359: GLenum, arg_360: GLenum) void {
    return epoxy_glFragmentColorMaterialSGIX.?(arg_359, arg_360);
}
pub const GL_DS_SCALE_NV = 0x8710;
pub const GL_PIXEL_UNPACK_BUFFER_ARB = 0x88EC;
pub const GL_CONTEXT_LOST = 0x0507;
pub inline fn glColor4sv(arg_361: [*c]const GLshort) void {
    return epoxy_glColor4sv.?(arg_361);
}
pub const GL_R8_EXT = 0x8229;
pub const GL_BUFFER_VARIABLE = 0x92E5;
pub inline fn glTexCoord4d(arg_362: GLdouble, arg_363: GLdouble, arg_364: GLdouble, arg_365: GLdouble) void {
    return epoxy_glTexCoord4d.?(arg_362, arg_363, arg_364, arg_365);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8 = 0x93DA;
pub inline fn glBindBufferBaseNV(arg_366: GLenum, arg_367: GLuint, arg_368: GLuint) void {
    return epoxy_glBindBufferBaseNV.?(arg_366, arg_367, arg_368);
}
pub const GL_GEOMETRY_VERTICES_OUT = 0x8916;
pub const GL_EXP = 0x0800;
pub inline fn glTexCoord2fVertex3fSUN(arg_369: GLfloat, arg_370: GLfloat, arg_371: GLfloat, arg_372: GLfloat, arg_373: GLfloat) void {
    return epoxy_glTexCoord2fVertex3fSUN.?(arg_369, arg_370, arg_371, arg_372, arg_373);
}
pub const __USE_ATFILE = 1;
pub inline fn glDrawElementsInstancedBaseInstance(arg_374: GLenum, arg_375: GLsizei, arg_376: GLenum, arg_377: ?*const c_void, arg_378: GLsizei, arg_379: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseInstance.?(arg_374, arg_375, arg_376, arg_377, arg_378, arg_379);
}
pub const GL_VIEW_CLASS_S3TC_DXT3_RGBA = 0x82CE;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE = 0x910A;
pub const GL_INVERT_RGB_NV = 0x92A3;
pub const GL_RGBA_S3TC = 0x83A2;
pub const GL_ONE_MINUS_CONSTANT_COLOR = 0x8002;
pub const GL_DEPTH_COMPONENT32_OES = 0x81A7;
pub inline fn glTexCoord3s(arg_380: GLshort, arg_381: GLshort, arg_382: GLshort) void {
    return epoxy_glTexCoord3s.?(arg_380, arg_381, arg_382);
}
pub const GL_OES_texture_storage_multisample_2d_array = 1;
pub const GL_SHADING_RATE_NO_INVOCATIONS_NV = 0x9564;
pub const GL_MIPMAP = 0x8293;
pub const GL_VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 0x889F;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_EXT = 0x8E83;
pub const GL_LAST_VERTEX_CONVENTION_EXT = 0x8E4E;
pub const GL_OES_texture_compression_astc = 1;
pub const GL_VIRTUAL_PAGE_SIZE_X_EXT = 0x9195;
pub const GL_COMBINER5_NV = 0x8555;
pub const GL_SOURCE0_RGB = 0x8580;
pub const GL_MAX_COMBINED_FRAGMENT_UNIFORM_COMPONENTS = 0x8A33;
pub const GL_FUNC_REVERSE_SUBTRACT_EXT = 0x800B;
pub const GL_RELATIVE_RECT_NV = 0xF7;
pub const GL_HANDLE_TYPE_D3D12_TILEPOOL_EXT = 0x9589;
pub inline fn glGetPixelTexGenParameterivSGIS(arg_383: GLenum, arg_384: [*c]GLint) void {
    return epoxy_glGetPixelTexGenParameterivSGIS.?(arg_383, arg_384);
}
pub const GL_SHADOW_AMBIENT_SGIX = 0x80BF;
pub const GL_COLOR_ATTACHMENT20 = 0x8CF4;
pub const GL_TEXTURE_SWIZZLE_R = 0x8E42;
pub inline fn glGetConvolutionParameterfv(arg_385: GLenum, arg_386: GLenum, arg_387: [*c]GLfloat) void {
    return epoxy_glGetConvolutionParameterfv.?(arg_385, arg_386, arg_387);
}
pub const GL_PROXY_TEXTURE_RECTANGLE = 0x84F7;
pub const GL_MESH_SHADER_NV = 0x9559;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_EXT = 0x8C4C;
pub const GL_ALPHA_TEST_REF = 0x0BC2;
pub inline fn glVertexStream2fATI(arg_388: GLenum, arg_389: GLfloat, arg_390: GLfloat) void {
    return epoxy_glVertexStream2fATI.?(arg_388, arg_389, arg_390);
}
pub inline fn glPopDebugGroupKHR() void {
    return epoxy_glPopDebugGroupKHR.?();
}
pub const __ORDER_PDP_ENDIAN__ = 3412;
pub const GL_RED = 0x1903;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900C;
pub inline fn glProgramUniform2ui64vARB(arg_391: GLuint, arg_392: GLint, arg_393: GLsizei, arg_394: [*c]const GLuint64) void {
    return epoxy_glProgramUniform2ui64vARB.?(arg_391, arg_392, arg_393, arg_394);
}
pub const __DBL_MAX_10_EXP__ = 308;
pub inline fn glGetMaterialiv(arg_395: GLenum, arg_396: GLenum, arg_397: [*c]GLint) void {
    return epoxy_glGetMaterialiv.?(arg_395, arg_396, arg_397);
}
pub const __SIZEOF_LONG__ = 8;
pub const GL_TEXTURE_HEIGHT_QCOM = 0x8BD3;
pub inline fn glSetFragmentShaderConstantATI(arg_398: GLuint, arg_399: [*c]const GLfloat) void {
    return epoxy_glSetFragmentShaderConstantATI.?(arg_398, arg_399);
}
pub const GL_OPERAND0_RGB_ARB = 0x8590;
pub const GL_COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT = 0x8DBE;
pub const GL_POINT_SPRITE = 0x8861;
pub inline fn glIsProgram(arg_400: GLuint) GLboolean {
    return epoxy_glIsProgram.?(arg_400);
}
pub inline fn glGetObjectPtrLabelKHR(arg_401: ?*const c_void, arg_402: GLsizei, arg_403: [*c]GLsizei, arg_404: [*c]GLchar) void {
    return epoxy_glGetObjectPtrLabelKHR.?(arg_401, arg_402, arg_403, arg_404);
}
pub inline fn glRasterPos3f(arg_405: GLfloat, arg_406: GLfloat, arg_407: GLfloat) void {
    return epoxy_glRasterPos3f.?(arg_405, arg_406, arg_407);
}
pub const GL_CAVEAT_SUPPORT = 0x82B8;
pub inline fn glGetNamedBufferSubData(arg_408: GLuint, arg_409: GLintptr, arg_410: GLsizeiptr, arg_411: ?*c_void) void {
    return epoxy_glGetNamedBufferSubData.?(arg_408, arg_409, arg_410, arg_411);
}
pub const GL_QUERY_RESOURCE_TYPE_VIDMEM_ALLOC_NV = 0x9540;
pub inline fn glFragmentLightModelivSGIX(arg_412: GLenum, arg_413: [*c]const GLint) void {
    return epoxy_glFragmentLightModelivSGIX.?(arg_412, arg_413);
}
pub inline fn glNamedBufferSubDataEXT(arg_414: GLuint, arg_415: GLintptr, arg_416: GLsizeiptr, arg_417: ?*const c_void) void {
    return epoxy_glNamedBufferSubDataEXT.?(arg_414, arg_415, arg_416, arg_417);
}
pub inline fn glMapNamedBufferEXT(arg_418: GLuint, arg_419: GLenum) ?*c_void {
    return epoxy_glMapNamedBufferEXT.?(arg_418, arg_419);
}
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE = 0x86A0;
pub const GL_DRAW_BUFFER7 = 0x882C;
pub const GL_IMAGE_CLASS_10_10_10_2 = 0x82C3;
pub const GL_FONT_ASCENDER_BIT_NV = 0x00200000;
pub inline fn glPassTexCoordATI(arg_420: GLuint, arg_421: GLuint, arg_422: GLenum) void {
    return epoxy_glPassTexCoordATI.?(arg_420, arg_421, arg_422);
}
pub const GL_SAMPLE_ALPHA_TO_MASK_EXT = 0x809E;
pub inline fn glNamedCopyBufferSubDataEXT(arg_423: GLuint, arg_424: GLuint, arg_425: GLintptr, arg_426: GLintptr, arg_427: GLsizeiptr) void {
    return epoxy_glNamedCopyBufferSubDataEXT.?(arg_423, arg_424, arg_425, arg_426, arg_427);
}
pub const GL_QUERY_RESOURCE_TEXTURE_NV = 0x9545;
pub const GL_ALPHA = 0x1906;
pub inline fn glMultiTexCoord4iARB(arg_428: GLenum, arg_429: GLint, arg_430: GLint, arg_431: GLint, arg_432: GLint) void {
    return epoxy_glMultiTexCoord4iARB.?(arg_428, arg_429, arg_430, arg_431, arg_432);
}
pub const GL_UNSIGNED_INT_10_10_10_2_EXT = 0x8036;
pub inline fn glVertexAttrib4fNV(arg_433: GLuint, arg_434: GLfloat, arg_435: GLfloat, arg_436: GLfloat, arg_437: GLfloat) void {
    return epoxy_glVertexAttrib4fNV.?(arg_433, arg_434, arg_435, arg_436, arg_437);
}
pub const GL_UNPACK_LSB_FIRST = 0x0CF1;
pub const GL_SMOOTH_LINE_WIDTH_GRANULARITY = 0x0B23;
pub inline fn glVertexAttribL1d(arg_438: GLuint, arg_439: GLdouble) void {
    return epoxy_glVertexAttribL1d.?(arg_438, arg_439);
}
pub const GL_YCRCB_422_SGIX = 0x81BB;
pub inline fn glPathGlyphRangeNV(arg_440: GLuint, arg_441: GLenum, arg_442: ?*const c_void, arg_443: GLbitfield, arg_444: GLuint, arg_445: GLsizei, arg_446: GLenum, arg_447: GLuint, arg_448: GLfloat) void {
    return epoxy_glPathGlyphRangeNV.?(arg_440, arg_441, arg_442, arg_443, arg_444, arg_445, arg_446, arg_447, arg_448);
}
pub const GL_DEBUG_SEVERITY_MEDIUM_ARB = 0x9147;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_Y_AMD = 0x91AF;
pub const GL_INT_SAMPLER_BUFFER_EXT = 0x8DD0;
pub const GL_PIXEL_TEXTURE_SGIS = 0x8353;
pub const GL_PROGRAM_SEPARABLE_EXT = 0x8258;
pub const GL_RGBA16_EXT = 0x805B;
pub const GL_CONVOLUTION_WIDTH = 0x8018;
pub inline fn glMinSampleShadingARB(arg_449: GLfloat) void {
    return epoxy_glMinSampleShadingARB.?(arg_449);
}
pub inline fn glFogCoordfvEXT(arg_450: [*c]const GLfloat) void {
    return epoxy_glFogCoordfvEXT.?(arg_450);
}
pub const __GCC_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const GL_VIRTUAL_PAGE_SIZE_Z_ARB = 0x9197;
pub const GL_PROGRAM_BINARY_FORMATS = 0x87FF;
pub const GL_ARB_seamless_cube_map = 1;
pub const __UID_T_TYPE = __U32_TYPE;
pub const UINTPTR_MAX = @as(c_ulong, 18446744073709551615);
pub const GL_OUTPUT_TEXTURE_COORD4_EXT = 0x87A1;
pub inline fn glProgramUniformMatrix4fvEXT(arg_451: GLuint, arg_452: GLint, arg_453: GLsizei, arg_454: GLboolean, arg_455: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4fvEXT.?(arg_451, arg_452, arg_453, arg_454, arg_455);
}
pub const __SIZE_FMTX__ = "lX";
pub const GL_INTENSITY_EXT = 0x8049;
pub const GL_CURRENT_PROGRAM = 0x8B8D;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORMS = 0x8A42;
pub const GL_EXT_copy_image = 1;
pub inline fn glGetDebugMessageLogAMD(arg_456: GLuint, arg_457: GLsizei, arg_458: [*c]GLenum, arg_459: [*c]GLuint, arg_460: [*c]GLuint, arg_461: [*c]GLsizei, arg_462: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLogAMD.?(arg_456, arg_457, arg_458, arg_459, arg_460, arg_461, arg_462);
}
pub const GL_MIRRORED_REPEAT_IBM = 0x8370;
pub inline fn glGetnUniformivARB(arg_463: GLuint, arg_464: GLint, arg_465: GLsizei, arg_466: [*c]GLint) void {
    return epoxy_glGetnUniformivARB.?(arg_463, arg_464, arg_465, arg_466);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_ARB = 0x8DA8;
pub inline fn glGetQueryObjectui64v(arg_467: GLuint, arg_468: GLenum, arg_469: [*c]GLuint64) void {
    return epoxy_glGetQueryObjectui64v.?(arg_467, arg_468, arg_469);
}
pub const GL_SWIZZLE_STR_ATI = 0x8976;
pub const GL_RGBA16UI_EXT = 0x8D76;
pub const GL_ALPHA_TEST_FUNC = 0x0BC1;
pub const GL_YCRCBA_SGIX = 0x8319;
pub const GL_COLOR_BUFFER_BIT = 0x00004000;
pub const GL_MAP_ATTRIB_U_ORDER_NV = 0x86C3;
pub const GL_STATIC_COPY = 0x88E6;
pub const GL_INDEX_ARRAY_BUFFER_BINDING_ARB = 0x8899;
pub const GL_LINE = 0x1B01;
pub const GL_DEPTH_BIAS = 0x0D1F;
pub const GL_SGIX_texture_scale_bias = 1;
pub const GL_RGBA = 0x1908;
pub const GL_DRAW_BUFFER = 0x0C01;
pub const GL_BINORMAL_ARRAY_TYPE_EXT = 0x8440;
pub const GL_POINT_SMOOTH = 0x0B10;
pub const GL_TEXTURE_BINDING_RENDERBUFFER_NV = 0x8E53;
pub const GL_CLIPPING_INPUT_PRIMITIVES_ARB = 0x82F6;
pub inline fn glNamedFramebufferParameteri(arg_470: GLuint, arg_471: GLenum, arg_472: GLint) void {
    return epoxy_glNamedFramebufferParameteri.?(arg_470, arg_471, arg_472);
}
pub const GL_STATIC_COPY_ARB = 0x88E6;
pub const GL_SUBGROUP_FEATURE_QUAD_BIT_KHR = 0x00000080;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_NV = 0x88EF;
pub const GL_TEXTURE_BLUE_SIZE = 0x805E;
pub const GL_DECR = 0x1E03;
pub const GL_COMPILE_AND_EXECUTE = 0x1301;
pub inline fn glSecondaryColorFormatNV(arg_473: GLint, arg_474: GLenum, arg_475: GLsizei) void {
    return epoxy_glSecondaryColorFormatNV.?(arg_473, arg_474, arg_475);
}
pub const GL_MAX_SAMPLES_EXT = 0x8D57;
pub const GL_IUI_N3F_V3F_EXT = 0x81B0;
pub inline fn glVertexAttribs4svNV(arg_476: GLuint, arg_477: GLsizei, arg_478: [*c]const GLshort) void {
    return epoxy_glVertexAttribs4svNV.?(arg_476, arg_477, arg_478);
}
pub const GL_VERSION_1_0 = 1;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT = 0x8E8D;
pub inline fn glCompressedTexImage2D(arg_479: GLenum, arg_480: GLint, arg_481: GLenum, arg_482: GLsizei, arg_483: GLsizei, arg_484: GLint, arg_485: GLsizei, arg_486: ?*const c_void) void {
    return epoxy_glCompressedTexImage2D.?(arg_479, arg_480, arg_481, arg_482, arg_483, arg_484, arg_485, arg_486);
}
pub inline fn glListParameterfSGIX(arg_487: GLuint, arg_488: GLenum, arg_489: GLfloat) void {
    return epoxy_glListParameterfSGIX.?(arg_487, arg_488, arg_489);
}
pub inline fn glShadingRateImagePaletteNV(arg_490: GLuint, arg_491: GLuint, arg_492: GLsizei, arg_493: [*c]const GLenum) void {
    return epoxy_glShadingRateImagePaletteNV.?(arg_490, arg_491, arg_492, arg_493);
}
pub inline fn glMultiTexEnvivEXT(arg_494: GLenum, arg_495: GLenum, arg_496: GLenum, arg_497: [*c]const GLint) void {
    return epoxy_glMultiTexEnvivEXT.?(arg_494, arg_495, arg_496, arg_497);
}
pub inline fn glConvolutionFilter1DEXT(arg_498: GLenum, arg_499: GLenum, arg_500: GLsizei, arg_501: GLenum, arg_502: GLenum, arg_503: ?*const c_void) void {
    return epoxy_glConvolutionFilter1DEXT.?(arg_498, arg_499, arg_500, arg_501, arg_502, arg_503);
}
pub inline fn glLightModeliv(arg_504: GLenum, arg_505: [*c]const GLint) void {
    return epoxy_glLightModeliv.?(arg_504, arg_505);
}
pub inline fn glPathCommandsNV(arg_506: GLuint, arg_507: GLsizei, arg_508: [*c]const GLubyte, arg_509: GLsizei, arg_510: GLenum, arg_511: ?*const c_void) void {
    return epoxy_glPathCommandsNV.?(arg_506, arg_507, arg_508, arg_509, arg_510, arg_511);
}
pub const GL_COMPRESSED_RGBA_ASTC_8x8_KHR = 0x93B7;
pub const GL_NV_polygon_mode = 1;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_LATC1_EXT = 0x8C71;
pub const GL_SRC_NV = 0x9286;
pub const __ATOMIC_RELAXED = 0;
pub const GL_MAX_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B3;
pub const GL_SAMPLER_CUBE_MAP_ARRAY = 0x900C;
pub const GL_BLUE_BIAS = 0x0D1B;
pub const GL_TEXTURE3 = 0x84C3;
pub const GL_VIEW_CLASS_ASTC_6x6_RGBA = 0x938C;
pub const GL_VIEW_CLASS_8_BITS = 0x82CB;
pub const GL_MAX_VERTEX_UNIFORM_BLOCKS = 0x8A2B;
pub const GL_EXT_robustness = 1;
pub const GL_RENDERBUFFER = 0x8D41;
pub const GL_RGBA4 = 0x8056;
pub inline fn glMaterialx(arg_512: GLenum, arg_513: GLenum, arg_514: GLfixed) void {
    return epoxy_glMaterialx.?(arg_512, arg_513, arg_514);
}
pub inline fn glMultiTexCoord4ivARB(arg_515: GLenum, arg_516: [*c]const GLint) void {
    return epoxy_glMultiTexCoord4ivARB.?(arg_515, arg_516);
}
pub const GL_VERSION_1_4 = 1;
pub const GL_DEPTH_BUFFER_BIT2_QCOM = 0x00000400;
pub inline fn glTexGenfOES(arg_517: GLenum, arg_518: GLenum, arg_519: GLfloat) void {
    return epoxy_glTexGenfOES.?(arg_517, arg_518, arg_519);
}
pub const GL_MULTISAMPLE_SGIS = 0x809D;
pub inline fn glScissorArrayvNV(arg_520: GLuint, arg_521: GLsizei, arg_522: [*c]const GLint) void {
    return epoxy_glScissorArrayvNV.?(arg_520, arg_521, arg_522);
}
pub const GL_VERTEX_ATTRIB_ARRAY3_NV = 0x8653;
pub const GL_VERTEX_ATTRIB_MAP2_ORDER_APPLE = 0x8A08;
pub const PRIxPTR = __PRIPTR_PREFIX ++ "x";
pub inline fn glMultiDrawMeshTasksIndirectCountNV(arg_523: GLintptr, arg_524: GLintptr, arg_525: GLsizei, arg_526: GLsizei) void {
    return epoxy_glMultiDrawMeshTasksIndirectCountNV.?(arg_523, arg_524, arg_525, arg_526);
}
pub const GL_DYNAMIC_COPY_ARB = 0x88EA;
pub inline fn glFogfv(arg_527: GLenum, arg_528: [*c]const GLfloat) void {
    return epoxy_glFogfv.?(arg_527, arg_528);
}
pub const GL_COUNT_UP_NV = 0x9088;
pub inline fn glDeleteFencesNV(arg_529: GLsizei, arg_530: [*c]const GLuint) void {
    return epoxy_glDeleteFencesNV.?(arg_529, arg_530);
}
pub const GL_INDEX_ARRAY_LIST_STRIDE_IBM = 103083;
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT = 0x00000800;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_OES = 0x8CD4;
pub const GL_TEXTURE_GREEN_TYPE = 0x8C11;
pub const GL_PROGRAM_BINDING_ARB = 0x8677;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE = 0x84F8;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_NV = 0x8C7F;
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910C;
pub inline fn glGetnPixelMapfvARB(arg_531: GLenum, arg_532: GLsizei, arg_533: [*c]GLfloat) void {
    return epoxy_glGetnPixelMapfvARB.?(arg_531, arg_532, arg_533);
}
pub const GL_RENDERBUFFER_RED_SIZE_EXT = 0x8D50;
pub const GL_NEGATIVE_ONE_TO_ONE = 0x935E;
pub const __DBL_MIN__ = 2.2250738585072014e-308;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH = 0x8C76;
pub const GL_VERSION_ES_CL_1_0 = 1;
pub inline fn glMultiTexCoord2iv(arg_534: GLenum, arg_535: [*c]const GLint) void {
    return epoxy_glMultiTexCoord2iv.?(arg_534, arg_535);
}
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_OES = 0x900A;
pub const GL_NV_primitive_restart = 1;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV = 0x8365;
pub inline fn glConvolutionFilter2DEXT(arg_536: GLenum, arg_537: GLenum, arg_538: GLsizei, arg_539: GLsizei, arg_540: GLenum, arg_541: GLenum, arg_542: ?*const c_void) void {
    return epoxy_glConvolutionFilter2DEXT.?(arg_536, arg_537, arg_538, arg_539, arg_540, arg_541, arg_542);
}
pub const GL_OUTPUT_TEXTURE_COORD13_EXT = 0x87AA;
pub inline fn glStencilClearTagEXT(arg_543: GLsizei, arg_544: GLuint) void {
    return epoxy_glStencilClearTagEXT.?(arg_543, arg_544);
}
pub const GL_LAYOUT_DEPTH_READ_ONLY_STENCIL_ATTACHMENT_EXT = 0x9530;
pub const GL_ARB_geometry_shader4 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY1_NV = 0x8651;
pub const GL_UNIFORM_BUFFER_SIZE = 0x8A2A;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5E;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES_ARB = 0x82F7;
pub inline fn glVertexAttrib4Nsv(arg_545: GLuint, arg_546: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4Nsv.?(arg_545, arg_546);
}
pub const GL_INTENSITY = 0x8049;
pub inline fn glUniform4i64ARB(arg_547: GLint, arg_548: GLint64, arg_549: GLint64, arg_550: GLint64, arg_551: GLint64) void {
    return epoxy_glUniform4i64ARB.?(arg_547, arg_548, arg_549, arg_550, arg_551);
}
pub const GL_TEXTURE_MIN_FILTER = 0x2801;
pub const GL_INVERTED_SCREEN_W_REND = 0x8491;
pub const GL_UNPACK_IMAGE_HEIGHT = 0x806E;
pub const GL_FOG_DISTANCE_MODE_NV = 0x855A;
pub const GL_PN_TRIANGLES_POINT_MODE_ATI = 0x87F2;
pub const GL_EXT_abgr = 1;
pub const GL_GEOMETRY_VERTICES_OUT_EXT = 0x8DDA;
pub inline fn glMultTransposeMatrixf(arg_552: [*c]const GLfloat) void {
    return epoxy_glMultTransposeMatrixf.?(arg_552);
}
pub inline fn glVertex2dv(arg_553: [*c]const GLdouble) void {
    return epoxy_glVertex2dv.?(arg_553);
}
pub const GL_NV_video_capture = 1;
pub const GL_LUMINANCE16_SNORM = 0x9019;
pub inline fn glCopyTextureImage2DEXT(arg_554: GLuint, arg_555: GLenum, arg_556: GLint, arg_557: GLenum, arg_558: GLint, arg_559: GLint, arg_560: GLsizei, arg_561: GLsizei, arg_562: GLint) void {
    return epoxy_glCopyTextureImage2DEXT.?(arg_554, arg_555, arg_556, arg_557, arg_558, arg_559, arg_560, arg_561, arg_562);
}
pub const PRIuLEAST64 = __PRI64_PREFIX ++ "u";
pub const GL_DRAW_BUFFER10_ATI = 0x882F;
pub const GL_MAT_DIFFUSE_BIT_PGI = 0x00400000;
pub inline fn glClearTexSubImageEXT(arg_563: GLuint, arg_564: GLint, arg_565: GLint, arg_566: GLint, arg_567: GLint, arg_568: GLsizei, arg_569: GLsizei, arg_570: GLsizei, arg_571: GLenum, arg_572: GLenum, arg_573: ?*const c_void) void {
    return epoxy_glClearTexSubImageEXT.?(arg_563, arg_564, arg_565, arg_566, arg_567, arg_568, arg_569, arg_570, arg_571, arg_572, arg_573);
}
pub const GL_PIXEL_MAP_I_TO_A = 0x0C75;
pub const GL_NV_transform_feedback = 1;
pub inline fn glGetColorTableEXT(arg_574: GLenum, arg_575: GLenum, arg_576: GLenum, arg_577: ?*c_void) void {
    return epoxy_glGetColorTableEXT.?(arg_574, arg_575, arg_576, arg_577);
}
pub inline fn glUnmapNamedBuffer(arg_578: GLuint) GLboolean {
    return epoxy_glUnmapNamedBuffer.?(arg_578);
}
pub const GL_DRAW_BUFFER15_ATI = 0x8834;
pub inline fn glIsVariantEnabledEXT(arg_579: GLuint, arg_580: GLenum) GLboolean {
    return epoxy_glIsVariantEnabledEXT.?(arg_579, arg_580);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR = 0x93DA;
pub inline fn glColor3ubv(arg_581: [*c]const GLubyte) void {
    return epoxy_glColor3ubv.?(arg_581);
}
pub inline fn glWaitSemaphoreui64NVX(arg_582: GLuint, arg_583: GLsizei, arg_584: [*c]const GLuint, arg_585: [*c]const GLuint64) void {
    return epoxy_glWaitSemaphoreui64NVX.?(arg_582, arg_583, arg_584, arg_585);
}
pub inline fn glMatrixLoadIdentityEXT(arg_586: GLenum) void {
    return epoxy_glMatrixLoadIdentityEXT.?(arg_586);
}
pub const GL_INTENSITY8 = 0x804B;
pub const UINT_FAST16_MAX = @as(c_ulong, 18446744073709551615);
pub inline fn glEGLImageTargetRenderbufferStorageOES(arg_587: GLenum, arg_588: GLeglImageOES) void {
    return epoxy_glEGLImageTargetRenderbufferStorageOES.?(arg_587, arg_588);
}
pub inline fn glVertexAttrib4iv(arg_589: GLuint, arg_590: [*c]const GLint) void {
    return epoxy_glVertexAttrib4iv.?(arg_589, arg_590);
}
pub const GL_Z4Y12Z4CB12Z4A12Z4Y12Z4CR12Z4A12_4224_NV = 0x9036;
pub const GL_UNIFORM_MATRIX_STRIDE = 0x8A3D;
pub const GL_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0E;
pub inline fn glScissorIndexed(arg_591: GLuint, arg_592: GLint, arg_593: GLint, arg_594: GLsizei, arg_595: GLsizei) void {
    return epoxy_glScissorIndexed.?(arg_591, arg_592, arg_593, arg_594, arg_595);
}
pub const GL_TEXTURE_HI_SIZE_NV = 0x871B;
pub const GL_PIXEL_TEX_GEN_Q_ROUND_SGIX = 0x8185;
pub const __LDBL_MIN__ = @as(c_longdouble, 3.36210314311209350626e-4932);
pub const GL_UNIFORM_BLOCK_DATA_SIZE = 0x8A40;
pub const GL_UNSIGNED_SHORT_1_15_REV_MESA = 0x8754;
pub inline fn glBeginConditionalRenderNV(arg_596: GLuint, arg_597: GLenum) void {
    return epoxy_glBeginConditionalRenderNV.?(arg_596, arg_597);
}
pub const GL_CLIP_PLANE4 = 0x3004;
pub const GL_FRAMEBUFFER_ATTACHMENT_ANGLE = 0x93A3;
pub inline fn glSampleMaskEXT(arg_598: GLclampf, arg_599: GLboolean) void {
    return epoxy_glSampleMaskEXT.?(arg_598, arg_599);
}
pub inline fn glTranslatef(arg_600: GLfloat, arg_601: GLfloat, arg_602: GLfloat) void {
    return epoxy_glTranslatef.?(arg_600, arg_601, arg_602);
}
pub const GL_BLEND_EQUATION_RGB = 0x8009;
pub const GL_MULTISAMPLE = 0x809D;
pub const GL_TESS_EVALUATION_SHADER_BIT = 0x00000010;
pub const GL_SCALE_BY_TWO_NV = 0x853E;
pub const GL_COLOR_ATTACHMENT12_EXT = 0x8CEC;
pub const GL_CLIP_ORIGIN_EXT = 0x935C;
pub const GL_MULT = 0x0103;
pub const GL_MAX_FRAMEBUFFER_LAYERS_EXT = 0x9317;
pub const GL_DRAW_FRAMEBUFFER_APPLE = 0x8CA9;
pub const GL_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AE;
pub const GL_INDEX_WRITEMASK = 0x0C21;
pub inline fn glBufferStorageMemEXT(arg_603: GLenum, arg_604: GLsizeiptr, arg_605: GLuint, arg_606: GLuint64) void {
    return epoxy_glBufferStorageMemEXT.?(arg_603, arg_604, arg_605, arg_606);
}
pub inline fn glBlendFuncSeparateOES(arg_607: GLenum, arg_608: GLenum, arg_609: GLenum, arg_610: GLenum) void {
    return epoxy_glBlendFuncSeparateOES.?(arg_607, arg_608, arg_609, arg_610);
}
pub inline fn glVertex4fv(arg_611: [*c]const GLfloat) void {
    return epoxy_glVertex4fv.?(arg_611);
}
pub const SCNoMAX = __PRI64_PREFIX ++ "o";
pub inline fn glTexCoord2i(arg_612: GLint, arg_613: GLint) void {
    return epoxy_glTexCoord2i.?(arg_612, arg_613);
}
pub const GL_DRAW_BUFFER10 = 0x882F;
pub const __RLIM_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const GL_VIEW_CLASS_S3TC_DXT1_RGB = 0x82CC;
pub inline fn glVertex4xvOES(arg_614: [*c]const GLfixed) void {
    return epoxy_glVertex4xvOES.?(arg_614);
}
pub const GL_NOOP = 0x1505;
pub const GL_TEXTURE12 = 0x84CC;
pub inline fn glCreateShaderObjectARB(arg_615: GLenum) GLhandleARB {
    return epoxy_glCreateShaderObjectARB.?(arg_615);
}
pub const GL_COMPRESSED_RGBA_ASTC_10x6 = 0x93B9;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY = 0x84FF;
pub inline fn glBlendFuncSeparate(arg_616: GLenum, arg_617: GLenum, arg_618: GLenum, arg_619: GLenum) void {
    return epoxy_glBlendFuncSeparate.?(arg_616, arg_617, arg_618, arg_619);
}
pub inline fn glNamedFramebufferSampleLocationsfvARB(arg_620: GLuint, arg_621: GLuint, arg_622: GLsizei, arg_623: [*c]const GLfloat) void {
    return epoxy_glNamedFramebufferSampleLocationsfvARB.?(arg_620, arg_621, arg_622, arg_623);
}
pub inline fn glTestFenceAPPLE(arg_624: GLuint) GLboolean {
    return epoxy_glTestFenceAPPLE.?(arg_624);
}
pub inline fn glMultiTexCoord3d(arg_625: GLenum, arg_626: GLdouble, arg_627: GLdouble, arg_628: GLdouble) void {
    return epoxy_glMultiTexCoord3d.?(arg_625, arg_626, arg_627, arg_628);
}
pub const __UINT_LEAST16_MAX__ = 65535;
pub inline fn glGetTexImage(arg_629: GLenum, arg_630: GLint, arg_631: GLenum, arg_632: GLenum, arg_633: ?*c_void) void {
    return epoxy_glGetTexImage.?(arg_629, arg_630, arg_631, arg_632, arg_633);
}
pub inline fn glBlitFramebufferEXT(arg_634: GLint, arg_635: GLint, arg_636: GLint, arg_637: GLint, arg_638: GLint, arg_639: GLint, arg_640: GLint, arg_641: GLint, arg_642: GLbitfield, arg_643: GLenum) void {
    return epoxy_glBlitFramebufferEXT.?(arg_634, arg_635, arg_636, arg_637, arg_638, arg_639, arg_640, arg_641, arg_642, arg_643);
}
pub inline fn glIsList(arg_644: GLuint) GLboolean {
    return epoxy_glIsList.?(arg_644);
}
pub const GL_EXT_texture_storage = 1;
pub const GL_FRAGMENT_PROGRAM_BINDING_NV = 0x8873;
pub inline fn glGenFencesNV(arg_645: GLsizei, arg_646: [*c]GLuint) void {
    return epoxy_glGenFencesNV.?(arg_645, arg_646);
}
pub inline fn glUniformBufferEXT(arg_647: GLuint, arg_648: GLint, arg_649: GLuint) void {
    return epoxy_glUniformBufferEXT.?(arg_647, arg_648, arg_649);
}
pub inline fn glTextureRenderbufferEXT(arg_650: GLuint, arg_651: GLenum, arg_652: GLuint) void {
    return epoxy_glTextureRenderbufferEXT.?(arg_650, arg_651, arg_652);
}
pub inline fn glIsVertexAttribEnabledAPPLE(arg_653: GLuint, arg_654: GLenum) GLboolean {
    return epoxy_glIsVertexAttribEnabledAPPLE.?(arg_653, arg_654);
}
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE_EXT = 0x845C;
pub const GL_POINT_SIZE_MAX_EXT = 0x8127;
pub const GL_POINT_DISTANCE_ATTENUATION_ARB = 0x8129;
pub const GL_NV_vertex_program2_option = 1;
pub inline fn glProgramUniformMatrix3x4dv(arg_655: GLuint, arg_656: GLint, arg_657: GLsizei, arg_658: GLboolean, arg_659: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x4dv.?(arg_655, arg_656, arg_657, arg_658, arg_659);
}
pub const GL_VERSION_ES_CM_1_0 = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE_ARB = 0x8624;
pub inline fn glBlendEquationSeparateiARB(arg_660: GLuint, arg_661: GLenum, arg_662: GLenum) void {
    return epoxy_glBlendEquationSeparateiARB.?(arg_660, arg_661, arg_662);
}
pub const GL_FLOAT_RGBA32_NV = 0x888B;
pub const GL_CONTEXT_FLAG_DEBUG_BIT = 0x00000002;
pub inline fn glGetActiveAttrib(arg_663: GLuint, arg_664: GLuint, arg_665: GLsizei, arg_666: [*c]GLsizei, arg_667: [*c]GLint, arg_668: [*c]GLenum, arg_669: [*c]GLchar) void {
    return epoxy_glGetActiveAttrib.?(arg_663, arg_664, arg_665, arg_666, arg_667, arg_668, arg_669);
}
pub const GL_RED_BIT_ATI = 0x00000001;
pub const GL_UNSIGNED_SHORT_5_6_5_EXT = 0x8363;
pub const GL_RECIP_ADD_SIGNED_ALPHA_IMG = 0x8C05;
pub inline fn glVertexAttribL2ui64NV(arg_670: GLuint, arg_671: GLuint64EXT, arg_672: GLuint64EXT) void {
    return epoxy_glVertexAttribL2ui64NV.?(arg_670, arg_671, arg_672);
}
pub const GL_OBJECT_POINT_SGIS = 0x81F5;
pub const GL_VIEW_CLASS_RGTC1_RED = 0x82D0;
pub inline fn glProgramUniform2uivEXT(arg_673: GLuint, arg_674: GLint, arg_675: GLsizei, arg_676: [*c]const GLuint) void {
    return epoxy_glProgramUniform2uivEXT.?(arg_673, arg_674, arg_675, arg_676);
}
pub inline fn glTangent3dEXT(arg_677: GLdouble, arg_678: GLdouble, arg_679: GLdouble) void {
    return epoxy_glTangent3dEXT.?(arg_677, arg_678, arg_679);
}
pub inline fn glTextureStorage2DEXT(arg_680: GLuint, arg_681: GLenum, arg_682: GLsizei, arg_683: GLenum, arg_684: GLsizei, arg_685: GLsizei) void {
    return epoxy_glTextureStorage2DEXT.?(arg_680, arg_681, arg_682, arg_683, arg_684, arg_685);
}
pub const GL_POST_CONVOLUTION_ALPHA_SCALE = 0x801F;
pub inline fn glSampleCoveragexOES(arg_686: GLclampx, arg_687: GLboolean) void {
    return epoxy_glSampleCoveragexOES.?(arg_686, arg_687);
}
pub const GL_TEXTURE_GATHER_SHADOW = 0x82A3;
pub const GL_BLUE_MIN_CLAMP_INGR = 0x8562;
pub const GL_EXT_stencil_two_side = 1;
pub inline fn glMatrixLoadTranspose3x3fNV(arg_688: GLenum, arg_689: [*c]const GLfloat) void {
    return epoxy_glMatrixLoadTranspose3x3fNV.?(arg_688, arg_689);
}
pub inline fn glMaterialiv(arg_690: GLenum, arg_691: GLenum, arg_692: [*c]const GLint) void {
    return epoxy_glMaterialiv.?(arg_690, arg_691, arg_692);
}
pub const GL_NV_viewport_array = 1;
pub const GL_MODELVIEW13_ARB = 0x872D;
pub const GL_TIMESTAMP_EXT = 0x8E28;
pub const GL_EXT_multiview_tessellation_geometry_shader = 1;
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB = 0x8B8B;
pub inline fn glMulticastScissorArrayvNVX(arg_693: GLuint, arg_694: GLuint, arg_695: GLsizei, arg_696: [*c]const GLint) void {
    return epoxy_glMulticastScissorArrayvNVX.?(arg_693, arg_694, arg_695, arg_696);
}
pub const GL_Y_EXT = 0x87D6;
pub const __OPENCL_MEMORY_SCOPE_WORK_GROUP = 1;
pub inline fn glDeleteLists(arg_697: GLuint, arg_698: GLsizei) void {
    return epoxy_glDeleteLists.?(arg_697, arg_698);
}
pub inline fn glDrawTransformFeedbackEXT(arg_699: GLenum, arg_700: GLuint) void {
    return epoxy_glDrawTransformFeedbackEXT.?(arg_699, arg_700);
}
pub const GL_COLOR_SAMPLES_NV = 0x8E20;
pub const KHRONOS_MAX_ENUM = 0x7FFFFFFF;
pub inline fn glClientActiveTextureARB(arg_701: GLenum) void {
    return epoxy_glClientActiveTextureARB.?(arg_701);
}
pub inline fn glDeformSGIX(arg_702: GLbitfield) void {
    return epoxy_glDeformSGIX.?(arg_702);
}
pub const PRIXFAST64 = __PRI64_PREFIX ++ "X";
pub const GL_NV_vertex_program3 = 1;
pub inline fn glUniformMatrix2x4fv(arg_703: GLint, arg_704: GLsizei, arg_705: GLboolean, arg_706: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x4fv.?(arg_703, arg_704, arg_705, arg_706);
}
pub inline fn glRectf(arg_707: GLfloat, arg_708: GLfloat, arg_709: GLfloat, arg_710: GLfloat) void {
    return epoxy_glRectf.?(arg_707, arg_708, arg_709, arg_710);
}
pub const GL_FRAMEBUFFER_OES = 0x8D40;
pub const GL_REG_5_ATI = 0x8926;
pub inline fn glFramebufferTextureLayerDownsampleIMG(arg_711: GLenum, arg_712: GLenum, arg_713: GLuint, arg_714: GLint, arg_715: GLint, arg_716: GLint, arg_717: GLint) void {
    return epoxy_glFramebufferTextureLayerDownsampleIMG.?(arg_711, arg_712, arg_713, arg_714, arg_715, arg_716, arg_717);
}
pub inline fn glProgramUniform2i64vNV(arg_718: GLuint, arg_719: GLint, arg_720: GLsizei, arg_721: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform2i64vNV.?(arg_718, arg_719, arg_720, arg_721);
}
pub inline fn glTexImage1D(arg_722: GLenum, arg_723: GLint, arg_724: GLint, arg_725: GLsizei, arg_726: GLint, arg_727: GLenum, arg_728: GLenum, arg_729: ?*const c_void) void {
    return epoxy_glTexImage1D.?(arg_722, arg_723, arg_724, arg_725, arg_726, arg_727, arg_728, arg_729);
}
pub inline fn glGetnColorTableARB(arg_730: GLenum, arg_731: GLenum, arg_732: GLenum, arg_733: GLsizei, arg_734: ?*c_void) void {
    return epoxy_glGetnColorTableARB.?(arg_730, arg_731, arg_732, arg_733, arg_734);
}
pub inline fn glUniformMatrix2fv(arg_735: GLint, arg_736: GLsizei, arg_737: GLboolean, arg_738: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2fv.?(arg_735, arg_736, arg_737, arg_738);
}
pub const GL_EXT_clip_volume_hint = 1;
pub const SCNoLEAST16 = "ho";
pub const GL_MAX_MESH_ATOMIC_COUNTERS_NV = 0x8E65;
pub const __CLOCKID_T_TYPE = __S32_TYPE;
pub const GL_TEXTURE_COMPRESSED = 0x86A1;
pub const GL_VERTEX_CONSISTENT_HINT_PGI = 0x1A22B;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY = 0x9069;
pub const GL_DRAW_BUFFER_EXT = 0x0C01;
pub const GL_DU8DV8_ATI = 0x877A;
pub const GL_QUERY_RESULT_EXT = 0x8866;
pub const GL_VERTEX_ATTRIB_ARRAY_STRIDE = 0x8624;
pub const GL_CON_10_ATI = 0x894B;
pub const GL_GPU_MEMORY_INFO_DEDICATED_VIDMEM_NVX = 0x9047;
pub inline fn glNormal3fVertex3fvSUN(arg_739: [*c]const GLfloat, arg_740: [*c]const GLfloat) void {
    return epoxy_glNormal3fVertex3fvSUN.?(arg_739, arg_740);
}
pub const GL_TEXTURE_SWIZZLE_RGBA_EXT = 0x8E46;
pub const GL_SHADER_IMAGE_LOAD = 0x82A4;
pub inline fn glEvalCoord2f(arg_741: GLfloat, arg_742: GLfloat) void {
    return epoxy_glEvalCoord2f.?(arg_741, arg_742);
}
pub const GL_TEXTURE_FILTER_CONTROL = 0x8500;
pub const GL_ONE_MINUS_SRC_ALPHA = 0x0303;
pub inline fn glDrawMeshTasksIndirectNV(arg_743: GLintptr) void {
    return epoxy_glDrawMeshTasksIndirectNV.?(arg_743);
}
pub inline fn glGetActiveUniform(arg_744: GLuint, arg_745: GLuint, arg_746: GLsizei, arg_747: [*c]GLsizei, arg_748: [*c]GLint, arg_749: [*c]GLenum, arg_750: [*c]GLchar) void {
    return epoxy_glGetActiveUniform.?(arg_744, arg_745, arg_746, arg_747, arg_748, arg_749, arg_750);
}
pub inline fn glPushClientAttribDefaultEXT(arg_751: GLbitfield) void {
    return epoxy_glPushClientAttribDefaultEXT.?(arg_751);
}
pub inline fn glWindowPos4dMESA(arg_752: GLdouble, arg_753: GLdouble, arg_754: GLdouble, arg_755: GLdouble) void {
    return epoxy_glWindowPos4dMESA.?(arg_752, arg_753, arg_754, arg_755);
}
pub const GL_IMAGE_MAG_FILTER_HP = 0x815C;
pub const GL_Z6Y10Z6CB10Z6Y10Z6CR10_422_NV = 0x9033;
pub const GL_SPRITE_SGIX = 0x8148;
pub const GL_UNSIGNED_SHORT_4_4_4_4_EXT = 0x8033;
pub const GL_ORDER = 0x0A01;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START = 0x8C84;
pub const GL_NV_texgen_reflection = 1;
pub inline fn glGetMinmaxParameterfvEXT(arg_756: GLenum, arg_757: GLenum, arg_758: [*c]GLfloat) void {
    return epoxy_glGetMinmaxParameterfvEXT.?(arg_756, arg_757, arg_758);
}
pub const GL_REG_12_ATI = 0x892D;
pub const GL_FLOAT16_VEC3_NV = 0x8FFA;
pub inline fn glIndexf(arg_759: GLfloat) void {
    return epoxy_glIndexf.?(arg_759);
}
pub const GL_PATH_MODELVIEW_NV = 0x1700;
pub const GL_ARB_copy_buffer = 1;
pub inline fn glGetPathCoordsNV(arg_760: GLuint, arg_761: [*c]GLfloat) void {
    return epoxy_glGetPathCoordsNV.?(arg_760, arg_761);
}
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_EXT = 0x88FD;
pub inline fn glProgramUniform3i(arg_762: GLuint, arg_763: GLint, arg_764: GLint, arg_765: GLint, arg_766: GLint) void {
    return epoxy_glProgramUniform3i.?(arg_762, arg_763, arg_764, arg_765, arg_766);
}
pub const GL_OES_mapbuffer = 1;
pub const GL_HISTOGRAM_LUMINANCE_SIZE_EXT = 0x802C;
pub const GL_NV_shader_atomic_fp16_vector = 1;
pub const GL_POST_CONVOLUTION_ALPHA_BIAS_EXT = 0x8023;
pub inline fn glGetGraphicsResetStatusARB() GLenum {
    return epoxy_glGetGraphicsResetStatusARB.?();
}
pub const GL_VIEW_CLASS_ASTC_4x4_RGBA = 0x9388;
pub const GL_VERTEX_SHADER_BINDING_EXT = 0x8781;
pub const GL_ARB_ES3_2_compatibility = 1;
pub const GL_UNPACK_SKIP_IMAGES_EXT = 0x806D;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_KHR = 0x8247;
pub const GL_GEOMETRY_SHADER_BIT_OES = 0x00000004;
pub const GL_OPERAND1_RGB = 0x8591;
pub const GL_LIGHT6 = 0x4006;
pub const GL_OUTPUT_TEXTURE_COORD7_EXT = 0x87A4;
pub inline fn glWeightivARB(arg_767: GLint, arg_768: [*c]const GLint) void {
    return epoxy_glWeightivARB.?(arg_767, arg_768);
}
pub const GL_QUERY = 0x82E3;
pub inline fn glVertex3dv(arg_769: [*c]const GLdouble) void {
    return epoxy_glVertex3dv.?(arg_769);
}
pub const GL_UNPACK_FLIP_Y_WEBGL = 0x9240;
pub const GL_MATRIX16_ARB = 0x88D0;
pub inline fn glMultiTexCoord4i(arg_770: GLenum, arg_771: GLint, arg_772: GLint, arg_773: GLint, arg_774: GLint) void {
    return epoxy_glMultiTexCoord4i.?(arg_770, arg_771, arg_772, arg_773, arg_774);
}
pub const GL_MAX_WIDTH = 0x827E;
pub inline fn glFramebufferTexture2DOES(arg_775: GLenum, arg_776: GLenum, arg_777: GLenum, arg_778: GLuint, arg_779: GLint) void {
    return epoxy_glFramebufferTexture2DOES.?(arg_775, arg_776, arg_777, arg_778, arg_779);
}
pub inline fn glMultiTexCoord3svARB(arg_780: GLenum, arg_781: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord3svARB.?(arg_780, arg_781);
}
pub const GL_MAP_INVALIDATE_BUFFER_BIT_EXT = 0x0008;
pub inline fn glTexCoord1i(arg_782: GLint) void {
    return epoxy_glTexCoord1i.?(arg_782);
}
pub const GL_QCOM_binning_control = 1;
pub const GL_VERTEX_SHADER_VARIANTS_EXT = 0x87D0;
pub const _STDINT_H = 1;
pub inline fn glMultiTexEnviEXT(arg_783: GLenum, arg_784: GLenum, arg_785: GLenum, arg_786: GLint) void {
    return epoxy_glMultiTexEnviEXT.?(arg_783, arg_784, arg_785, arg_786);
}
pub inline fn glClearAccum(arg_787: GLfloat, arg_788: GLfloat, arg_789: GLfloat, arg_790: GLfloat) void {
    return epoxy_glClearAccum.?(arg_787, arg_788, arg_789, arg_790);
}
pub const GL_FOG = 0x0B60;
pub inline fn glReadnPixels(arg_791: GLint, arg_792: GLint, arg_793: GLsizei, arg_794: GLsizei, arg_795: GLenum, arg_796: GLenum, arg_797: GLsizei, arg_798: ?*c_void) void {
    return epoxy_glReadnPixels.?(arg_791, arg_792, arg_793, arg_794, arg_795, arg_796, arg_797, arg_798);
}
pub const GL_DETACHED_MEMORY_INCARNATION_NV = 0x95A9;
pub inline fn glWriteMaskEXT(arg_799: GLuint, arg_800: GLuint, arg_801: GLenum, arg_802: GLenum, arg_803: GLenum, arg_804: GLenum) void {
    return epoxy_glWriteMaskEXT.?(arg_799, arg_800, arg_801, arg_802, arg_803, arg_804);
}
pub const GL_APPLE_framebuffer_multisample = 1;
pub inline fn glEnablei(arg_805: GLenum, arg_806: GLuint) void {
    return epoxy_glEnablei.?(arg_805, arg_806);
}
pub const GL_ARB_imaging = 1;
pub const GL_ES_VERSION_3_0 = 1;
pub const GL_CON_30_ATI = 0x895F;
pub const GL_POST_CONVOLUTION_BLUE_BIAS_EXT = 0x8022;
pub const GL_LINEAR_SHARPEN_COLOR_SGIS = 0x80AF;
pub const GL_OBJECT_SHADER_SOURCE_LENGTH_ARB = 0x8B88;
pub const GL_ARB_draw_indirect = 1;
pub const __UINT_LEAST32_FMTo__ = "o";
pub inline fn glSampleMaski(arg_807: GLuint, arg_808: GLbitfield) void {
    return epoxy_glSampleMaski.?(arg_807, arg_808);
}
pub const GL_LAYOUT_LINEAR_INTEL = 1;
pub const GL_PARTIAL_SUCCESS_NV = 0x902E;
pub inline fn glBufferData(arg_809: GLenum, arg_810: GLsizeiptr, arg_811: ?*const c_void, arg_812: GLenum) void {
    return epoxy_glBufferData.?(arg_809, arg_810, arg_811, arg_812);
}
pub const GL_AMD_vertex_shader_viewport_index = 1;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_AMD = 0x9003;
pub const GL_ARB_stencil_texturing = 1;
pub const GL_PATCH_VERTICES_OES = 0x8E72;
pub const GL_DRAW_BUFFER3_NV = 0x8828;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW = 0x900D;
pub const GL_TESS_GEN_POINT_MODE_EXT = 0x8E79;
pub const GL_PERFQUERY_WAIT_INTEL = 0x83FB;
pub const GL_PROGRAM_OBJECT_ARB = 0x8B40;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_EXT = 0x8C2B;
pub inline fn glDrawElementsBaseVertexEXT(arg_813: GLenum, arg_814: GLsizei, arg_815: GLenum, arg_816: ?*const c_void, arg_817: GLint) void {
    return epoxy_glDrawElementsBaseVertexEXT.?(arg_813, arg_814, arg_815, arg_816, arg_817);
}
pub const GL_C4UB_V3F = 0x2A23;
pub const GL_NV_read_buffer = 1;
pub const GL_IMAGE_ROTATE_ORIGIN_Y_HP = 0x815B;
pub inline fn glGetnHistogram(arg_818: GLenum, arg_819: GLboolean, arg_820: GLenum, arg_821: GLenum, arg_822: GLsizei, arg_823: ?*c_void) void {
    return epoxy_glGetnHistogram.?(arg_818, arg_819, arg_820, arg_821, arg_822, arg_823);
}
pub inline fn glListParameterfvSGIX(arg_824: GLuint, arg_825: GLenum, arg_826: [*c]const GLfloat) void {
    return epoxy_glListParameterfvSGIX.?(arg_824, arg_825, arg_826);
}
pub const GL_GEOMETRY_SHADER_INVOCATIONS_OES = 0x887F;
pub const GL_TEXTURE_GEQUAL_R_SGIX = 0x819D;
pub const GL_SAMPLER_2D_ARRAY_SHADOW = 0x8DC4;
pub const GL_INTENSITY16I_EXT = 0x8D8B;
pub const GL_OUTPUT_TEXTURE_COORD2_EXT = 0x879F;
pub const GL_SYNC_STATUS_APPLE = 0x9114;
pub inline fn glGenBuffers(arg_827: GLsizei, arg_828: [*c]GLuint) void {
    return epoxy_glGenBuffers.?(arg_827, arg_828);
}
pub inline fn glVDPAURegisterVideoSurfaceWithPictureStructureNV(arg_829: ?*const c_void, arg_830: GLenum, arg_831: GLsizei, arg_832: [*c]const GLuint, arg_833: GLboolean) GLvdpauSurfaceNV {
    return epoxy_glVDPAURegisterVideoSurfaceWithPictureStructureNV.?(arg_829, arg_830, arg_831, arg_832, arg_833);
}
pub const GL_INT64_VEC2_NV = 0x8FE9;
pub const GL_ELEMENT_ARRAY_LENGTH_NV = 0x8F33;
pub const GL_MODELVIEW7_ARB = 0x8727;
pub const GL_SAMPLE_SHADING = 0x8C36;
pub inline fn glDrawBuffersARB(arg_834: GLsizei, arg_835: [*c]const GLenum) void {
    return epoxy_glDrawBuffersARB.?(arg_834, arg_835);
}
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_OES = 0x90CB;
pub const GL_MULTICAST_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9549;
pub const GL_CONTEXT_ROBUST_ACCESS_KHR = 0x90F3;
pub const GL_DOT3_RGBA = 0x86AF;
pub const GL_RGBA32I = 0x8D82;
pub const GL_DOUBLE = 0x140A;
pub const GL_TEXTURE_GEN_T = 0x0C61;
pub const GL_CONSERVATIVE_RASTERIZATION_INTEL = 0x83FE;
pub const GL_KHR_texture_compression_astc_sliced_3d = 1;
pub const GL_TEXTURE_OBJECT_VALID_QCOM = 0x8BDB;
pub inline fn glFramebufferTexture2D(arg_836: GLenum, arg_837: GLenum, arg_838: GLenum, arg_839: GLuint, arg_840: GLint) void {
    return epoxy_glFramebufferTexture2D.?(arg_836, arg_837, arg_838, arg_839, arg_840);
}
pub inline fn glSetInvariantEXT(arg_841: GLuint, arg_842: GLenum, arg_843: ?*const c_void) void {
    return epoxy_glSetInvariantEXT.?(arg_841, arg_842, arg_843);
}
pub const GL_RETAINED_APPLE = 0x8A1B;
pub const GL_IMAGE_CLASS_1_X_32 = 0x82BB;
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9056;
pub const PRIuMAX = __PRI64_PREFIX ++ "u";
pub inline fn glVertexP2ui(arg_844: GLenum, arg_845: GLuint) void {
    return epoxy_glVertexP2ui.?(arg_844, arg_845);
}
pub const GL_OP_POWER_EXT = 0x8793;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x9009;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Z_NV = 0x9355;
pub const GL_OES_texture_half_float_linear = 1;
pub const __LONG_MAX__ = @as(c_long, 9223372036854775807);
pub const GL_TEXTURE_FILTER4_SIZE_SGIS = 0x8147;
pub inline fn glRotatef(arg_846: GLfloat, arg_847: GLfloat, arg_848: GLfloat, arg_849: GLfloat) void {
    return epoxy_glRotatef.?(arg_846, arg_847, arg_848, arg_849);
}
pub const GL_REG_30_ATI = 0x893F;
pub const GL_TESS_GEN_VERTEX_ORDER = 0x8E78;
pub const GL_LINE_WIDTH_RANGE = 0x0B22;
pub const GL_TEXTURE_VIEW = 0x82B5;
pub inline fn glMinSampleShading(arg_850: GLfloat) void {
    return epoxy_glMinSampleShading.?(arg_850);
}
pub inline fn glFreeObjectBufferATI(arg_851: GLuint) void {
    return epoxy_glFreeObjectBufferATI.?(arg_851);
}
pub const GL_TRIANGLE_STRIP_ADJACENCY = 0x000D;
pub inline fn glTexCoord1bOES(arg_852: GLbyte) void {
    return epoxy_glTexCoord1bOES.?(arg_852);
}
pub inline fn glGetVertexAttribfvNV(arg_853: GLuint, arg_854: GLenum, arg_855: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribfvNV.?(arg_853, arg_854, arg_855);
}
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES_EXT = 0x82FA;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5C;
pub const GL_COMPRESSED_RG11_EAC_OES = 0x9272;
pub inline fn glTextureSubImage3DEXT(arg_856: GLuint, arg_857: GLenum, arg_858: GLint, arg_859: GLint, arg_860: GLint, arg_861: GLint, arg_862: GLsizei, arg_863: GLsizei, arg_864: GLsizei, arg_865: GLenum, arg_866: GLenum, arg_867: ?*const c_void) void {
    return epoxy_glTextureSubImage3DEXT.?(arg_856, arg_857, arg_858, arg_859, arg_860, arg_861, arg_862, arg_863, arg_864, arg_865, arg_866, arg_867);
}
pub const GL_DYNAMIC_READ_ARB = 0x88E9;
pub inline fn glUniformui64vNV(arg_868: GLint, arg_869: GLsizei, arg_870: [*c]const GLuint64EXT) void {
    return epoxy_glUniformui64vNV.?(arg_868, arg_869, arg_870);
}
pub inline fn glNormal3fVertex3fSUN(arg_871: GLfloat, arg_872: GLfloat, arg_873: GLfloat, arg_874: GLfloat, arg_875: GLfloat, arg_876: GLfloat) void {
    return epoxy_glNormal3fVertex3fSUN.?(arg_871, arg_872, arg_873, arg_874, arg_875, arg_876);
}
pub const GL_OP_MULTIPLY_MATRIX_EXT = 0x8798;
pub inline fn glGenTransformFeedbacksNV(arg_877: GLsizei, arg_878: [*c]GLuint) void {
    return epoxy_glGenTransformFeedbacksNV.?(arg_877, arg_878);
}
pub const GL_SAMPLER_BUFFER_OES = 0x8DC2;
pub inline fn glMultiTexCoord3xOES(arg_879: GLenum, arg_880: GLfixed, arg_881: GLfixed, arg_882: GLfixed) void {
    return epoxy_glMultiTexCoord3xOES.?(arg_879, arg_880, arg_881, arg_882);
}
pub const GL_EXTERNAL_STORAGE_BIT_NVX = 0x2000;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TASK_SHADER_NV = 0x959F;
pub const GL_SPOT_DIRECTION = 0x1204;
pub const GL_LIGHT_MODEL_SPECULAR_VECTOR_APPLE = 0x85B0;
pub const GL_COLOR_ARRAY_LIST_STRIDE_IBM = 103082;
pub inline fn glVariantdvEXT(arg_883: GLuint, arg_884: [*c]const GLdouble) void {
    return epoxy_glVariantdvEXT.?(arg_883, arg_884);
}
pub const GL_SUBPIXEL_BITS = 0x0D50;
pub inline fn glDeleteShader(arg_885: GLuint) void {
    return epoxy_glDeleteShader.?(arg_885);
}
pub inline fn glNamedProgramLocalParameterI4iEXT(arg_886: GLuint, arg_887: GLenum, arg_888: GLuint, arg_889: GLint, arg_890: GLint, arg_891: GLint, arg_892: GLint) void {
    return epoxy_glNamedProgramLocalParameterI4iEXT.?(arg_886, arg_887, arg_888, arg_889, arg_890, arg_891, arg_892);
}
pub const GL_CONTEXT_ROBUST_ACCESS_EXT = 0x90F3;
pub const GL_SHADER_IMAGE_STORE = 0x82A5;
pub inline fn glTessellationFactorAMD(arg_893: GLfloat) void {
    return epoxy_glTessellationFactorAMD.?(arg_893);
}
pub const GL_CURRENT_OCCLUSION_QUERY_ID_NV = 0x8865;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_OES = 0x851A;
pub const GL_COMPRESSED_SRGB_EXT = 0x8C48;
pub const GL_MAX_COMBINED_VERTEX_UNIFORM_COMPONENTS = 0x8A31;
pub inline fn glScissorIndexedOES(arg_894: GLuint, arg_895: GLint, arg_896: GLint, arg_897: GLsizei, arg_898: GLsizei) void {
    return epoxy_glScissorIndexedOES.?(arg_894, arg_895, arg_896, arg_897, arg_898);
}
pub inline fn glGetNamedBufferParameterui64vNV(arg_899: GLuint, arg_900: GLenum, arg_901: [*c]GLuint64EXT) void {
    return epoxy_glGetNamedBufferParameterui64vNV.?(arg_899, arg_900, arg_901);
}
pub inline fn glVertexArrayParameteriAPPLE(arg_902: GLenum, arg_903: GLint) void {
    return epoxy_glVertexArrayParameteriAPPLE.?(arg_902, arg_903);
}
pub inline fn glDeletePerfQueryINTEL(arg_904: GLuint) void {
    return epoxy_glDeletePerfQueryINTEL.?(arg_904);
}
pub const GL_UNIFORM_BLOCK_INDEX = 0x8A3A;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_NV = 0x9341;
pub inline fn glIsMemoryObjectEXT(arg_905: GLuint) GLboolean {
    return epoxy_glIsMemoryObjectEXT.?(arg_905);
}
pub inline fn glCopyColorTable(arg_906: GLenum, arg_907: GLenum, arg_908: GLint, arg_909: GLint, arg_910: GLsizei) void {
    return epoxy_glCopyColorTable.?(arg_906, arg_907, arg_908, arg_909, arg_910);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR = 0x93D2;
pub inline fn glGetMultiTexParameterIivEXT(arg_911: GLenum, arg_912: GLenum, arg_913: GLenum, arg_914: [*c]GLint) void {
    return epoxy_glGetMultiTexParameterIivEXT.?(arg_911, arg_912, arg_913, arg_914);
}
pub inline fn glWeightdvARB(arg_915: GLint, arg_916: [*c]const GLdouble) void {
    return epoxy_glWeightdvARB.?(arg_915, arg_916);
}
pub inline fn glGetMapParameterivNV(arg_917: GLenum, arg_918: GLenum, arg_919: [*c]GLint) void {
    return epoxy_glGetMapParameterivNV.?(arg_917, arg_918, arg_919);
}
pub inline fn glDeleteProgramPipelinesEXT(arg_920: GLsizei, arg_921: [*c]const GLuint) void {
    return epoxy_glDeleteProgramPipelinesEXT.?(arg_920, arg_921);
}
pub inline fn glGetStringi(arg_922: GLenum, arg_923: GLuint) [*c]const GLubyte {
    return epoxy_glGetStringi.?(arg_922, arg_923);
}
pub const GL_EXT_convolution = 1;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_OES = 0x8C29;
pub const GL_IMAGE_2D_ARRAY = 0x9053;
pub inline fn glVertex2bOES(arg_924: GLbyte, arg_925: GLbyte) void {
    return epoxy_glVertex2bOES.?(arg_924, arg_925);
}
pub const GL_CURRENT_RASTER_COLOR = 0x0B04;
pub inline fn glEnable(arg_926: GLenum) void {
    return epoxy_glEnable.?(arg_926);
}
pub const __INT_FAST32_FMTi__ = "i";
pub const GL_INTENSITY16F_ARB = 0x881D;
pub inline fn __LDBL_REDIR1_NTH(name: var, proto: var, alias: var) @TypeOf(name ++ (proto ++ __THROW)) {
    return name ++ (proto ++ __THROW);
}
pub const __UINT64_FMTo__ = "lo";
pub const GL_LUMINANCE4_ALPHA4_OES = 0x8043;
pub inline fn glDisableVertexAttribAPPLE(arg_927: GLuint, arg_928: GLenum) void {
    return epoxy_glDisableVertexAttribAPPLE.?(arg_927, arg_928);
}
pub const GL_COLOR_ATTACHMENT9 = 0x8CE9;
pub const GL_UNSIGNED_INT_S8_S8_8_8_NV = 0x86DA;
pub const __attribute_used__ = __attribute__(__used__);
pub inline fn glGetActiveSubroutineName(arg_929: GLuint, arg_930: GLenum, arg_931: GLuint, arg_932: GLsizei, arg_933: [*c]GLsizei, arg_934: [*c]GLchar) void {
    return epoxy_glGetActiveSubroutineName.?(arg_929, arg_930, arg_931, arg_932, arg_933, arg_934);
}
pub inline fn glGetSharpenTexFuncSGIS(arg_935: GLenum, arg_936: [*c]GLfloat) void {
    return epoxy_glGetSharpenTexFuncSGIS.?(arg_935, arg_936);
}
pub const GL_ATOMIC_COUNTER_BUFFER_START = 0x92C2;
pub const GL_CLIENT_STORAGE_BIT_EXT = 0x0200;
pub const GL_SCREEN = 0x9295;
pub const GL_MAX_DEFORMATION_ORDER_SGIX = 0x8197;
pub inline fn glVertexAttribL1dEXT(arg_937: GLuint, arg_938: GLdouble) void {
    return epoxy_glVertexAttribL1dEXT.?(arg_937, arg_938);
}
pub const GL_TEXTURE18_ARB = 0x84D2;
pub inline fn glMulticastBufferSubDataNV(arg_939: GLbitfield, arg_940: GLuint, arg_941: GLintptr, arg_942: GLsizeiptr, arg_943: ?*const c_void) void {
    return epoxy_glMulticastBufferSubDataNV.?(arg_939, arg_940, arg_941, arg_942, arg_943);
}
pub const GL_RESTART_PATH_NV = 0xF0;
pub inline fn glFinalCombinerInputNV(arg_944: GLenum, arg_945: GLenum, arg_946: GLenum, arg_947: GLenum) void {
    return epoxy_glFinalCombinerInputNV.?(arg_944, arg_945, arg_946, arg_947);
}
pub const GL_PIXEL_CUBIC_WEIGHT_EXT = 0x8333;
pub const GL_COLOR_ATTACHMENT26 = 0x8CFA;
pub const GL_RGBA32UI = 0x8D70;
pub inline fn glCoverageOperationNV(arg_948: GLenum) void {
    return epoxy_glCoverageOperationNV.?(arg_948);
}
pub const GL_INDEX_ARRAY_COUNT_EXT = 0x8087;
pub const GL_SYNC_CL_EVENT_ARB = 0x8240;
pub inline fn glDrawElementsInstancedARB(arg_949: GLenum, arg_950: GLsizei, arg_951: GLenum, arg_952: ?*const c_void, arg_953: GLsizei) void {
    return epoxy_glDrawElementsInstancedARB.?(arg_949, arg_950, arg_951, arg_952, arg_953);
}
pub inline fn glGetnUniformfv(arg_954: GLuint, arg_955: GLint, arg_956: GLsizei, arg_957: [*c]GLfloat) void {
    return epoxy_glGetnUniformfv.?(arg_954, arg_955, arg_956, arg_957);
}
pub const GL_MAP_STENCIL = 0x0D11;
pub const GL_CLIP_PLANE2 = 0x3002;
pub const GL_INT_SAMPLER_BUFFER_OES = 0x8DD0;
pub const GL_EXT_geometry_shader4 = 1;
pub const GL_COMPRESSED_RGBA_ASTC_12x12 = 0x93BD;
pub const GL_ARB_shader_group_vote = 1;
pub const GL_DRAW_BUFFER5_ATI = 0x882A;
pub inline fn glCopyColorSubTable(arg_958: GLenum, arg_959: GLsizei, arg_960: GLint, arg_961: GLint, arg_962: GLsizei) void {
    return epoxy_glCopyColorSubTable.?(arg_958, arg_959, arg_960, arg_961, arg_962);
}
pub const GL_MAX_VERTEX_SHADER_LOCALS_EXT = 0x87C9;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS = 0x8E82;
pub inline fn glVertexStream1fvATI(arg_963: GLenum, arg_964: [*c]const GLfloat) void {
    return epoxy_glVertexStream1fvATI.?(arg_963, arg_964);
}
pub const GL_RELATIVE_SMOOTH_CUBIC_CURVE_TO_NV = 0x11;
pub const GL_MAX_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A3;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_OES = 0x92D5;
pub const GL_TESS_GEN_MODE_OES = 0x8E76;
pub const GL_MATRIX_STRIDE = 0x92FF;
pub inline fn glGetFragmentLightivSGIX(arg_965: GLenum, arg_966: GLenum, arg_967: [*c]GLint) void {
    return epoxy_glGetFragmentLightivSGIX.?(arg_965, arg_966, arg_967);
}
pub inline fn glGetTexEnviv(arg_968: GLenum, arg_969: GLenum, arg_970: [*c]GLint) void {
    return epoxy_glGetTexEnviv.?(arg_968, arg_969, arg_970);
}
pub inline fn glGetTextureSamplerHandleARB(arg_971: GLuint, arg_972: GLuint) GLuint64 {
    return epoxy_glGetTextureSamplerHandleARB.?(arg_971, arg_972);
}
pub const SCNoFAST32 = __PRIPTR_PREFIX ++ "o";
pub const GL_LARGE_CW_ARC_TO_NV = 0x18;
pub const GL_EXT_shader_group_vote = 1;
pub const GL_DEPTH_FUNC = 0x0B74;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D5;
pub const GL_POINT_SPRITE_ARB = 0x8861;
pub const GL_REG_6_ATI = 0x8927;
pub inline fn glGetFramebufferPixelLocalStorageSizeEXT(arg_973: GLuint) GLsizei {
    return epoxy_glGetFramebufferPixelLocalStorageSizeEXT.?(arg_973);
}
pub const GL_SRC1_COLOR_EXT = 0x88F9;
pub inline fn glTexCoord2sv(arg_974: [*c]const GLshort) void {
    return epoxy_glTexCoord2sv.?(arg_974);
}
pub const GL_MODELVIEW1_STACK_DEPTH_EXT = 0x8502;
pub const GL_TEXTURE_TILING_EXT = 0x9580;
pub const GL_EYE_LINE_SGIS = 0x81F6;
pub inline fn glResumeTransformFeedback() void {
    return epoxy_glResumeTransformFeedback.?();
}
pub inline fn glTangent3ivEXT(arg_975: [*c]const GLint) void {
    return epoxy_glTangent3ivEXT.?(arg_975);
}
pub inline fn glFramebufferTexture3DEXT(arg_976: GLenum, arg_977: GLenum, arg_978: GLenum, arg_979: GLuint, arg_980: GLint, arg_981: GLint) void {
    return epoxy_glFramebufferTexture3DEXT.?(arg_976, arg_977, arg_978, arg_979, arg_980, arg_981);
}
pub const GL_PROXY_TEXTURE_1D_ARRAY_EXT = 0x8C19;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_NV = 0x9340;
pub inline fn glColor4ubVertex2fSUN(arg_982: GLubyte, arg_983: GLubyte, arg_984: GLubyte, arg_985: GLubyte, arg_986: GLfloat, arg_987: GLfloat) void {
    return epoxy_glColor4ubVertex2fSUN.?(arg_982, arg_983, arg_984, arg_985, arg_986, arg_987);
}
pub inline fn glGetTexParameterIivOES(arg_988: GLenum, arg_989: GLenum, arg_990: [*c]GLint) void {
    return epoxy_glGetTexParameterIivOES.?(arg_988, arg_989, arg_990);
}
pub inline fn glFramebufferTextureOES(arg_991: GLenum, arg_992: GLenum, arg_993: GLuint, arg_994: GLint) void {
    return epoxy_glFramebufferTextureOES.?(arg_991, arg_992, arg_993, arg_994);
}
pub const GL_COLOR_BUFFER_BIT7_QCOM = 0x00000080;
pub const GL_DST_IN_NV = 0x928B;
pub inline fn glWindowPos3fvARB(arg_995: [*c]const GLfloat) void {
    return epoxy_glWindowPos3fvARB.?(arg_995);
}
pub const __UINTPTR_FMTx__ = "lx";
pub const GL_RED_MAX_CLAMP_INGR = 0x8564;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6 = 0x93D6;
pub const GL_RGB16_EXT = 0x8054;
pub const GL_STENCIL_PASS_DEPTH_FAIL = 0x0B95;
pub inline fn glGetProgramEnvParameterIuivNV(arg_996: GLenum, arg_997: GLuint, arg_998: [*c]GLuint) void {
    return epoxy_glGetProgramEnvParameterIuivNV.?(arg_996, arg_997, arg_998);
}
pub const __amd64 = 1;
pub const GL_NV_shader_noperspective_interpolation = 1;
pub const GL_VERTEX_PROGRAM_POSITION_MESA = 0x8BB4;
pub const GL_READ_ONLY = 0x88B8;
pub const GL_INTENSITY8UI_EXT = 0x8D7F;
pub const GL_TEXTURE26_ARB = 0x84DA;
pub const GL_SIGNED_LUMINANCE_ALPHA_NV = 0x8703;
pub inline fn glWindowPos3sARB(arg_999: GLshort, arg_1000: GLshort, arg_1001: GLshort) void {
    return epoxy_glWindowPos3sARB.?(arg_999, arg_1000, arg_1001);
}
pub const GL_EXT_blend_equation_separate = 1;
pub const GL_COMPARE_R_TO_TEXTURE_ARB = 0x884E;
pub inline fn glBindProgramPipelineEXT(arg_1002: GLuint) void {
    return epoxy_glBindProgramPipelineEXT.?(arg_1002);
}
pub inline fn glTexImage4DSGIS(arg_1003: GLenum, arg_1004: GLint, arg_1005: GLenum, arg_1006: GLsizei, arg_1007: GLsizei, arg_1008: GLsizei, arg_1009: GLsizei, arg_1010: GLint, arg_1011: GLenum, arg_1012: GLenum, arg_1013: ?*const c_void) void {
    return epoxy_glTexImage4DSGIS.?(arg_1003, arg_1004, arg_1005, arg_1006, arg_1007, arg_1008, arg_1009, arg_1010, arg_1011, arg_1012, arg_1013);
}
pub const GL_MITER_TRUNCATE_NV = 0x90A8;
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fSUN(arg_1014: GLuint, arg_1015: GLfloat, arg_1016: GLfloat, arg_1017: GLfloat, arg_1018: GLfloat, arg_1019: GLfloat, arg_1020: GLfloat, arg_1021: GLfloat, arg_1022: GLfloat, arg_1023: GLfloat, arg_1024: GLfloat) void {
    return epoxy_glReplacementCodeuiColor4fNormal3fVertex3fSUN.?(arg_1014, arg_1015, arg_1016, arg_1017, arg_1018, arg_1019, arg_1020, arg_1021, arg_1022, arg_1023, arg_1024);
}
pub const GL_TILING_TYPES_EXT = 0x9583;
pub const UINT_LEAST16_MAX = 65535;
pub inline fn glEGLImageTargetTextureStorageEXT(arg_1025: GLuint, arg_1026: GLeglImageOES, arg_1027: [*c]const GLint) void {
    return epoxy_glEGLImageTargetTextureStorageEXT.?(arg_1025, arg_1026, arg_1027);
}
pub const __GCC_ATOMIC_POINTER_LOCK_FREE = 2;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_KHR = 0x82FB;
pub inline fn glGenRenderbuffers(arg_1028: GLsizei, arg_1029: [*c]GLuint) void {
    return epoxy_glGenRenderbuffers.?(arg_1028, arg_1029);
}
pub const GL_CULL_FRAGMENT_NV = 0x86E7;
pub const GL_PER_GPU_STORAGE_NV = 0x9548;
pub const GL_OPERAND1_ALPHA = 0x8599;
pub const __INO_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const __WCHAR_MAX__ = 2147483647;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_EXT = 0x9312;
pub inline fn glProgramUniform3iEXT(arg_1030: GLuint, arg_1031: GLint, arg_1032: GLint, arg_1033: GLint, arg_1034: GLint) void {
    return epoxy_glProgramUniform3iEXT.?(arg_1030, arg_1031, arg_1032, arg_1033, arg_1034);
}
pub const __THROW = __attribute__(__nothrow__ ++ __LEAF);
pub const GL_TESS_CONTROL_PROGRAM_PARAMETER_BUFFER_NV = 0x8C74;
pub const GL_ARB_occlusion_query2 = 1;
pub const GL_PIXEL_PACK_BUFFER_BINDING_EXT = 0x88ED;
pub const __SSIZE_T_TYPE = __SWORD_TYPE;
pub const GL_DEPTH_COMPONENT32_ARB = 0x81A7;
pub const GL_TEXTURE_WRAP_T = 0x2803;
pub const __BMI__ = 1;
pub inline fn glPointParameterxvOES(arg_1035: GLenum, arg_1036: [*c]const GLfixed) void {
    return epoxy_glPointParameterxvOES.?(arg_1035, arg_1036);
}
pub inline fn glCallLists(arg_1037: GLsizei, arg_1038: GLenum, arg_1039: ?*const c_void) void {
    return epoxy_glCallLists.?(arg_1037, arg_1038, arg_1039);
}
pub inline fn glBindVertexArrayAPPLE(arg_1040: GLuint) void {
    return epoxy_glBindVertexArrayAPPLE.?(arg_1040);
}
pub inline fn glTextureBuffer(arg_1041: GLuint, arg_1042: GLenum, arg_1043: GLuint) void {
    return epoxy_glTextureBuffer.?(arg_1041, arg_1042, arg_1043);
}
pub const GL_TEXTURE_4D_BINDING_SGIS = 0x814F;
pub const GL_DRAW_BUFFER4_ARB = 0x8829;
pub const GL_RELATIVE_ROUNDED_RECT_NV = 0xE9;
pub inline fn glCopyPixels(arg_1044: GLint, arg_1045: GLint, arg_1046: GLsizei, arg_1047: GLsizei, arg_1048: GLenum) void {
    return epoxy_glCopyPixels.?(arg_1044, arg_1045, arg_1046, arg_1047, arg_1048);
}
pub const GL_FRAMEZOOM_FACTOR_SGIX = 0x818C;
pub const GL_FOG_COORDINATE_ARRAY_TYPE_EXT = 0x8454;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_OES = 0x886C;
pub inline fn glVertexAttribL2d(arg_1049: GLuint, arg_1050: GLdouble, arg_1051: GLdouble) void {
    return epoxy_glVertexAttribL2d.?(arg_1049, arg_1050, arg_1051);
}
pub const GL_COMPRESSED_LUMINANCE_ALPHA_3DC_ATI = 0x8837;
pub const GL_INTERNALFORMAT_GREEN_SIZE = 0x8272;
pub const GL_REG_2_ATI = 0x8923;
pub const PRIx32 = "x";
pub const GL_ARRAY_BUFFER_BINDING_ARB = 0x8894;
pub inline fn glDepthBoundsEXT(arg_1052: GLclampd, arg_1053: GLclampd) void {
    return epoxy_glDepthBoundsEXT.?(arg_1052, arg_1053);
}
pub const GL_AMD_gpu_shader_half_float = 1;
pub const GL_LINEAR_CLIPMAP_NEAREST_SGIX = 0x844F;
pub const GL_NUM_PROGRAM_BINARY_FORMATS_OES = 0x87FE;
pub const GL_RG16 = 0x822C;
pub const GL_FRACTIONAL_EVEN_EXT = 0x8E7C;
pub const GL_COLOR_ATTACHMENT6 = 0x8CE6;
pub const GL_COLOR_ATTACHMENT1_EXT = 0x8CE1;
pub const GL_NV_draw_instanced = 1;
pub const GL_ALPHA_SCALE = 0x0D1C;
pub const GL_PATH_CLIENT_LENGTH_NV = 0x907F;
pub const GL_POST_CONVOLUTION_ALPHA_SCALE_EXT = 0x801F;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_OES = 0x8CD1;
pub inline fn glMultiTexCoord1dvARB(arg_1054: GLenum, arg_1055: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord1dvARB.?(arg_1054, arg_1055);
}
pub inline fn glSecondaryColor3us(arg_1056: GLushort, arg_1057: GLushort, arg_1058: GLushort) void {
    return epoxy_glSecondaryColor3us.?(arg_1056, arg_1057, arg_1058);
}
pub const GL_MAX_TRACK_MATRICES_NV = 0x862F;
pub const GL_ARB_shader_texture_image_samples = 1;
pub const GL_TEXTURE_MAX_ANISOTROPY = 0x84FE;
pub const GL_INTEL_framebuffer_CMAA = 1;
pub const GL_CON_17_ATI = 0x8952;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR = 0x88FE;
pub const GL_FRAMEBUFFER_DEFAULT = 0x8218;
pub inline fn glProgramUniform3fvEXT(arg_1059: GLuint, arg_1060: GLint, arg_1061: GLsizei, arg_1062: [*c]const GLfloat) void {
    return epoxy_glProgramUniform3fvEXT.?(arg_1059, arg_1060, arg_1061, arg_1062);
}
pub const GL_CONVOLUTION_FORMAT = 0x8017;
pub inline fn glMultMatrixxOES(arg_1063: [*c]const GLfixed) void {
    return epoxy_glMultMatrixxOES.?(arg_1063);
}
pub inline fn glProgramUniform4uiEXT(arg_1064: GLuint, arg_1065: GLint, arg_1066: GLuint, arg_1067: GLuint, arg_1068: GLuint, arg_1069: GLuint) void {
    return epoxy_glProgramUniform4uiEXT.?(arg_1064, arg_1065, arg_1066, arg_1067, arg_1068, arg_1069);
}
pub const PRIX32 = "X";
pub inline fn glProgramUniform3ivEXT(arg_1070: GLuint, arg_1071: GLint, arg_1072: GLsizei, arg_1073: [*c]const GLint) void {
    return epoxy_glProgramUniform3ivEXT.?(arg_1070, arg_1071, arg_1072, arg_1073);
}
pub inline fn glNamedProgramLocalParametersI4ivEXT(arg_1074: GLuint, arg_1075: GLenum, arg_1076: GLuint, arg_1077: GLsizei, arg_1078: [*c]const GLint) void {
    return epoxy_glNamedProgramLocalParametersI4ivEXT.?(arg_1074, arg_1075, arg_1076, arg_1077, arg_1078);
}
pub const GL_VARIANT_ARRAY_POINTER_EXT = 0x87E9;
pub inline fn glMatrixLoad3x3fNV(arg_1079: GLenum, arg_1080: [*c]const GLfloat) void {
    return epoxy_glMatrixLoad3x3fNV.?(arg_1079, arg_1080);
}
pub const __UINTMAX_FMTx__ = "lx";
pub const GL_FOG_DENSITY = 0x0B62;
pub inline fn glMultiTexGendEXT(arg_1081: GLenum, arg_1082: GLenum, arg_1083: GLenum, arg_1084: GLdouble) void {
    return epoxy_glMultiTexGendEXT.?(arg_1081, arg_1082, arg_1083, arg_1084);
}
pub const GL_EXT_pvrtc_sRGB = 1;
pub inline fn glGetPointeri_vEXT(arg_1085: GLenum, arg_1086: GLuint, arg_1087: [*c]?*c_void) void {
    return epoxy_glGetPointeri_vEXT.?(arg_1085, arg_1086, arg_1087);
}
pub const GL_RED_BITS = 0x0D52;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER = 0x8645;
pub const GL_RELATIVE_SMOOTH_QUADRATIC_CURVE_TO_NV = 0x0F;
pub const GL_POINT_SIZE_MAX_ARB = 0x8127;
pub const GL_2PASS_0_SGIS = 0x80A2;
pub inline fn glLightxOES(arg_1088: GLenum, arg_1089: GLenum, arg_1090: GLfixed) void {
    return epoxy_glLightxOES.?(arg_1088, arg_1089, arg_1090);
}
pub inline fn glVertexBlendEnvfATI(arg_1091: GLenum, arg_1092: GLfloat) void {
    return epoxy_glVertexBlendEnvfATI.?(arg_1091, arg_1092);
}
pub const __LZCNT__ = 1;
pub inline fn __glibc_clang_has_extension(ext: var) @TypeOf(__has_extension(ext)) {
    return __has_extension(ext);
}
pub const GL_VERTEX_ARRAY_KHR = 0x8074;
pub const GL_SIGNED_LUMINANCE8_NV = 0x8702;
pub const _BITS_TYPES_H = 1;
pub inline fn glDisableVariantClientStateEXT(arg_1093: GLuint) void {
    return epoxy_glDisableVariantClientStateEXT.?(arg_1093);
}
pub inline fn glVDPAUUnregisterSurfaceNV(arg_1094: GLvdpauSurfaceNV) void {
    return epoxy_glVDPAUUnregisterSurfaceNV.?(arg_1094);
}
pub inline fn glTangent3sEXT(arg_1095: GLshort, arg_1096: GLshort, arg_1097: GLshort) void {
    return epoxy_glTangent3sEXT.?(arg_1095, arg_1096, arg_1097);
}
pub inline fn glFogCoordhNV(arg_1098: GLhalfNV) void {
    return epoxy_glFogCoordhNV.?(arg_1098);
}
pub const GL_DRAW_BUFFER11 = 0x8830;
pub const GL_PROJECTION_MATRIX = 0x0BA7;
pub const GL_RGB_FLOAT32_ATI = 0x8815;
pub const GL_3DC_X_AMD = 0x87F9;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_OES = 0x8CDB;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_W_NV = 0x9356;
pub inline fn glDrawElements(arg_1099: GLenum, arg_1100: GLsizei, arg_1101: GLenum, arg_1102: ?*const c_void) void {
    return epoxy_glDrawElements.?(arg_1099, arg_1100, arg_1101, arg_1102);
}
pub inline fn glVertexStream1iATI(arg_1103: GLenum, arg_1104: GLint) void {
    return epoxy_glVertexStream1iATI.?(arg_1103, arg_1104);
}
pub const GL_OES_fragment_precision_high = 1;
pub const GL_LIGHT2 = 0x4002;
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE = 0x88FE;
pub inline fn glProgramUniform2ui(arg_1105: GLuint, arg_1106: GLint, arg_1107: GLuint, arg_1108: GLuint) void {
    return epoxy_glProgramUniform2ui.?(arg_1105, arg_1106, arg_1107, arg_1108);
}
pub const __UINT_LEAST32_FMTu__ = "u";
pub const __INT_LEAST16_FMTi__ = "hi";
pub inline fn glGetLightiv(arg_1109: GLenum, arg_1110: GLenum, arg_1111: [*c]GLint) void {
    return epoxy_glGetLightiv.?(arg_1109, arg_1110, arg_1111);
}
pub inline fn glProgramUniform3fv(arg_1112: GLuint, arg_1113: GLint, arg_1114: GLsizei, arg_1115: [*c]const GLfloat) void {
    return epoxy_glProgramUniform3fv.?(arg_1112, arg_1113, arg_1114, arg_1115);
}
pub inline fn glGetInteger64v(arg_1116: GLenum, arg_1117: [*c]GLint64) void {
    return epoxy_glGetInteger64v.?(arg_1116, arg_1117);
}
pub inline fn glRectfv(arg_1118: [*c]const GLfloat, arg_1119: [*c]const GLfloat) void {
    return epoxy_glRectfv.?(arg_1118, arg_1119);
}
pub inline fn glBlendEquationSeparateiEXT(arg_1120: GLuint, arg_1121: GLenum, arg_1122: GLenum) void {
    return epoxy_glBlendEquationSeparateiEXT.?(arg_1120, arg_1121, arg_1122);
}
pub inline fn glCreateStatesNV(arg_1123: GLsizei, arg_1124: [*c]GLuint) void {
    return epoxy_glCreateStatesNV.?(arg_1123, arg_1124);
}
pub const INT16_MAX = 32767;
pub const GL_UNSIGNED_INT_IMAGE_2D_EXT = 0x9063;
pub const GL_DEBUG_SEVERITY_MEDIUM_KHR = 0x9147;
pub const GL_GEOMETRY_SHADER_BIT = 0x00000004;
pub inline fn glBindFramebufferOES(arg_1125: GLenum, arg_1126: GLuint) void {
    return epoxy_glBindFramebufferOES.?(arg_1125, arg_1126);
}
pub const SCNiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5C;
pub const GL_ACTIVE_SUBROUTINES = 0x8DE5;
pub const GL_LOW_FLOAT = 0x8DF0;
pub const GL_TEXTURE_BORDER_COLOR_NV = 0x1004;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY = 0x900A;
pub const GL_TEXTURE_MATERIAL_FACE_EXT = 0x8351;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING = 0x889C;
pub inline fn glNormalFormatNV(arg_1127: GLenum, arg_1128: GLsizei) void {
    return epoxy_glNormalFormatNV.?(arg_1127, arg_1128);
}
pub const GL_ARB_transform_feedback_instanced = 1;
pub const GL_BYTE = 0x1400;
pub const GL_DRAW_BUFFER4_ATI = 0x8829;
pub inline fn glProgramUniformMatrix3fv(arg_1129: GLuint, arg_1130: GLint, arg_1131: GLsizei, arg_1132: GLboolean, arg_1133: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3fv.?(arg_1129, arg_1130, arg_1131, arg_1132, arg_1133);
}
pub const GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT = 0x8A55;
pub inline fn glGetObjectLabel(arg_1134: GLenum, arg_1135: GLuint, arg_1136: GLsizei, arg_1137: [*c]GLsizei, arg_1138: [*c]GLchar) void {
    return epoxy_glGetObjectLabel.?(arg_1134, arg_1135, arg_1136, arg_1137, arg_1138);
}
pub inline fn glVertex3hvNV(arg_1139: [*c]const GLhalfNV) void {
    return epoxy_glVertex3hvNV.?(arg_1139);
}
pub const GL_WIN_specular_fog = 1;
pub const GL_DRAW_BUFFER13_ARB = 0x8832;
pub inline fn glDebugMessageInsert(arg_1140: GLenum, arg_1141: GLenum, arg_1142: GLuint, arg_1143: GLenum, arg_1144: GLsizei, arg_1145: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsert.?(arg_1140, arg_1141, arg_1142, arg_1143, arg_1144, arg_1145);
}
pub const __SIZEOF_POINTER__ = 8;
pub const GL_EXT_texture_view = 1;
pub const GL_VIEWPORT_SWIZZLE_Y_NV = 0x9359;
pub const GL_VERTEX_ARRAY_COUNT_EXT = 0x807D;
pub const GL_BUFFER_MAP_POINTER_OES = 0x88BD;
pub const __UINT_FAST64_FMTX__ = "lX";
pub const GL_EXT_blend_color = 1;
pub inline fn glCopyColorTableSGI(arg_1146: GLenum, arg_1147: GLenum, arg_1148: GLint, arg_1149: GLint, arg_1150: GLsizei) void {
    return epoxy_glCopyColorTableSGI.?(arg_1146, arg_1147, arg_1148, arg_1149, arg_1150);
}
pub const GL_EXT_draw_buffers_indexed = 1;
pub const GL_INT_SAMPLER_1D_ARRAY_EXT = 0x8DCE;
pub const GL_GLYPH_HAS_KERNING_BIT_NV = 0x100;
pub const GL_TEXTURE_COORD_ARRAY_TYPE_EXT = 0x8089;
pub const GL_GPU_OPTIMIZED_QCOM = 0x8FB2;
pub inline fn glRasterPos4sv(arg_1151: [*c]const GLshort) void {
    return epoxy_glRasterPos4sv.?(arg_1151);
}
pub const GL_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FE;
pub const GL_FIRST_VERTEX_CONVENTION_EXT = 0x8E4D;
pub const GL_MAX_TASK_TOTAL_MEMORY_SIZE_NV = 0x9537;
pub const GL_RENDERBUFFER_FREE_MEMORY_ATI = 0x87FD;
pub const GL_FIRST_VERTEX_CONVENTION_OES = 0x8E4D;
pub inline fn glPauseTransformFeedback() void {
    return epoxy_glPauseTransformFeedback.?();
}
pub inline fn glUniform2uiv(arg_1152: GLint, arg_1153: GLsizei, arg_1154: [*c]const GLuint) void {
    return epoxy_glUniform2uiv.?(arg_1152, arg_1153, arg_1154);
}
pub inline fn glWindowPos3dvARB(arg_1155: [*c]const GLdouble) void {
    return epoxy_glWindowPos3dvARB.?(arg_1155);
}
pub const GL_LUMINANCE_ALPHA_FLOAT32_ATI = 0x8819;
pub inline fn glLightModelf(arg_1156: GLenum, arg_1157: GLfloat) void {
    return epoxy_glLightModelf.?(arg_1156, arg_1157);
}
pub const GL_TEXTURE6_ARB = 0x84C6;
pub const GL_POINT_SIZE_RANGE = 0x0B12;
pub const SCNxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const GL_EXT_geometry_point_size = 1;
pub const __GNUC_PATCHLEVEL__ = 1;
pub inline fn glTexStorage3DMultisampleOES(arg_1158: GLenum, arg_1159: GLsizei, arg_1160: GLenum, arg_1161: GLsizei, arg_1162: GLsizei, arg_1163: GLsizei, arg_1164: GLboolean) void {
    return epoxy_glTexStorage3DMultisampleOES.?(arg_1158, arg_1159, arg_1160, arg_1161, arg_1162, arg_1163, arg_1164);
}
pub const GL_COLOR_ATTACHMENT15 = 0x8CEF;
pub const GL_TEXTURE1_ARB = 0x84C1;
pub inline fn glSecondaryColorPointerListIBM(arg_1165: GLint, arg_1166: GLenum, arg_1167: GLint, arg_1168: [*c]?*const c_void, arg_1169: GLint) void {
    return epoxy_glSecondaryColorPointerListIBM.?(arg_1165, arg_1166, arg_1167, arg_1168, arg_1169);
}
pub const GL_POLYGON_OFFSET_POINT_NV = 0x2A01;
pub inline fn glGetVideoCaptureivNV(arg_1170: GLuint, arg_1171: GLenum, arg_1172: [*c]GLint) void {
    return epoxy_glGetVideoCaptureivNV.?(arg_1170, arg_1171, arg_1172);
}
pub const _POSIX_SOURCE = 1;
pub const GL_PROGRAM_PARAMETERS_ARB = 0x88A8;
pub inline fn glVertexAttribI2iEXT(arg_1173: GLuint, arg_1174: GLint, arg_1175: GLint) void {
    return epoxy_glVertexAttribI2iEXT.?(arg_1173, arg_1174, arg_1175);
}
pub inline fn glUniform3iv(arg_1176: GLint, arg_1177: GLsizei, arg_1178: [*c]const GLint) void {
    return epoxy_glUniform3iv.?(arg_1176, arg_1177, arg_1178);
}
pub inline fn glMultiDrawArraysIndirectAMD(arg_1179: GLenum, arg_1180: ?*const c_void, arg_1181: GLsizei, arg_1182: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectAMD.?(arg_1179, arg_1180, arg_1181, arg_1182);
}
pub const GL_QUERY_DEPTH_PASS_EVENT_BIT_AMD = 0x00000001;
pub const GL_CLIP_PLANE1 = 0x3001;
pub const GL_CLIP_PLANE5_IMG = 0x3005;
pub inline fn glDrawRangeElementArrayATI(arg_1183: GLenum, arg_1184: GLuint, arg_1185: GLuint, arg_1186: GLsizei) void {
    return epoxy_glDrawRangeElementArrayATI.?(arg_1183, arg_1184, arg_1185, arg_1186);
}
pub inline fn glObjectPtrLabelKHR(arg_1187: ?*const c_void, arg_1188: GLsizei, arg_1189: [*c]const GLchar) void {
    return epoxy_glObjectPtrLabelKHR.?(arg_1187, arg_1188, arg_1189);
}
pub const GL_COLOR_ATTACHMENT24 = 0x8CF8;
pub inline fn glReplacementCodeuiVertex3fSUN(arg_1190: GLuint, arg_1191: GLfloat, arg_1192: GLfloat, arg_1193: GLfloat) void {
    return epoxy_glReplacementCodeuiVertex3fSUN.?(arg_1190, arg_1191, arg_1192, arg_1193);
}
pub const GL_FOG_BIT = 0x00000080;
pub const GL_MIXED_DEPTH_SAMPLES_SUPPORTED_NV = 0x932F;
pub const GL_VIEWPORT_BOUNDS_RANGE_OES = 0x825D;
pub const GL_QCOM_writeonly_rendering = 1;
pub const GL_COMPRESSED_RGBA_ASTC_5x4_KHR = 0x93B1;
pub const linux = 1;
pub inline fn glTexCoord2xOES(arg_1194: GLfixed, arg_1195: GLfixed) void {
    return epoxy_glTexCoord2xOES.?(arg_1194, arg_1195);
}
pub inline fn glWeightPathsNV(arg_1196: GLuint, arg_1197: GLsizei, arg_1198: [*c]const GLuint, arg_1199: [*c]const GLfloat) void {
    return epoxy_glWeightPathsNV.?(arg_1196, arg_1197, arg_1198, arg_1199);
}
pub const GL_EXT_copy_texture = 1;
pub const GL_COPY_WRITE_BUFFER = 0x8F37;
pub const GL_SGIX_depth_texture = 1;
pub const GL_ALREADY_SIGNALED_APPLE = 0x911A;
pub inline fn glProgramUniform4ui(arg_1200: GLuint, arg_1201: GLint, arg_1202: GLuint, arg_1203: GLuint, arg_1204: GLuint, arg_1205: GLuint) void {
    return epoxy_glProgramUniform4ui.?(arg_1200, arg_1201, arg_1202, arg_1203, arg_1204, arg_1205);
}
pub const __CLANG_ATOMIC_SHORT_LOCK_FREE = 2;
pub const GL_DEPTH_EXT = 0x1801;
pub inline fn glGetVariantArrayObjectfvATI(arg_1206: GLuint, arg_1207: GLenum, arg_1208: [*c]GLfloat) void {
    return epoxy_glGetVariantArrayObjectfvATI.?(arg_1206, arg_1207, arg_1208);
}
pub const GL_PROGRAM_NATIVE_ADDRESS_REGISTERS_ARB = 0x88B2;
pub inline fn glPointSizexOES(arg_1209: GLfixed) void {
    return epoxy_glPointSizexOES.?(arg_1209);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_OES = 0x8DA7;
pub const GL_SPHERE_MAP = 0x2402;
pub const GL_VERTEX_ARRAY_SIZE = 0x807A;
pub const GL_IMAGE_BINDING_LAYER_EXT = 0x8F3D;
pub const GL_PRIMITIVE_BOUNDING_BOX_EXT = 0x92BE;
pub const GL_UNPACK_SKIP_IMAGES = 0x806D;
pub const GL_PROGRAM_PIPELINE_KHR = 0x82E4;
pub const GL_INT_SAMPLER_CUBE_EXT = 0x8DCC;
pub const GL_SAMPLE_COVERAGE_ARB = 0x80A0;
pub const GL_VIDEO_CAPTURE_FIELD_UPPER_HEIGHT_NV = 0x903A;
pub inline fn glVertexP4uiv(arg_1210: GLenum, arg_1211: [*c]const GLuint) void {
    return epoxy_glVertexP4uiv.?(arg_1210, arg_1211);
}
pub inline fn glRasterPos4d(arg_1212: GLdouble, arg_1213: GLdouble, arg_1214: GLdouble, arg_1215: GLdouble) void {
    return epoxy_glRasterPos4d.?(arg_1212, arg_1213, arg_1214, arg_1215);
}
pub const GL_CONSTANT_ATTENUATION = 0x1207;
pub const GL_EXT_packed_pixels = 1;
pub const __attribute_malloc__ = __attribute__(__malloc__);
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR = 0x93D4;
pub const GL_PATH_INITIAL_DASH_CAP_NV = 0x907C;
pub inline fn glDrawRangeElementsBaseVertexEXT(arg_1216: GLenum, arg_1217: GLuint, arg_1218: GLuint, arg_1219: GLsizei, arg_1220: GLenum, arg_1221: ?*const c_void, arg_1222: GLint) void {
    return epoxy_glDrawRangeElementsBaseVertexEXT.?(arg_1216, arg_1217, arg_1218, arg_1219, arg_1220, arg_1221, arg_1222);
}
pub inline fn glUniform3ui64vNV(arg_1223: GLint, arg_1224: GLsizei, arg_1225: [*c]const GLuint64EXT) void {
    return epoxy_glUniform3ui64vNV.?(arg_1223, arg_1224, arg_1225);
}
pub inline fn glUniform4ui64vNV(arg_1226: GLint, arg_1227: GLsizei, arg_1228: [*c]const GLuint64EXT) void {
    return epoxy_glUniform4ui64vNV.?(arg_1226, arg_1227, arg_1228);
}
pub const GL_MAX_LAYERS = 0x8281;
pub const GL_FLOAT_MAT2x4_NV = 0x8B66;
pub const GL_IMG_program_binary = 1;
pub const GL_CLAMP_READ_COLOR = 0x891C;
pub const GL_DRAW_BUFFER0_ATI = 0x8825;
pub inline fn glColor3sv(arg_1229: [*c]const GLshort) void {
    return epoxy_glColor3sv.?(arg_1229);
}
pub const GL_VERTEX_STREAM4_ATI = 0x8770;
pub const GL_TRANSFORM_FEEDBACK_BUFFER = 0x8C8E;
pub inline fn glRasterPos4dv(arg_1230: [*c]const GLdouble) void {
    return epoxy_glRasterPos4dv.?(arg_1230);
}
pub const __TIME_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const GL_MAP2_VERTEX_ATTRIB7_4_NV = 0x8677;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_OES = 0x8518;
pub const GL_COLORDODGE = 0x9299;
pub const GL_OES_required_internalformat = 1;
pub inline fn glMatrixRotatefEXT(arg_1231: GLenum, arg_1232: GLfloat, arg_1233: GLfloat, arg_1234: GLfloat, arg_1235: GLfloat) void {
    return epoxy_glMatrixRotatefEXT.?(arg_1231, arg_1232, arg_1233, arg_1234, arg_1235);
}
pub const GL_SAMPLER_2D_RECT_SHADOW = 0x8B64;
pub inline fn glUniform1ui64NV(arg_1236: GLint, arg_1237: GLuint64EXT) void {
    return epoxy_glUniform1ui64NV.?(arg_1236, arg_1237);
}
pub const GL_RELATIVE_LARGE_CW_ARC_TO_NV = 0x19;
pub const GL_BLEND_OVERLAP_NV = 0x9281;
pub const GL_SHADER_STORAGE_BARRIER_BIT = 0x00002000;
pub inline fn glPathCoordsNV(arg_1238: GLuint, arg_1239: GLsizei, arg_1240: GLenum, arg_1241: ?*const c_void) void {
    return epoxy_glPathCoordsNV.?(arg_1238, arg_1239, arg_1240, arg_1241);
}
pub inline fn glCompressedTexSubImage2DARB(arg_1242: GLenum, arg_1243: GLint, arg_1244: GLint, arg_1245: GLint, arg_1246: GLsizei, arg_1247: GLsizei, arg_1248: GLenum, arg_1249: GLsizei, arg_1250: ?*const c_void) void {
    return epoxy_glCompressedTexSubImage2DARB.?(arg_1242, arg_1243, arg_1244, arg_1245, arg_1246, arg_1247, arg_1248, arg_1249, arg_1250);
}
pub inline fn glSecondaryColor3b(arg_1251: GLbyte, arg_1252: GLbyte, arg_1253: GLbyte) void {
    return epoxy_glSecondaryColor3b.?(arg_1251, arg_1252, arg_1253);
}
pub const GL_3DFX_texture_compression_FXT1 = 1;
pub inline fn glNamedRenderbufferStorageEXT(arg_1254: GLuint, arg_1255: GLenum, arg_1256: GLsizei, arg_1257: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageEXT.?(arg_1254, arg_1255, arg_1256, arg_1257);
}
pub inline fn glBindFramebufferEXT(arg_1258: GLenum, arg_1259: GLuint) void {
    return epoxy_glBindFramebufferEXT.?(arg_1258, arg_1259);
}
pub const GL_INTEL_blackhole_render = 1;
pub const GL_ARB_texture_gather = 1;
pub inline fn glIsFramebufferOES(arg_1260: GLuint) GLboolean {
    return epoxy_glIsFramebufferOES.?(arg_1260);
}
pub const GL_MAX_PROGRAM_CALL_DEPTH_NV = 0x88F5;
pub const GL_SECONDARY_COLOR_ARRAY_SIZE = 0x845A;
pub const GL_COPY_WRITE_BUFFER_BINDING = 0x8F37;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV1_EXT = 0x8A57;
pub const GL_TEXTURE30 = 0x84DE;
pub const GL_OP_FLOOR_EXT = 0x878F;
pub const GL_PREFER_DOUBLEBUFFER_HINT_PGI = 0x1A1F8;
pub const GL_TEXTURE_COMPRESSED_BLOCK_WIDTH = 0x82B1;
pub const GL_INDEX_ARRAY_TYPE_EXT = 0x8085;
pub const GL_OES_surfaceless_context = 1;
pub const GL_INTERNALFORMAT_RED_TYPE = 0x8278;
pub const GL_PIXEL_PACK_BUFFER_BINDING_NV = 0x88ED;
pub const GL_ATTACHED_MEMORY_OFFSET_NV = 0x95A5;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_EXT = 0x8C88;
pub inline fn glUniform1i64vARB(arg_1261: GLint, arg_1262: GLsizei, arg_1263: [*c]const GLint64) void {
    return epoxy_glUniform1i64vARB.?(arg_1261, arg_1262, arg_1263);
}
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_WRITE = 0x82AF;
pub const GL_FLOAT_MAT2 = 0x8B5A;
pub inline fn glFogf(arg_1264: GLenum, arg_1265: GLfloat) void {
    return epoxy_glFogf.?(arg_1264, arg_1265);
}
pub inline fn glRasterPos3d(arg_1266: GLdouble, arg_1267: GLdouble, arg_1268: GLdouble) void {
    return epoxy_glRasterPos3d.?(arg_1266, arg_1267, arg_1268);
}
pub const __UINT32_FMTo__ = "o";
pub const GL_INVALID_FRAMEBUFFER_OPERATION_EXT = 0x0506;
pub const GL_MAX_COMBINED_TASK_UNIFORM_COMPONENTS_NV = 0x8E6F;
pub inline fn glAlphaFragmentOp1ATI(arg_1269: GLenum, arg_1270: GLuint, arg_1271: GLuint, arg_1272: GLuint, arg_1273: GLuint, arg_1274: GLuint) void {
    return epoxy_glAlphaFragmentOp1ATI.?(arg_1269, arg_1270, arg_1271, arg_1272, arg_1273, arg_1274);
}
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS = 0x8B4A;
pub const GL_SKIP_COMPONENTS3_NV = -4;
pub const GL_DRAW_BUFFER12_ARB = 0x8831;
pub inline fn glGetObjectBufferivATI(arg_1275: GLuint, arg_1276: GLenum, arg_1277: [*c]GLint) void {
    return epoxy_glGetObjectBufferivATI.?(arg_1275, arg_1276, arg_1277);
}
pub inline fn glGetMaterialxv(arg_1278: GLenum, arg_1279: GLenum, arg_1280: [*c]GLfixed) void {
    return epoxy_glGetMaterialxv.?(arg_1278, arg_1279, arg_1280);
}
pub const GL_MAX_COLOR_FRAMEBUFFER_STORAGE_SAMPLES_AMD = 0x91B4;
pub const GL_DRAW_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
pub const GL_PATCH_DEFAULT_INNER_LEVEL = 0x8E73;
pub const GL_FLOAT_MAT2_ARB = 0x8B5A;
pub const GL_PIXEL_SUBSAMPLE_2424_SGIX = 0x85A3;
pub const GL_PATCH_DEFAULT_OUTER_LEVEL_EXT = 0x8E74;
pub const GL_MAX_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87C5;
pub const GL_TEXTURE_COMPARE_FUNC = 0x884D;
pub inline fn glWaitSemaphoreEXT(arg_1281: GLuint, arg_1282: GLuint, arg_1283: [*c]const GLuint, arg_1284: GLuint, arg_1285: [*c]const GLuint, arg_1286: [*c]const GLenum) void {
    return epoxy_glWaitSemaphoreEXT.?(arg_1281, arg_1282, arg_1283, arg_1284, arg_1285, arg_1286);
}
pub const __XSAVES__ = 1;
pub const GL_DOUBLE_VEC3_EXT = 0x8FFD;
pub const GL_MESH_WORK_GROUP_SIZE_NV = 0x953E;
pub inline fn glFogCoorddEXT(arg_1287: GLdouble) void {
    return epoxy_glFogCoorddEXT.?(arg_1287);
}
pub const GL_DEPTH_ATTACHMENT_EXT = 0x8D00;
pub inline fn glVertexAttrib4fvARB(arg_1288: GLuint, arg_1289: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib4fvARB.?(arg_1288, arg_1289);
}
pub const GL_PROXY_TEXTURE_2D = 0x8064;
pub const GL_ATI_meminfo = 1;
pub const GL_DRAW_BUFFER5_EXT = 0x882A;
pub inline fn glGetQueryBufferObjectui64v(arg_1290: GLuint, arg_1291: GLuint, arg_1292: GLenum, arg_1293: GLintptr) void {
    return epoxy_glGetQueryBufferObjectui64v.?(arg_1290, arg_1291, arg_1292, arg_1293);
}
pub inline fn glMultiTexCoord3ivARB(arg_1294: GLenum, arg_1295: [*c]const GLint) void {
    return epoxy_glMultiTexCoord3ivARB.?(arg_1294, arg_1295);
}
pub const GL_PERFQUERY_COUNTER_DURATION_RAW_INTEL = 0x94F2;
pub const GL_MAP2_GRID_DOMAIN = 0x0DD2;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS = 0x90D8;
pub const GL_TEXTURE_LOD_BIAS_R_SGIX = 0x8190;
pub const GL_IMAGE_CUBE_EXT = 0x9050;
pub const GL_INTENSITY_FLOAT16_ATI = 0x881D;
pub inline fn glVertexAttribP2ui(arg_1296: GLuint, arg_1297: GLenum, arg_1298: GLboolean, arg_1299: GLuint) void {
    return epoxy_glVertexAttribP2ui.?(arg_1296, arg_1297, arg_1298, arg_1299);
}
pub const GL_ACCUM_ALPHA_BITS = 0x0D5B;
pub inline fn glVertexArrayBindingDivisor(arg_1300: GLuint, arg_1301: GLuint, arg_1302: GLuint) void {
    return epoxy_glVertexArrayBindingDivisor.?(arg_1300, arg_1301, arg_1302);
}
pub const GL_COMBINER0_NV = 0x8550;
pub const PRIX64 = __PRI64_PREFIX ++ "X";
pub const GL_READ_ONLY_ARB = 0x88B8;
pub const GL_NUM_SPARSE_LEVELS_EXT = 0x91AA;
pub const GL_PN_TRIANGLES_NORMAL_MODE_QUADRATIC_ATI = 0x87F8;
pub const __LDBL_MAX_EXP__ = 16384;
pub inline fn glMultiTexCoord4x(arg_1303: GLenum, arg_1304: GLfixed, arg_1305: GLfixed, arg_1306: GLfixed, arg_1307: GLfixed) void {
    return epoxy_glMultiTexCoord4x.?(arg_1303, arg_1304, arg_1305, arg_1306, arg_1307);
}
pub const GL_CLIP_DISTANCE2_EXT = 0x3002;
pub const GL_PRIMARY_COLOR = 0x8577;
pub inline fn glProgramUniform4dvEXT(arg_1308: GLuint, arg_1309: GLint, arg_1310: GLsizei, arg_1311: [*c]const GLdouble) void {
    return epoxy_glProgramUniform4dvEXT.?(arg_1308, arg_1309, arg_1310, arg_1311);
}
pub inline fn glNormal3b(arg_1312: GLbyte, arg_1313: GLbyte, arg_1314: GLbyte) void {
    return epoxy_glNormal3b.?(arg_1312, arg_1313, arg_1314);
}
pub const GL_UNSIGNALED_APPLE = 0x9118;
pub const GL_CONSTANT = 0x8576;
pub const GL_REG_11_ATI = 0x892C;
pub inline fn glImageTransformParameteriHP(arg_1315: GLenum, arg_1316: GLenum, arg_1317: GLint) void {
    return epoxy_glImageTransformParameteriHP.?(arg_1315, arg_1316, arg_1317);
}
pub const GL_DEPTH_STENCIL_TEXTURE_MODE = 0x90EA;
pub inline fn glBufferPageCommitmentARB(arg_1318: GLenum, arg_1319: GLintptr, arg_1320: GLsizeiptr, arg_1321: GLboolean) void {
    return epoxy_glBufferPageCommitmentARB.?(arg_1318, arg_1319, arg_1320, arg_1321);
}
pub const GL_TEXTURE_COMPARE_MODE_ARB = 0x884C;
pub const GL_COLOR_ATTACHMENT11_NV = 0x8CEB;
pub const GL_SAMPLE_MASK_INVERT_SGIS = 0x80AB;
pub const GL_BUFFER_MAP_POINTER_ARB = 0x88BD;
pub inline fn glVertexAttrib4usvARB(arg_1322: GLuint, arg_1323: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4usvARB.?(arg_1322, arg_1323);
}
pub const GL_COMPARE_R_TO_TEXTURE = 0x884E;
pub const GL_FLOAT_MAT3x2 = 0x8B67;
pub inline fn glPixelStorex(arg_1324: GLenum, arg_1325: GLfixed) void {
    return epoxy_glPixelStorex.?(arg_1324, arg_1325);
}
pub inline fn glMapGrid1d(arg_1326: GLint, arg_1327: GLdouble, arg_1328: GLdouble) void {
    return epoxy_glMapGrid1d.?(arg_1326, arg_1327, arg_1328);
}
pub const __FLT_HAS_QUIET_NAN__ = 1;
pub inline fn glEdgeFlagPointer(arg_1329: GLsizei, arg_1330: ?*const c_void) void {
    return epoxy_glEdgeFlagPointer.?(arg_1329, arg_1330);
}
pub const GL_EDGE_FLAG_ARRAY_STRIDE_EXT = 0x808C;
pub const GL_CLIP_PLANE0_IMG = 0x3000;
pub const GL_MAP1_VERTEX_ATTRIB5_4_NV = 0x8665;
pub inline fn glPathSubCoordsNV(arg_1331: GLuint, arg_1332: GLsizei, arg_1333: GLsizei, arg_1334: GLenum, arg_1335: ?*const c_void) void {
    return epoxy_glPathSubCoordsNV.?(arg_1331, arg_1332, arg_1333, arg_1334, arg_1335);
}
pub const GL_LOGIC_OP = 0x0BF1;
pub inline fn glDeleteVertexArraysOES(arg_1336: GLsizei, arg_1337: [*c]const GLuint) void {
    return epoxy_glDeleteVertexArraysOES.?(arg_1336, arg_1337);
}
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_EXT = 0x83F2;
pub inline fn glSecondaryColor3uivEXT(arg_1338: [*c]const GLuint) void {
    return epoxy_glSecondaryColor3uivEXT.?(arg_1338);
}
pub const GL_SAMPLE_SHADING_OES = 0x8C36;
pub const GL_ONE_MINUS_DST_ALPHA = 0x0305;
pub const GL_TEXTURE_VIEW_NUM_LEVELS_OES = 0x82DC;
pub const GL_WEIGHT_SUM_UNITY_ARB = 0x86A6;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_NV = 0x9342;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE_ARB = 0x8625;
pub const GL_PERCENTAGE_AMD = 0x8BC3;
pub inline fn glScissorArrayv(arg_1339: GLuint, arg_1340: GLsizei, arg_1341: [*c]const GLint) void {
    return epoxy_glScissorArrayv.?(arg_1339, arg_1340, arg_1341);
}
pub const GL_TEXTURE_PROTECTED_EXT = 0x8BFA;
pub const GL_STORAGE_CACHED_APPLE = 0x85BE;
pub const GL_AMD_multi_draw_indirect = 1;
pub const __PRI64_PREFIX = "l";
pub const GL_MODULATE_COLOR_IMG = 0x8C04;
pub inline fn glRotatex(arg_1342: GLfixed, arg_1343: GLfixed, arg_1344: GLfixed, arg_1345: GLfixed) void {
    return epoxy_glRotatex.?(arg_1342, arg_1343, arg_1344, arg_1345);
}
pub const GL_APPLE_vertex_array_range = 1;
pub const GL_DRAW_BUFFER12_EXT = 0x8831;
pub inline fn glVertexAttribI2ui(arg_1346: GLuint, arg_1347: GLuint, arg_1348: GLuint) void {
    return epoxy_glVertexAttribI2ui.?(arg_1346, arg_1347, arg_1348);
}
pub const GL_SLUMINANCE_ALPHA = 0x8C44;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_EXT = 0x919A;
pub const GL_GPU_ADDRESS_NV = 0x8F34;
pub inline fn glPointParameterivNV(arg_1349: GLenum, arg_1350: [*c]const GLint) void {
    return epoxy_glPointParameterivNV.?(arg_1349, arg_1350);
}
pub const GL_COLOR_INDEX = 0x1900;
pub inline fn glOrthofOES(arg_1351: GLfloat, arg_1352: GLfloat, arg_1353: GLfloat, arg_1354: GLfloat, arg_1355: GLfloat, arg_1356: GLfloat) void {
    return epoxy_glOrthofOES.?(arg_1351, arg_1352, arg_1353, arg_1354, arg_1355, arg_1356);
}
pub const GL_NORMAL_BIT_PGI = 0x08000000;
pub const GL_ARB_texture_query_levels = 1;
pub const __WORDSIZE_TIME64_COMPAT32 = 1;
pub inline fn glFramebufferReadBufferEXT(arg_1357: GLuint, arg_1358: GLenum) void {
    return epoxy_glFramebufferReadBufferEXT.?(arg_1357, arg_1358);
}
pub const GL_STRICT_SCISSOR_HINT_PGI = 0x1A218;
pub const SCNdFAST64 = __PRI64_PREFIX ++ "d";
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_NV = 0x933D;
pub inline fn glStencilThenCoverStrokePathInstancedNV(arg_1359: GLsizei, arg_1360: GLenum, arg_1361: ?*const c_void, arg_1362: GLuint, arg_1363: GLint, arg_1364: GLuint, arg_1365: GLenum, arg_1366: GLenum, arg_1367: [*c]const GLfloat) void {
    return epoxy_glStencilThenCoverStrokePathInstancedNV.?(arg_1359, arg_1360, arg_1361, arg_1362, arg_1363, arg_1364, arg_1365, arg_1366, arg_1367);
}
pub const GL_POINT_SIZE_ARRAY_OES = 0x8B9C;
pub const GL_CLIENT_STORAGE_BIT = 0x0200;
pub inline fn glVertexArrayFogCoordOffsetEXT(arg_1368: GLuint, arg_1369: GLuint, arg_1370: GLenum, arg_1371: GLsizei, arg_1372: GLintptr) void {
    return epoxy_glVertexArrayFogCoordOffsetEXT.?(arg_1368, arg_1369, arg_1370, arg_1371, arg_1372);
}
pub const GL_STENCIL_TEST = 0x0B90;
pub const GL_OES_draw_texture = 1;
pub const GL_QUERY_BY_REGION_WAIT = 0x8E15;
pub const GL_TEXTURE_RED_SIZE_EXT = 0x805C;
pub const GL_MAX_TASK_TEXTURE_IMAGE_UNITS_NV = 0x8E69;
pub inline fn glProgramUniform3ui64NV(arg_1373: GLuint, arg_1374: GLint, arg_1375: GLuint64EXT, arg_1376: GLuint64EXT, arg_1377: GLuint64EXT) void {
    return epoxy_glProgramUniform3ui64NV.?(arg_1373, arg_1374, arg_1375, arg_1376, arg_1377);
}
pub inline fn glDeletePathsNV(arg_1378: GLuint, arg_1379: GLsizei) void {
    return epoxy_glDeletePathsNV.?(arg_1378, arg_1379);
}
pub const GL_SRC1_ALPHA_EXT = 0x8589;
pub inline fn glGetBufferPointervOES(arg_1380: GLenum, arg_1381: GLenum, arg_1382: [*c]?*c_void) void {
    return epoxy_glGetBufferPointervOES.?(arg_1380, arg_1381, arg_1382);
}
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_EXT = 0x8DDD;
pub const GL_SIGNALED = 0x9119;
pub const GL_PALETTE4_R5_G6_B5_OES = 0x8B92;
pub inline fn glBindProgramPipeline(arg_1383: GLuint) void {
    return epoxy_glBindProgramPipeline.?(arg_1383);
}
pub const __UINT32_MAX__ = @as(c_uint, 4294967295);
pub inline fn glTextureParameterIivEXT(arg_1384: GLuint, arg_1385: GLenum, arg_1386: GLenum, arg_1387: [*c]const GLint) void {
    return epoxy_glTextureParameterIivEXT.?(arg_1384, arg_1385, arg_1386, arg_1387);
}
pub const GL_DRAW_FRAMEBUFFER_ANGLE = 0x8CA9;
pub inline fn glViewport(arg_1388: GLint, arg_1389: GLint, arg_1390: GLsizei, arg_1391: GLsizei) void {
    return epoxy_glViewport.?(arg_1388, arg_1389, arg_1390, arg_1391);
}
pub inline fn glFlushRasterSGIX() void {
    return epoxy_glFlushRasterSGIX.?();
}
pub const GL_ATTRIBUTE_ADDRESS_COMMAND_NV = 0x0009;
pub const GL_CIRCULAR_CCW_ARC_TO_NV = 0xF8;
pub inline fn glGetnUniformiv(arg_1392: GLuint, arg_1393: GLint, arg_1394: GLsizei, arg_1395: [*c]GLint) void {
    return epoxy_glGetnUniformiv.?(arg_1392, arg_1393, arg_1394, arg_1395);
}
pub inline fn glCompressedTexSubImage3D(arg_1396: GLenum, arg_1397: GLint, arg_1398: GLint, arg_1399: GLint, arg_1400: GLint, arg_1401: GLsizei, arg_1402: GLsizei, arg_1403: GLsizei, arg_1404: GLenum, arg_1405: GLsizei, arg_1406: ?*const c_void) void {
    return epoxy_glCompressedTexSubImage3D.?(arg_1396, arg_1397, arg_1398, arg_1399, arg_1400, arg_1401, arg_1402, arg_1403, arg_1404, arg_1405, arg_1406);
}
pub const GL_PROTECTED_MEMORY_OBJECT_EXT = 0x959B;
pub const GL_CURRENT_RASTER_NORMAL_SGIX = 0x8406;
pub const GL_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D5;
pub const GL_NV_geometry_shader_passthrough = 1;
pub const GL_AMD_transform_feedback3_lines_triangles = 1;
pub const GL_LUMINANCE32UI_EXT = 0x8D74;
pub const GL_BUFFER_MAP_OFFSET = 0x9121;
pub inline fn glClearDepthf(arg_1407: GLfloat) void {
    return epoxy_glClearDepthf.?(arg_1407);
}
pub inline fn glGetTextureParameterfv(arg_1408: GLuint, arg_1409: GLenum, arg_1410: [*c]GLfloat) void {
    return epoxy_glGetTextureParameterfv.?(arg_1408, arg_1409, arg_1410);
}
pub const GL_COMPRESSED_RGBA_ASTC_5x5_KHR = 0x93B2;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_KHR = 0x8243;
pub const GL_MAP2_VERTEX_ATTRIB14_4_NV = 0x867E;
pub inline fn glGetCombinerOutputParameterivNV(arg_1411: GLenum, arg_1412: GLenum, arg_1413: GLenum, arg_1414: [*c]GLint) void {
    return epoxy_glGetCombinerOutputParameterivNV.?(arg_1411, arg_1412, arg_1413, arg_1414);
}
pub const GL_FRAMEBUFFER_DEFAULT_WIDTH = 0x9310;
pub const GL_POST_CONVOLUTION_RED_BIAS = 0x8020;
pub const GL_EXT_multiview_timer_query = 1;
pub inline fn glBufferStorageExternalEXT(arg_1415: GLenum, arg_1416: GLintptr, arg_1417: GLsizeiptr, arg_1418: GLeglClientBufferEXT, arg_1419: GLbitfield) void {
    return epoxy_glBufferStorageExternalEXT.?(arg_1415, arg_1416, arg_1417, arg_1418, arg_1419);
}
pub const GL_FRONT_RIGHT = 0x0401;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_EXT = 0x8DC4;
pub const GL_NV_geometry_program4 = 1;
pub const GL_HISTOGRAM_BLUE_SIZE = 0x802A;
pub const GL_BUFFER_ACCESS = 0x88BB;
pub const GL_IMAGE_CLASS_4_X_8 = 0x82BF;
pub const GL_NV_gpu_shader5 = 1;
pub const GL_ELEMENT_ARRAY_ADDRESS_NV = 0x8F29;
pub const GL_SPRITE_AXIAL_SGIX = 0x814C;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_EXT = 0x8C8F;
pub const PRIdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const GL_FRAGMENT_SHADER_BIT_EXT = 0x00000002;
pub const GL_DISCRETE_AMD = 0x9006;
pub const __clang_patchlevel__ = 0;
pub const GL_PATH_FILL_MASK_NV = 0x9081;
pub inline fn glClearStencil(arg_1420: GLint) void {
    return epoxy_glClearStencil.?(arg_1420);
}
pub inline fn glClearColorxOES(arg_1421: GLfixed, arg_1422: GLfixed, arg_1423: GLfixed, arg_1424: GLfixed) void {
    return epoxy_glClearColorxOES.?(arg_1421, arg_1422, arg_1423, arg_1424);
}
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E1E;
pub const GL_MEMORY_ATTACHABLE_SIZE_NV = 0x95A7;
pub const GL_SECONDARY_COLOR_ARRAY_STRIDE = 0x845C;
pub inline fn glDeleteVertexArrays(arg_1425: GLsizei, arg_1426: [*c]const GLuint) void {
    return epoxy_glDeleteVertexArrays.?(arg_1425, arg_1426);
}
pub inline fn glGetPerfMonitorCountersAMD(arg_1427: GLuint, arg_1428: [*c]GLint, arg_1429: [*c]GLint, arg_1430: GLsizei, arg_1431: [*c]GLuint) void {
    return epoxy_glGetPerfMonitorCountersAMD.?(arg_1427, arg_1428, arg_1429, arg_1430, arg_1431);
}
pub inline fn glDetailTexFuncSGIS(arg_1432: GLenum, arg_1433: GLsizei, arg_1434: [*c]const GLfloat) void {
    return epoxy_glDetailTexFuncSGIS.?(arg_1432, arg_1433, arg_1434);
}
pub inline fn glCullFace(arg_1435: GLenum) void {
    return epoxy_glCullFace.?(arg_1435);
}
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z = 0x8519;
pub const GL_NV_explicit_multisample = 1;
pub const __MMX__ = 1;
pub const GL_DOUBLE_VEC3 = 0x8FFD;
pub const GL_VERTEX_ARRAY_POINTER_EXT = 0x808E;
pub const GL_LUMINANCE8_ALPHA8_SNORM = 0x9016;
pub const GL_DRAW_BUFFER6_ATI = 0x882B;
pub const GL_NUM_DEVICE_UUIDS_EXT = 0x9596;
pub const GL_NV_fragment_program_option = 1;
pub const GL_MODELVIEW5_ARB = 0x8725;
pub inline fn glSecondaryColor3bv(arg_1436: [*c]const GLbyte) void {
    return epoxy_glSecondaryColor3bv.?(arg_1436);
}
pub const PRIoLEAST16 = "o";
pub const SCNiMAX = __PRI64_PREFIX ++ "i";
pub const __corei7 = 1;
pub const GL_VERTEX_PRECLIP_SGIX = 0x83EE;
pub const GL_TESS_EVALUATION_SUBROUTINE = 0x92EA;
pub const GL_SAMPLE_MASK_VALUE = 0x8E52;
pub inline fn glGenerateTextureMipmapEXT(arg_1437: GLuint, arg_1438: GLenum) void {
    return epoxy_glGenerateTextureMipmapEXT.?(arg_1437, arg_1438);
}
pub const GL_COLOR_ATTACHMENT3_NV = 0x8CE3;
pub const GL_UNIFORM_BUFFER_START = 0x8A29;
pub inline fn glCombinerStageParameterfvNV(arg_1439: GLenum, arg_1440: GLenum, arg_1441: [*c]const GLfloat) void {
    return epoxy_glCombinerStageParameterfvNV.?(arg_1439, arg_1440, arg_1441);
}
pub inline fn glTextureParameterfEXT(arg_1442: GLuint, arg_1443: GLenum, arg_1444: GLenum, arg_1445: GLfloat) void {
    return epoxy_glTextureParameterfEXT.?(arg_1442, arg_1443, arg_1444, arg_1445);
}
pub const GL_COMBINER_SCALE_NV = 0x8548;
pub inline fn glBlendFuncSeparateEXT(arg_1446: GLenum, arg_1447: GLenum, arg_1448: GLenum, arg_1449: GLenum) void {
    return epoxy_glBlendFuncSeparateEXT.?(arg_1446, arg_1447, arg_1448, arg_1449);
}
pub const GL_TEXTURE16 = 0x84D0;
pub inline fn glMultiTexCoord3bOES(arg_1450: GLenum, arg_1451: GLbyte, arg_1452: GLbyte, arg_1453: GLbyte) void {
    return epoxy_glMultiTexCoord3bOES.?(arg_1450, arg_1451, arg_1452, arg_1453);
}
pub const GL_ENABLE_BIT = 0x00002000;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87CC;
pub const __glibc_c99_flexarr_available = 1;
pub inline fn glBindTexGenParameterEXT(arg_1454: GLenum, arg_1455: GLenum, arg_1456: GLenum) GLuint {
    return epoxy_glBindTexGenParameterEXT.?(arg_1454, arg_1455, arg_1456);
}
pub const GL_UNSIGNED_NORMALIZED_EXT = 0x8C17;
pub const __UINT_LEAST32_MAX__ = @as(c_uint, 4294967295);
pub const GL_IMG_bindless_texture = 1;
pub inline fn glBlendEquationi(arg_1457: GLuint, arg_1458: GLenum) void {
    return epoxy_glBlendEquationi.?(arg_1457, arg_1458);
}
pub inline fn glRasterPos3xOES(arg_1459: GLfixed, arg_1460: GLfixed, arg_1461: GLfixed) void {
    return epoxy_glRasterPos3xOES.?(arg_1459, arg_1460, arg_1461);
}
pub const PRIuLEAST32 = "u";
pub const GL_DUAL_TEXTURE_SELECT_SGIS = 0x8124;
pub const GL_SHADER_STORAGE_BUFFER_SIZE = 0x90D5;
pub const GL_PIXEL_MAP_I_TO_G = 0x0C73;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED = 0x8221;
pub const GL_IS_PER_PATCH_EXT = 0x92E7;
pub const __clang_version__ = "10.0.0 ";
pub inline fn glVariantbvEXT(arg_1462: GLuint, arg_1463: [*c]const GLbyte) void {
    return epoxy_glVariantbvEXT.?(arg_1462, arg_1463);
}
pub const GL_RENDER_GPU_MASK_NV = 0x9558;
pub inline fn glCreateShaderProgramv(arg_1464: GLenum, arg_1465: GLsizei, arg_1466: [*c]const [*c]const GLchar) GLuint {
    return epoxy_glCreateShaderProgramv.?(arg_1464, arg_1465, arg_1466);
}
pub inline fn glProgramUniform4ui64NV(arg_1467: GLuint, arg_1468: GLint, arg_1469: GLuint64EXT, arg_1470: GLuint64EXT, arg_1471: GLuint64EXT, arg_1472: GLuint64EXT) void {
    return epoxy_glProgramUniform4ui64NV.?(arg_1467, arg_1468, arg_1469, arg_1470, arg_1471, arg_1472);
}
pub const GL_STENCIL_RENDERABLE = 0x8288;
pub const GL_STENCIL_TEST_TWO_SIDE_EXT = 0x8910;
pub const GL_MULTIPLY_NV = 0x9294;
pub const GL_LUMINANCE8_SNORM = 0x9015;
pub inline fn glInvalidateTexSubImage(arg_1473: GLuint, arg_1474: GLint, arg_1475: GLint, arg_1476: GLint, arg_1477: GLint, arg_1478: GLsizei, arg_1479: GLsizei, arg_1480: GLsizei) void {
    return epoxy_glInvalidateTexSubImage.?(arg_1473, arg_1474, arg_1475, arg_1476, arg_1477, arg_1478, arg_1479, arg_1480);
}
pub const GL_EXT_geometry_shader = 1;
pub const GL_INDEX_MODE = 0x0C30;
pub inline fn glIsEnablediEXT(arg_1481: GLenum, arg_1482: GLuint) GLboolean {
    return epoxy_glIsEnablediEXT.?(arg_1481, arg_1482);
}
pub inline fn glTexCoord2fNormal3fVertex3fSUN(arg_1483: GLfloat, arg_1484: GLfloat, arg_1485: GLfloat, arg_1486: GLfloat, arg_1487: GLfloat, arg_1488: GLfloat, arg_1489: GLfloat, arg_1490: GLfloat) void {
    return epoxy_glTexCoord2fNormal3fVertex3fSUN.?(arg_1483, arg_1484, arg_1485, arg_1486, arg_1487, arg_1488, arg_1489, arg_1490);
}
pub inline fn glVertexAttrib1f(arg_1491: GLuint, arg_1492: GLfloat) void {
    return epoxy_glVertexAttrib1f.?(arg_1491, arg_1492);
}
pub const GL_MAX_TASK_UNIFORM_COMPONENTS_NV = 0x8E6B;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9277;
pub const __INT_LEAST32_FMTi__ = "i";
pub const GL_TEXTURE_VIEW_NUM_LAYERS_OES = 0x82DE;
pub const __WCHAR_WIDTH__ = 32;
pub inline fn glColor4ui(arg_1493: GLuint, arg_1494: GLuint, arg_1495: GLuint, arg_1496: GLuint) void {
    return epoxy_glColor4ui.?(arg_1493, arg_1494, arg_1495, arg_1496);
}
pub const GL_NORMAL_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F6;
pub inline fn glNormalP3ui(arg_1497: GLenum, arg_1498: GLuint) void {
    return epoxy_glNormalP3ui.?(arg_1497, arg_1498);
}
pub inline fn glProgramLocalParameters4fvEXT(arg_1499: GLenum, arg_1500: GLuint, arg_1501: GLsizei, arg_1502: [*c]const GLfloat) void {
    return epoxy_glProgramLocalParameters4fvEXT.?(arg_1499, arg_1500, arg_1501, arg_1502);
}
pub const GL_COLOR_ALPHA_PAIRING_ATI = 0x8975;
pub const GL_COMPRESSED_RGB_ARB = 0x84ED;
pub const INT32_MAX = 2147483647;
pub const GL_COMPRESSED_SRGB8_ETC2_OES = 0x9275;
pub const GL_DEBUG_CALLBACK_FUNCTION_KHR = 0x8244;
pub const GL_FLOAT_RGBA16_NV = 0x888A;
pub const GL_TEXTURE_COVERAGE_SAMPLES_NV = 0x9045;
pub inline fn glNamedBufferAttachMemoryNV(arg_1503: GLuint, arg_1504: GLuint, arg_1505: GLuint64) void {
    return epoxy_glNamedBufferAttachMemoryNV.?(arg_1503, arg_1504, arg_1505);
}
pub inline fn glTexEnviv(arg_1506: GLenum, arg_1507: GLenum, arg_1508: [*c]const GLint) void {
    return epoxy_glTexEnviv.?(arg_1506, arg_1507, arg_1508);
}
pub inline fn glCoverageModulationTableNV(arg_1509: GLsizei, arg_1510: [*c]const GLfloat) void {
    return epoxy_glCoverageModulationTableNV.?(arg_1509, arg_1510);
}
pub const GL_POINT_NV = 0x1B00;
pub const GL_COLOR_TABLE = 0x80D0;
pub const GL_MAP_PERSISTENT_BIT_EXT = 0x0040;
pub const GL_SLIM8U_SGIX = 0x831D;
pub inline fn glVertexAttrib1dv(arg_1511: GLuint, arg_1512: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib1dv.?(arg_1511, arg_1512);
}
pub const GL_ARB_copy_image = 1;
pub const GL_T = 0x2001;
pub inline fn glSpriteParameteriSGIX(arg_1513: GLenum, arg_1514: GLint) void {
    return epoxy_glSpriteParameteriSGIX.?(arg_1513, arg_1514);
}
pub const GL_MAX_COMPUTE_FIXED_GROUP_SIZE_ARB = 0x91BF;
pub inline fn glCompressedTextureSubImage2DEXT(arg_1515: GLuint, arg_1516: GLenum, arg_1517: GLint, arg_1518: GLint, arg_1519: GLint, arg_1520: GLsizei, arg_1521: GLsizei, arg_1522: GLenum, arg_1523: GLsizei, arg_1524: ?*const c_void) void {
    return epoxy_glCompressedTextureSubImage2DEXT.?(arg_1515, arg_1516, arg_1517, arg_1518, arg_1519, arg_1520, arg_1521, arg_1522, arg_1523, arg_1524);
}
pub const GL_OPERAND2_ALPHA = 0x859A;
pub const GL_VERTEX_PROGRAM_BINDING_NV = 0x864A;
pub inline fn glFramebufferFetchBarrierQCOM() void {
    return epoxy_glFramebufferFetchBarrierQCOM.?();
}
pub inline fn glFlushVertexArrayRangeNV() void {
    return epoxy_glFlushVertexArrayRangeNV.?();
}
pub inline fn glEnableClientState(arg_1525: GLenum) void {
    return epoxy_glEnableClientState.?(arg_1525);
}
pub inline fn glVertexAttribs2fvNV(arg_1526: GLuint, arg_1527: GLsizei, arg_1528: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs2fvNV.?(arg_1526, arg_1527, arg_1528);
}
pub inline fn glVertexPointervINTEL(arg_1529: GLint, arg_1530: GLenum, arg_1531: [*c]?*const c_void) void {
    return epoxy_glVertexPointervINTEL.?(arg_1529, arg_1530, arg_1531);
}
pub const GL_ACTIVE_SUBROUTINE_MAX_LENGTH = 0x8E48;
pub inline fn glSecondaryColor3dv(arg_1532: [*c]const GLdouble) void {
    return epoxy_glSecondaryColor3dv.?(arg_1532);
}
pub const PRIi8 = "i";
pub inline fn glGetDoublev(arg_1533: GLenum, arg_1534: [*c]GLdouble) void {
    return epoxy_glGetDoublev.?(arg_1533, arg_1534);
}
pub const GL_FOG_SPECULAR_TEXTURE_WIN = 0x80EC;
pub const GL_BACK_SECONDARY_COLOR_NV = 0x8C78;
pub inline fn glVertex2fv(arg_1535: [*c]const GLfloat) void {
    return epoxy_glVertex2fv.?(arg_1535);
}
pub const PRIdLEAST8 = "d";
pub const GL_NV_copy_depth_to_color = 1;
pub const GL_GLYPH_HEIGHT_BIT_NV = 0x02;
pub const GL_VARIABLE_G_NV = 0x8529;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_OES = 0x9308;
pub inline fn glProgramParameteri(arg_1536: GLuint, arg_1537: GLenum, arg_1538: GLint) void {
    return epoxy_glProgramParameteri.?(arg_1536, arg_1537, arg_1538);
}
pub inline fn glGenerateMipmapEXT(arg_1539: GLenum) void {
    return epoxy_glGenerateMipmapEXT.?(arg_1539);
}
pub inline fn glGetCombinerOutputParameterfvNV(arg_1540: GLenum, arg_1541: GLenum, arg_1542: GLenum, arg_1543: [*c]GLfloat) void {
    return epoxy_glGetCombinerOutputParameterfvNV.?(arg_1540, arg_1541, arg_1542, arg_1543);
}
pub inline fn glGetUniformfv(arg_1544: GLuint, arg_1545: GLint, arg_1546: [*c]GLfloat) void {
    return epoxy_glGetUniformfv.?(arg_1544, arg_1545, arg_1546);
}
pub inline fn glGetConvolutionFilter(arg_1547: GLenum, arg_1548: GLenum, arg_1549: GLenum, arg_1550: ?*c_void) void {
    return epoxy_glGetConvolutionFilter.?(arg_1547, arg_1548, arg_1549, arg_1550);
}
pub const GL_SGIS_texture_color_mask = 1;
pub const GL_POST_CONVOLUTION_GREEN_BIAS_EXT = 0x8021;
pub inline fn glTexStorageMem3DMultisampleEXT(arg_1551: GLenum, arg_1552: GLsizei, arg_1553: GLenum, arg_1554: GLsizei, arg_1555: GLsizei, arg_1556: GLsizei, arg_1557: GLboolean, arg_1558: GLuint, arg_1559: GLuint64) void {
    return epoxy_glTexStorageMem3DMultisampleEXT.?(arg_1551, arg_1552, arg_1553, arg_1554, arg_1555, arg_1556, arg_1557, arg_1558, arg_1559);
}
pub inline fn glBindLightParameterEXT(arg_1560: GLenum, arg_1561: GLenum) GLuint {
    return epoxy_glBindLightParameterEXT.?(arg_1560, arg_1561);
}
pub const GL_R11F_G11F_B10F_EXT = 0x8C3A;
pub inline fn glGetTextureSamplerHandleIMG(arg_1562: GLuint, arg_1563: GLuint) GLuint64 {
    return epoxy_glGetTextureSamplerHandleIMG.?(arg_1562, arg_1563);
}
pub const GL_VIEWPORT_BOUNDS_RANGE_EXT = 0x825D;
pub inline fn glTexCoordPointer(arg_1564: GLint, arg_1565: GLenum, arg_1566: GLsizei, arg_1567: ?*const c_void) void {
    return epoxy_glTexCoordPointer.?(arg_1564, arg_1565, arg_1566, arg_1567);
}
pub const GL_NUM_SAMPLE_COUNTS = 0x9380;
pub const GL_COMPRESSED_RGBA_ASTC_8x5 = 0x93B5;
pub const GL_APPLE_float_pixels = 1;
pub const GL_SINGLE_COLOR = 0x81F9;
pub inline fn glEvalMesh1(arg_1568: GLenum, arg_1569: GLint, arg_1570: GLint) void {
    return epoxy_glEvalMesh1.?(arg_1568, arg_1569, arg_1570);
}
pub inline fn glLoadTransposeMatrixdARB(arg_1571: [*c]const GLdouble) void {
    return epoxy_glLoadTransposeMatrixdARB.?(arg_1571);
}
pub inline fn glTextureStorage3DMultisampleEXT(arg_1572: GLuint, arg_1573: GLenum, arg_1574: GLsizei, arg_1575: GLenum, arg_1576: GLsizei, arg_1577: GLsizei, arg_1578: GLsizei, arg_1579: GLboolean) void {
    return epoxy_glTextureStorage3DMultisampleEXT.?(arg_1572, arg_1573, arg_1574, arg_1575, arg_1576, arg_1577, arg_1578, arg_1579);
}
pub inline fn glAlphaFragmentOp3ATI(arg_1580: GLenum, arg_1581: GLuint, arg_1582: GLuint, arg_1583: GLuint, arg_1584: GLuint, arg_1585: GLuint, arg_1586: GLuint, arg_1587: GLuint, arg_1588: GLuint, arg_1589: GLuint, arg_1590: GLuint, arg_1591: GLuint) void {
    return epoxy_glAlphaFragmentOp3ATI.?(arg_1580, arg_1581, arg_1582, arg_1583, arg_1584, arg_1585, arg_1586, arg_1587, arg_1588, arg_1589, arg_1590, arg_1591);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_NV = 0x8D56;
pub const __UINTMAX_FMTu__ = "lu";
pub inline fn glVertex4s(arg_1592: GLshort, arg_1593: GLshort, arg_1594: GLshort, arg_1595: GLshort) void {
    return epoxy_glVertex4s.?(arg_1592, arg_1593, arg_1594, arg_1595);
}
pub const GL_HANDLE_TYPE_D3D11_IMAGE_EXT = 0x958B;
pub const GL_SAMPLER_1D_ARB = 0x8B5D;
pub const GL_REPLACE_VALUE_AMD = 0x874B;
pub const GL_DOT_PRODUCT_TEXTURE_CUBE_MAP_NV = 0x86F0;
pub const GL_MEMORY_ATTACHABLE_NV = 0x95A8;
pub const GL_RG16UI = 0x823A;
pub const GL_MAX_TEXTURE_MAX_ANISOTROPY_EXT = 0x84FF;
pub const GL_COLOR_TABLE_BIAS = 0x80D7;
pub const GL_AMD_shader_atomic_counter_ops = 1;
pub const PRIu8 = "u";
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_EXT = 0x8E81;
pub inline fn glColor4uiv(arg_1596: [*c]const GLuint) void {
    return epoxy_glColor4uiv.?(arg_1596);
}
pub inline fn glGetHistogramParameterxvOES(arg_1597: GLenum, arg_1598: GLenum, arg_1599: [*c]GLfixed) void {
    return epoxy_glGetHistogramParameterxvOES.?(arg_1597, arg_1598, arg_1599);
}
pub const GL_PIXEL_MAP_I_TO_G_SIZE = 0x0CB3;
pub const GL_TEXTURE_FILTER_CONTROL_EXT = 0x8500;
pub const GL_MODULATE_SUBTRACT_ATI = 0x8746;
pub const GL_EXT_texture_perturb_normal = 1;
pub const GL_SIGNED_INTENSITY8_NV = 0x8708;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_KHR = 0x9143;
pub inline fn glGetTexBumpParameterfvATI(arg_1600: GLenum, arg_1601: [*c]GLfloat) void {
    return epoxy_glGetTexBumpParameterfvATI.?(arg_1600, arg_1601);
}
pub const GL_ARB_texture_stencil8 = 1;
pub inline fn glGetTexLevelParameteriv(arg_1602: GLenum, arg_1603: GLint, arg_1604: GLenum, arg_1605: [*c]GLint) void {
    return epoxy_glGetTexLevelParameteriv.?(arg_1602, arg_1603, arg_1604, arg_1605);
}
pub inline fn glIsTextureHandleResidentARB(arg_1606: GLuint64) GLboolean {
    return epoxy_glIsTextureHandleResidentARB.?(arg_1606);
}
pub const GL_RGB10 = 0x8052;
pub const GL_NUM_SHADING_LANGUAGE_VERSIONS = 0x82E9;
pub inline fn glMakeImageHandleResidentARB(arg_1607: GLuint64, arg_1608: GLenum) void {
    return epoxy_glMakeImageHandleResidentARB.?(arg_1607, arg_1608);
}
pub const GL_SGIS_multisample = 1;
pub inline fn glGetCoverageModulationTableNV(arg_1609: GLsizei, arg_1610: [*c]GLfloat) void {
    return epoxy_glGetCoverageModulationTableNV.?(arg_1609, arg_1610);
}
pub const GL_MINMAX_FORMAT = 0x802F;
pub const GL_MODELVIEW23_ARB = 0x8737;
pub const GL_CLIENT_ATTRIB_STACK_DEPTH = 0x0BB1;
pub inline fn glMultiTexCoordP4uiv(arg_1611: GLenum, arg_1612: GLenum, arg_1613: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP4uiv.?(arg_1611, arg_1612, arg_1613);
}
pub inline fn glEvalCoord1f(arg_1614: GLfloat) void {
    return epoxy_glEvalCoord1f.?(arg_1614);
}
pub inline fn glCombinerInputNV(arg_1615: GLenum, arg_1616: GLenum, arg_1617: GLenum, arg_1618: GLenum, arg_1619: GLenum, arg_1620: GLenum) void {
    return epoxy_glCombinerInputNV.?(arg_1615, arg_1616, arg_1617, arg_1618, arg_1619, arg_1620);
}
pub const GL_ALPHA8_SNORM = 0x9014;
pub const __GNUC_STDC_INLINE__ = 1;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x8E5A;
pub const GL_DEPTH_WRITEMASK = 0x0B72;
pub const GL_DEPTH_PASS_INSTRUMENT_COUNTERS_SGIX = 0x8311;
pub const GL_SYNC_CONDITION = 0x9113;
pub const GL_PERFQUERY_QUERY_NAME_LENGTH_MAX_INTEL = 0x94FD;
pub inline fn glFramebufferFoveationParametersQCOM(arg_1621: GLuint, arg_1622: GLuint, arg_1623: GLuint, arg_1624: GLfloat, arg_1625: GLfloat, arg_1626: GLfloat, arg_1627: GLfloat, arg_1628: GLfloat) void {
    return epoxy_glFramebufferFoveationParametersQCOM.?(arg_1621, arg_1622, arg_1623, arg_1624, arg_1625, arg_1626, arg_1627, arg_1628);
}
pub const GL_RGB_FLOAT32_APPLE = 0x8815;
pub inline fn glDisableClientStateiEXT(arg_1629: GLenum, arg_1630: GLuint) void {
    return epoxy_glDisableClientStateiEXT.?(arg_1629, arg_1630);
}
pub const PRIxFAST32 = __PRIPTR_PREFIX ++ "x";
pub inline fn glUniform2iv(arg_1631: GLint, arg_1632: GLsizei, arg_1633: [*c]const GLint) void {
    return epoxy_glUniform2iv.?(arg_1631, arg_1632, arg_1633);
}
pub inline fn glClientWaitSyncAPPLE(arg_1634: GLsync, arg_1635: GLbitfield, arg_1636: GLuint64) GLenum {
    return epoxy_glClientWaitSyncAPPLE.?(arg_1634, arg_1635, arg_1636);
}
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INVARIANTS_EXT = 0x87CD;
pub const GL_FONT_X_MAX_BOUNDS_BIT_NV = 0x00040000;
pub inline fn glSecondaryColorPointer(arg_1637: GLint, arg_1638: GLenum, arg_1639: GLsizei, arg_1640: ?*const c_void) void {
    return epoxy_glSecondaryColorPointer.?(arg_1637, arg_1638, arg_1639, arg_1640);
}
pub const GL_UNKNOWN_CONTEXT_RESET = 0x8255;
pub inline fn glGetColorTableParameterfvSGI(arg_1641: GLenum, arg_1642: GLenum, arg_1643: [*c]GLfloat) void {
    return epoxy_glGetColorTableParameterfvSGI.?(arg_1641, arg_1642, arg_1643);
}
pub const GL_MODELVIEW15_ARB = 0x872F;
pub const GL_OUTPUT_TEXTURE_COORD20_EXT = 0x87B1;
pub inline fn glBlendFuncSeparateINGR(arg_1644: GLenum, arg_1645: GLenum, arg_1646: GLenum, arg_1647: GLenum) void {
    return epoxy_glBlendFuncSeparateINGR.?(arg_1644, arg_1645, arg_1646, arg_1647);
}
pub inline fn glDrawVkImageNV(arg_1648: GLuint64, arg_1649: GLuint, arg_1650: GLfloat, arg_1651: GLfloat, arg_1652: GLfloat, arg_1653: GLfloat, arg_1654: GLfloat, arg_1655: GLfloat, arg_1656: GLfloat, arg_1657: GLfloat, arg_1658: GLfloat) void {
    return epoxy_glDrawVkImageNV.?(arg_1648, arg_1649, arg_1650, arg_1651, arg_1652, arg_1653, arg_1654, arg_1655, arg_1656, arg_1657, arg_1658);
}
pub const GL_CURRENT_MATRIX_ARB = 0x8641;
pub inline fn glQueryObjectParameteruiAMD(arg_1659: GLenum, arg_1660: GLuint, arg_1661: GLenum, arg_1662: GLuint) void {
    return epoxy_glQueryObjectParameteruiAMD.?(arg_1659, arg_1660, arg_1661, arg_1662);
}
pub inline fn glActiveShaderProgram(arg_1663: GLuint, arg_1664: GLuint) void {
    return epoxy_glActiveShaderProgram.?(arg_1663, arg_1664);
}
pub const GL_PACK_COMPRESSED_BLOCK_DEPTH = 0x912D;
pub const GL_TEXTURE_SWIZZLE_R_EXT = 0x8E42;
pub const GL_GEOMETRY_OUTPUT_TYPE_EXT = 0x8DDC;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_EXT = 0x8C8B;
pub const GL_APPLE_transform_hint = 1;
pub const GL_TEXTURE_COMPRESSION_HINT = 0x84EF;
pub const __OFF_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const GL_PROGRAM_MATRIX_EXT = 0x8E2D;
pub const GL_INTENSITY16_SNORM = 0x901B;
pub const GL_MAX_RASTER_SAMPLES_EXT = 0x9329;
pub inline fn glGetFramebufferParameterivMESA(arg_1665: GLenum, arg_1666: GLenum, arg_1667: [*c]GLint) void {
    return epoxy_glGetFramebufferParameterivMESA.?(arg_1665, arg_1666, arg_1667);
}
pub const GL_FILL = 0x1B02;
pub const GL_SHADING_RATE_4_INVOCATIONS_PER_PIXEL_NV = 0x956D;
pub const GL_VERTEX_ARRAY_BINDING_OES = 0x85B5;
pub inline fn glBeginPerfMonitorAMD(arg_1668: GLuint) void {
    return epoxy_glBeginPerfMonitorAMD.?(arg_1668);
}
pub inline fn glIsVertexArrayOES(arg_1669: GLuint) GLboolean {
    return epoxy_glIsVertexArrayOES.?(arg_1669);
}
pub inline fn glIsSampler(arg_1670: GLuint) GLboolean {
    return epoxy_glIsSampler.?(arg_1670);
}
pub const GL_INTEL_performance_query = 1;
pub inline fn glGetTextureParameterivEXT(arg_1671: GLuint, arg_1672: GLenum, arg_1673: GLenum, arg_1674: [*c]GLint) void {
    return epoxy_glGetTextureParameterivEXT.?(arg_1671, arg_1672, arg_1673, arg_1674);
}
pub inline fn glVertexStream2dATI(arg_1675: GLenum, arg_1676: GLdouble, arg_1677: GLdouble) void {
    return epoxy_glVertexStream2dATI.?(arg_1675, arg_1676, arg_1677);
}
pub const GL_422_AVERAGE_EXT = 0x80CE;
pub inline fn glVertexAttribDivisor(arg_1678: GLuint, arg_1679: GLuint) void {
    return epoxy_glVertexAttribDivisor.?(arg_1678, arg_1679);
}
pub const GL_TEXTURE_LEQUAL_R_SGIX = 0x819C;
pub const GL_WEIGHT_ARRAY_STRIDE_OES = 0x86AA;
pub inline fn glVertexAttribL3i64NV(arg_1680: GLuint, arg_1681: GLint64EXT, arg_1682: GLint64EXT, arg_1683: GLint64EXT) void {
    return epoxy_glVertexAttribL3i64NV.?(arg_1680, arg_1681, arg_1682, arg_1683);
}
pub const GL_ELEMENT_ARRAY_ATI = 0x8768;
pub const GL_CLAMP_TO_EDGE_SGIS = 0x812F;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER = 0x9307;
pub inline fn glActiveShaderProgramEXT(arg_1684: GLuint, arg_1685: GLuint) void {
    return epoxy_glActiveShaderProgramEXT.?(arg_1684, arg_1685);
}
pub const GL_ASYNC_DRAW_PIXELS_SGIX = 0x835D;
pub inline fn glLineStipple(arg_1686: GLint, arg_1687: GLushort) void {
    return epoxy_glLineStipple.?(arg_1686, arg_1687);
}
pub const GL_SIMULTANEOUS_TEXTURE_AND_STENCIL_TEST = 0x82AD;
pub const GL_MINMAX_FORMAT_EXT = 0x802F;
pub inline fn glNamedFramebufferReadBuffer(arg_1688: GLuint, arg_1689: GLenum) void {
    return epoxy_glNamedFramebufferReadBuffer.?(arg_1688, arg_1689);
}
pub const INT_LEAST8_MAX = 127;
pub const GL_MAX_VERTEX_ATTRIBS = 0x8869;
pub const GL_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A6;
pub const GL_NUM_PROGRAM_BINARY_FORMATS = 0x87FE;
pub inline fn glBlendFunciARB(arg_1690: GLuint, arg_1691: GLenum, arg_1692: GLenum) void {
    return epoxy_glBlendFunciARB.?(arg_1690, arg_1691, arg_1692);
}
pub const GL_ALPHA_TEST = 0x0BC0;
pub inline fn glMateriali(arg_1693: GLenum, arg_1694: GLenum, arg_1695: GLint) void {
    return epoxy_glMateriali.?(arg_1693, arg_1694, arg_1695);
}
pub const GL_MAX_PROGRAM_PATCH_ATTRIBS_NV = 0x86D8;
pub const GL_MAP_COHERENT_BIT_EXT = 0x0080;
pub inline fn glGetProgramBinaryOES(arg_1696: GLuint, arg_1697: GLsizei, arg_1698: [*c]GLsizei, arg_1699: [*c]GLenum, arg_1700: ?*c_void) void {
    return epoxy_glGetProgramBinaryOES.?(arg_1696, arg_1697, arg_1698, arg_1699, arg_1700);
}
pub const GL_RGB565_OES = 0x8D62;
pub inline fn glGetActiveUniformBlockName(arg_1701: GLuint, arg_1702: GLuint, arg_1703: GLsizei, arg_1704: [*c]GLsizei, arg_1705: [*c]GLchar) void {
    return epoxy_glGetActiveUniformBlockName.?(arg_1701, arg_1702, arg_1703, arg_1704, arg_1705);
}
pub const GL_ARB_explicit_attrib_location = 1;
pub inline fn glNormalPointer(arg_1706: GLenum, arg_1707: GLsizei, arg_1708: ?*const c_void) void {
    return epoxy_glNormalPointer.?(arg_1706, arg_1707, arg_1708);
}
pub const GL_INTERPOLATE = 0x8575;
pub const GL_TEXTURE_DEPTH_SIZE = 0x884A;
pub const GL_SLUMINANCE = 0x8C46;
pub inline fn glVertex4bvOES(arg_1709: [*c]const GLbyte) void {
    return epoxy_glVertex4bvOES.?(arg_1709);
}
pub const GL_PACK_ALIGNMENT = 0x0D05;
pub const GL_ALL_PIXELS_AMD = 0xFFFFFFFF;
pub const GL_VERTEX_ARRAY_ADDRESS_NV = 0x8F21;
pub const GL_CURRENT_NORMAL = 0x0B02;
pub inline fn glProgramUniformMatrix4x2dvEXT(arg_1710: GLuint, arg_1711: GLint, arg_1712: GLsizei, arg_1713: GLboolean, arg_1714: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x2dvEXT.?(arg_1710, arg_1711, arg_1712, arg_1713, arg_1714);
}
pub const GL_COLOR_ATTACHMENT5 = 0x8CE5;
pub const GL_CIRCULAR_CW_ARC_TO_NV = 0xFA;
pub inline fn glResumeTransformFeedbackNV() void {
    return epoxy_glResumeTransformFeedbackNV.?();
}
pub const __x86_64__ = 1;
pub const GL_INDEX_TEST_FUNC_EXT = 0x81B6;
pub const GL_QUERY_STENCIL_FAIL_EVENT_BIT_AMD = 0x00000004;
pub const GL_PATH_DASH_ARRAY_COUNT_NV = 0x909F;
pub const GL_LUMINANCE8_EXT = 0x8040;
pub const GL_POLYGON_OFFSET_LINE_NV = 0x2A02;
pub const GL_COMPRESSED_R11_EAC = 0x9270;
pub inline fn glGetTexParameterxvOES(arg_1715: GLenum, arg_1716: GLenum, arg_1717: [*c]GLfixed) void {
    return epoxy_glGetTexParameterxvOES.?(arg_1715, arg_1716, arg_1717);
}
pub inline fn glMultiTexCoord2ivARB(arg_1718: GLenum, arg_1719: [*c]const GLint) void {
    return epoxy_glMultiTexCoord2ivARB.?(arg_1718, arg_1719);
}
pub const GL_VIEWPORT_POSITION_W_SCALE_X_COEFF_NV = 0x937D;
pub inline fn glScalexOES(arg_1720: GLfixed, arg_1721: GLfixed, arg_1722: GLfixed) void {
    return epoxy_glScalexOES.?(arg_1720, arg_1721, arg_1722);
}
pub inline fn glWindowPos3iMESA(arg_1723: GLint, arg_1724: GLint, arg_1725: GLint) void {
    return epoxy_glWindowPos3iMESA.?(arg_1723, arg_1724, arg_1725);
}
pub const GL_POLYGON_OFFSET_CLAMP_EXT = 0x8E1B;
pub inline fn glWindowPos3dvMESA(arg_1726: [*c]const GLdouble) void {
    return epoxy_glWindowPos3dvMESA.?(arg_1726);
}
pub inline fn glMultiTexCoord4sARB(arg_1727: GLenum, arg_1728: GLshort, arg_1729: GLshort, arg_1730: GLshort, arg_1731: GLshort) void {
    return epoxy_glMultiTexCoord4sARB.?(arg_1727, arg_1728, arg_1729, arg_1730, arg_1731);
}
pub inline fn glPathGlyphsNV(arg_1732: GLuint, arg_1733: GLenum, arg_1734: ?*const c_void, arg_1735: GLbitfield, arg_1736: GLsizei, arg_1737: GLenum, arg_1738: ?*const c_void, arg_1739: GLenum, arg_1740: GLuint, arg_1741: GLfloat) void {
    return epoxy_glPathGlyphsNV.?(arg_1732, arg_1733, arg_1734, arg_1735, arg_1736, arg_1737, arg_1738, arg_1739, arg_1740, arg_1741);
}
pub inline fn glSetFenceNV(arg_1742: GLuint, arg_1743: GLenum) void {
    return epoxy_glSetFenceNV.?(arg_1742, arg_1743);
}
pub const __SIZEOF_FLOAT__ = 4;
pub inline fn glTexSubImage3DOES(arg_1744: GLenum, arg_1745: GLint, arg_1746: GLint, arg_1747: GLint, arg_1748: GLint, arg_1749: GLsizei, arg_1750: GLsizei, arg_1751: GLsizei, arg_1752: GLenum, arg_1753: GLenum, arg_1754: ?*const c_void) void {
    return epoxy_glTexSubImage3DOES.?(arg_1744, arg_1745, arg_1746, arg_1747, arg_1748, arg_1749, arg_1750, arg_1751, arg_1752, arg_1753, arg_1754);
}
pub const GL_TEXTURE_3D = 0x806F;
pub const GL_ACTIVE_ATTRIBUTES = 0x8B89;
pub const GL_MAX_COMBINED_UNIFORM_BLOCKS = 0x8A2E;
pub const GL_LEQUAL = 0x0203;
pub inline fn glBindVertexShaderEXT(arg_1755: GLuint) void {
    return epoxy_glBindVertexShaderEXT.?(arg_1755);
}
pub const GL_AMD_texture_texture4 = 1;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_ARB = 0x91A7;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH = 0x826C;
pub const __NO_MATH_INLINES = 1;
pub inline fn glBindFragDataLocationIndexed(arg_1756: GLuint, arg_1757: GLuint, arg_1758: GLuint, arg_1759: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocationIndexed.?(arg_1756, arg_1757, arg_1758, arg_1759);
}
pub inline fn glMulticastCopyImageSubDataNV(arg_1760: GLuint, arg_1761: GLbitfield, arg_1762: GLuint, arg_1763: GLenum, arg_1764: GLint, arg_1765: GLint, arg_1766: GLint, arg_1767: GLint, arg_1768: GLuint, arg_1769: GLenum, arg_1770: GLint, arg_1771: GLint, arg_1772: GLint, arg_1773: GLint, arg_1774: GLsizei, arg_1775: GLsizei, arg_1776: GLsizei) void {
    return epoxy_glMulticastCopyImageSubDataNV.?(arg_1760, arg_1761, arg_1762, arg_1763, arg_1764, arg_1765, arg_1766, arg_1767, arg_1768, arg_1769, arg_1770, arg_1771, arg_1772, arg_1773, arg_1774, arg_1775, arg_1776);
}
pub const GL_HANDLE_TYPE_OPAQUE_FD_EXT = 0x9586;
pub const __ATOMIC_ACQUIRE = 2;
pub const GL_NORMAL_ARRAY_STRIDE = 0x807F;
pub inline fn glVertexAttrib4f(arg_1777: GLuint, arg_1778: GLfloat, arg_1779: GLfloat, arg_1780: GLfloat, arg_1781: GLfloat) void {
    return epoxy_glVertexAttrib4f.?(arg_1777, arg_1778, arg_1779, arg_1780, arg_1781);
}
pub const GL_NV_shader_storage_buffer_object = 1;
pub const GL_DEPTH_SAMPLES_NV = 0x932D;
pub inline fn glProgramUniformMatrix2fvEXT(arg_1782: GLuint, arg_1783: GLint, arg_1784: GLsizei, arg_1785: GLboolean, arg_1786: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2fvEXT.?(arg_1782, arg_1783, arg_1784, arg_1785, arg_1786);
}
pub const GL_REG_1_ATI = 0x8922;
pub inline fn glColorFormatNV(arg_1787: GLint, arg_1788: GLenum, arg_1789: GLsizei) void {
    return epoxy_glColorFormatNV.?(arg_1787, arg_1788, arg_1789);
}
pub inline fn glResolveMultisampleFramebufferAPPLE() void {
    return epoxy_glResolveMultisampleFramebufferAPPLE.?();
}
pub const GL_DOT3_RGBA_IMG = 0x86AF;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_EXT = 0x8E8C;
pub const GL_TEXTURE_BLUE_SIZE_EXT = 0x805E;
pub const GL_DUAL_LUMINANCE4_SGIS = 0x8114;
pub inline fn glDepthMask(arg_1790: GLboolean) void {
    return epoxy_glDepthMask.?(arg_1790);
}
pub inline fn glColor3dv(arg_1791: [*c]const GLdouble) void {
    return epoxy_glColor3dv.?(arg_1791);
}
pub const GL_TEXTURE_TARGET = 0x1006;
pub const GL_ALPHA_TEST_FUNC_QCOM = 0x0BC1;
pub const GL_PIXEL_UNPACK_BUFFER_BINDING = 0x88EF;
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_EXT = 0x8917;
pub inline fn glDepthRangef(arg_1792: GLfloat, arg_1793: GLfloat) void {
    return epoxy_glDepthRangef.?(arg_1792, arg_1793);
}
pub const GL_LINE_SMOOTH = 0x0B20;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8A32;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_ARB = 0x9343;
pub inline fn glVertexAttribL4dEXT(arg_1794: GLuint, arg_1795: GLdouble, arg_1796: GLdouble, arg_1797: GLdouble, arg_1798: GLdouble) void {
    return epoxy_glVertexAttribL4dEXT.?(arg_1794, arg_1795, arg_1796, arg_1797, arg_1798);
}
pub const PRIdLEAST16 = "d";
pub const GL_RESET_NOTIFICATION_STRATEGY_KHR = 0x8256;
pub const GL_ARB_texture_filter_minmax = 1;
pub inline fn glBeginConditionalRender(arg_1799: GLuint, arg_1800: GLenum) void {
    return epoxy_glBeginConditionalRender.?(arg_1799, arg_1800);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_OES = 0x8CD0;
pub const __FLT_MIN__ = @as(f32, 1.17549435e-38);
pub const GL_CONJOINT_NV = 0x9284;
pub inline fn glVertexAttrib2fARB(arg_1801: GLuint, arg_1802: GLfloat, arg_1803: GLfloat) void {
    return epoxy_glVertexAttrib2fARB.?(arg_1801, arg_1802, arg_1803);
}
pub inline fn glGetTexBumpParameterivATI(arg_1804: GLenum, arg_1805: [*c]GLint) void {
    return epoxy_glGetTexBumpParameterivATI.?(arg_1804, arg_1805);
}
pub const GL_INCLUSIVE_EXT = 0x8F10;
pub const GL_DSDT_MAG_VIB_NV = 0x86F7;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_EXT = 0x9066;
pub inline fn glVertexArrayVertexAttribFormatEXT(arg_1806: GLuint, arg_1807: GLuint, arg_1808: GLint, arg_1809: GLenum, arg_1810: GLboolean, arg_1811: GLuint) void {
    return epoxy_glVertexArrayVertexAttribFormatEXT.?(arg_1806, arg_1807, arg_1808, arg_1809, arg_1810, arg_1811);
}
pub const GL_PATCH_VERTICES_EXT = 0x8E72;
pub inline fn glMultiDrawElementsIndirectBindlessCountNV(arg_1812: GLenum, arg_1813: GLenum, arg_1814: ?*const c_void, arg_1815: GLsizei, arg_1816: GLsizei, arg_1817: GLsizei, arg_1818: GLint) void {
    return epoxy_glMultiDrawElementsIndirectBindlessCountNV.?(arg_1812, arg_1813, arg_1814, arg_1815, arg_1816, arg_1817, arg_1818);
}
pub inline fn glTexBufferARB(arg_1819: GLenum, arg_1820: GLenum, arg_1821: GLuint) void {
    return epoxy_glTexBufferARB.?(arg_1819, arg_1820, arg_1821);
}
pub const GL_ONE_EXT = 0x87DE;
pub const PRIx64 = __PRI64_PREFIX ++ "x";
pub const GL_ARB_spirv_extensions = 1;
pub const GL_CURRENT_MATRIX_NV = 0x8641;
pub const GL_AMBIENT = 0x1200;
pub const __SIZEOF_SHORT__ = 2;
pub const GL_DEPTH_STENCIL = 0x84F9;
pub const GL_TEXTURE_COMPRESSED_BLOCK_SIZE = 0x82B3;
pub inline fn glBlendParameteriNV(arg_1822: GLenum, arg_1823: GLint) void {
    return epoxy_glBlendParameteriNV.?(arg_1822, arg_1823);
}
pub inline fn glEndOcclusionQueryNV() void {
    return epoxy_glEndOcclusionQueryNV.?();
}
pub inline fn glStencilFillPathNV(arg_1824: GLuint, arg_1825: GLenum, arg_1826: GLuint) void {
    return epoxy_glStencilFillPathNV.?(arg_1824, arg_1825, arg_1826);
}
pub inline fn glCallCommandListNV(arg_1827: GLuint) void {
    return epoxy_glCallCommandListNV.?(arg_1827);
}
pub inline fn glProgramParameter4fvNV(arg_1828: GLenum, arg_1829: GLuint, arg_1830: [*c]const GLfloat) void {
    return epoxy_glProgramParameter4fvNV.?(arg_1828, arg_1829, arg_1830);
}
pub inline fn glGetPathParameterivNV(arg_1831: GLuint, arg_1832: GLenum, arg_1833: [*c]GLint) void {
    return epoxy_glGetPathParameterivNV.?(arg_1831, arg_1832, arg_1833);
}
pub inline fn glLGPUInterlockNVX() void {
    return epoxy_glLGPUInterlockNVX.?();
}
pub const GL_OUTPUT_TEXTURE_COORD26_EXT = 0x87B7;
pub const GL_REPLACEMENT_CODE_SUN = 0x81D8;
pub const GL_INT_SAMPLER_2D_RECT_EXT = 0x8DCD;
pub const GL_MAP2_TEXTURE_COORD_2 = 0x0DB4;
pub const GL_RGB10_A2UI = 0x906F;
pub const GL_SGIS_texture_filter4 = 1;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING = 0x8896;
pub const GL_MAX_TRANSFORM_FEEDBACK_BUFFERS = 0x8E70;
pub inline fn glDrawElementsBaseVertex(arg_1834: GLenum, arg_1835: GLsizei, arg_1836: GLenum, arg_1837: ?*const c_void, arg_1838: GLint) void {
    return epoxy_glDrawElementsBaseVertex.?(arg_1834, arg_1835, arg_1836, arg_1837, arg_1838);
}
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_EXT = 0x88FE;
pub const GL_LIST_PRIORITY_SGIX = 0x8182;
pub const GL_MAX_FRAGMENT_UNIFORM_BLOCKS = 0x8A2D;
pub const GL_TEXTURE_VIEW_NUM_LEVELS = 0x82DC;
pub const GL_NV_blend_minmax_factor = 1;
pub const GL_FOG_START = 0x0B63;
pub inline fn glVertexAttribL4i64NV(arg_1839: GLuint, arg_1840: GLint64EXT, arg_1841: GLint64EXT, arg_1842: GLint64EXT, arg_1843: GLint64EXT) void {
    return epoxy_glVertexAttribL4i64NV.?(arg_1839, arg_1840, arg_1841, arg_1842, arg_1843);
}
pub inline fn glGetProgramParameterdvNV(arg_1844: GLenum, arg_1845: GLuint, arg_1846: GLenum, arg_1847: [*c]GLdouble) void {
    return epoxy_glGetProgramParameterdvNV.?(arg_1844, arg_1845, arg_1846, arg_1847);
}
pub inline fn glDeleteVertexArraysAPPLE(arg_1848: GLsizei, arg_1849: [*c]const GLuint) void {
    return epoxy_glDeleteVertexArraysAPPLE.?(arg_1848, arg_1849);
}
pub const GL_PACK_COMPRESSED_SIZE_SGIX = 0x831C;
pub const GL_SGIX_pixel_texture = 1;
pub const GL_SGIS_texture_select = 1;
pub inline fn glTextureImage3DMultisampleNV(arg_1850: GLuint, arg_1851: GLenum, arg_1852: GLsizei, arg_1853: GLint, arg_1854: GLsizei, arg_1855: GLsizei, arg_1856: GLsizei, arg_1857: GLboolean) void {
    return epoxy_glTextureImage3DMultisampleNV.?(arg_1850, arg_1851, arg_1852, arg_1853, arg_1854, arg_1855, arg_1856, arg_1857);
}
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW_ARB = 0x82ED;
pub inline fn glProgramUniformMatrix2x3dv(arg_1858: GLuint, arg_1859: GLint, arg_1860: GLsizei, arg_1861: GLboolean, arg_1862: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x3dv.?(arg_1858, arg_1859, arg_1860, arg_1861, arg_1862);
}
pub inline fn glGetTexGenfv(arg_1863: GLenum, arg_1864: GLenum, arg_1865: [*c]GLfloat) void {
    return epoxy_glGetTexGenfv.?(arg_1863, arg_1864, arg_1865);
}
pub inline fn glPathParameterivNV(arg_1866: GLuint, arg_1867: GLenum, arg_1868: [*c]const GLint) void {
    return epoxy_glPathParameterivNV.?(arg_1866, arg_1867, arg_1868);
}
pub inline fn glVertexAttrib4ubvNV(arg_1869: GLuint, arg_1870: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4ubvNV.?(arg_1869, arg_1870);
}
pub const GL_COLOR_MATERIAL_PARAMETER = 0x0B56;
pub const GL_AND_REVERSE = 0x1502;
pub inline fn glMultiTexCoord1fARB(arg_1871: GLenum, arg_1872: GLfloat) void {
    return epoxy_glMultiTexCoord1fARB.?(arg_1871, arg_1872);
}
pub inline fn glMultTransposeMatrixfARB(arg_1873: [*c]const GLfloat) void {
    return epoxy_glMultTransposeMatrixfARB.?(arg_1873);
}
pub const GL_POST_TEXTURE_FILTER_SCALE_RANGE_SGIX = 0x817C;
pub inline fn glWindowPos2dARB(arg_1874: GLdouble, arg_1875: GLdouble) void {
    return epoxy_glWindowPos2dARB.?(arg_1874, arg_1875);
}
pub inline fn glTexCoord4xvOES(arg_1876: [*c]const GLfixed) void {
    return epoxy_glTexCoord4xvOES.?(arg_1876);
}
pub const GL_IMAGE_PIXEL_FORMAT = 0x82A9;
pub const GL_DEPTH_BOUNDS_TEST_EXT = 0x8890;
pub const __UINT_LEAST16_FMTX__ = "hX";
pub const GL_GUILTY_CONTEXT_RESET_KHR = 0x8253;
pub inline fn glNormalStream3fATI(arg_1877: GLenum, arg_1878: GLfloat, arg_1879: GLfloat, arg_1880: GLfloat) void {
    return epoxy_glNormalStream3fATI.?(arg_1877, arg_1878, arg_1879, arg_1880);
}
pub const __UINT_FAST8_FMTx__ = "hhx";
pub const GL_COLOR_ATTACHMENT14 = 0x8CEE;
pub const GL_MULTISAMPLE_ARB = 0x809D;
pub inline fn glTexCoord3xvOES(arg_1881: [*c]const GLfixed) void {
    return epoxy_glTexCoord3xvOES.?(arg_1881);
}
pub inline fn glDisableIndexedEXT(arg_1882: GLenum, arg_1883: GLuint) void {
    return epoxy_glDisableIndexedEXT.?(arg_1882, arg_1883);
}
pub const __INT16_FMTd__ = "hd";
pub const GL_EXT_multisampled_compatibility = 1;
pub inline fn glMultiModeDrawArraysIBM(arg_1884: [*c]const GLenum, arg_1885: [*c]const GLint, arg_1886: [*c]const GLsizei, arg_1887: GLsizei, arg_1888: GLint) void {
    return epoxy_glMultiModeDrawArraysIBM.?(arg_1884, arg_1885, arg_1886, arg_1887, arg_1888);
}
pub const GL_STENCIL_COMPONENTS = 0x8285;
pub inline fn glStencilFunc(arg_1889: GLenum, arg_1890: GLint, arg_1891: GLuint) void {
    return epoxy_glStencilFunc.?(arg_1889, arg_1890, arg_1891);
}
pub const GL_VERTEX_ARRAY_RANGE_POINTER_APPLE = 0x8521;
pub const GL_QCOM_alpha_test = 1;
pub const GL_DEBUG_SEVERITY_NOTIFICATION_KHR = 0x826B;
pub const GL_LOSE_CONTEXT_ON_RESET = 0x8252;
pub const INT_FAST16_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM = 0x8247;
pub const GL_VERTEX_ATTRIB_MAP1_COEFF_APPLE = 0x8A03;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING = 0x8C8F;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS = 0x92D4;
pub const GL_APPLE_fence = 1;
pub inline fn glSignalSemaphoreEXT(arg_1892: GLuint, arg_1893: GLuint, arg_1894: [*c]const GLuint, arg_1895: GLuint, arg_1896: [*c]const GLuint, arg_1897: [*c]const GLenum) void {
    return epoxy_glSignalSemaphoreEXT.?(arg_1892, arg_1893, arg_1894, arg_1895, arg_1896, arg_1897);
}
pub inline fn glVertexArrayVertexAttribIOffsetEXT(arg_1898: GLuint, arg_1899: GLuint, arg_1900: GLuint, arg_1901: GLint, arg_1902: GLenum, arg_1903: GLsizei, arg_1904: GLintptr) void {
    return epoxy_glVertexArrayVertexAttribIOffsetEXT.?(arg_1898, arg_1899, arg_1900, arg_1901, arg_1902, arg_1903, arg_1904);
}
pub inline fn glProgramEnvParameter4dARB(arg_1905: GLenum, arg_1906: GLuint, arg_1907: GLdouble, arg_1908: GLdouble, arg_1909: GLdouble, arg_1910: GLdouble) void {
    return epoxy_glProgramEnvParameter4dARB.?(arg_1905, arg_1906, arg_1907, arg_1908, arg_1909, arg_1910);
}
pub const GL_DEBUG_CALLBACK_USER_PARAM = 0x8245;
pub const GL_CLIP_DISTANCE4_APPLE = 0x3004;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_NV = 0x825F;
pub const GL_V2F = 0x2A20;
pub const GL_PRESENT_TIME_NV = 0x8E2A;
pub inline fn glVertexStream2dvATI(arg_1911: GLenum, arg_1912: [*c]const GLdouble) void {
    return epoxy_glVertexStream2dvATI.?(arg_1911, arg_1912);
}
pub const GL_R16I = 0x8233;
pub const GL_POST_CONVOLUTION_GREEN_SCALE_EXT = 0x801D;
pub const GL_SOURCE2_ALPHA_ARB = 0x858A;
pub inline fn glSelectBuffer(arg_1913: GLsizei, arg_1914: [*c]GLuint) void {
    return epoxy_glSelectBuffer.?(arg_1913, arg_1914);
}
pub const GL_MAX_VERTEX_UNIFORM_VECTORS = 0x8DFB;
pub const GL_FOG_COORDINATE_ARRAY_POINTER = 0x8456;
pub inline fn glGetProgramivNV(arg_1915: GLuint, arg_1916: GLenum, arg_1917: [*c]GLint) void {
    return epoxy_glGetProgramivNV.?(arg_1915, arg_1916, arg_1917);
}
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_BINDINGS_NV = 0x8DA0;
pub const __SYSCALL_SLONG_TYPE = __SLONGWORD_TYPE;
pub const GL_SGIX_polynomial_ffd = 1;
pub inline fn glBeginQuery(arg_1918: GLenum, arg_1919: GLuint) void {
    return epoxy_glBeginQuery.?(arg_1918, arg_1919);
}
pub const GL_FRAGMENT_SUBROUTINE_UNIFORM = 0x92F2;
pub inline fn glGetMinmaxEXT(arg_1920: GLenum, arg_1921: GLboolean, arg_1922: GLenum, arg_1923: GLenum, arg_1924: ?*c_void) void {
    return epoxy_glGetMinmaxEXT.?(arg_1920, arg_1921, arg_1922, arg_1923, arg_1924);
}
pub inline fn glCompressedTextureSubImage2D(arg_1925: GLuint, arg_1926: GLint, arg_1927: GLint, arg_1928: GLint, arg_1929: GLsizei, arg_1930: GLsizei, arg_1931: GLenum, arg_1932: GLsizei, arg_1933: ?*const c_void) void {
    return epoxy_glCompressedTextureSubImage2D.?(arg_1925, arg_1926, arg_1927, arg_1928, arg_1929, arg_1930, arg_1931, arg_1932, arg_1933);
}
pub inline fn glGetActiveUniformName(arg_1934: GLuint, arg_1935: GLuint, arg_1936: GLsizei, arg_1937: [*c]GLsizei, arg_1938: [*c]GLchar) void {
    return epoxy_glGetActiveUniformName.?(arg_1934, arg_1935, arg_1936, arg_1937, arg_1938);
}
pub const GL_ALPHA8 = 0x803C;
pub const GL_MAP2_GRID_SEGMENTS = 0x0DD3;
pub inline fn glLoadMatrixf(arg_1939: [*c]const GLfloat) void {
    return epoxy_glLoadMatrixf.?(arg_1939);
}
pub const GL_SUBPIXEL_PRECISION_BIAS_X_BITS_NV = 0x9347;
pub inline fn glDebugMessageInsertAMD(arg_1940: GLenum, arg_1941: GLenum, arg_1942: GLuint, arg_1943: GLsizei, arg_1944: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsertAMD.?(arg_1940, arg_1941, arg_1942, arg_1943, arg_1944);
}
pub const GL_EXT_texture_cube_map_array = 1;
pub const GL_UNSIGNED_INT16_VEC4_NV = 0x8FF3;
pub inline fn glProgramParameteriEXT(arg_1945: GLuint, arg_1946: GLenum, arg_1947: GLint) void {
    return epoxy_glProgramParameteriEXT.?(arg_1945, arg_1946, arg_1947);
}
pub const GL_ALPHA32F_ARB = 0x8816;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED = 0x8DA7;
pub const GL_OFFSET_TEXTURE_BIAS_NV = 0x86E3;
pub const __GLIBC_MINOR__ = 30;
pub inline fn glUniform1fvARB(arg_1948: GLint, arg_1949: GLsizei, arg_1950: [*c]const GLfloat) void {
    return epoxy_glUniform1fvARB.?(arg_1948, arg_1949, arg_1950);
}
pub const GL_COMBINER_AB_DOT_PRODUCT_NV = 0x8545;
pub const GL_COMPRESSED_RGB = 0x84ED;
pub inline fn glCopyTexSubImage2D(arg_1951: GLenum, arg_1952: GLint, arg_1953: GLint, arg_1954: GLint, arg_1955: GLint, arg_1956: GLint, arg_1957: GLsizei, arg_1958: GLsizei) void {
    return epoxy_glCopyTexSubImage2D.?(arg_1951, arg_1952, arg_1953, arg_1954, arg_1955, arg_1956, arg_1957, arg_1958);
}
pub const GL_TEXTURE_BINDING_BUFFER_OES = 0x8C2C;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SAMPLES_EXT = 0x8D6C;
pub inline fn glProgramEnvParameter4fARB(arg_1959: GLenum, arg_1960: GLuint, arg_1961: GLfloat, arg_1962: GLfloat, arg_1963: GLfloat, arg_1964: GLfloat) void {
    return epoxy_glProgramEnvParameter4fARB.?(arg_1959, arg_1960, arg_1961, arg_1962, arg_1963, arg_1964);
}
pub inline fn glTexCoord1iv(arg_1965: [*c]const GLint) void {
    return epoxy_glTexCoord1iv.?(arg_1965);
}
pub const GL_INT_VEC3 = 0x8B54;
pub const GL_FRAGMENT_LIGHT_MODEL_AMBIENT_SGIX = 0x840A;
pub const GL_TEXTURE_CLIPMAP_CENTER_SGIX = 0x8171;
pub inline fn glTexGenxvOES(arg_1966: GLenum, arg_1967: GLenum, arg_1968: [*c]const GLfixed) void {
    return epoxy_glTexGenxvOES.?(arg_1966, arg_1967, arg_1968);
}
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_ARB = 0x8DDE;
pub const GL_YCRCB_SGIX = 0x8318;
pub inline fn glCombinerParameterivNV(arg_1969: GLenum, arg_1970: [*c]const GLint) void {
    return epoxy_glCombinerParameterivNV.?(arg_1969, arg_1970);
}
pub inline fn glGetBufferPointerv(arg_1971: GLenum, arg_1972: GLenum, arg_1973: [*c]?*c_void) void {
    return epoxy_glGetBufferPointerv.?(arg_1971, arg_1972, arg_1973);
}
pub const GL_AMD_debug_output = 1;
pub const GL_LUMINANCE32I_EXT = 0x8D86;
pub const GL_SHADER_OBJECT_EXT = 0x8B48;
pub const GL_EXT_EGL_image_array = 1;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_2 = 1;
pub const GL_DRAW_FRAMEBUFFER = 0x8CA9;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_BINDINGS = 0x92DC;
pub inline fn glConvolutionParameterxvOES(arg_1974: GLenum, arg_1975: GLenum, arg_1976: [*c]const GLfixed) void {
    return epoxy_glConvolutionParameterxvOES.?(arg_1974, arg_1975, arg_1976);
}
pub inline fn glDepthRangeIndexedfOES(arg_1977: GLuint, arg_1978: GLfloat, arg_1979: GLfloat) void {
    return epoxy_glDepthRangeIndexedfOES.?(arg_1977, arg_1978, arg_1979);
}
pub const GL_INTENSITY8_EXT = 0x804B;
pub inline fn glVertexAttribArrayObjectATI(arg_1980: GLuint, arg_1981: GLint, arg_1982: GLenum, arg_1983: GLboolean, arg_1984: GLsizei, arg_1985: GLuint, arg_1986: GLuint) void {
    return epoxy_glVertexAttribArrayObjectATI.?(arg_1980, arg_1981, arg_1982, arg_1983, arg_1984, arg_1985, arg_1986);
}
pub inline fn glTextureParameteriEXT(arg_1987: GLuint, arg_1988: GLenum, arg_1989: GLenum, arg_1990: GLint) void {
    return epoxy_glTextureParameteriEXT.?(arg_1987, arg_1988, arg_1989, arg_1990);
}
pub const GL_HSL_SATURATION = 0x92AE;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING_ARB = 0x8897;
pub const GL_NV_parameter_buffer_object = 1;
pub const GL_VOLATILE_APPLE = 0x8A1A;
pub inline fn glClearTexSubImage(arg_1991: GLuint, arg_1992: GLint, arg_1993: GLint, arg_1994: GLint, arg_1995: GLint, arg_1996: GLsizei, arg_1997: GLsizei, arg_1998: GLsizei, arg_1999: GLenum, arg_2000: GLenum, arg_2001: ?*const c_void) void {
    return epoxy_glClearTexSubImage.?(arg_1991, arg_1992, arg_1993, arg_1994, arg_1995, arg_1996, arg_1997, arg_1998, arg_1999, arg_2000, arg_2001);
}
pub const GL_IMAGE_BINDING_FORMAT_EXT = 0x906E;
pub inline fn glRotatexOES(arg_2002: GLfixed, arg_2003: GLfixed, arg_2004: GLfixed, arg_2005: GLfixed) void {
    return epoxy_glRotatexOES.?(arg_2002, arg_2003, arg_2004, arg_2005);
}
pub const GL_VIDEO_CAPTURE_FRAME_WIDTH_NV = 0x9038;
pub const GL_MATRIX20_ARB = 0x88D4;
pub const GL_SWIZZLE_STQ_ATI = 0x8977;
pub const GL_STENCIL_WRITEMASK = 0x0B98;
pub inline fn glGetTextureLevelParameterfvEXT(arg_2006: GLuint, arg_2007: GLenum, arg_2008: GLint, arg_2009: GLenum, arg_2010: [*c]GLfloat) void {
    return epoxy_glGetTextureLevelParameterfvEXT.?(arg_2006, arg_2007, arg_2008, arg_2009, arg_2010);
}
pub inline fn glBeginPerfQueryINTEL(arg_2011: GLuint) void {
    return epoxy_glBeginPerfQueryINTEL.?(arg_2011);
}
pub const GL_CONTEXT_FLAG_FORWARD_COMPATIBLE_BIT = 0x00000001;
pub const GL_MAX_BINDABLE_UNIFORM_SIZE_EXT = 0x8DED;
pub const PRIiFAST16 = __PRIPTR_PREFIX ++ "i";
pub const GL_INDEX_MATERIAL_EXT = 0x81B8;
pub inline fn glMakeTextureHandleNonResidentARB(arg_2012: GLuint64) void {
    return epoxy_glMakeTextureHandleNonResidentARB.?(arg_2012);
}
pub inline fn glProgramUniformHandleui64vNV(arg_2013: GLuint, arg_2014: GLint, arg_2015: GLsizei, arg_2016: [*c]const GLuint64) void {
    return epoxy_glProgramUniformHandleui64vNV.?(arg_2013, arg_2014, arg_2015, arg_2016);
}
pub inline fn glGetGraphicsResetStatus() GLenum {
    return epoxy_glGetGraphicsResetStatus.?();
}
pub const GL_AUX_BUFFERS = 0x0C00;
pub inline fn glVertexAttribI1iEXT(arg_2017: GLuint, arg_2018: GLint) void {
    return epoxy_glVertexAttribI1iEXT.?(arg_2017, arg_2018);
}
pub const GL_EXT_multiview_texture_multisample = 1;
pub const GL_EXT_shader_image_load_store = 1;
pub const __CLANG_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub inline fn glProgramUniform1ui(arg_2019: GLuint, arg_2020: GLint, arg_2021: GLuint) void {
    return epoxy_glProgramUniform1ui.?(arg_2019, arg_2020, arg_2021);
}
pub const GL_DOUBLE_MAT4x2 = 0x8F4D;
pub const GL_MAX_TESS_GEN_LEVEL_EXT = 0x8E7E;
pub inline fn glGetPixelMapxv(arg_2022: GLenum, arg_2023: GLint, arg_2024: [*c]GLfixed) void {
    return epoxy_glGetPixelMapxv.?(arg_2022, arg_2023, arg_2024);
}
pub inline fn glUnmapBuffer(arg_2025: GLenum) GLboolean {
    return epoxy_glUnmapBuffer.?(arg_2025);
}
pub const __UINT_FAST16_FMTX__ = "hX";
pub inline fn glGetProgramEnvParameterdvARB(arg_2026: GLenum, arg_2027: GLuint, arg_2028: [*c]GLdouble) void {
    return epoxy_glGetProgramEnvParameterdvARB.?(arg_2026, arg_2027, arg_2028);
}
pub inline fn glTestObjectAPPLE(arg_2029: GLenum, arg_2030: GLuint) GLboolean {
    return epoxy_glTestObjectAPPLE.?(arg_2029, arg_2030);
}
pub inline fn glTexCoord4iv(arg_2031: [*c]const GLint) void {
    return epoxy_glTexCoord4iv.?(arg_2031);
}
pub const __FLT_DECIMAL_DIG__ = 9;
pub inline fn glGlobalAlphaFactorbSUN(arg_2032: GLbyte) void {
    return epoxy_glGlobalAlphaFactorbSUN.?(arg_2032);
}
pub inline fn glTextureStorageSparseAMD(arg_2033: GLuint, arg_2034: GLenum, arg_2035: GLenum, arg_2036: GLsizei, arg_2037: GLsizei, arg_2038: GLsizei, arg_2039: GLsizei, arg_2040: GLbitfield) void {
    return epoxy_glTextureStorageSparseAMD.?(arg_2033, arg_2034, arg_2035, arg_2036, arg_2037, arg_2038, arg_2039, arg_2040);
}
pub const GL_SAMPLES = 0x80A9;
pub const GL_STENCIL_EXT = 0x1802;
pub const GL_OUTPUT_TEXTURE_COORD23_EXT = 0x87B4;
pub const GL_TEXTURE_MEMORY_LAYOUT_INTEL = 0x83FF;
pub const GL_SOURCE0_RGB_ARB = 0x8580;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_OES = 0x9009;
pub inline fn glGetSynciv(arg_2041: GLsync, arg_2042: GLenum, arg_2043: GLsizei, arg_2044: [*c]GLsizei, arg_2045: [*c]GLint) void {
    return epoxy_glGetSynciv.?(arg_2041, arg_2042, arg_2043, arg_2044, arg_2045);
}
pub const GL_LUMINANCE12_ALPHA12 = 0x8047;
pub const GL_UNSIGNED_IDENTITY_NV = 0x8536;
pub const GL_RGBA4_EXT = 0x8056;
pub const GL_RELATIVE_HORIZONTAL_LINE_TO_NV = 0x07;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E7F;
pub inline fn glProgramUniform4iEXT(arg_2046: GLuint, arg_2047: GLint, arg_2048: GLint, arg_2049: GLint, arg_2050: GLint, arg_2051: GLint) void {
    return epoxy_glProgramUniform4iEXT.?(arg_2046, arg_2047, arg_2048, arg_2049, arg_2050, arg_2051);
}
pub const GL_EXT_win32_keyed_mutex = 1;
pub const GL_NV_gpu_program4 = 1;
pub const GL_MATRIX2_NV = 0x8632;
pub inline fn glPixelTransformParameterfvEXT(arg_2052: GLenum, arg_2053: GLenum, arg_2054: [*c]const GLfloat) void {
    return epoxy_glPixelTransformParameterfvEXT.?(arg_2052, arg_2053, arg_2054);
}
pub const GL_MAP1_COLOR_4 = 0x0D90;
pub inline fn glGetnTexImageARB(arg_2055: GLenum, arg_2056: GLint, arg_2057: GLenum, arg_2058: GLenum, arg_2059: GLsizei, arg_2060: ?*c_void) void {
    return epoxy_glGetnTexImageARB.?(arg_2055, arg_2056, arg_2057, arg_2058, arg_2059, arg_2060);
}
pub const GL_READ_FRAMEBUFFER = 0x8CA8;
pub const GL_MAX_MESH_UNIFORM_COMPONENTS_NV = 0x8E63;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_IMG = 0x9134;
pub inline fn glSecondaryColor3i(arg_2061: GLint, arg_2062: GLint, arg_2063: GLint) void {
    return epoxy_glSecondaryColor3i.?(arg_2061, arg_2062, arg_2063);
}
pub const GL_TRIANGLE_LIST_SUN = 0x81D7;
pub inline fn glGetProgramStringNV(arg_2064: GLuint, arg_2065: GLenum, arg_2066: [*c]GLubyte) void {
    return epoxy_glGetProgramStringNV.?(arg_2064, arg_2065, arg_2066);
}
pub inline fn glMultiTexCoord1dARB(arg_2067: GLenum, arg_2068: GLdouble) void {
    return epoxy_glMultiTexCoord1dARB.?(arg_2067, arg_2068);
}
pub const GL_DOUBLE_EXT = 0x140A;
pub const GL_HISTOGRAM_FORMAT = 0x8027;
pub const GL_HISTOGRAM_RED_SIZE = 0x8028;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_NV = 0x8E5B;
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_EXT = 0x90CC;
pub const UINT16_MAX = 65535;
pub const GL_NV_alpha_to_coverage_dither_control = 1;
pub const GL_CONVOLUTION_WIDTH_EXT = 0x8018;
pub const SCNiFAST64 = __PRI64_PREFIX ++ "i";
pub inline fn glFinishTextureSUNX() void {
    return epoxy_glFinishTextureSUNX.?();
}
pub const GL_COLORDODGE_NV = 0x9299;
pub inline fn glProgramUniform2d(arg_2069: GLuint, arg_2070: GLint, arg_2071: GLdouble, arg_2072: GLdouble) void {
    return epoxy_glProgramUniform2d.?(arg_2069, arg_2070, arg_2071, arg_2072);
}
pub const GL_TEXTURE_RED_TYPE_ARB = 0x8C10;
pub inline fn glEnableVertexAttribAPPLE(arg_2073: GLuint, arg_2074: GLenum) void {
    return epoxy_glEnableVertexAttribAPPLE.?(arg_2073, arg_2074);
}
pub const GL_NV_compute_shader_derivatives = 1;
pub const GL_IS_PER_PATCH = 0x92E7;
pub const GL_MESH_OUTPUT_PER_VERTEX_GRANULARITY_NV = 0x92DF;
pub const GL_MIRRORED_REPEAT_ARB = 0x8370;
pub const GL_FRONT = 0x0404;
pub const GL_T2F_C3F_V3F = 0x2A2A;
pub const GL_VERTEX4_BIT_PGI = 0x00000008;
pub const GL_VERTEX_ARRAY = 0x8074;
pub const GL_VERSION_1_5 = 1;
pub const SCNd64 = __PRI64_PREFIX ++ "d";
pub inline fn glVertexAttrib4NbvARB(arg_2075: GLuint, arg_2076: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4NbvARB.?(arg_2075, arg_2076);
}
pub const GL_LIGHTEN = 0x9298;
pub const GL_SUBGROUP_SUPPORTED_STAGES_KHR = 0x9533;
pub const GL_DETAIL_TEXTURE_MODE_SGIS = 0x809B;
pub const GL_EXT_compiled_vertex_array = 1;
pub const GL_OUTPUT_TEXTURE_COORD6_EXT = 0x87A3;
pub const GL_NV_half_float = 1;
pub const GL_MAP_WRITE_BIT_EXT = 0x0002;
pub const GL_HARDLIGHT_NV = 0x929B;
pub const GL_MAX_PATCH_VERTICES = 0x8E7D;
pub inline fn glBindProgramARB(arg_2077: GLenum, arg_2078: GLuint) void {
    return epoxy_glBindProgramARB.?(arg_2077, arg_2078);
}
pub inline fn glMultiTexEnvfvEXT(arg_2079: GLenum, arg_2080: GLenum, arg_2081: GLenum, arg_2082: [*c]const GLfloat) void {
    return epoxy_glMultiTexEnvfvEXT.?(arg_2079, arg_2080, arg_2081, arg_2082);
}
pub const GL_UNSIGNED_INT_VEC2_EXT = 0x8DC6;
pub const GL_QUERY_WAIT = 0x8E13;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x3_OES = 0x93E2;
pub const __XSAVEC__ = 1;
pub const GL_TEXTURE_WIDTH = 0x1000;
pub const INT8_MIN = -128;
pub const GL_VIDEO_CAPTURE_FIELD_LOWER_HEIGHT_NV = 0x903B;
pub const GL_SUBPIXEL_PRECISION_BIAS_Y_BITS_NV = 0x9348;
pub const GL_LIGHT5 = 0x4005;
pub const GL_TEXTURE_INTENSITY_TYPE_ARB = 0x8C15;
pub inline fn glReplacementCodeuiNormal3fVertex3fSUN(arg_2083: GLuint, arg_2084: GLfloat, arg_2085: GLfloat, arg_2086: GLfloat, arg_2087: GLfloat, arg_2088: GLfloat, arg_2089: GLfloat) void {
    return epoxy_glReplacementCodeuiNormal3fVertex3fSUN.?(arg_2083, arg_2084, arg_2085, arg_2086, arg_2087, arg_2088, arg_2089);
}
pub const GL_DRAW_BUFFER2_EXT = 0x8827;
pub const __BMI2__ = 1;
pub const GL_HANDLE_TYPE_D3D11_IMAGE_KMT_EXT = 0x958C;
pub const GL_SWIZZLE_STQ_DQ_ATI = 0x8979;
pub inline fn glDeleteQueries(arg_2090: GLsizei, arg_2091: [*c]const GLuint) void {
    return epoxy_glDeleteQueries.?(arg_2090, arg_2091);
}
pub const NULL = (if (@typeInfo(?*c_void) == .Pointer) @intToPtr(?*c_void, 0) else @as(?*c_void, 0));
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_EXT = 0x8DDF;
pub inline fn glSecondaryColor3uiEXT(arg_2092: GLuint, arg_2093: GLuint, arg_2094: GLuint) void {
    return epoxy_glSecondaryColor3uiEXT.?(arg_2092, arg_2093, arg_2094);
}
pub inline fn INT8_C(c: var) @TypeOf(c) {
    return c;
}
pub inline fn glProgramUniform1d(arg_2095: GLuint, arg_2096: GLint, arg_2097: GLdouble) void {
    return epoxy_glProgramUniform1d.?(arg_2095, arg_2096, arg_2097);
}
pub const GL_EVAL_2D_NV = 0x86C0;
pub const GL_DMP_PROGRAM_BINARY_DMP = 0x9253;
pub inline fn glProgramUniform3ui(arg_2098: GLuint, arg_2099: GLint, arg_2100: GLuint, arg_2101: GLuint, arg_2102: GLuint) void {
    return epoxy_glProgramUniform3ui.?(arg_2098, arg_2099, arg_2100, arg_2101, arg_2102);
}
pub const GL_EXT_float_blend = 1;
pub inline fn glGetFramebufferAttachmentParameterivEXT(arg_2103: GLenum, arg_2104: GLenum, arg_2105: GLenum, arg_2106: [*c]GLint) void {
    return epoxy_glGetFramebufferAttachmentParameterivEXT.?(arg_2103, arg_2104, arg_2105, arg_2106);
}
pub const GL_PALETTE8_RGBA8_OES = 0x8B96;
pub const GL_LINEAR_DETAIL_ALPHA_SGIS = 0x8098;
pub const __tune_corei7__ = 1;
pub const GL_SHADER_TYPE = 0x8B4F;
pub const __INT_LEAST8_FMTi__ = "hhi";
pub const __SIG_ATOMIC_MAX__ = 2147483647;
pub const GL_TEXTURE_TOO_LARGE_EXT = 0x8065;
pub const GL_INDEX_OFFSET = 0x0D13;
pub const GL_COLOR_SUM = 0x8458;
pub const GL_BINORMAL_ARRAY_POINTER_EXT = 0x8443;
pub const GL_GPU_MEMORY_INFO_TOTAL_AVAILABLE_MEMORY_NVX = 0x9048;
pub const GL_COLOR_TABLE_GREEN_SIZE = 0x80DB;
pub inline fn glScalex(arg_2107: GLfixed, arg_2108: GLfixed, arg_2109: GLfixed) void {
    return epoxy_glScalex.?(arg_2107, arg_2108, arg_2109);
}
pub const GL_DST_ALPHA = 0x0304;
pub inline fn glEvalCoord2fv(arg_2110: [*c]const GLfloat) void {
    return epoxy_glEvalCoord2fv.?(arg_2110);
}
pub const GL_NEGATIVE_Z_EXT = 0x87DB;
pub const GL_RENDERBUFFER_COVERAGE_SAMPLES_NV = 0x8CAB;
pub const GL_CURRENT_TANGENT_EXT = 0x843B;
pub const GL_TEXTURE_COORD_ARRAY_LIST_IBM = 103074;
pub inline fn glGetPathLengthNV(arg_2111: GLuint, arg_2112: GLsizei, arg_2113: GLsizei) GLfloat {
    return epoxy_glGetPathLengthNV.?(arg_2111, arg_2112, arg_2113);
}
pub const __INT_MAX__ = 2147483647;
pub const GL_MATRIX19_ARB = 0x88D3;
pub const GL_ACTIVE_PROGRAM_EXT = 0x8B8D;
pub inline fn glGetVertexAttribdvARB(arg_2114: GLuint, arg_2115: GLenum, arg_2116: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribdvARB.?(arg_2114, arg_2115, arg_2116);
}
pub const GL_CONSTANT_COLOR1_NV = 0x852B;
pub const GL_INDEX_ARRAY_STRIDE = 0x8086;
pub const GL_DYNAMIC_ATI = 0x8761;
pub const GL_POLYGON_MODE = 0x0B40;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 0x8C4F;
pub const GL_SAMPLE_LOCATION_ARB = 0x8E50;
pub inline fn glGetProgramResourceLocationIndexEXT(arg_2117: GLuint, arg_2118: GLenum, arg_2119: [*c]const GLchar) GLint {
    return epoxy_glGetProgramResourceLocationIndexEXT.?(arg_2117, arg_2118, arg_2119);
}
pub inline fn glProgramUniform1ui64ARB(arg_2120: GLuint, arg_2121: GLint, arg_2122: GLuint64) void {
    return epoxy_glProgramUniform1ui64ARB.?(arg_2120, arg_2121, arg_2122);
}
pub inline fn glLoadTransposeMatrixxOES(arg_2123: [*c]const GLfixed) void {
    return epoxy_glLoadTransposeMatrixxOES.?(arg_2123);
}
pub const GL_COMBINE_ALPHA_EXT = 0x8572;
pub const GL_EXT_polygon_offset_clamp = 1;
pub const GL_LINE_WIDTH_COMMAND_NV = 0x000D;
pub const GL_EXT_direct_state_access = 1;
pub const GL_ATTACHED_SHADERS = 0x8B85;
pub inline fn glIsStateNV(arg_2124: GLuint) GLboolean {
    return epoxy_glIsStateNV.?(arg_2124);
}
pub const GL_IMAGE_BUFFER_OES = 0x9051;
pub const GL_ARB_window_pos = 1;
pub inline fn glGetNamedStringivARB(arg_2125: GLint, arg_2126: [*c]const GLchar, arg_2127: GLenum, arg_2128: [*c]GLint) void {
    return epoxy_glGetNamedStringivARB.?(arg_2125, arg_2126, arg_2127, arg_2128);
}
pub const GL_GREEN_BIAS = 0x0D19;
pub const __DADDR_T_TYPE = __S32_TYPE;
pub const GL_MULTIVIEW_EXT = 0x90F1;
pub const GL_NV_texture_npot_2D_mipmap = 1;
pub inline fn glUploadGpuMaskNVX(arg_2129: GLbitfield) void {
    return epoxy_glUploadGpuMaskNVX.?(arg_2129);
}
pub inline fn glShadingRateSampleOrderNV(arg_2130: GLenum) void {
    return epoxy_glShadingRateSampleOrderNV.?(arg_2130);
}
pub const GL_OUTPUT_TEXTURE_COORD12_EXT = 0x87A9;
pub const GL_CLIP_DISTANCE7 = 0x3007;
pub inline fn glProgramUniform3ui64vNV(arg_2131: GLuint, arg_2132: GLint, arg_2133: GLsizei, arg_2134: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform3ui64vNV.?(arg_2131, arg_2132, arg_2133, arg_2134);
}
pub inline fn glLoadMatrixxOES(arg_2135: [*c]const GLfixed) void {
    return epoxy_glLoadMatrixxOES.?(arg_2135);
}
pub inline fn glMatrixMult3x2fNV(arg_2136: GLenum, arg_2137: [*c]const GLfloat) void {
    return epoxy_glMatrixMult3x2fNV.?(arg_2136, arg_2137);
}
pub const GL_ANGLE_program_binary = 1;
pub const GL_DEBUG_TYPE_PERFORMANCE_ARB = 0x8250;
pub const GL_ONE_MINUS_SRC1_ALPHA = 0x88FB;
pub const GL_IBM_rasterpos_clip = 1;
pub const GL_FOVEATION_ENABLE_BIT_QCOM = 0x00000001;
pub const GL_MAP_COLOR = 0x0D10;
pub const GL_HSL_HUE_NV = 0x92AD;
pub inline fn glProgramUniform1i64vARB(arg_2138: GLuint, arg_2139: GLint, arg_2140: GLsizei, arg_2141: [*c]const GLint64) void {
    return epoxy_glProgramUniform1i64vARB.?(arg_2138, arg_2139, arg_2140, arg_2141);
}
pub const GL_VIEW_CLASS_96_BITS = 0x82C5;
pub inline fn glMultiDrawArraysIndirect(arg_2142: GLenum, arg_2143: ?*const c_void, arg_2144: GLsizei, arg_2145: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirect.?(arg_2142, arg_2143, arg_2144, arg_2145);
}
pub const GL_STENCIL_REF = 0x0B97;
pub const GL_TEXTURE0_ARB = 0x84C0;
pub inline fn glProgramEnvParametersI4uivNV(arg_2146: GLenum, arg_2147: GLuint, arg_2148: GLsizei, arg_2149: [*c]const GLuint) void {
    return epoxy_glProgramEnvParametersI4uivNV.?(arg_2146, arg_2147, arg_2148, arg_2149);
}
pub inline fn glProgramUniform3uiEXT(arg_2150: GLuint, arg_2151: GLint, arg_2152: GLuint, arg_2153: GLuint, arg_2154: GLuint) void {
    return epoxy_glProgramUniform3uiEXT.?(arg_2150, arg_2151, arg_2152, arg_2153, arg_2154);
}
pub const GL_FIRST_TO_REST_NV = 0x90AF;
pub inline fn glWindowPos3ivMESA(arg_2155: [*c]const GLint) void {
    return epoxy_glWindowPos3ivMESA.?(arg_2155);
}
pub const GL_VERSION_2_1 = 1;
pub const GL_MIRROR_CLAMP_EXT = 0x8742;
pub const __CLANG_ATOMIC_POINTER_LOCK_FREE = 2;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_SCALE_NV = 0x8853;
pub const __OPENCL_MEMORY_SCOPE_WORK_ITEM = 0;
pub const GL_OES_query_matrix = 1;
pub const GL_COMBINER_COMPONENT_USAGE_NV = 0x8544;
pub inline fn glCompressedTexImage3DARB(arg_2156: GLenum, arg_2157: GLint, arg_2158: GLenum, arg_2159: GLsizei, arg_2160: GLsizei, arg_2161: GLsizei, arg_2162: GLint, arg_2163: GLsizei, arg_2164: ?*const c_void) void {
    return epoxy_glCompressedTexImage3DARB.?(arg_2156, arg_2157, arg_2158, arg_2159, arg_2160, arg_2161, arg_2162, arg_2163, arg_2164);
}
pub inline fn glVertexAttrib4sNV(arg_2165: GLuint, arg_2166: GLshort, arg_2167: GLshort, arg_2168: GLshort, arg_2169: GLshort) void {
    return epoxy_glVertexAttrib4sNV.?(arg_2165, arg_2166, arg_2167, arg_2168, arg_2169);
}
pub const __UINT_LEAST8_FMTX__ = "hhX";
pub const GL_COMPRESSED_RGBA_ASTC_5x5x5_OES = 0x93C6;
pub const GL_VERTEX_ATTRIB_ARRAY9_NV = 0x8659;
pub const GL_HANDLE_TYPE_D3D12_FENCE_EXT = 0x9594;
pub const GL_DEBUG_TYPE_OTHER_KHR = 0x8251;
pub const GL_UNSIGNED_INT_VEC3_EXT = 0x8DC7;
pub const GL_GENERATE_MIPMAP_SGIS = 0x8191;
pub const GL_ANGLE_texture_compression_dxt3 = 1;
pub const GL_SUPERSAMPLE_SCALE_X_NV = 0x9372;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x9308;
pub inline fn glDrawTransformFeedbackInstanced(arg_2170: GLenum, arg_2171: GLuint, arg_2172: GLsizei) void {
    return epoxy_glDrawTransformFeedbackInstanced.?(arg_2170, arg_2171, arg_2172);
}
pub const GL_STENCIL_INDEX4_EXT = 0x8D47;
pub inline fn glVertexAttrib1sv(arg_2173: GLuint, arg_2174: [*c]const GLshort) void {
    return epoxy_glVertexAttrib1sv.?(arg_2173, arg_2174);
}
pub const GL_NV_geometry_shader4 = 1;
pub inline fn glPathParameterfvNV(arg_2175: GLuint, arg_2176: GLenum, arg_2177: [*c]const GLfloat) void {
    return epoxy_glPathParameterfvNV.?(arg_2175, arg_2176, arg_2177);
}
pub const GL_NUM_SPARSE_LEVELS_ARB = 0x91AA;
pub inline fn glValidateProgramPipeline(arg_2178: GLuint) void {
    return epoxy_glValidateProgramPipeline.?(arg_2178);
}
pub const GL_EXTERNAL_VIRTUAL_MEMORY_BUFFER_AMD = 0x9160;
pub inline fn glProgramUniformMatrix4x3fvEXT(arg_2179: GLuint, arg_2180: GLint, arg_2181: GLsizei, arg_2182: GLboolean, arg_2183: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x3fvEXT.?(arg_2179, arg_2180, arg_2181, arg_2182, arg_2183);
}
pub const GL_LUMINANCE_ALPHA16UI_EXT = 0x8D7B;
pub inline fn glEndQuery(arg_2184: GLenum) void {
    return epoxy_glEndQuery.?(arg_2184);
}
pub const GL_PINLIGHT_NV = 0x92A8;
pub inline fn glAlphaFragmentOp2ATI(arg_2185: GLenum, arg_2186: GLuint, arg_2187: GLuint, arg_2188: GLuint, arg_2189: GLuint, arg_2190: GLuint, arg_2191: GLuint, arg_2192: GLuint, arg_2193: GLuint) void {
    return epoxy_glAlphaFragmentOp2ATI.?(arg_2185, arg_2186, arg_2187, arg_2188, arg_2189, arg_2190, arg_2191, arg_2192, arg_2193);
}
pub const GL_CON_1_ATI = 0x8942;
pub inline fn glReplacementCodeuiColor3fVertex3fSUN(arg_2194: GLuint, arg_2195: GLfloat, arg_2196: GLfloat, arg_2197: GLfloat, arg_2198: GLfloat, arg_2199: GLfloat, arg_2200: GLfloat) void {
    return epoxy_glReplacementCodeuiColor3fVertex3fSUN.?(arg_2194, arg_2195, arg_2196, arg_2197, arg_2198, arg_2199, arg_2200);
}
pub const GL_DETAIL_TEXTURE_2D_SGIS = 0x8095;
pub const GL_COMPRESSED_RED_GREEN_RGTC2_EXT = 0x8DBD;
pub inline fn glDeleteObjectARB(arg_2201: GLhandleARB) void {
    return epoxy_glDeleteObjectARB.?(arg_2201);
}
pub inline fn glEvaluateDepthValuesARB() void {
    return epoxy_glEvaluateDepthValuesARB.?();
}
pub inline fn glTangent3bvEXT(arg_2202: [*c]const GLbyte) void {
    return epoxy_glTangent3bvEXT.?(arg_2202);
}
pub const GL_DEBUG_CALLBACK_USER_PARAM_ARB = 0x8245;
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_OES = 0x90D8;
pub inline fn glCoverFillPathInstancedNV(arg_2203: GLsizei, arg_2204: GLenum, arg_2205: ?*const c_void, arg_2206: GLuint, arg_2207: GLenum, arg_2208: GLenum, arg_2209: [*c]const GLfloat) void {
    return epoxy_glCoverFillPathInstancedNV.?(arg_2203, arg_2204, arg_2205, arg_2206, arg_2207, arg_2208, arg_2209);
}
pub const GL_TEXTURE6 = 0x84C6;
pub const GL_BLEND_DST_RGB = 0x80C8;
pub const GL_IMAGE_CLASS_2_X_32 = 0x82BA;
pub const GL_VERTEX_ARRAY_STORAGE_HINT_APPLE = 0x851F;
pub const GL_ALLOW_DRAW_WIN_HINT_PGI = 0x1A20F;
pub const GL_CURRENT_PALETTE_MATRIX_ARB = 0x8843;
pub inline fn glGenVertexArraysOES(arg_2210: GLsizei, arg_2211: [*c]GLuint) void {
    return epoxy_glGenVertexArraysOES.?(arg_2210, arg_2211);
}
pub const GL_CON_4_ATI = 0x8945;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER = 0x8CD4;
pub const GL_ARB_program_interface_query = 1;
pub const GL_ALLOW_DRAW_FRG_HINT_PGI = 0x1A210;
pub const __OFF64_T_TYPE = __SQUAD_TYPE;
pub const GL_MAX_VERTEX_SHADER_INVARIANTS_EXT = 0x87C7;
pub inline fn glMultiTexCoord3s(arg_2212: GLenum, arg_2213: GLshort, arg_2214: GLshort, arg_2215: GLshort) void {
    return epoxy_glMultiTexCoord3s.?(arg_2212, arg_2213, arg_2214, arg_2215);
}
pub inline fn glMemoryObjectParameterivEXT(arg_2216: GLuint, arg_2217: GLenum, arg_2218: [*c]const GLint) void {
    return epoxy_glMemoryObjectParameterivEXT.?(arg_2216, arg_2217, arg_2218);
}
pub const GL_COLOR_ATTACHMENT5_EXT = 0x8CE5;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_ARB = 0x8E8E;
pub const GL_EXT_blend_minmax = 1;
pub const GL_UNSIGNED_BYTE_2_3_3_REV_EXT = 0x8362;
pub const GL_RENDERBUFFER_RED_SIZE_OES = 0x8D50;
pub const GL_ACTIVE_ATOMIC_COUNTER_BUFFERS = 0x92D9;
pub const GL_COLOR_BUFFER_BIT3_QCOM = 0x00000008;
pub inline fn glProgramParameters4dvNV(arg_2219: GLenum, arg_2220: GLuint, arg_2221: GLsizei, arg_2222: [*c]const GLdouble) void {
    return epoxy_glProgramParameters4dvNV.?(arg_2219, arg_2220, arg_2221, arg_2222);
}
pub const GL_RGBA12 = 0x805A;
pub const GL_TEXTURE_CUBE_MAP_OES = 0x8513;
pub inline fn glTexCoordPointervINTEL(arg_2223: GLint, arg_2224: GLenum, arg_2225: [*c]?*const c_void) void {
    return epoxy_glTexCoordPointervINTEL.?(arg_2223, arg_2224, arg_2225);
}
pub inline fn glVertexAttrib2dvARB(arg_2226: GLuint, arg_2227: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib2dvARB.?(arg_2226, arg_2227);
}
pub const GL_TEXTURE_BORDER_COLOR = 0x1004;
pub const GL_CLIENT_ALL_ATTRIB_BITS = 0xFFFFFFFF;
pub const GL_INNOCENT_CONTEXT_RESET_EXT = 0x8254;
pub const __MODE_T_TYPE = __U32_TYPE;
pub const GL_INTERNALFORMAT_SUPPORTED = 0x826F;
pub const GL_BITMAP = 0x1A00;
pub const GL_ATTENUATION_EXT = 0x834D;
pub const GL_ASYNC_TEX_IMAGE_SGIX = 0x835C;
pub const GL_MAT_COLOR_INDEXES_BIT_PGI = 0x01000000;
pub inline fn glSampleCoverage(arg_2228: GLfloat, arg_2229: GLboolean) void {
    return epoxy_glSampleCoverage.?(arg_2228, arg_2229);
}
pub const GL_CMYK_EXT = 0x800C;
pub inline fn glDeleteSemaphoresEXT(arg_2230: GLsizei, arg_2231: [*c]const GLuint) void {
    return epoxy_glDeleteSemaphoresEXT.?(arg_2230, arg_2231);
}
pub inline fn glProgramUniformMatrix3x2fvEXT(arg_2232: GLuint, arg_2233: GLint, arg_2234: GLsizei, arg_2235: GLboolean, arg_2236: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x2fvEXT.?(arg_2232, arg_2233, arg_2234, arg_2235, arg_2236);
}
pub inline fn glVertexAttribs3hvNV(arg_2237: GLuint, arg_2238: GLsizei, arg_2239: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs3hvNV.?(arg_2237, arg_2238, arg_2239);
}
pub const GL_LOCAL_EXT = 0x87C4;
pub const GL_APPLE_sync = 1;
pub const __PID_T_TYPE = __S32_TYPE;
pub inline fn glLightf(arg_2240: GLenum, arg_2241: GLenum, arg_2242: GLfloat) void {
    return epoxy_glLightf.?(arg_2240, arg_2241, arg_2242);
}
pub const GL_OP_LOG_BASE_2_EXT = 0x8792;
pub const GL_SYNC_X11_FENCE_EXT = 0x90E1;
pub const GL_INVERT = 0x150A;
pub const GL_FIXED_ONLY_ARB = 0x891D;
pub inline fn glViewportIndexedfvOES(arg_2243: GLuint, arg_2244: [*c]const GLfloat) void {
    return epoxy_glViewportIndexedfvOES.?(arg_2243, arg_2244);
}
pub inline fn glGetPointerv(arg_2245: GLenum, arg_2246: [*c]?*c_void) void {
    return epoxy_glGetPointerv.?(arg_2245, arg_2246);
}
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT = 0x00004000;
pub inline fn glUnmapBufferARB(arg_2247: GLenum) GLboolean {
    return epoxy_glUnmapBufferARB.?(arg_2247);
}
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_EXT = 0x88EF;
pub const GL_KHR_robust_buffer_access_behavior = 1;
pub inline fn glReplacementCodeubSUN(arg_2248: GLubyte) void {
    return epoxy_glReplacementCodeubSUN.?(arg_2248);
}
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_ARB = 0x8517;
pub const __GCC_ATOMIC_WCHAR_T_LOCK_FREE = 2;
pub inline fn glGetUniformfvARB(arg_2249: GLhandleARB, arg_2250: GLint, arg_2251: [*c]GLfloat) void {
    return epoxy_glGetUniformfvARB.?(arg_2249, arg_2250, arg_2251);
}
pub const GL_OML_interlace = 1;
pub const GL_COLOR_TABLE_SCALE_SGI = 0x80D6;
pub const GL_UNIFORM_BLOCK_ACTIVE_UNIFORM_INDICES = 0x8A43;
pub const __PRFCHW__ = 1;
pub inline fn glGetTextureLevelParameterivEXT(arg_2252: GLuint, arg_2253: GLenum, arg_2254: GLint, arg_2255: GLenum, arg_2256: [*c]GLint) void {
    return epoxy_glGetTextureLevelParameterivEXT.?(arg_2252, arg_2253, arg_2254, arg_2255, arg_2256);
}
pub const GL_EMISSION = 0x1600;
pub inline fn glVertexAttribL3d(arg_2257: GLuint, arg_2258: GLdouble, arg_2259: GLdouble, arg_2260: GLdouble) void {
    return epoxy_glVertexAttribL3d.?(arg_2257, arg_2258, arg_2259, arg_2260);
}
pub const GL_ATI_element_array = 1;
pub const GL_HISTOGRAM_RED_SIZE_EXT = 0x8028;
pub inline fn glGetVariantIntegervEXT(arg_2261: GLuint, arg_2262: GLenum, arg_2263: [*c]GLint) void {
    return epoxy_glGetVariantIntegervEXT.?(arg_2261, arg_2262, arg_2263);
}
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED = 0x886A;
pub inline fn glWindowPos3s(arg_2264: GLshort, arg_2265: GLshort, arg_2266: GLshort) void {
    return epoxy_glWindowPos3s.?(arg_2264, arg_2265, arg_2266);
}
pub const GL_CLIP_DISTANCE7_APPLE = 0x3007;
pub const __amd64__ = 1;
pub inline fn glVertexAttribLFormatNV(arg_2267: GLuint, arg_2268: GLint, arg_2269: GLenum, arg_2270: GLsizei) void {
    return epoxy_glVertexAttribLFormatNV.?(arg_2267, arg_2268, arg_2269, arg_2270);
}
pub inline fn glVertexAttribL2dv(arg_2271: GLuint, arg_2272: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL2dv.?(arg_2271, arg_2272);
}
pub const GL_DRAW_BUFFER7_ARB = 0x882C;
pub inline fn glGlobalAlphaFactorubSUN(arg_2273: GLubyte) void {
    return epoxy_glGlobalAlphaFactorubSUN.?(arg_2273);
}
pub inline fn glMultiTexCoord3dv(arg_2274: GLenum, arg_2275: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord3dv.?(arg_2274, arg_2275);
}
pub const GL_DISTANCE_ATTENUATION_SGIS = 0x8129;
pub inline fn glFramebufferPixelLocalStorageSizeEXT(arg_2276: GLuint, arg_2277: GLsizei) void {
    return epoxy_glFramebufferPixelLocalStorageSizeEXT.?(arg_2276, arg_2277);
}
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x92C9;
pub const GL_COPY_WRITE_BUFFER_NV = 0x8F37;
pub inline fn glVertexStream4iATI(arg_2278: GLenum, arg_2279: GLint, arg_2280: GLint, arg_2281: GLint, arg_2282: GLint) void {
    return epoxy_glVertexStream4iATI.?(arg_2278, arg_2279, arg_2280, arg_2281, arg_2282);
}
pub inline fn glFrontFace(arg_2283: GLenum) void {
    return epoxy_glFrontFace.?(arg_2283);
}
pub const GL_ARB_texture_rg = 1;
pub const __UINT64_FMTx__ = "lx";
pub const GL_ARB_conservative_depth = 1;
pub inline fn glVertexAttrib4fvNV(arg_2284: GLuint, arg_2285: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib4fvNV.?(arg_2284, arg_2285);
}
pub const PRIo16 = "o";
pub const GL_POST_CONVOLUTION_ALPHA_BIAS = 0x8023;
pub inline fn glBindVertexArrayOES(arg_2286: GLuint) void {
    return epoxy_glBindVertexArrayOES.?(arg_2286);
}
pub const GL_COLOR_ATTACHMENT7 = 0x8CE7;
pub inline fn glCopyMultiTexSubImage2DEXT(arg_2287: GLenum, arg_2288: GLenum, arg_2289: GLint, arg_2290: GLint, arg_2291: GLint, arg_2292: GLint, arg_2293: GLint, arg_2294: GLsizei, arg_2295: GLsizei) void {
    return epoxy_glCopyMultiTexSubImage2DEXT.?(arg_2287, arg_2288, arg_2289, arg_2290, arg_2291, arg_2292, arg_2293, arg_2294, arg_2295);
}
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT = 0x8E8F;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_OES = 0x9124;
pub const GL_INDEX_ARRAY_LIST_IBM = 103073;
pub inline fn glBlendEquationOES(arg_2296: GLenum) void {
    return epoxy_glBlendEquationOES.?(arg_2296);
}
pub inline fn glUniform4iARB(arg_2297: GLint, arg_2298: GLint, arg_2299: GLint, arg_2300: GLint, arg_2301: GLint) void {
    return epoxy_glUniform4iARB.?(arg_2297, arg_2298, arg_2299, arg_2300, arg_2301);
}
pub const GL_PIXEL_MODE_BIT = 0x00000020;
pub const GL_TESS_GEN_SPACING_EXT = 0x8E77;
pub const GL_NUM_FRAGMENT_REGISTERS_ATI = 0x896E;
pub inline fn glGetColorTableSGI(arg_2302: GLenum, arg_2303: GLenum, arg_2304: GLenum, arg_2305: ?*c_void) void {
    return epoxy_glGetColorTableSGI.?(arg_2302, arg_2303, arg_2304, arg_2305);
}
pub inline fn glVertexAttribP3uiv(arg_2306: GLuint, arg_2307: GLenum, arg_2308: GLboolean, arg_2309: [*c]const GLuint) void {
    return epoxy_glVertexAttribP3uiv.?(arg_2306, arg_2307, arg_2308, arg_2309);
}
pub inline fn glMultiDrawArraysIndirectBindlessCountNV(arg_2310: GLenum, arg_2311: ?*const c_void, arg_2312: GLsizei, arg_2313: GLsizei, arg_2314: GLsizei, arg_2315: GLint) void {
    return epoxy_glMultiDrawArraysIndirectBindlessCountNV.?(arg_2310, arg_2311, arg_2312, arg_2313, arg_2314, arg_2315);
}
pub inline fn glSecondaryColor3fEXT(arg_2316: GLfloat, arg_2317: GLfloat, arg_2318: GLfloat) void {
    return epoxy_glSecondaryColor3fEXT.?(arg_2316, arg_2317, arg_2318);
}
pub inline fn glBindBufferBaseEXT(arg_2319: GLenum, arg_2320: GLuint, arg_2321: GLuint) void {
    return epoxy_glBindBufferBaseEXT.?(arg_2319, arg_2320, arg_2321);
}
pub inline fn glGetClipPlanef(arg_2322: GLenum, arg_2323: [*c]GLfloat) void {
    return epoxy_glGetClipPlanef.?(arg_2322, arg_2323);
}
pub inline fn glDeleteStatesNV(arg_2324: GLsizei, arg_2325: [*c]const GLuint) void {
    return epoxy_glDeleteStatesNV.?(arg_2324, arg_2325);
}
pub inline fn glGetVertexAttribIivEXT(arg_2326: GLuint, arg_2327: GLenum, arg_2328: [*c]GLint) void {
    return epoxy_glGetVertexAttribIivEXT.?(arg_2326, arg_2327, arg_2328);
}
pub const GL_FRAGMENT_LIGHT_MODEL_LOCAL_VIEWER_SGIX = 0x8408;
pub const GL_PROGRAM_PARAMETER_NV = 0x8644;
pub const GL_ARB_shader_stencil_export = 1;
pub const GL_CURRENT_QUERY_ARB = 0x8865;
pub const GL_MAX_VERTEX_ATTRIB_STRIDE = 0x82E5;
pub const GL_MAJOR_VERSION = 0x821B;
pub const GL_TEXTURE_BLUE_TYPE_ARB = 0x8C12;
pub const GL_DOUBLE_VEC2 = 0x8FFC;
pub const GL_MIN_SAMPLE_SHADING_VALUE_OES = 0x8C37;
pub const GL_VERTEX_PROGRAM_ARB = 0x8620;
pub inline fn glPrimitiveRestartNV() void {
    return epoxy_glPrimitiveRestartNV.?();
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x6_OES = 0x93E9;
pub inline fn glTexParameteriv(arg_2329: GLenum, arg_2330: GLenum, arg_2331: [*c]const GLint) void {
    return epoxy_glTexParameteriv.?(arg_2329, arg_2330, arg_2331);
}
pub const GL_PERFQUERY_COUNTER_THROUGHPUT_INTEL = 0x94F3;
pub const GL_NEAREST_MIPMAP_LINEAR = 0x2702;
pub const GL_OPERAND2_RGB = 0x8592;
pub inline fn glVertexArrayMultiTexCoordOffsetEXT(arg_2332: GLuint, arg_2333: GLuint, arg_2334: GLenum, arg_2335: GLint, arg_2336: GLenum, arg_2337: GLsizei, arg_2338: GLintptr) void {
    return epoxy_glVertexArrayMultiTexCoordOffsetEXT.?(arg_2332, arg_2333, arg_2334, arg_2335, arg_2336, arg_2337, arg_2338);
}
pub const GL_OVR_multiview = 1;
pub const GL_COMPRESSED_RGBA_ASTC_6x5x5_OES = 0x93C7;
pub const GL_DEBUG_CALLBACK_FUNCTION = 0x8244;
pub const GL_DRAW_BUFFER8_ARB = 0x882D;
pub const GL_MAX_VIEWPORT_DIMS = 0x0D3A;
pub inline fn glGetConvolutionFilterEXT(arg_2339: GLenum, arg_2340: GLenum, arg_2341: GLenum, arg_2342: ?*c_void) void {
    return epoxy_glGetConvolutionFilterEXT.?(arg_2339, arg_2340, arg_2341, arg_2342);
}
pub inline fn glVertexAttrib3dNV(arg_2343: GLuint, arg_2344: GLdouble, arg_2345: GLdouble, arg_2346: GLdouble) void {
    return epoxy_glVertexAttrib3dNV.?(arg_2343, arg_2344, arg_2345, arg_2346);
}
pub const GL_SIGNED_INTENSITY_NV = 0x8707;
pub const GL_MAX_PROGRAM_TEX_INDIRECTIONS_ARB = 0x880D;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_BY_SIZE = 0x90C8;
pub const GL_ARB_seamless_cubemap_per_texture = 1;
pub inline fn glProgramUniformHandleui64IMG(arg_2347: GLuint, arg_2348: GLint, arg_2349: GLuint64) void {
    return epoxy_glProgramUniformHandleui64IMG.?(arg_2347, arg_2348, arg_2349);
}
pub const GL_COLOR_WRITEMASK = 0x0C23;
pub inline fn glVertexAttrib4NusvARB(arg_2350: GLuint, arg_2351: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4NusvARB.?(arg_2350, arg_2351);
}
pub const GL_NV_texture_env_combine4 = 1;
pub inline fn glObjectLabel(arg_2352: GLenum, arg_2353: GLuint, arg_2354: GLsizei, arg_2355: [*c]const GLchar) void {
    return epoxy_glObjectLabel.?(arg_2352, arg_2353, arg_2354, arg_2355);
}
pub inline fn glVertex2i(arg_2356: GLint, arg_2357: GLint) void {
    return epoxy_glVertex2i.?(arg_2356, arg_2357);
}
pub inline fn glGetColorTable(arg_2358: GLenum, arg_2359: GLenum, arg_2360: GLenum, arg_2361: ?*c_void) void {
    return epoxy_glGetColorTable.?(arg_2358, arg_2359, arg_2360, arg_2361);
}
pub const GL_PATH_STENCIL_FUNC_NV = 0x90B7;
pub inline fn glVertexAttribP1ui(arg_2362: GLuint, arg_2363: GLenum, arg_2364: GLboolean, arg_2365: GLuint) void {
    return epoxy_glVertexAttribP1ui.?(arg_2362, arg_2363, arg_2364, arg_2365);
}
pub const GL_EXT_texture_compression_astc_decode_mode = 1;
pub inline fn glBinormal3fvEXT(arg_2366: [*c]const GLfloat) void {
    return epoxy_glBinormal3fvEXT.?(arg_2366);
}
pub inline fn glProgramUniform2dvEXT(arg_2367: GLuint, arg_2368: GLint, arg_2369: GLsizei, arg_2370: [*c]const GLdouble) void {
    return epoxy_glProgramUniform2dvEXT.?(arg_2367, arg_2368, arg_2369, arg_2370);
}
pub inline fn glProgramUniform1ivEXT(arg_2371: GLuint, arg_2372: GLint, arg_2373: GLsizei, arg_2374: [*c]const GLint) void {
    return epoxy_glProgramUniform1ivEXT.?(arg_2371, arg_2372, arg_2373, arg_2374);
}
pub const GL_ARB_sampler_objects = 1;
pub const GL_DOUBLE_MAT4x3_EXT = 0x8F4E;
pub const __INT_FAST64_FMTi__ = "li";
pub const __attribute_const__ = __attribute__(__const__);
pub const GL_IBM_vertex_array_lists = 1;
pub const GL_2X_BIT_ATI = 0x00000001;
pub const GL_FULL_RANGE_EXT = 0x87E1;
pub const GL_COMBINER_SUM_OUTPUT_NV = 0x854C;
pub const GL_ARB_transpose_matrix = 1;
pub const GL_ALPHA_TEST_QCOM = 0x0BC0;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_APPLE = 0x8C3E;
pub const GL_DEBUG_TYPE_PERFORMANCE = 0x8250;
pub const GL_VIRTUAL_PAGE_SIZE_Y_EXT = 0x9196;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10 = 0x93DB;
pub const GL_COLOR_ATTACHMENT15_EXT = 0x8CEF;
pub const GL_SGIS_generate_mipmap = 1;
pub inline fn glMultiDrawElementsIndirectAMD(arg_2375: GLenum, arg_2376: GLenum, arg_2377: ?*const c_void, arg_2378: GLsizei, arg_2379: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectAMD.?(arg_2375, arg_2376, arg_2377, arg_2378, arg_2379);
}
pub inline fn glTextureParameteriv(arg_2380: GLuint, arg_2381: GLenum, arg_2382: [*c]const GLint) void {
    return epoxy_glTextureParameteriv.?(arg_2380, arg_2381, arg_2382);
}
pub const GL_MULTIPLY_KHR = 0x9294;
pub const GL_FEEDBACK_BUFFER_POINTER = 0x0DF0;
pub const GL_MATRIX25_ARB = 0x88D9;
pub const GL_PROGRAM_LENGTH_NV = 0x8627;
pub inline fn glBlitNamedFramebuffer(arg_2383: GLuint, arg_2384: GLuint, arg_2385: GLint, arg_2386: GLint, arg_2387: GLint, arg_2388: GLint, arg_2389: GLint, arg_2390: GLint, arg_2391: GLint, arg_2392: GLint, arg_2393: GLbitfield, arg_2394: GLenum) void {
    return epoxy_glBlitNamedFramebuffer.?(arg_2383, arg_2384, arg_2385, arg_2386, arg_2387, arg_2388, arg_2389, arg_2390, arg_2391, arg_2392, arg_2393, arg_2394);
}
pub const GL_PN_TRIANGLES_POINT_MODE_CUBIC_ATI = 0x87F6;
pub inline fn glMatrixMultTransposefEXT(arg_2395: GLenum, arg_2396: [*c]const GLfloat) void {
    return epoxy_glMatrixMultTransposefEXT.?(arg_2395, arg_2396);
}
pub inline fn glProgramUniform2i(arg_2397: GLuint, arg_2398: GLint, arg_2399: GLint, arg_2400: GLint) void {
    return epoxy_glProgramUniform2i.?(arg_2397, arg_2398, arg_2399, arg_2400);
}
pub const GL_ALPHA_MIN_CLAMP_INGR = 0x8563;
pub const GL_TEXTURE_GEN_S = 0x0C60;
pub const GL_FLOAT_RGBA_NV = 0x8883;
pub const GL_PATH_STENCIL_VALUE_MASK_NV = 0x90B9;
pub const GL_MAX_COLOR_FRAMEBUFFER_SAMPLES_AMD = 0x91B3;
pub inline fn glEnableVariantClientStateEXT(arg_2401: GLuint) void {
    return epoxy_glEnableVariantClientStateEXT.?(arg_2401);
}
pub const GL_CURRENT_ATTRIB_NV = 0x8626;
pub inline fn glVertex3f(arg_2402: GLfloat, arg_2403: GLfloat, arg_2404: GLfloat) void {
    return epoxy_glVertex3f.?(arg_2402, arg_2403, arg_2404);
}
pub const GL_EDGE_FLAG_ARRAY_LIST_IBM = 103075;
pub inline fn glGetnMapfv(arg_2405: GLenum, arg_2406: GLenum, arg_2407: GLsizei, arg_2408: [*c]GLfloat) void {
    return epoxy_glGetnMapfv.?(arg_2405, arg_2406, arg_2407, arg_2408);
}
pub inline fn glDebugMessageControl(arg_2409: GLenum, arg_2410: GLenum, arg_2411: GLenum, arg_2412: GLsizei, arg_2413: [*c]const GLuint, arg_2414: GLboolean) void {
    return epoxy_glDebugMessageControl.?(arg_2409, arg_2410, arg_2411, arg_2412, arg_2413, arg_2414);
}
pub const GL_MIN = 0x8007;
pub inline fn glProgramUniform2iEXT(arg_2415: GLuint, arg_2416: GLint, arg_2417: GLint, arg_2418: GLint) void {
    return epoxy_glProgramUniform2iEXT.?(arg_2415, arg_2416, arg_2417, arg_2418);
}
pub const GL_CURRENT_WEIGHT_ARB = 0x86A8;
pub const GL_MULTISAMPLE_BUFFER_BIT2_QCOM = 0x04000000;
pub const GL_R16_EXT = 0x822A;
pub const GL_MATRIX14_ARB = 0x88CE;
pub const GL_ROUNDED_RECT_NV = 0xE8;
pub const GL_OES_texture_border_clamp = 1;
pub const GL_GEOMETRY_SHADER_OES = 0x8DD9;
pub inline fn glDrawElementsInstancedBaseVertexBaseInstanceEXT(arg_2419: GLenum, arg_2420: GLsizei, arg_2421: GLenum, arg_2422: ?*const c_void, arg_2423: GLsizei, arg_2424: GLint, arg_2425: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseVertexBaseInstanceEXT.?(arg_2419, arg_2420, arg_2421, arg_2422, arg_2423, arg_2424, arg_2425);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_BASE_VIEW_INDEX_OVR = 0x9632;
pub inline fn glBlendEquation(arg_2426: GLenum) void {
    return epoxy_glBlendEquation.?(arg_2426);
}
pub const GL_SAMPLER_CUBE_SHADOW_EXT = 0x8DC5;
pub const GL_DRAW_BUFFER2 = 0x8827;
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG = 0x9138;
pub const GL_NVX_gpu_memory_info = 1;
pub const GL_VERTEX_ATTRIB_ARRAY6_NV = 0x8656;
pub inline fn glMultiTexParameterIivEXT(arg_2427: GLenum, arg_2428: GLenum, arg_2429: GLenum, arg_2430: [*c]const GLint) void {
    return epoxy_glMultiTexParameterIivEXT.?(arg_2427, arg_2428, arg_2429, arg_2430);
}
pub const GL_ARB_texture_env_add = 1;
pub inline fn glNamedFramebufferTexture3DEXT(arg_2431: GLuint, arg_2432: GLenum, arg_2433: GLenum, arg_2434: GLuint, arg_2435: GLint, arg_2436: GLint) void {
    return epoxy_glNamedFramebufferTexture3DEXT.?(arg_2431, arg_2432, arg_2433, arg_2434, arg_2435, arg_2436);
}
pub const GL_DEBUG_LOGGED_MESSAGES_ARB = 0x9145;
pub const GL_COLOR_ARRAY_LIST_IBM = 103072;
pub const GL_RENDERBUFFER_SAMPLES = 0x8CAB;
pub const GL_HSL_HUE = 0x92AD;
pub inline fn glColor4us(arg_2437: GLushort, arg_2438: GLushort, arg_2439: GLushort, arg_2440: GLushort) void {
    return epoxy_glColor4us.?(arg_2437, arg_2438, arg_2439, arg_2440);
}
pub const GL_RETURN = 0x0102;
pub const GL_RG_EXT = 0x8227;
pub const GL_SHADING_RATE_IMAGE_NV = 0x9563;
pub inline fn glCheckNamedFramebufferStatus(arg_2441: GLuint, arg_2442: GLenum) GLenum {
    return epoxy_glCheckNamedFramebufferStatus.?(arg_2441, arg_2442);
}
pub inline fn glInsertEventMarkerEXT(arg_2443: GLsizei, arg_2444: [*c]const GLchar) void {
    return epoxy_glInsertEventMarkerEXT.?(arg_2443, arg_2444);
}
pub const GL_PATH_ERROR_POSITION_NV = 0x90AB;
pub const GL_IBM_texture_mirrored_repeat = 1;
pub inline fn glGetIntegeri_vEXT(arg_2445: GLenum, arg_2446: GLuint, arg_2447: [*c]GLint) void {
    return epoxy_glGetIntegeri_vEXT.?(arg_2445, arg_2446, arg_2447);
}
pub const GL_RGB10_A2_EXT = 0x8059;
pub inline fn glBindBufferOffsetEXT(arg_2448: GLenum, arg_2449: GLuint, arg_2450: GLuint, arg_2451: GLintptr) void {
    return epoxy_glBindBufferOffsetEXT.?(arg_2448, arg_2449, arg_2450, arg_2451);
}
pub const GL_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B2;
pub inline fn glGetClipPlanefOES(arg_2452: GLenum, arg_2453: [*c]GLfloat) void {
    return epoxy_glGetClipPlanefOES.?(arg_2452, arg_2453);
}
pub const GL_TEXTURE19 = 0x84D3;
pub const GL_POST_CONVOLUTION_RED_SCALE = 0x801C;
pub const GL_VARIANT_ARRAY_TYPE_EXT = 0x87E7;
pub const GL_RESET_NOTIFICATION_STRATEGY = 0x8256;
pub const GL_R11F_G11F_B10F_APPLE = 0x8C3A;
pub inline fn glRenderbufferStorageOES(arg_2454: GLenum, arg_2455: GLenum, arg_2456: GLsizei, arg_2457: GLsizei) void {
    return epoxy_glRenderbufferStorageOES.?(arg_2454, arg_2455, arg_2456, arg_2457);
}
pub inline fn glGetConvolutionParameterfvEXT(arg_2458: GLenum, arg_2459: GLenum, arg_2460: [*c]GLfloat) void {
    return epoxy_glGetConvolutionParameterfvEXT.?(arg_2458, arg_2459, arg_2460);
}
pub inline fn glShaderOp2EXT(arg_2461: GLenum, arg_2462: GLuint, arg_2463: GLuint, arg_2464: GLuint) void {
    return epoxy_glShaderOp2EXT.?(arg_2461, arg_2462, arg_2463, arg_2464);
}
pub const GL_DEBUG_PRINT_MESA = 0x875A;
pub const GL_ALPHA_TO_COVERAGE_DITHER_DEFAULT_NV = 0x934D;
pub inline fn glLGPUCopyImageSubDataNVX(arg_2465: GLuint, arg_2466: GLbitfield, arg_2467: GLuint, arg_2468: GLenum, arg_2469: GLint, arg_2470: GLint, arg_2471: GLint, arg_2472: GLint, arg_2473: GLuint, arg_2474: GLenum, arg_2475: GLint, arg_2476: GLint, arg_2477: GLint, arg_2478: GLint, arg_2479: GLsizei, arg_2480: GLsizei, arg_2481: GLsizei) void {
    return epoxy_glLGPUCopyImageSubDataNVX.?(arg_2465, arg_2466, arg_2467, arg_2468, arg_2469, arg_2470, arg_2471, arg_2472, arg_2473, arg_2474, arg_2475, arg_2476, arg_2477, arg_2478, arg_2479, arg_2480, arg_2481);
}
pub const GL_ACCUM = 0x0100;
pub const GL_PATH_GEN_MODE_NV = 0x90B0;
pub const GL_CLAMP_TO_BORDER_SGIS = 0x812D;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT = 0x9065;
pub const GL_TEXTURE25 = 0x84D9;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT = 0x8B9B;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_EXT = 0x9123;
pub inline fn glBinormal3sEXT(arg_2482: GLshort, arg_2483: GLshort, arg_2484: GLshort) void {
    return epoxy_glBinormal3sEXT.?(arg_2482, arg_2483, arg_2484);
}
pub inline fn __NTH(fct: var) @TypeOf(__attribute__(__nothrow__ ++ __LEAF) ++ fct) {
    return __attribute__(__nothrow__ ++ __LEAF) ++ fct;
}
pub inline fn glGetVertexAttribArrayObjectfvATI(arg_2485: GLuint, arg_2486: GLenum, arg_2487: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribArrayObjectfvATI.?(arg_2485, arg_2486, arg_2487);
}
pub inline fn glMultTransposeMatrixd(arg_2488: [*c]const GLdouble) void {
    return epoxy_glMultTransposeMatrixd.?(arg_2488);
}
pub const GL_PERFQUERY_FLUSH_INTEL = 0x83FA;
pub const GL_SAMPLES_EXT = 0x80A9;
pub const GL_VERTEX_ARRAY_POINTER = 0x808E;
pub const GL_NORMAL_ARRAY_TYPE_EXT = 0x807E;
pub inline fn glVertexWeightfEXT(arg_2489: GLfloat) void {
    return epoxy_glVertexWeightfEXT.?(arg_2489);
}
pub inline fn glSignalVkFenceNV(arg_2490: GLuint64) void {
    return epoxy_glSignalVkFenceNV.?(arg_2490);
}
pub const GL_INTENSITY12_EXT = 0x804C;
pub const GL_INT_2_10_10_10_REV = 0x8D9F;
pub const GL_IMAGE_BINDING_LAYER = 0x8F3D;
pub const GL_HALF_BIT_ATI = 0x00000008;
pub const GL_RENDERBUFFER_DEPTH_SIZE_EXT = 0x8D54;
pub const GL_PIXEL_COUNT_NV = 0x8866;
pub inline fn glBindBufferRangeNV(arg_2491: GLenum, arg_2492: GLuint, arg_2493: GLuint, arg_2494: GLintptr, arg_2495: GLsizeiptr) void {
    return epoxy_glBindBufferRangeNV.?(arg_2491, arg_2492, arg_2493, arg_2494, arg_2495);
}
pub const GL_HINT_BIT = 0x00008000;
pub const GL_LINE_WIDTH_GRANULARITY = 0x0B23;
pub const INT_FAST8_MIN = -128;
pub const GL_INT_SAMPLER_3D = 0x8DCB;
pub const GL_VERTEX_WEIGHT_ARRAY_STRIDE_EXT = 0x850F;
pub const GL_INT64_VEC3_ARB = 0x8FEA;
pub inline fn glDrawCommandsAddressNV(arg_2496: GLenum, arg_2497: [*c]const GLuint64, arg_2498: [*c]const GLsizei, arg_2499: GLuint) void {
    return epoxy_glDrawCommandsAddressNV.?(arg_2496, arg_2497, arg_2498, arg_2499);
}
pub const GL_PIXEL_TEX_GEN_SGIX = 0x8139;
pub const GL_STENCIL_BACK_FAIL = 0x8801;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS_ARB = 0x919A;
pub inline fn glWindowPos4ivMESA(arg_2500: [*c]const GLint) void {
    return epoxy_glWindowPos4ivMESA.?(arg_2500);
}
pub const GL_UUID_SIZE_EXT = 16;
pub const GL_MAX_3D_TEXTURE_SIZE = 0x8073;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_X_NV = 0x9350;
pub inline fn glWindowPos2ivMESA(arg_2501: [*c]const GLint) void {
    return epoxy_glWindowPos2ivMESA.?(arg_2501);
}
pub const GL_RASTER_POSITION_UNCLIPPED_IBM = 0x19262;
pub const GL_TEXTURE_LUMINANCE_SIZE = 0x8060;
pub const GL_COLOR_SUM_ARB = 0x8458;
pub inline fn glGetMinmax(arg_2502: GLenum, arg_2503: GLboolean, arg_2504: GLenum, arg_2505: GLenum, arg_2506: ?*c_void) void {
    return epoxy_glGetMinmax.?(arg_2502, arg_2503, arg_2504, arg_2505, arg_2506);
}
pub const GL_CURRENT_SECONDARY_COLOR_EXT = 0x8459;
pub inline fn glMakeTextureHandleResidentNV(arg_2507: GLuint64) void {
    return epoxy_glMakeTextureHandleResidentNV.?(arg_2507);
}
pub inline fn glMultiTexCoord4dARB(arg_2508: GLenum, arg_2509: GLdouble, arg_2510: GLdouble, arg_2511: GLdouble, arg_2512: GLdouble) void {
    return epoxy_glMultiTexCoord4dARB.?(arg_2508, arg_2509, arg_2510, arg_2511, arg_2512);
}
pub const PRIxFAST64 = __PRI64_PREFIX ++ "x";
pub inline fn glClampColor(arg_2513: GLenum, arg_2514: GLenum) void {
    return epoxy_glClampColor.?(arg_2513, arg_2514);
}
pub const GL_R1UI_N3F_V3F_SUN = 0x85C7;
pub inline fn glFinishFenceNV(arg_2515: GLuint) void {
    return epoxy_glFinishFenceNV.?(arg_2515);
}
pub const GL_DRAW_BUFFER14_ATI = 0x8833;
pub const PRIu16 = "u";
pub const GL_TILE_RASTER_ORDER_INCREASING_Y_MESA = 0x8BBA;
pub inline fn glUniform1fv(arg_2516: GLint, arg_2517: GLsizei, arg_2518: [*c]const GLfloat) void {
    return epoxy_glUniform1fv.?(arg_2516, arg_2517, arg_2518);
}
pub const GL_DEPTH_COMPONENT = 0x1902;
pub const GL_ARB_indirect_parameters = 1;
pub const GL_MAX_FRAMEBUFFER_HEIGHT = 0x9316;
pub const GL_VERTEX_ATTRIB_MAP1_APPLE = 0x8A00;
pub inline fn glGetFloati_vNV(arg_2519: GLenum, arg_2520: GLuint, arg_2521: [*c]GLfloat) void {
    return epoxy_glGetFloati_vNV.?(arg_2519, arg_2520, arg_2521);
}
pub const GL_AMD_performance_monitor = 1;
pub inline fn glFrustumxOES(arg_2522: GLfixed, arg_2523: GLfixed, arg_2524: GLfixed, arg_2525: GLfixed, arg_2526: GLfixed, arg_2527: GLfixed) void {
    return epoxy_glFrustumxOES.?(arg_2522, arg_2523, arg_2524, arg_2525, arg_2526, arg_2527);
}
pub const GL_FRAGMENT_LIGHT5_SGIX = 0x8411;
pub inline fn glInvalidateNamedFramebufferData(arg_2528: GLuint, arg_2529: GLsizei, arg_2530: [*c]const GLenum) void {
    return epoxy_glInvalidateNamedFramebufferData.?(arg_2528, arg_2529, arg_2530);
}
pub const GL_GLYPH_VERTICAL_BEARING_X_BIT_NV = 0x20;
pub const GL_MODELVIEW8_ARB = 0x8728;
pub inline fn glConvolutionParameteri(arg_2531: GLenum, arg_2532: GLenum, arg_2533: GLint) void {
    return epoxy_glConvolutionParameteri.?(arg_2531, arg_2532, arg_2533);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR = 0x93D0;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_MAX_LENGTH = 0x8E49;
pub const GL_COMPRESSED_RGBA_ASTC_8x5_KHR = 0x93B5;
pub const GL_CLIP_VOLUME_CLIPPING_HINT_EXT = 0x80F0;
pub inline fn glLightxvOES(arg_2534: GLenum, arg_2535: GLenum, arg_2536: [*c]const GLfixed) void {
    return epoxy_glLightxvOES.?(arg_2534, arg_2535, arg_2536);
}
pub const GL_COMPRESSED_LUMINANCE_ALPHA_ARB = 0x84EB;
pub const GL_VERTICES_SUBMITTED = 0x82EE;
pub inline fn glVertexAttrib4dNV(arg_2537: GLuint, arg_2538: GLdouble, arg_2539: GLdouble, arg_2540: GLdouble, arg_2541: GLdouble) void {
    return epoxy_glVertexAttrib4dNV.?(arg_2537, arg_2538, arg_2539, arg_2540, arg_2541);
}
pub const GL_NO_RESET_NOTIFICATION_EXT = 0x8261;
pub const GL_INT_IMAGE_1D_ARRAY = 0x905D;
pub const GL_DRAW_BUFFER3_ARB = 0x8828;
pub const GL_MAX_COMBINED_SHADER_STORAGE_BLOCKS = 0x90DC;
pub const GL_R1UI_C4F_N3F_V3F_SUN = 0x85C8;
pub inline fn glGetVaryingLocationNV(arg_2542: GLuint, arg_2543: [*c]const GLchar) GLint {
    return epoxy_glGetVaryingLocationNV.?(arg_2542, arg_2543);
}
pub inline fn glVertex4d(arg_2544: GLdouble, arg_2545: GLdouble, arg_2546: GLdouble, arg_2547: GLdouble) void {
    return epoxy_glVertex4d.?(arg_2544, arg_2545, arg_2546, arg_2547);
}
pub const GL_POST_CONVOLUTION_BLUE_BIAS = 0x8022;
pub inline fn glGetNamedRenderbufferParameteriv(arg_2548: GLuint, arg_2549: GLenum, arg_2550: [*c]GLint) void {
    return epoxy_glGetNamedRenderbufferParameteriv.?(arg_2548, arg_2549, arg_2550);
}
pub const GL_TEXTURE_COMPRESSION_HINT_ARB = 0x84EF;
pub const GL_IMAGE_ROTATE_ORIGIN_X_HP = 0x815A;
pub const GL_CON_8_ATI = 0x8949;
pub inline fn glProgramUniform3i64vNV(arg_2551: GLuint, arg_2552: GLint, arg_2553: GLsizei, arg_2554: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform3i64vNV.?(arg_2551, arg_2552, arg_2553, arg_2554);
}
pub inline fn glMapVertexAttrib1dAPPLE(arg_2555: GLuint, arg_2556: GLuint, arg_2557: GLdouble, arg_2558: GLdouble, arg_2559: GLint, arg_2560: GLint, arg_2561: [*c]const GLdouble) void {
    return epoxy_glMapVertexAttrib1dAPPLE.?(arg_2555, arg_2556, arg_2557, arg_2558, arg_2559, arg_2560, arg_2561);
}
pub const GL_MINMAX = 0x802E;
pub const GL_AMD_query_buffer_object = 1;
pub const GL_MAX_VERTEX_UNITS_ARB = 0x86A4;
pub inline fn glVertexAttribI3uiEXT(arg_2562: GLuint, arg_2563: GLuint, arg_2564: GLuint, arg_2565: GLuint) void {
    return epoxy_glVertexAttribI3uiEXT.?(arg_2562, arg_2563, arg_2564, arg_2565);
}
pub inline fn glVertexAttribL3dv(arg_2566: GLuint, arg_2567: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL3dv.?(arg_2566, arg_2567);
}
pub const GL_TEXTURE25_ARB = 0x84D9;
pub inline fn glCompressedTextureImage1DEXT(arg_2568: GLuint, arg_2569: GLenum, arg_2570: GLint, arg_2571: GLenum, arg_2572: GLsizei, arg_2573: GLint, arg_2574: GLsizei, arg_2575: ?*const c_void) void {
    return epoxy_glCompressedTextureImage1DEXT.?(arg_2568, arg_2569, arg_2570, arg_2571, arg_2572, arg_2573, arg_2574, arg_2575);
}
pub const GL_UNPACK_ALIGNMENT = 0x0CF5;
pub const GL_PROGRAM_UNDER_NATIVE_LIMITS_ARB = 0x88B6;
pub const __UINT8_FMTx__ = "hhx";
pub const GL_BOUNDING_BOX_NV = 0x908D;
pub const GL_CLIP_ORIGIN = 0x935C;
pub inline fn glBlendFuncSeparateiOES(arg_2576: GLuint, arg_2577: GLenum, arg_2578: GLenum, arg_2579: GLenum, arg_2580: GLenum) void {
    return epoxy_glBlendFuncSeparateiOES.?(arg_2576, arg_2577, arg_2578, arg_2579, arg_2580);
}
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_EXT = 0x886D;
pub const GL_ARB_gpu_shader_int64 = 1;
pub inline fn glGetnUniformfvEXT(arg_2581: GLuint, arg_2582: GLint, arg_2583: GLsizei, arg_2584: [*c]GLfloat) void {
    return epoxy_glGetnUniformfvEXT.?(arg_2581, arg_2582, arg_2583, arg_2584);
}
pub inline fn glPixelTexGenParameterfSGIS(arg_2585: GLenum, arg_2586: GLfloat) void {
    return epoxy_glPixelTexGenParameterfSGIS.?(arg_2585, arg_2586);
}
pub const GL_COMPUTE_SHADER = 0x91B9;
pub inline fn glTransformFeedbackVaryingsNV(arg_2587: GLuint, arg_2588: GLsizei, arg_2589: [*c]const GLint, arg_2590: GLenum) void {
    return epoxy_glTransformFeedbackVaryingsNV.?(arg_2587, arg_2588, arg_2589, arg_2590);
}
pub const GL_PROXY_HISTOGRAM = 0x8025;
pub const GL_TANGENT_ARRAY_TYPE_EXT = 0x843E;
pub const GL_PARAMETER_BUFFER_BINDING_ARB = 0x80EF;
pub const GL_CUBIC_MIPMAP_NEAREST_IMG = 0x913A;
pub const GL_TEXTURE_VIEW_MIN_LEVEL_OES = 0x82DB;
pub const GL_VERTEX_ATTRIB_ARRAY7_NV = 0x8657;
pub const GL_VERTEX_ATTRIB_ARRAY8_NV = 0x8658;
pub const GL_IMAGE_2D_RECT = 0x904F;
pub const GL_MAX_IMAGE_SAMPLES_EXT = 0x906D;
pub const GL_PERFMON_RESULT_AVAILABLE_AMD = 0x8BC4;
pub inline fn glBinormal3dEXT(arg_2591: GLdouble, arg_2592: GLdouble, arg_2593: GLdouble) void {
    return epoxy_glBinormal3dEXT.?(arg_2591, arg_2592, arg_2593);
}
pub inline fn glGetTextureImageEXT(arg_2594: GLuint, arg_2595: GLenum, arg_2596: GLint, arg_2597: GLenum, arg_2598: GLenum, arg_2599: ?*c_void) void {
    return epoxy_glGetTextureImageEXT.?(arg_2594, arg_2595, arg_2596, arg_2597, arg_2598, arg_2599);
}
pub const GL_BGRA_EXT = 0x80E1;
pub inline fn glUniform1i64vNV(arg_2600: GLint, arg_2601: GLsizei, arg_2602: [*c]const GLint64EXT) void {
    return epoxy_glUniform1i64vNV.?(arg_2600, arg_2601, arg_2602);
}
pub const GL_PROXY_TEXTURE_1D_STACK_MESAX = 0x875B;
pub inline fn glIsPathNV(arg_2603: GLuint) GLboolean {
    return epoxy_glIsPathNV.?(arg_2603);
}
pub const GL_PIXEL_MAP_R_TO_R = 0x0C76;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS = 0x8E83;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900C;
pub const GL_SGIX_interlace = 1;
pub const __ATOMIC_RELEASE = 3;
pub inline fn glSecondaryColorP3uiv(arg_2604: GLenum, arg_2605: [*c]const GLuint) void {
    return epoxy_glSecondaryColorP3uiv.?(arg_2604, arg_2605);
}
pub inline fn glTexParameterxOES(arg_2606: GLenum, arg_2607: GLenum, arg_2608: GLfixed) void {
    return epoxy_glTexParameterxOES.?(arg_2606, arg_2607, arg_2608);
}
pub const GL_MAP2_VERTEX_ATTRIB12_4_NV = 0x867C;
pub const GL_ARB_shading_language_420pack = 1;
pub inline fn glPixelMapuiv(arg_2609: GLenum, arg_2610: GLsizei, arg_2611: [*c]const GLuint) void {
    return epoxy_glPixelMapuiv.?(arg_2609, arg_2610, arg_2611);
}
pub inline fn glGetQueryiv(arg_2612: GLenum, arg_2613: GLenum, arg_2614: [*c]GLint) void {
    return epoxy_glGetQueryiv.?(arg_2612, arg_2613, arg_2614);
}
pub inline fn glGetFragDataLocationEXT(arg_2615: GLuint, arg_2616: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataLocationEXT.?(arg_2615, arg_2616);
}
pub const GL_ANGLE_framebuffer_multisample = 1;
pub const GL_NV_deep_texture3D = 1;
pub inline fn glWindowPos3svARB(arg_2617: [*c]const GLshort) void {
    return epoxy_glWindowPos3svARB.?(arg_2617);
}
pub const __FLT_MAX_10_EXP__ = 38;
pub const GL_MAX_TESS_CONTROL_OUTPUT_COMPONENTS_OES = 0x8E83;
pub const GL_TEXTURE_SAMPLES = 0x9106;
pub const GL_RGBA8 = 0x8058;
pub const GL_TRIANGLES = 0x0004;
pub const GL_APPLE_client_storage = 1;
pub inline fn glIsCommandListNV(arg_2618: GLuint) GLboolean {
    return epoxy_glIsCommandListNV.?(arg_2618);
}
pub inline fn glVertexAttribL4ui64vNV(arg_2619: GLuint, arg_2620: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL4ui64vNV.?(arg_2619, arg_2620);
}
pub inline fn glNormal3fv(arg_2621: [*c]const GLfloat) void {
    return epoxy_glNormal3fv.?(arg_2621);
}
pub inline fn glMultiTexCoord3f(arg_2622: GLenum, arg_2623: GLfloat, arg_2624: GLfloat, arg_2625: GLfloat) void {
    return epoxy_glMultiTexCoord3f.?(arg_2622, arg_2623, arg_2624, arg_2625);
}
pub const GL_DEBUG_SOURCE_API_KHR = 0x8246;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X4_PIXELS_NV = 0x956B;
pub const GL_RGB_FLOAT16_ATI = 0x881B;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_NV = 0x8643;
pub const GL_TEXTURE_2D_BINDING_EXT = 0x8069;
pub const GL_WAIT_FAILED_APPLE = 0x911D;
pub inline fn glCoverStrokePathNV(arg_2626: GLuint, arg_2627: GLenum) void {
    return epoxy_glCoverStrokePathNV.?(arg_2626, arg_2627);
}
pub const GL_BUMP_ENVMAP_ATI = 0x877B;
pub const GL_DEPTH_PASS_INSTRUMENT_MAX_SGIX = 0x8312;
pub const GL_COLOR_ATTACHMENT11 = 0x8CEB;
pub inline fn glCompressedTextureImage3DEXT(arg_2628: GLuint, arg_2629: GLenum, arg_2630: GLint, arg_2631: GLenum, arg_2632: GLsizei, arg_2633: GLsizei, arg_2634: GLsizei, arg_2635: GLint, arg_2636: GLsizei, arg_2637: ?*const c_void) void {
    return epoxy_glCompressedTextureImage3DEXT.?(arg_2628, arg_2629, arg_2630, arg_2631, arg_2632, arg_2633, arg_2634, arg_2635, arg_2636, arg_2637);
}
pub const GL_UNSIGNED_INT_ATOMIC_COUNTER = 0x92DB;
pub const GL_GPU_MEMORY_INFO_CURRENT_AVAILABLE_VIDMEM_NVX = 0x9049;
pub inline fn glFogFuncSGIS(arg_2638: GLsizei, arg_2639: [*c]const GLfloat) void {
    return epoxy_glFogFuncSGIS.?(arg_2638, arg_2639);
}
pub const GL_TEXTURE_UPDATE_BARRIER_BIT_EXT = 0x00000100;
pub inline fn glMakeBufferResidentNV(arg_2640: GLenum, arg_2641: GLenum) void {
    return epoxy_glMakeBufferResidentNV.?(arg_2640, arg_2641);
}
pub inline fn glUniform4ui(arg_2642: GLint, arg_2643: GLuint, arg_2644: GLuint, arg_2645: GLuint, arg_2646: GLuint) void {
    return epoxy_glUniform4ui.?(arg_2642, arg_2643, arg_2644, arg_2645, arg_2646);
}
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY = 0x9105;
pub inline fn glFramebufferTextureMultisampleMultiviewOVR(arg_2647: GLenum, arg_2648: GLenum, arg_2649: GLuint, arg_2650: GLint, arg_2651: GLsizei, arg_2652: GLint, arg_2653: GLsizei) void {
    return epoxy_glFramebufferTextureMultisampleMultiviewOVR.?(arg_2647, arg_2648, arg_2649, arg_2650, arg_2651, arg_2652, arg_2653);
}
pub inline fn glBindBuffersBase(arg_2654: GLenum, arg_2655: GLuint, arg_2656: GLsizei, arg_2657: [*c]const GLuint) void {
    return epoxy_glBindBuffersBase.?(arg_2654, arg_2655, arg_2656, arg_2657);
}
pub inline fn glExtGetShadersQCOM(arg_2658: [*c]GLuint, arg_2659: GLint, arg_2660: [*c]GLint) void {
    return epoxy_glExtGetShadersQCOM.?(arg_2658, arg_2659, arg_2660);
}
pub const GL_PALETTE4_RGBA8_OES = 0x8B91;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_CONTROL_SHADER = 0x84F0;
pub const GL_UNSIGNED_INT_SAMPLER_2D_EXT = 0x8DD2;
pub inline fn glVertexAttribI4sv(arg_2661: GLuint, arg_2662: [*c]const GLshort) void {
    return epoxy_glVertexAttribI4sv.?(arg_2661, arg_2662);
}
pub const GL_TRANSLATE_2D_NV = 0x9090;
pub const GL_IMG_texture_compression_pvrtc = 1;
pub const GL_MATRIX_INDEX_ARRAY_POINTER_ARB = 0x8849;
pub inline fn glMultiTexCoord3fv(arg_2663: GLenum, arg_2664: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord3fv.?(arg_2663, arg_2664);
}
pub const GL_HP_occlusion_test = 1;
pub const GL_SYNC_FLAGS_APPLE = 0x9115;
pub const GL_QUERY_NO_WAIT_INVERTED = 0x8E18;
pub inline fn glGetPointerIndexedvEXT(arg_2665: GLenum, arg_2666: GLuint, arg_2667: [*c]?*c_void) void {
    return epoxy_glGetPointerIndexedvEXT.?(arg_2665, arg_2666, arg_2667);
}
pub const GL_LINEAR_MIPMAP_LINEAR = 0x2703;
pub inline fn glIsRenderbufferOES(arg_2668: GLuint) GLboolean {
    return epoxy_glIsRenderbufferOES.?(arg_2668);
}
pub const GL_PIXEL_COUNT_AVAILABLE_NV = 0x8867;
pub const GL_EXT_shader_framebuffer_fetch = 1;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH = 0x9143;
pub inline fn glDrawTransformFeedback(arg_2669: GLenum, arg_2670: GLuint) void {
    return epoxy_glDrawTransformFeedback.?(arg_2669, arg_2670);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 0x8CD6;
pub const GL_POST_COLOR_MATRIX_RED_BIAS = 0x80B8;
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH = 0x82FC;
pub const GL_SOURCE1_ALPHA_ARB = 0x8589;
pub const GL_MESA_tile_raster_order = 1;
pub const GL_AND = 0x1501;
pub const GL_PROGRAM_TEX_INDIRECTIONS_ARB = 0x8807;
pub const GL_OES_EGL_image_external_essl3 = 1;
pub const GL_DISCARD_NV = 0x8530;
pub inline fn glVertexAttrib4uivARB(arg_2671: GLuint, arg_2672: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4uivARB.?(arg_2671, arg_2672);
}
pub const GL_NV_texture_border_clamp = 1;
pub const GL_DARKEN = 0x9297;
pub const GL_ARB_multi_bind = 1;
pub inline fn glMultiTexGeniEXT(arg_2673: GLenum, arg_2674: GLenum, arg_2675: GLenum, arg_2676: GLint) void {
    return epoxy_glMultiTexGeniEXT.?(arg_2673, arg_2674, arg_2675, arg_2676);
}
pub const GL_OES_point_sprite = 1;
pub const GL_DEPTH_BUFFER_BIT0_QCOM = 0x00000100;
pub const GL_FRAGMENT_SHADER_BIT = 0x00000002;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x5_OES = 0x93C8;
pub const GL_APPLE_element_array = 1;
pub const GL_IMPLEMENTATION_COLOR_READ_FORMAT_OES = 0x8B9B;
pub const GL_MATRIX_INDEX_ARRAY_SIZE_OES = 0x8846;
pub inline fn glMapBuffer(arg_2677: GLenum, arg_2678: GLenum) ?*c_void {
    return epoxy_glMapBuffer.?(arg_2677, arg_2678);
}
pub const __glibc_has_include = __has_include;
pub inline fn glPrioritizeTexturesEXT(arg_2679: GLsizei, arg_2680: [*c]const GLuint, arg_2681: [*c]const GLclampf) void {
    return epoxy_glPrioritizeTexturesEXT.?(arg_2679, arg_2680, arg_2681);
}
pub const GL_RED_EXT = 0x1903;
pub const GL_PIXEL_MAP_B_TO_B = 0x0C78;
pub const GL_PIXEL_SUBSAMPLE_4242_SGIX = 0x85A4;
pub inline fn glUniform2fARB(arg_2682: GLint, arg_2683: GLfloat, arg_2684: GLfloat) void {
    return epoxy_glUniform2fARB.?(arg_2682, arg_2683, arg_2684);
}
pub inline fn glGetnPixelMapusv(arg_2685: GLenum, arg_2686: GLsizei, arg_2687: [*c]GLushort) void {
    return epoxy_glGetnPixelMapusv.?(arg_2685, arg_2686, arg_2687);
}
pub const GL_TEXTURE_COLOR_WRITEMASK_SGIS = 0x81EF;
pub const GL_TEXTURE_VIEW_NUM_LAYERS = 0x82DE;
pub inline fn glBindAttribLocationARB(arg_2688: GLhandleARB, arg_2689: GLuint, arg_2690: [*c]const GLcharARB) void {
    return epoxy_glBindAttribLocationARB.?(arg_2688, arg_2689, arg_2690);
}
pub const GL_TEXTURE17 = 0x84D1;
pub inline fn glVertexAttribI2iv(arg_2691: GLuint, arg_2692: [*c]const GLint) void {
    return epoxy_glVertexAttribI2iv.?(arg_2691, arg_2692);
}
pub const GL_EXT_framebuffer_blit = 1;
pub inline fn glReleaseShaderCompiler() void {
    return epoxy_glReleaseShaderCompiler.?();
}
pub const PRIoLEAST32 = "o";
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS = 0x90D9;
pub const __OFF_T_MATCHES_OFF64_T = 1;
pub inline fn glProgramUniform2ivEXT(arg_2693: GLuint, arg_2694: GLint, arg_2695: GLsizei, arg_2696: [*c]const GLint) void {
    return epoxy_glProgramUniform2ivEXT.?(arg_2693, arg_2694, arg_2695, arg_2696);
}
pub inline fn glMultiTexCoord1ivARB(arg_2697: GLenum, arg_2698: [*c]const GLint) void {
    return epoxy_glMultiTexCoord1ivARB.?(arg_2697, arg_2698);
}
pub const __STDC_HOSTED__ = 1;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET = 0x8905;
pub const GL_LINE_SMOOTH_HINT = 0x0C52;
pub const GL_EXT_texture_lod_bias = 1;
pub const GL_DOUBLE_MAT2x3 = 0x8F49;
pub const GL_SPARE1_NV = 0x852F;
pub const GL_VIEW_CLASS_ASTC_10x8_RGBA = 0x9392;
pub const GL_INT64_NV = 0x140E;
pub const GL_ALL_SHADER_BITS = 0xFFFFFFFF;
pub const GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB = 0x8B8A;
pub const GL_4PASS_3_SGIS = 0x80A7;
pub const GL_MAX_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x880E;
pub const GL_CON_28_ATI = 0x895D;
pub const GL_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x880A;
pub const GL_PIXEL_TEX_GEN_ALPHA_LS_SGIX = 0x8189;
pub const GL_4PASS_2_EXT = 0x80A6;
pub inline fn glMultiTexCoord2svARB(arg_2699: GLenum, arg_2700: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord2svARB.?(arg_2699, arg_2700);
}
pub inline fn glGetnSeparableFilter(arg_2701: GLenum, arg_2702: GLenum, arg_2703: GLenum, arg_2704: GLsizei, arg_2705: ?*c_void, arg_2706: GLsizei, arg_2707: ?*c_void, arg_2708: ?*c_void) void {
    return epoxy_glGetnSeparableFilter.?(arg_2701, arg_2702, arg_2703, arg_2704, arg_2705, arg_2706, arg_2707, arg_2708);
}
pub const GL_MODELVIEW6_ARB = 0x8726;
pub const __PTRDIFF_WIDTH__ = 64;
pub const GL_TEXTURE_BUFFER_ARB = 0x8C2A;
pub const GL_RGB = 0x1907;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9276;
pub const __INT_LEAST16_FMTd__ = "hd";
pub inline fn glGetVertexArrayPointeri_vEXT(arg_2709: GLuint, arg_2710: GLuint, arg_2711: GLenum, arg_2712: [*c]?*c_void) void {
    return epoxy_glGetVertexArrayPointeri_vEXT.?(arg_2709, arg_2710, arg_2711, arg_2712);
}
pub const __UINT_LEAST16_FMTu__ = "hu";
pub inline fn glVertexBlendARB(arg_2713: GLint) void {
    return epoxy_glVertexBlendARB.?(arg_2713);
}
pub const GL_LUMINANCE4_ALPHA4 = 0x8043;
pub inline fn glGetDoublei_v(arg_2714: GLenum, arg_2715: GLuint, arg_2716: [*c]GLdouble) void {
    return epoxy_glGetDoublei_v.?(arg_2714, arg_2715, arg_2716);
}
pub const SCNiPTR = __PRIPTR_PREFIX ++ "i";
pub const GL_NV_read_depth = 1;
pub const GL_FOVEATION_SUBSAMPLED_LAYOUT_METHOD_BIT_QCOM = 0x00000004;
pub inline fn glTextureBufferRange(arg_2717: GLuint, arg_2718: GLenum, arg_2719: GLuint, arg_2720: GLintptr, arg_2721: GLsizeiptr) void {
    return epoxy_glTextureBufferRange.?(arg_2717, arg_2718, arg_2719, arg_2720, arg_2721);
}
pub const GL_FRAMEBUFFER_SRGB_EXT = 0x8DB9;
pub const GL_TEXTURE_BINDING_EXTERNAL_OES = 0x8D67;
pub inline fn glUniformui64NV(arg_2722: GLint, arg_2723: GLuint64EXT) void {
    return epoxy_glUniformui64NV.?(arg_2722, arg_2723);
}
pub const __FSBLKCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const GL_TEXTURE8_ARB = 0x84C8;
pub const GL_SAMPLE_BUFFERS_SGIS = 0x80A8;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_ARB = 0x824D;
pub const GL_MAP2_TANGENT_EXT = 0x8445;
pub inline fn glCompressedMultiTexImage1DEXT(arg_2724: GLenum, arg_2725: GLenum, arg_2726: GLint, arg_2727: GLenum, arg_2728: GLsizei, arg_2729: GLint, arg_2730: GLsizei, arg_2731: ?*const c_void) void {
    return epoxy_glCompressedMultiTexImage1DEXT.?(arg_2724, arg_2725, arg_2726, arg_2727, arg_2728, arg_2729, arg_2730, arg_2731);
}
pub const GL_RGBA16 = 0x805B;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS_EXT = 0x92D5;
pub const GL_IMAGE_CUBE = 0x9050;
pub const GL_VIEW_CLASS_ASTC_10x10_RGBA = 0x9393;
pub const GL_FOG_COORDINATE_SOURCE = 0x8450;
pub inline fn glVertexAttribP4uiv(arg_2732: GLuint, arg_2733: GLenum, arg_2734: GLboolean, arg_2735: [*c]const GLuint) void {
    return epoxy_glVertexAttribP4uiv.?(arg_2732, arg_2733, arg_2734, arg_2735);
}
pub const GL_COUNT_DOWN_NV = 0x9089;
pub inline fn glVertexAttrib4dv(arg_2736: GLuint, arg_2737: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib4dv.?(arg_2736, arg_2737);
}
pub inline fn glVertexStream3fATI(arg_2738: GLenum, arg_2739: GLfloat, arg_2740: GLfloat, arg_2741: GLfloat) void {
    return epoxy_glVertexStream3fATI.?(arg_2738, arg_2739, arg_2740, arg_2741);
}
pub const GL_DOT_PRODUCT_AFFINE_DEPTH_REPLACE_NV = 0x885D;
pub const GL_IMG_texture_compression_pvrtc2 = 1;
pub inline fn glReplacementCodeuiColor4fNormal3fVertex3fvSUN(arg_2742: [*c]const GLuint, arg_2743: [*c]const GLfloat, arg_2744: [*c]const GLfloat, arg_2745: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiColor4fNormal3fVertex3fvSUN.?(arg_2742, arg_2743, arg_2744, arg_2745);
}
pub const GL_PIXEL_FRAGMENT_ALPHA_SOURCE_SGIS = 0x8355;
pub inline fn glColorPointerListIBM(arg_2746: GLint, arg_2747: GLenum, arg_2748: GLint, arg_2749: [*c]?*const c_void, arg_2750: GLint) void {
    return epoxy_glColorPointerListIBM.?(arg_2746, arg_2747, arg_2748, arg_2749, arg_2750);
}
pub inline fn glMaxShaderCompilerThreadsKHR(arg_2751: GLuint) void {
    return epoxy_glMaxShaderCompilerThreadsKHR.?(arg_2751);
}
pub const __INT8_FMTi__ = "hhi";
pub inline fn glUniform4fARB(arg_2752: GLint, arg_2753: GLfloat, arg_2754: GLfloat, arg_2755: GLfloat, arg_2756: GLfloat) void {
    return epoxy_glUniform4fARB.?(arg_2752, arg_2753, arg_2754, arg_2755, arg_2756);
}
pub inline fn glClearNamedFramebufferfi(arg_2757: GLuint, arg_2758: GLenum, arg_2759: GLint, arg_2760: GLfloat, arg_2761: GLint) void {
    return epoxy_glClearNamedFramebufferfi.?(arg_2757, arg_2758, arg_2759, arg_2760, arg_2761);
}
pub const GL_OPERAND3_RGB_NV = 0x8593;
pub inline fn glUniform1ui64ARB(arg_2762: GLint, arg_2763: GLuint64) void {
    return epoxy_glUniform1ui64ARB.?(arg_2762, arg_2763);
}
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_NV = 0x8905;
pub const GL_COLOR_ATTACHMENT14_NV = 0x8CEE;
pub inline fn glProgramUniform1uiEXT(arg_2764: GLuint, arg_2765: GLint, arg_2766: GLuint) void {
    return epoxy_glProgramUniform1uiEXT.?(arg_2764, arg_2765, arg_2766);
}
pub inline fn glVertexAttrib1dvNV(arg_2767: GLuint, arg_2768: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib1dvNV.?(arg_2767, arg_2768);
}
pub const PRIXFAST32 = __PRIPTR_PREFIX ++ "X";
pub const __GCC_ATOMIC_LLONG_LOCK_FREE = 2;
pub const GL_MAX_ATTRIB_STACK_DEPTH = 0x0D35;
pub inline fn glMultiTexCoord1bvOES(arg_2769: GLenum, arg_2770: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord1bvOES.?(arg_2769, arg_2770);
}
pub const GL_EXT_texture_filter_anisotropic = 1;
pub const GL_COMBINER_MUX_SUM_NV = 0x8547;
pub const GL_COMPRESSED_RGBA_ASTC_6x5 = 0x93B3;
pub const GL_BLUE_INTEGER = 0x8D96;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_KMT_EXT = 0x9588;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE_ARB = 0x809E;
pub inline fn glTangent3iEXT(arg_2771: GLint, arg_2772: GLint, arg_2773: GLint) void {
    return epoxy_glTangent3iEXT.?(arg_2771, arg_2772, arg_2773);
}
pub const GL_NEGATIVE_W_EXT = 0x87DC;
pub const GL_GREEN_MAX_CLAMP_INGR = 0x8565;
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY = 0x9382;
pub const GL_LOAD = 0x0101;
pub inline fn glWeightPointerARB(arg_2774: GLint, arg_2775: GLenum, arg_2776: GLsizei, arg_2777: ?*const c_void) void {
    return epoxy_glWeightPointerARB.?(arg_2774, arg_2775, arg_2776, arg_2777);
}
pub const GL_ARB_vertex_type_10f_11f_11f_rev = 1;
pub inline fn glSpriteParameterfvSGIX(arg_2778: GLenum, arg_2779: [*c]const GLfloat) void {
    return epoxy_glSpriteParameterfvSGIX.?(arg_2778, arg_2779);
}
pub const GL_PERFQUERY_SINGLE_CONTEXT_INTEL = 0x00000000;
pub const GL_UNIFORM_ADDRESS_COMMAND_NV = 0x000A;
pub inline fn glVertexAttribI4ubv(arg_2780: GLuint, arg_2781: [*c]const GLubyte) void {
    return epoxy_glVertexAttribI4ubv.?(arg_2780, arg_2781);
}
pub const GL_MAT_SPECULAR_BIT_PGI = 0x04000000;
pub inline fn glProgramUniformMatrix2x3fvEXT(arg_2782: GLuint, arg_2783: GLint, arg_2784: GLsizei, arg_2785: GLboolean, arg_2786: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x3fvEXT.?(arg_2782, arg_2783, arg_2784, arg_2785, arg_2786);
}
pub const GL_PROXY_COLOR_TABLE_SGI = 0x80D3;
pub inline fn glScissor(arg_2787: GLint, arg_2788: GLint, arg_2789: GLsizei, arg_2790: GLsizei) void {
    return epoxy_glScissor.?(arg_2787, arg_2788, arg_2789, arg_2790);
}
pub const GL_MIRROR_CLAMP_TO_EDGE = 0x8743;
pub const GL_OUTPUT_TEXTURE_COORD21_EXT = 0x87B2;
pub inline fn glBindBufferARB(arg_2791: GLenum, arg_2792: GLuint) void {
    return epoxy_glBindBufferARB.?(arg_2791, arg_2792);
}
pub const GL_PIXEL_TEX_GEN_ALPHA_MS_SGIX = 0x818A;
pub inline fn glWindowPos2iMESA(arg_2793: GLint, arg_2794: GLint) void {
    return epoxy_glWindowPos2iMESA.?(arg_2793, arg_2794);
}
pub const GL_COLOR_ENCODING = 0x8296;
pub const GL_MANUAL_GENERATE_MIPMAP = 0x8294;
pub const GL_IMAGE_CUBE_MAP_ARRAY_OES = 0x9054;
pub const GL_CLEAR_TEXTURE = 0x9365;
pub const GL_MAX_CLIP_PLANES = 0x0D32;
pub inline fn glMatrixOrthoEXT(arg_2795: GLenum, arg_2796: GLdouble, arg_2797: GLdouble, arg_2798: GLdouble, arg_2799: GLdouble, arg_2800: GLdouble, arg_2801: GLdouble) void {
    return epoxy_glMatrixOrthoEXT.?(arg_2795, arg_2796, arg_2797, arg_2798, arg_2799, arg_2800, arg_2801);
}
pub const GL_POINT = 0x1B00;
pub const GL_SKIP_COMPONENTS4_NV = -3;
pub const PRIdLEAST64 = __PRI64_PREFIX ++ "d";
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8DDF;
pub const GL_MAP_INVALIDATE_BUFFER_BIT = 0x0008;
pub inline fn glVertexWeighthNV(arg_2802: GLhalfNV) void {
    return epoxy_glVertexWeighthNV.?(arg_2802);
}
pub inline fn glGetFixedvOES(arg_2803: GLenum, arg_2804: [*c]GLfixed) void {
    return epoxy_glGetFixedvOES.?(arg_2803, arg_2804);
}
pub const GL_EXT_external_buffer = 1;
pub inline fn glMultiTexCoord2d(arg_2805: GLenum, arg_2806: GLdouble, arg_2807: GLdouble) void {
    return epoxy_glMultiTexCoord2d.?(arg_2805, arg_2806, arg_2807);
}
pub inline fn glReplacementCodePointerSUN(arg_2808: GLenum, arg_2809: GLsizei, arg_2810: [*c]?*const c_void) void {
    return epoxy_glReplacementCodePointerSUN.?(arg_2808, arg_2809, arg_2810);
}
pub const __USECONDS_T_TYPE = __U32_TYPE;
pub const GL_DST_OVER_NV = 0x9289;
pub const GL_APPLE_flush_buffer_range = 1;
pub const GL_SCISSOR_BOX_EXCLUSIVE_NV = 0x9556;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR = 0x93D6;
pub const GL_TEXTURE_3D_OES = 0x806F;
pub inline fn glTexCoord2dv(arg_2811: [*c]const GLdouble) void {
    return epoxy_glTexCoord2dv.?(arg_2811);
}
pub const GL_EXT_debug_label = 1;
pub inline fn glFrustumfOES(arg_2812: GLfloat, arg_2813: GLfloat, arg_2814: GLfloat, arg_2815: GLfloat, arg_2816: GLfloat, arg_2817: GLfloat) void {
    return epoxy_glFrustumfOES.?(arg_2812, arg_2813, arg_2814, arg_2815, arg_2816, arg_2817);
}
pub const GL_LIST_BIT = 0x00020000;
pub const GL_NV_blend_square = 1;
pub inline fn glPointParameterf(arg_2818: GLenum, arg_2819: GLfloat) void {
    return epoxy_glPointParameterf.?(arg_2818, arg_2819);
}
pub const GL_TRANSFORM_FEEDBACK_VARYINGS = 0x8C83;
pub inline fn glListParameterivSGIX(arg_2820: GLuint, arg_2821: GLenum, arg_2822: [*c]const GLint) void {
    return epoxy_glListParameterivSGIX.?(arg_2820, arg_2821, arg_2822);
}
pub inline fn glPixelDataRangeNV(arg_2823: GLenum, arg_2824: GLsizei, arg_2825: ?*const c_void) void {
    return epoxy_glPixelDataRangeNV.?(arg_2823, arg_2824, arg_2825);
}
pub inline fn glColorMaskIndexedEXT(arg_2826: GLuint, arg_2827: GLboolean, arg_2828: GLboolean, arg_2829: GLboolean, arg_2830: GLboolean) void {
    return epoxy_glColorMaskIndexedEXT.?(arg_2826, arg_2827, arg_2828, arg_2829, arg_2830);
}
pub const GL_VERSION_4_3 = 1;
pub const UINT_LEAST32_MAX = @as(c_uint, 4294967295);
pub const GL_VERTEX_WEIGHT_ARRAY_SIZE_EXT = 0x850D;
pub inline fn glBlendColorxOES(arg_2831: GLfixed, arg_2832: GLfixed, arg_2833: GLfixed, arg_2834: GLfixed) void {
    return epoxy_glBlendColorxOES.?(arg_2831, arg_2832, arg_2833, arg_2834);
}
pub const GL_SCALE_BY_FOUR_NV = 0x853F;
pub const GL_ARB_vertex_blend = 1;
pub const GL_POST_CONVOLUTION_RED_BIAS_EXT = 0x8020;
pub const GL_QUERY_COUNTER_BITS_EXT = 0x8864;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_16 = 1;
pub inline fn glVertexAttribL4dvEXT(arg_2835: GLuint, arg_2836: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL4dvEXT.?(arg_2835, arg_2836);
}
pub inline fn glVertexStream4dvATI(arg_2837: GLenum, arg_2838: [*c]const GLdouble) void {
    return epoxy_glVertexStream4dvATI.?(arg_2837, arg_2838);
}
pub const __DEV_T_TYPE = __UQUAD_TYPE;
pub const __SIZEOF_INT__ = 4;
pub const GL_COLOR_FLOAT_APPLE = 0x8A0F;
pub inline fn glDrawRangeElements(arg_2839: GLenum, arg_2840: GLuint, arg_2841: GLuint, arg_2842: GLsizei, arg_2843: GLenum, arg_2844: ?*const c_void) void {
    return epoxy_glDrawRangeElements.?(arg_2839, arg_2840, arg_2841, arg_2842, arg_2843, arg_2844);
}
pub const GL_OES_copy_image = 1;
pub const GL_4PASS_0_EXT = 0x80A4;
pub const GL_VERTICES_SUBMITTED_ARB = 0x82EE;
pub inline fn glClearDepthxOES(arg_2845: GLfixed) void {
    return epoxy_glClearDepthxOES.?(arg_2845);
}
pub const GL_TEXTURE29_ARB = 0x84DD;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS_OES = 0x886D;
pub const GL_PERFMON_RESULT_SIZE_AMD = 0x8BC5;
pub const GL_COMPRESSED_RGBA_ASTC_5x5 = 0x93B2;
pub inline fn glBindFramebuffer(arg_2846: GLenum, arg_2847: GLuint) void {
    return epoxy_glBindFramebuffer.?(arg_2846, arg_2847);
}
pub inline fn glBindMultiTextureEXT(arg_2848: GLenum, arg_2849: GLenum, arg_2850: GLuint) void {
    return epoxy_glBindMultiTextureEXT.?(arg_2848, arg_2849, arg_2850);
}
pub const GL_SIGNED_NORMALIZED = 0x8F9C;
pub const GL_ARB_explicit_uniform_location = 1;
pub const GL_OBJECT_TYPE = 0x9112;
pub inline fn glIsFramebuffer(arg_2851: GLuint) GLboolean {
    return epoxy_glIsFramebuffer.?(arg_2851);
}
pub const __SIZEOF_WCHAR_T__ = 4;
pub const __AVX__ = 1;
pub const GL_LINEARLIGHT_NV = 0x92A7;
pub inline fn glConvolutionParameterxOES(arg_2852: GLenum, arg_2853: GLenum, arg_2854: GLfixed) void {
    return epoxy_glConvolutionParameterxOES.?(arg_2852, arg_2853, arg_2854);
}
pub const GL_PATH_END_CAPS_NV = 0x9076;
pub const GL_PATCHES_OES = 0x000E;
pub const GL_EVAL_VERTEX_ATTRIB2_NV = 0x86C8;
pub const GL_QUERY_BUFFER_BINDING = 0x9193;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_OES = 0x8CD2;
pub inline fn glTexCoord3sv(arg_2855: [*c]const GLshort) void {
    return epoxy_glTexCoord3sv.?(arg_2855);
}
pub const GL_ROUND_NV = 0x90A4;
pub inline fn glCreateSamplers(arg_2856: GLsizei, arg_2857: [*c]GLuint) void {
    return epoxy_glCreateSamplers.?(arg_2856, arg_2857);
}
pub inline fn glVertexAttribL4i64vNV(arg_2858: GLuint, arg_2859: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL4i64vNV.?(arg_2858, arg_2859);
}
pub const GL_VIEW_CLASS_BPTC_FLOAT = 0x82D3;
pub const GL_MODELVIEW1_ARB = 0x850A;
pub const GL_DATA_BUFFER_AMD = 0x9151;
pub const GL_LIGHT_MODEL_COLOR_CONTROL_EXT = 0x81F8;
pub inline fn glUniform4ui64ARB(arg_2860: GLint, arg_2861: GLuint64, arg_2862: GLuint64, arg_2863: GLuint64, arg_2864: GLuint64) void {
    return epoxy_glUniform4ui64ARB.?(arg_2860, arg_2861, arg_2862, arg_2863, arg_2864);
}
pub inline fn glIsProgramPipeline(arg_2865: GLuint) GLboolean {
    return epoxy_glIsProgramPipeline.?(arg_2865);
}
pub const GL_SAMPLE_ALPHA_TO_ONE_SGIS = 0x809F;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5 = 0x93D8;
pub inline fn glCheckFramebufferStatusEXT(arg_2866: GLenum) GLenum {
    return epoxy_glCheckFramebufferStatusEXT.?(arg_2866);
}
pub const GL_BUFFER_OBJECT_APPLE = 0x85B3;
pub inline fn glGetNamedStringARB(arg_2867: GLint, arg_2868: [*c]const GLchar, arg_2869: GLsizei, arg_2870: [*c]GLint, arg_2871: [*c]GLchar) void {
    return epoxy_glGetNamedStringARB.?(arg_2867, arg_2868, arg_2869, arg_2870, arg_2871);
}
pub const GL_TEXTURE_2D_ARRAY_EXT = 0x8C1A;
pub inline fn glIsBuffer(arg_2872: GLuint) GLboolean {
    return epoxy_glIsBuffer.?(arg_2872);
}
pub const GL_NEVER = 0x0200;
pub const GL_REG_20_ATI = 0x8935;
pub inline fn glDrawElementsInstancedBaseVertexEXT(arg_2873: GLenum, arg_2874: GLsizei, arg_2875: GLenum, arg_2876: ?*const c_void, arg_2877: GLsizei, arg_2878: GLint) void {
    return epoxy_glDrawElementsInstancedBaseVertexEXT.?(arg_2873, arg_2874, arg_2875, arg_2876, arg_2877, arg_2878);
}
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS = 0x8E86;
pub const GL_GCCSO_SHADER_BINARY_FJ = 0x9260;
pub inline fn glMultiTexCoord3sARB(arg_2879: GLenum, arg_2880: GLshort, arg_2881: GLshort, arg_2882: GLshort) void {
    return epoxy_glMultiTexCoord3sARB.?(arg_2879, arg_2880, arg_2881, arg_2882);
}
pub inline fn glImportMemoryFdEXT(arg_2883: GLuint, arg_2884: GLuint64, arg_2885: GLenum, arg_2886: GLint) void {
    return epoxy_glImportMemoryFdEXT.?(arg_2883, arg_2884, arg_2885, arg_2886);
}
pub const GL_INDEX_ARRAY_POINTER = 0x8091;
pub const GL_EXT_framebuffer_multisample_blit_scaled = 1;
pub const GL_DRAW_BUFFER4 = 0x8829;
pub const GL_COMPRESSED_RGBA8_ETC2_EAC = 0x9278;
pub inline fn glGetProgramResourceName(arg_2887: GLuint, arg_2888: GLenum, arg_2889: GLuint, arg_2890: GLsizei, arg_2891: [*c]GLsizei, arg_2892: [*c]GLchar) void {
    return epoxy_glGetProgramResourceName.?(arg_2887, arg_2888, arg_2889, arg_2890, arg_2891, arg_2892);
}
pub const GL_DEBUG_SOURCE_API = 0x8246;
pub const GL_NORMALIZED_RANGE_EXT = 0x87E0;
pub const GL_ALPHA32I_EXT = 0x8D84;
pub const GL_REPLACE_OLDEST_SUN = 0x0003;
pub const GL_SRG8_EXT = 0x8FBE;
pub inline fn glProgramUniform2uiEXT(arg_2893: GLuint, arg_2894: GLint, arg_2895: GLuint, arg_2896: GLuint) void {
    return epoxy_glProgramUniform2uiEXT.?(arg_2893, arg_2894, arg_2895, arg_2896);
}
pub const GL_INT_IMAGE_3D = 0x9059;
pub inline fn glMapTexture2DINTEL(arg_2897: GLuint, arg_2898: GLint, arg_2899: GLbitfield, arg_2900: [*c]GLint, arg_2901: [*c]GLenum) ?*c_void {
    return epoxy_glMapTexture2DINTEL.?(arg_2897, arg_2898, arg_2899, arg_2900, arg_2901);
}
pub inline fn glSamplerParameterIuivEXT(arg_2902: GLuint, arg_2903: GLenum, arg_2904: [*c]const GLuint) void {
    return epoxy_glSamplerParameterIuivEXT.?(arg_2902, arg_2903, arg_2904);
}
pub inline fn glDiscardFramebufferEXT(arg_2905: GLenum, arg_2906: GLsizei, arg_2907: [*c]const GLenum) void {
    return epoxy_glDiscardFramebufferEXT.?(arg_2905, arg_2906, arg_2907);
}
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTER_INDICES = 0x92C6;
pub inline fn glProgramUniformMatrix3fvEXT(arg_2908: GLuint, arg_2909: GLint, arg_2910: GLsizei, arg_2911: GLboolean, arg_2912: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3fvEXT.?(arg_2908, arg_2909, arg_2910, arg_2911, arg_2912);
}
pub const GL_EXT_semaphore_fd = 1;
pub inline fn glGetTextureSubImage(arg_2913: GLuint, arg_2914: GLint, arg_2915: GLint, arg_2916: GLint, arg_2917: GLint, arg_2918: GLsizei, arg_2919: GLsizei, arg_2920: GLsizei, arg_2921: GLenum, arg_2922: GLenum, arg_2923: GLsizei, arg_2924: ?*c_void) void {
    return epoxy_glGetTextureSubImage.?(arg_2913, arg_2914, arg_2915, arg_2916, arg_2917, arg_2918, arg_2919, arg_2920, arg_2921, arg_2922, arg_2923, arg_2924);
}
pub inline fn glPointParameterfvSGIS(arg_2925: GLenum, arg_2926: [*c]const GLfloat) void {
    return epoxy_glPointParameterfvSGIS.?(arg_2925, arg_2926);
}
pub const GL_ATTRIB_ARRAY_POINTER_NV = 0x8645;
pub inline fn glViewportPositionWScaleNV(arg_2927: GLuint, arg_2928: GLfloat, arg_2929: GLfloat) void {
    return epoxy_glViewportPositionWScaleNV.?(arg_2927, arg_2928, arg_2929);
}
pub const GL_ACTIVE_ATTRIBUTE_MAX_LENGTH = 0x8B8A;
pub inline fn glColorTableParameterivSGI(arg_2930: GLenum, arg_2931: GLenum, arg_2932: [*c]const GLint) void {
    return epoxy_glColorTableParameterivSGI.?(arg_2930, arg_2931, arg_2932);
}
pub const GL_MAX_4D_TEXTURE_SIZE_SGIS = 0x8138;
pub const GL_TEXTURE_BUFFER_SIZE_EXT = 0x919E;
pub const GL_DEPTH_TEXTURE_MODE = 0x884B;
pub const GL_COLOR_ARRAY_TYPE_EXT = 0x8082;
pub inline fn glTexBufferRange(arg_2933: GLenum, arg_2934: GLenum, arg_2935: GLuint, arg_2936: GLintptr, arg_2937: GLsizeiptr) void {
    return epoxy_glTexBufferRange.?(arg_2933, arg_2934, arg_2935, arg_2936, arg_2937);
}
pub const GL_TEXTURE20 = 0x84D4;
pub inline fn glGetPathMetricsNV(arg_2938: GLbitfield, arg_2939: GLsizei, arg_2940: GLenum, arg_2941: ?*const c_void, arg_2942: GLuint, arg_2943: GLsizei, arg_2944: [*c]GLfloat) void {
    return epoxy_glGetPathMetricsNV.?(arg_2938, arg_2939, arg_2940, arg_2941, arg_2942, arg_2943, arg_2944);
}
pub inline fn glBlendEquationIndexedAMD(arg_2945: GLuint, arg_2946: GLenum) void {
    return epoxy_glBlendEquationIndexedAMD.?(arg_2945, arg_2946);
}
pub inline fn glMultiDrawArraysIndirectCountARB(arg_2947: GLenum, arg_2948: ?*const c_void, arg_2949: GLintptr, arg_2950: GLsizei, arg_2951: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectCountARB.?(arg_2947, arg_2948, arg_2949, arg_2950, arg_2951);
}
pub inline fn glProgramBufferParametersfvNV(arg_2952: GLenum, arg_2953: GLuint, arg_2954: GLuint, arg_2955: GLsizei, arg_2956: [*c]const GLfloat) void {
    return epoxy_glProgramBufferParametersfvNV.?(arg_2952, arg_2953, arg_2954, arg_2955, arg_2956);
}
pub const SCNxPTR = __PRIPTR_PREFIX ++ "x";
pub const GL_ANGLE_pack_reverse_row_order = 1;
pub inline fn glDrawArraysInstanced(arg_2957: GLenum, arg_2958: GLint, arg_2959: GLsizei, arg_2960: GLsizei) void {
    return epoxy_glDrawArraysInstanced.?(arg_2957, arg_2958, arg_2959, arg_2960);
}
pub const GL_RGBA16F = 0x881A;
pub const GL_VERTEX_PRECLIP_HINT_SGIX = 0x83EF;
pub const GL_MESH_OUTPUT_TYPE_NV = 0x957B;
pub inline fn glProgramBinaryOES(arg_2961: GLuint, arg_2962: GLenum, arg_2963: ?*const c_void, arg_2964: GLint) void {
    return epoxy_glProgramBinaryOES.?(arg_2961, arg_2962, arg_2963, arg_2964);
}
pub inline fn glCreateBuffers(arg_2965: GLsizei, arg_2966: [*c]GLuint) void {
    return epoxy_glCreateBuffers.?(arg_2965, arg_2966);
}
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB = 0x8B4D;
pub const GL_TRANSLATE_Y_NV = 0x908F;
pub const GL_WIN_phong_shading = 1;
pub const PRId32 = "d";
pub const GL_COLOR_ATTACHMENT27 = 0x8CFB;
pub const GL_DRAW_BUFFER1_ARB = 0x8826;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING = 0x889B;
pub inline fn glDeleteTransformFeedbacksNV(arg_2967: GLsizei, arg_2968: [*c]const GLuint) void {
    return epoxy_glDeleteTransformFeedbacksNV.?(arg_2967, arg_2968);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_SCALE_IMG = 0x913F;
pub const GL_GREEN_INTEGER_EXT = 0x8D95;
pub const GL_PATH_GEN_COMPONENTS_NV = 0x90B3;
pub const GL_MEMORY_ATTACHABLE_ALIGNMENT_NV = 0x95A6;
pub inline fn glGetNamedBufferPointervEXT(arg_2969: GLuint, arg_2970: GLenum, arg_2971: [*c]?*c_void) void {
    return epoxy_glGetNamedBufferPointervEXT.?(arg_2969, arg_2970, arg_2971);
}
pub const __OPENCL_MEMORY_SCOPE_DEVICE = 2;
pub const GL_OPERAND1_RGB_EXT = 0x8591;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_EXT = 0x8C83;
pub const GL_FULL_SUPPORT = 0x82B7;
pub const __STDC_IEC_559_COMPLEX__ = 1;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT = 0x00000020;
pub const GL_SCISSOR_TEST_EXCLUSIVE_NV = 0x9555;
pub inline fn glUniform3ui64ARB(arg_2972: GLint, arg_2973: GLuint64, arg_2974: GLuint64, arg_2975: GLuint64) void {
    return epoxy_glUniform3ui64ARB.?(arg_2972, arg_2973, arg_2974, arg_2975);
}
pub const GL_INT_IMAGE_3D_EXT = 0x9059;
pub inline fn glColor4b(arg_2976: GLbyte, arg_2977: GLbyte, arg_2978: GLbyte, arg_2979: GLbyte) void {
    return epoxy_glColor4b.?(arg_2976, arg_2977, arg_2978, arg_2979);
}
pub const GL_OPERAND0_ALPHA_EXT = 0x8598;
pub const GL_RGB32F_EXT = 0x8815;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E7F;
pub inline fn glGetProgramiv(arg_2980: GLuint, arg_2981: GLenum, arg_2982: [*c]GLint) void {
    return epoxy_glGetProgramiv.?(arg_2980, arg_2981, arg_2982);
}
pub inline fn glTexSubImage2D(arg_2983: GLenum, arg_2984: GLint, arg_2985: GLint, arg_2986: GLint, arg_2987: GLsizei, arg_2988: GLsizei, arg_2989: GLenum, arg_2990: GLenum, arg_2991: ?*const c_void) void {
    return epoxy_glTexSubImage2D.?(arg_2983, arg_2984, arg_2985, arg_2986, arg_2987, arg_2988, arg_2989, arg_2990, arg_2991);
}
pub const GL_EXT_light_texture = 1;
pub inline fn glVertexAttrib4sARB(arg_2992: GLuint, arg_2993: GLshort, arg_2994: GLshort, arg_2995: GLshort, arg_2996: GLshort) void {
    return epoxy_glVertexAttrib4sARB.?(arg_2992, arg_2993, arg_2994, arg_2995, arg_2996);
}
pub const GL_MAX_FRAMEZOOM_FACTOR_SGIX = 0x818D;
pub inline fn glWindowPos3ivARB(arg_2997: [*c]const GLint) void {
    return epoxy_glWindowPos3ivARB.?(arg_2997);
}
pub inline fn glGetPathParameterfvNV(arg_2998: GLuint, arg_2999: GLenum, arg_3000: [*c]GLfloat) void {
    return epoxy_glGetPathParameterfvNV.?(arg_2998, arg_2999, arg_3000);
}
pub inline fn glVertexAttribI4uiv(arg_3001: GLuint, arg_3002: [*c]const GLuint) void {
    return epoxy_glVertexAttribI4uiv.?(arg_3001, arg_3002);
}
pub inline fn glIsRenderbufferEXT(arg_3003: GLuint) GLboolean {
    return epoxy_glIsRenderbufferEXT.?(arg_3003);
}
pub inline fn glDrawElementsInstancedANGLE(arg_3004: GLenum, arg_3005: GLsizei, arg_3006: GLenum, arg_3007: ?*const c_void, arg_3008: GLsizei) void {
    return epoxy_glDrawElementsInstancedANGLE.?(arg_3004, arg_3005, arg_3006, arg_3007, arg_3008);
}
pub const GL_COLOR_TABLE_INTENSITY_SIZE_SGI = 0x80DF;
pub inline fn glGetTexGenivOES(arg_3009: GLenum, arg_3010: GLenum, arg_3011: [*c]GLint) void {
    return epoxy_glGetTexGenivOES.?(arg_3009, arg_3010, arg_3011);
}
pub inline fn glVertexAttribI3ivEXT(arg_3012: GLuint, arg_3013: [*c]const GLint) void {
    return epoxy_glVertexAttribI3ivEXT.?(arg_3012, arg_3013);
}
pub inline fn glDeleteQueriesEXT(arg_3014: GLsizei, arg_3015: [*c]const GLuint) void {
    return epoxy_glDeleteQueriesEXT.?(arg_3014, arg_3015);
}
pub const GL_EXT_texture_compression_dxt1 = 1;
pub const GL_RASTERIZER_DISCARD_EXT = 0x8C89;
pub const GL_STENCIL_INDEX1_EXT = 0x8D46;
pub const GL_SAMPLER_BUFFER = 0x8DC2;
pub const GL_OP_MUL_EXT = 0x8786;
pub const GL_OP_SUB_EXT = 0x8796;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_NV = 0x8C8E;
pub const GL_MODELVIEW0_ARB = 0x1700;
pub inline fn glVertexAttribL1dvEXT(arg_3016: GLuint, arg_3017: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL1dvEXT.?(arg_3016, arg_3017);
}
pub const GL_TEXTURE_INTENSITY_SIZE_EXT = 0x8061;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_BINDING_NV = 0x8C8F;
pub inline fn glPointSizex(arg_3018: GLfixed) void {
    return epoxy_glPointSizex.?(arg_3018);
}
pub inline fn glCheckNamedFramebufferStatusEXT(arg_3019: GLuint, arg_3020: GLenum) GLenum {
    return epoxy_glCheckNamedFramebufferStatusEXT.?(arg_3019, arg_3020);
}
pub const GL_INT_IMAGE_BUFFER = 0x905C;
pub inline fn glVertexAttribI4ivEXT(arg_3021: GLuint, arg_3022: [*c]const GLint) void {
    return epoxy_glVertexAttribI4ivEXT.?(arg_3021, arg_3022);
}
pub const GL_OUTPUT_TEXTURE_COORD11_EXT = 0x87A8;
pub const GL_4PASS_2_SGIS = 0x80A6;
pub const GL_NEGATIVE_Y_EXT = 0x87DA;
pub const GL_INVARIANT_EXT = 0x87C2;
pub inline fn glVertex4i(arg_3023: GLint, arg_3024: GLint, arg_3025: GLint, arg_3026: GLint) void {
    return epoxy_glVertex4i.?(arg_3023, arg_3024, arg_3025, arg_3026);
}
pub const GL_MIRROR_CLAMP_ATI = 0x8742;
pub const GL_SGIX_ycrcb_subsample = 1;
pub const GL_ARM_rgba8 = 1;
pub const GL_WEIGHT_ARRAY_SIZE_OES = 0x86AB;
pub inline fn glTexGenivOES(arg_3027: GLenum, arg_3028: GLenum, arg_3029: [*c]const GLint) void {
    return epoxy_glTexGenivOES.?(arg_3027, arg_3028, arg_3029);
}
pub inline fn glNewList(arg_3030: GLuint, arg_3031: GLenum) void {
    return epoxy_glNewList.?(arg_3030, arg_3031);
}
pub const GL_SAMPLER_3D_OES = 0x8B5F;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_EXT = 0x900A;
pub const GL_MULTISAMPLE_BUFFER_BIT7_QCOM = 0x80000000;
pub const GL_IMAGE_PIXEL_TYPE = 0x82AA;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS = 0x86A2;
pub const GL_OUTPUT_TEXTURE_COORD24_EXT = 0x87B5;
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE_ARB = 0x9381;
pub const GL_MAX_VERTEX_ATTRIB_BINDINGS = 0x82DA;
pub const GL_NUM_VIRTUAL_PAGE_SIZES_ARB = 0x91A8;
pub const GL_VIDEO_COLOR_CONVERSION_MAX_NV = 0x902A;
pub inline fn glGetActiveUniformARB(arg_3032: GLhandleARB, arg_3033: GLuint, arg_3034: GLsizei, arg_3035: [*c]GLsizei, arg_3036: [*c]GLint, arg_3037: [*c]GLenum, arg_3038: [*c]GLcharARB) void {
    return epoxy_glGetActiveUniformARB.?(arg_3032, arg_3033, arg_3034, arg_3035, arg_3036, arg_3037, arg_3038);
}
pub const GL_SOURCE2_RGB = 0x8582;
pub const GL_PALETTE8_RGB5_A1_OES = 0x8B99;
pub inline fn glNormal3xOES(arg_3039: GLfixed, arg_3040: GLfixed, arg_3041: GLfixed) void {
    return epoxy_glNormal3xOES.?(arg_3039, arg_3040, arg_3041);
}
pub const GL_DOT_PRODUCT_NV = 0x86EC;
pub inline fn glTexGeniv(arg_3042: GLenum, arg_3043: GLenum, arg_3044: [*c]const GLint) void {
    return epoxy_glTexGeniv.?(arg_3042, arg_3043, arg_3044);
}
pub const GL_VERTEX_ATTRIB_ARRAY2_NV = 0x8652;
pub inline fn glViewportIndexedfNV(arg_3045: GLuint, arg_3046: GLfloat, arg_3047: GLfloat, arg_3048: GLfloat, arg_3049: GLfloat) void {
    return epoxy_glViewportIndexedfNV.?(arg_3045, arg_3046, arg_3047, arg_3048, arg_3049);
}
pub const GL_STATIC_VERTEX_ARRAY_IBM = 103061;
pub const GL_PACK_ROW_LENGTH = 0x0D02;
pub const GL_OBJECT_LINEAR_NV = 0x2401;
pub const GL_TEXTURE23 = 0x84D7;
pub const GL_INTERPOLATE_ARB = 0x8575;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS = 0x90D7;
pub const GL_MAX_FOG_FUNC_POINTS_SGIS = 0x812C;
pub inline fn glTexRenderbufferNV(arg_3050: GLenum, arg_3051: GLuint) void {
    return epoxy_glTexRenderbufferNV.?(arg_3050, arg_3051);
}
pub const GL_OES_viewport_array = 1;
pub const GL_NV_sample_locations = 1;
pub inline fn glWindowPos2iARB(arg_3052: GLint, arg_3053: GLint) void {
    return epoxy_glWindowPos2iARB.?(arg_3052, arg_3053);
}
pub const GL_SUBSAMPLE_DISTANCE_AMD = 0x883F;
pub const GL_ATC_RGB_AMD = 0x8C92;
pub const GL_EXT_texture_norm16 = 1;
pub inline fn glDrawBuffersEXT(arg_3054: GLsizei, arg_3055: [*c]const GLenum) void {
    return epoxy_glDrawBuffersEXT.?(arg_3054, arg_3055);
}
pub const GL_TEXTURE_CLIPMAP_OFFSET_SGIX = 0x8173;
pub inline fn glScissorIndexedvOES(arg_3056: GLuint, arg_3057: [*c]const GLint) void {
    return epoxy_glScissorIndexedvOES.?(arg_3056, arg_3057);
}
pub inline fn glVertexAttrib1fvNV(arg_3058: GLuint, arg_3059: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib1fvNV.?(arg_3058, arg_3059);
}
pub const GL_TEXTURE_MAG_FILTER = 0x2800;
pub inline fn glRasterPos2xOES(arg_3060: GLfixed, arg_3061: GLfixed) void {
    return epoxy_glRasterPos2xOES.?(arg_3060, arg_3061);
}
pub inline fn glTexParameteri(arg_3062: GLenum, arg_3063: GLenum, arg_3064: GLint) void {
    return epoxy_glTexParameteri.?(arg_3062, arg_3063, arg_3064);
}
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE = 0x80B7;
pub const PRIdMAX = __PRI64_PREFIX ++ "d";
pub const GL_TRACK_MATRIX_NV = 0x8648;
pub const GL_TEXTURE_BINDING_CUBE_MAP_EXT = 0x8514;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_ARB = 0x933F;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT = 0;
pub const GL_UNSIGNED_INT8_NV = 0x8FEC;
pub const __DBL_HAS_QUIET_NAN__ = 1;
pub const __clang_minor__ = 0;
pub inline fn glGetMultiTexEnvivEXT(arg_3065: GLenum, arg_3066: GLenum, arg_3067: GLenum, arg_3068: [*c]GLint) void {
    return epoxy_glGetMultiTexEnvivEXT.?(arg_3065, arg_3066, arg_3067, arg_3068);
}
pub const GL_OUTPUT_TEXTURE_COORD19_EXT = 0x87B0;
pub const GL_MAX_CLIP_DISTANCES_EXT = 0x0D32;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_OES = 0x8E75;
pub inline fn glTexSubImage3D(arg_3069: GLenum, arg_3070: GLint, arg_3071: GLint, arg_3072: GLint, arg_3073: GLint, arg_3074: GLsizei, arg_3075: GLsizei, arg_3076: GLsizei, arg_3077: GLenum, arg_3078: GLenum, arg_3079: ?*const c_void) void {
    return epoxy_glTexSubImage3D.?(arg_3069, arg_3070, arg_3071, arg_3072, arg_3073, arg_3074, arg_3075, arg_3076, arg_3077, arg_3078, arg_3079);
}
pub const GL_SUN_convolution_border_modes = 1;
pub const GL_TEXTURE_GREEN_SIZE_EXT = 0x805D;
pub inline fn glBeginVideoCaptureNV(arg_3080: GLuint) void {
    return epoxy_glBeginVideoCaptureNV.?(arg_3080);
}
pub const GL_BUFFER_MAPPED_ARB = 0x88BC;
pub inline fn glCopyConvolutionFilter1DEXT(arg_3081: GLenum, arg_3082: GLenum, arg_3083: GLint, arg_3084: GLint, arg_3085: GLsizei) void {
    return epoxy_glCopyConvolutionFilter1DEXT.?(arg_3081, arg_3082, arg_3083, arg_3084, arg_3085);
}
pub inline fn glFragmentLightivSGIX(arg_3086: GLenum, arg_3087: GLenum, arg_3088: [*c]const GLint) void {
    return epoxy_glFragmentLightivSGIX.?(arg_3086, arg_3087, arg_3088);
}
pub const GL_SOURCE2_RGB_ARB = 0x8582;
pub const GL_NV_blend_equation_advanced = 1;
pub const GL_BEVEL_NV = 0x90A6;
pub inline fn glGetBufferParameterui64vNV(arg_3089: GLenum, arg_3090: GLenum, arg_3091: [*c]GLuint64EXT) void {
    return epoxy_glGetBufferParameterui64vNV.?(arg_3089, arg_3090, arg_3091);
}
pub inline fn glCompressedTextureSubImage3D(arg_3092: GLuint, arg_3093: GLint, arg_3094: GLint, arg_3095: GLint, arg_3096: GLint, arg_3097: GLsizei, arg_3098: GLsizei, arg_3099: GLsizei, arg_3100: GLenum, arg_3101: GLsizei, arg_3102: ?*const c_void) void {
    return epoxy_glCompressedTextureSubImage3D.?(arg_3092, arg_3093, arg_3094, arg_3095, arg_3096, arg_3097, arg_3098, arg_3099, arg_3100, arg_3101, arg_3102);
}
pub const GL_CLIENT_VERTEX_ARRAY_BIT = 0x00000002;
pub inline fn glVertexAttribL2dEXT(arg_3103: GLuint, arg_3104: GLdouble, arg_3105: GLdouble) void {
    return epoxy_glVertexAttribL2dEXT.?(arg_3103, arg_3104, arg_3105);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x3x3_OES = 0x93E1;
pub const GL_RELATIVE_ROUNDED_RECT2_NV = 0xEB;
pub const GL_GEOMETRY_SUBROUTINE = 0x92EB;
pub inline fn glMap1d(arg_3106: GLenum, arg_3107: GLdouble, arg_3108: GLdouble, arg_3109: GLint, arg_3110: GLint, arg_3111: [*c]const GLdouble) void {
    return epoxy_glMap1d.?(arg_3106, arg_3107, arg_3108, arg_3109, arg_3110, arg_3111);
}
pub inline fn glVertexAttrib4svARB(arg_3112: GLuint, arg_3113: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4svARB.?(arg_3112, arg_3113);
}
pub inline fn glGetTransformFeedbackiv(arg_3114: GLuint, arg_3115: GLenum, arg_3116: [*c]GLint) void {
    return epoxy_glGetTransformFeedbackiv.?(arg_3114, arg_3115, arg_3116);
}
pub const GL_ARB_provoking_vertex = 1;
pub const GL_OBJECT_ATTACHED_OBJECTS_ARB = 0x8B85;
pub const GL_CPU_OPTIMIZED_QCOM = 0x8FB1;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_KHR = 0x8249;
pub inline fn glVertexStream4svATI(arg_3117: GLenum, arg_3118: [*c]const GLshort) void {
    return epoxy_glVertexStream4svATI.?(arg_3117, arg_3118);
}
pub const GL_ACTIVE_VERTEX_UNITS_ARB = 0x86A5;
pub inline fn __P(args: var) @TypeOf(args) {
    return args;
}
pub const GL_EXT_instanced_arrays = 1;
pub const __INO64_T_TYPE = __UQUAD_TYPE;
pub const GL_SURFACE_REGISTERED_NV = 0x86FD;
pub const GL_LUMINANCE_ALPHA_FLOAT32_APPLE = 0x8819;
pub const GL_MAX_EXT = 0x8008;
pub const GL_SGIX_shadow_ambient = 1;
pub inline fn glGetProgramResourceLocationIndex(arg_3119: GLuint, arg_3120: GLenum, arg_3121: [*c]const GLchar) GLint {
    return epoxy_glGetProgramResourceLocationIndex.?(arg_3119, arg_3120, arg_3121);
}
pub inline fn glEnableDriverControlQCOM(arg_3122: GLuint) void {
    return epoxy_glEnableDriverControlQCOM.?(arg_3122);
}
pub const GL_TRACE_PRIMITIVES_BIT_MESA = 0x0002;
pub inline fn glFramebufferTexture(arg_3123: GLenum, arg_3124: GLenum, arg_3125: GLuint, arg_3126: GLint) void {
    return epoxy_glFramebufferTexture.?(arg_3123, arg_3124, arg_3125, arg_3126);
}
pub const GL_ARB_cull_distance = 1;
pub const GL_DEPTH_BOUNDS_EXT = 0x8891;
pub const GL_DOUBLE_VEC2_EXT = 0x8FFC;
pub const GL_ARB_texture_mirror_clamp_to_edge = 1;
pub const GL_DOT3_RGB = 0x86AE;
pub const GL_STRICT_DEPTHFUNC_HINT_PGI = 0x1A216;
pub const GL_POINT_FADE_THRESHOLD_SIZE_ARB = 0x8128;
pub const __STDC_UTF_32__ = 1;
pub inline fn glGetPointervKHR(arg_3127: GLenum, arg_3128: [*c]?*c_void) void {
    return epoxy_glGetPointervKHR.?(arg_3127, arg_3128);
}
pub const GL_FRONT_AND_BACK = 0x0408;
pub inline fn glColor4ubVertex3fSUN(arg_3129: GLubyte, arg_3130: GLubyte, arg_3131: GLubyte, arg_3132: GLubyte, arg_3133: GLfloat, arg_3134: GLfloat, arg_3135: GLfloat) void {
    return epoxy_glColor4ubVertex3fSUN.?(arg_3129, arg_3130, arg_3131, arg_3132, arg_3133, arg_3134, arg_3135);
}
pub const GL_NO_RESET_NOTIFICATION_KHR = 0x8261;
pub const GL_SYNC_STATUS = 0x9114;
pub const GL_VERTEX_ATTRIB_ARRAY_TYPE = 0x8625;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_ARB = 0x8E5F;
pub const GL_CLIP_PLANE0 = 0x3000;
pub inline fn glUniform4i64vARB(arg_3136: GLint, arg_3137: GLsizei, arg_3138: [*c]const GLint64) void {
    return epoxy_glUniform4i64vARB.?(arg_3136, arg_3137, arg_3138);
}
pub const GL_OBJECT_VALIDATE_STATUS_ARB = 0x8B83;
pub const GL_PN_TRIANGLES_ATI = 0x87F0;
pub const GL_COMBINE = 0x8570;
pub const GL_SAMPLER_2D = 0x8B5E;
pub const GL_FLOAT_MAT3 = 0x8B5B;
pub const GL_NV_shadow_samplers_array = 1;
pub inline fn glMatrixIndexPointerARB(arg_3139: GLint, arg_3140: GLenum, arg_3141: GLsizei, arg_3142: ?*const c_void) void {
    return epoxy_glMatrixIndexPointerARB.?(arg_3139, arg_3140, arg_3141, arg_3142);
}
pub const GL_RENDERBUFFER_COLOR_SAMPLES_NV = 0x8E10;
pub inline fn glVertexAttrib2dARB(arg_3143: GLuint, arg_3144: GLdouble, arg_3145: GLdouble) void {
    return epoxy_glVertexAttrib2dARB.?(arg_3143, arg_3144, arg_3145);
}
pub const GL_PRIMARY_COLOR_EXT = 0x8577;
pub const __FLT_DIG__ = 6;
pub inline fn glGetVertexAttribiv(arg_3146: GLuint, arg_3147: GLenum, arg_3148: [*c]GLint) void {
    return epoxy_glGetVertexAttribiv.?(arg_3146, arg_3147, arg_3148);
}
pub const GL_DEBUG_SEVERITY_NOTIFICATION = 0x826B;
pub inline fn glVertex3xvOES(arg_3149: [*c]const GLfixed) void {
    return epoxy_glVertex3xvOES.?(arg_3149);
}
pub inline fn glVertexAttrib4hvNV(arg_3150: GLuint, arg_3151: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib4hvNV.?(arg_3150, arg_3151);
}
pub inline fn glVertexArrayVertexAttribDivisorEXT(arg_3152: GLuint, arg_3153: GLuint, arg_3154: GLuint) void {
    return epoxy_glVertexArrayVertexAttribDivisorEXT.?(arg_3152, arg_3153, arg_3154);
}
pub const GL_DOUBLE_VEC4_EXT = 0x8FFE;
pub const GL_SHADING_RATE_1_INVOCATION_PER_PIXEL_NV = 0x9565;
pub const GL_PALETTE8_RGBA4_OES = 0x8B98;
pub inline fn glBindVertexBuffer(arg_3155: GLuint, arg_3156: GLuint, arg_3157: GLintptr, arg_3158: GLsizei) void {
    return epoxy_glBindVertexBuffer.?(arg_3155, arg_3156, arg_3157, arg_3158);
}
pub const GL_DEBUG_SOURCE_SHADER_COMPILER = 0x8248;
pub const GL_QCOM_driver_control = 1;
pub const GL_IS_PER_PATCH_OES = 0x92E7;
pub const GL_MATRIX_MODE = 0x0BA0;
pub inline fn glPointAlongPathNV(arg_3159: GLuint, arg_3160: GLsizei, arg_3161: GLsizei, arg_3162: GLfloat, arg_3163: [*c]GLfloat, arg_3164: [*c]GLfloat, arg_3165: [*c]GLfloat, arg_3166: [*c]GLfloat) GLboolean {
    return epoxy_glPointAlongPathNV.?(arg_3159, arg_3160, arg_3161, arg_3162, arg_3163, arg_3164, arg_3165, arg_3166);
}
pub const GL_NV_register_combiners = 1;
pub inline fn glTexCoord2s(arg_3167: GLshort, arg_3168: GLshort) void {
    return epoxy_glTexCoord2s.?(arg_3167, arg_3168);
}
pub const GL_CONTEXT_RELEASE_BEHAVIOR_FLUSH_KHR = 0x82FC;
pub const GL_VARIABLE_D_NV = 0x8526;
pub const GL_UNIFORM_BUFFER_ADDRESS_NV = 0x936F;
pub const GL_LAYOUT_DEFAULT_INTEL = 0;
pub const GL_ARB_texture_buffer_object_rgb32 = 1;
pub const GL_DUAL_ALPHA12_SGIS = 0x8112;
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_EXT = 0x9199;
pub const GL_TEXTURE_LUMINANCE_SIZE_EXT = 0x8060;
pub inline fn glGetMaterialxOES(arg_3169: GLenum, arg_3170: GLenum, arg_3171: GLfixed) void {
    return epoxy_glGetMaterialxOES.?(arg_3169, arg_3170, arg_3171);
}
pub const GL_SHADER_GLOBAL_ACCESS_BARRIER_BIT_NV = 0x00000010;
pub const GL_DEVICE_LUID_EXT = 0x9599;
pub const GL_RGBA32UI_EXT = 0x8D70;
pub const GL_DEVICE_NODE_MASK_EXT = 0x959A;
pub const GL_RGBA32F = 0x8814;
pub const GL_MAP1_VERTEX_4 = 0x0D98;
pub inline fn glUseProgramObjectARB(arg_3172: GLhandleARB) void {
    return epoxy_glUseProgramObjectARB.?(arg_3172);
}
pub const GL_CON_20_ATI = 0x8955;
pub inline fn glMultiTexCoord2f(arg_3173: GLenum, arg_3174: GLfloat, arg_3175: GLfloat) void {
    return epoxy_glMultiTexCoord2f.?(arg_3173, arg_3174, arg_3175);
}
pub const GL_TEXTURE_MAX_CLAMP_R_SGIX = 0x836B;
pub inline fn glNormal3x(arg_3176: GLfixed, arg_3177: GLfixed, arg_3178: GLfixed) void {
    return epoxy_glNormal3x.?(arg_3176, arg_3177, arg_3178);
}
pub const GL_ZERO_TO_ONE = 0x935F;
pub inline fn glVertexAttrib4ivARB(arg_3179: GLuint, arg_3180: [*c]const GLint) void {
    return epoxy_glVertexAttrib4ivARB.?(arg_3179, arg_3180);
}
pub inline fn glDrawArraysInstancedBaseInstanceEXT(arg_3181: GLenum, arg_3182: GLint, arg_3183: GLsizei, arg_3184: GLsizei, arg_3185: GLuint) void {
    return epoxy_glDrawArraysInstancedBaseInstanceEXT.?(arg_3181, arg_3182, arg_3183, arg_3184, arg_3185);
}
pub const GL_VIEW_CLASS_ASTC_8x8_RGBA = 0x938F;
pub inline fn glProgramUniform4i(arg_3186: GLuint, arg_3187: GLint, arg_3188: GLint, arg_3189: GLint, arg_3190: GLint, arg_3191: GLint) void {
    return epoxy_glProgramUniform4i.?(arg_3186, arg_3187, arg_3188, arg_3189, arg_3190, arg_3191);
}
pub const GL_BINORMAL_ARRAY_STRIDE_EXT = 0x8441;
pub const GL_QUERY_NO_WAIT = 0x8E14;
pub inline fn glSamplerParameterIiv(arg_3192: GLuint, arg_3193: GLenum, arg_3194: [*c]const GLint) void {
    return epoxy_glSamplerParameterIiv.?(arg_3192, arg_3193, arg_3194);
}
pub const GL_TESS_CONTROL_SHADER = 0x8E88;
pub const GL_UNSIGNED_INT16_NV = 0x8FF0;
pub const GL_SHININESS = 0x1601;
pub const GL_VERSION_4_0 = 1;
pub const GL_MATRIX_INDEX_ARRAY_TYPE_OES = 0x8847;
pub inline fn glCreateProgramObjectARB() GLhandleARB {
    return epoxy_glCreateProgramObjectARB.?();
}
pub const GL_IMG_user_clip_plane = 1;
pub const __INTPTR_FMTd__ = "ld";
pub const GL_SINGLE_COLOR_EXT = 0x81F9;
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE = 0x8D6A;
pub inline fn glWeightusvARB(arg_3195: GLint, arg_3196: [*c]const GLushort) void {
    return epoxy_glWeightusvARB.?(arg_3195, arg_3196);
}
pub const GL_OUTPUT_TEXTURE_COORD22_EXT = 0x87B3;
pub const GL_LIGHTEN_NV = 0x9298;
pub const GL_LUMINANCE_ALPHA_FLOAT16_ATI = 0x881F;
pub const GL_SMOOTH_CUBIC_CURVE_TO_NV = 0x10;
pub const GL_DRAW_BUFFER1_NV = 0x8826;
pub inline fn glPolygonOffsetxOES(arg_3197: GLfixed, arg_3198: GLfixed) void {
    return epoxy_glPolygonOffsetxOES.?(arg_3197, arg_3198);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_OES = 0x8CD7;
pub const GL_VIRTUAL_PAGE_SIZE_X_ARB = 0x9195;
pub inline fn glGetInvariantIntegervEXT(arg_3199: GLuint, arg_3200: GLenum, arg_3201: [*c]GLint) void {
    return epoxy_glGetInvariantIntegervEXT.?(arg_3199, arg_3200, arg_3201);
}
pub const GL_BINNING_CONTROL_HINT_QCOM = 0x8FB0;
pub const GL_NV_texture_barrier = 1;
pub const GL_NUM_INPUT_INTERPOLATOR_COMPONENTS_ATI = 0x8973;
pub const GL_ACCUM_GREEN_BITS = 0x0D59;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED = 0x8622;
pub const GL_PIXEL_MAP_S_TO_S_SIZE = 0x0CB1;
pub const GL_MESA_window_pos = 1;
pub inline fn glCreateTextures(arg_3202: GLenum, arg_3203: GLsizei, arg_3204: [*c]GLuint) void {
    return epoxy_glCreateTextures.?(arg_3202, arg_3203, arg_3204);
}
pub const bool_5 = bool;
pub const GL_DEPTH_COMPONENTS = 0x8284;
pub inline fn glPointParameterfEXT(arg_3205: GLenum, arg_3206: GLfloat) void {
    return epoxy_glPointParameterfEXT.?(arg_3205, arg_3206);
}
pub const GL_NV_vertex_array_range = 1;
pub const GL_TRIANGLES_ADJACENCY_ARB = 0x000C;
pub const GL_ARM_mali_shader_binary = 1;
pub inline fn glEndTilingQCOM(arg_3207: GLbitfield) void {
    return epoxy_glEndTilingQCOM.?(arg_3207);
}
pub inline fn glMultiTexCoord2iARB(arg_3208: GLenum, arg_3209: GLint, arg_3210: GLint) void {
    return epoxy_glMultiTexCoord2iARB.?(arg_3208, arg_3209, arg_3210);
}
pub const GL_OES_texture_env_crossbar = 1;
pub const GL_FLOAT_MAT2x3 = 0x8B65;
pub const GL_VERTEX_WEIGHT_ARRAY_POINTER_EXT = 0x8510;
pub const GL_ARB_vertex_array_object = 1;
pub const GL_SUBTRACT_ARB = 0x84E7;
pub inline fn glDrawElementArrayAPPLE(arg_3211: GLenum, arg_3212: GLint, arg_3213: GLsizei) void {
    return epoxy_glDrawElementArrayAPPLE.?(arg_3211, arg_3212, arg_3213);
}
pub inline fn glSamplerParameterIuiv(arg_3214: GLuint, arg_3215: GLenum, arg_3216: [*c]const GLuint) void {
    return epoxy_glSamplerParameterIuiv.?(arg_3214, arg_3215, arg_3216);
}
pub inline fn glCopyConvolutionFilter1D(arg_3217: GLenum, arg_3218: GLenum, arg_3219: GLint, arg_3220: GLint, arg_3221: GLsizei) void {
    return epoxy_glCopyConvolutionFilter1D.?(arg_3217, arg_3218, arg_3219, arg_3220, arg_3221);
}
pub inline fn glUniform1uiv(arg_3222: GLint, arg_3223: GLsizei, arg_3224: [*c]const GLuint) void {
    return epoxy_glUniform1uiv.?(arg_3222, arg_3223, arg_3224);
}
pub const GL_SEPARABLE_2D_EXT = 0x8012;
pub const GL_MAX_COMPUTE_IMAGE_UNIFORMS = 0x91BD;
pub const GL_SRC0_RGB = 0x8580;
pub inline fn glGetAttachedShaders(arg_3225: GLuint, arg_3226: GLsizei, arg_3227: [*c]GLsizei, arg_3228: [*c]GLuint) void {
    return epoxy_glGetAttachedShaders.?(arg_3225, arg_3226, arg_3227, arg_3228);
}
pub inline fn glGetMapiv(arg_3229: GLenum, arg_3230: GLenum, arg_3231: [*c]GLint) void {
    return epoxy_glGetMapiv.?(arg_3229, arg_3230, arg_3231);
}
pub inline fn glEnableVertexArrayAttrib(arg_3232: GLuint, arg_3233: GLuint) void {
    return epoxy_glEnableVertexArrayAttrib.?(arg_3232, arg_3233);
}
pub inline fn glTexCoord1hNV(arg_3234: GLhalfNV) void {
    return epoxy_glTexCoord1hNV.?(arg_3234);
}
pub const GL_PROGRAM_STRING_ARB = 0x8628;
pub const GL_POINT_DISTANCE_ATTENUATION = 0x8129;
pub const __SYSCALL_WORDSIZE = 64;
pub const GL_TEXTURE_COMPRESSED_BLOCK_HEIGHT = 0x82B2;
pub const GL_MAX_COMPUTE_WORK_GROUP_COUNT = 0x91BE;
pub inline fn glMultiTexBufferEXT(arg_3235: GLenum, arg_3236: GLenum, arg_3237: GLenum, arg_3238: GLuint) void {
    return epoxy_glMultiTexBufferEXT.?(arg_3235, arg_3236, arg_3237, arg_3238);
}
pub inline fn glProgramUniform4i64NV(arg_3239: GLuint, arg_3240: GLint, arg_3241: GLint64EXT, arg_3242: GLint64EXT, arg_3243: GLint64EXT, arg_3244: GLint64EXT) void {
    return epoxy_glProgramUniform4i64NV.?(arg_3239, arg_3240, arg_3241, arg_3242, arg_3243, arg_3244);
}
pub const GL_NV_texture_rectangle = 1;
pub inline fn glProgramUniform4uivEXT(arg_3245: GLuint, arg_3246: GLint, arg_3247: GLsizei, arg_3248: [*c]const GLuint) void {
    return epoxy_glProgramUniform4uivEXT.?(arg_3245, arg_3246, arg_3247, arg_3248);
}
pub const _POSIX_C_SOURCE = @as(c_long, 200809);
pub const GL_COEFF = 0x0A00;
pub const GL_FLOAT_RG16_NV = 0x8886;
pub inline fn glLGPUNamedBufferSubDataNVX(arg_3249: GLbitfield, arg_3250: GLuint, arg_3251: GLintptr, arg_3252: GLsizeiptr, arg_3253: ?*const c_void) void {
    return epoxy_glLGPUNamedBufferSubDataNVX.?(arg_3249, arg_3250, arg_3251, arg_3252, arg_3253);
}
pub const __UINT_FAST16_MAX__ = 65535;
pub inline fn glGetNamedProgramLocalParameterIivEXT(arg_3254: GLuint, arg_3255: GLenum, arg_3256: GLuint, arg_3257: [*c]GLint) void {
    return epoxy_glGetNamedProgramLocalParameterIivEXT.?(arg_3254, arg_3255, arg_3256, arg_3257);
}
pub const GL_DOUBLEBUFFER = 0x0C32;
pub inline fn glVertexAttrib3fvNV(arg_3258: GLuint, arg_3259: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib3fvNV.?(arg_3258, arg_3259);
}
pub inline fn glFragmentMaterialfSGIX(arg_3260: GLenum, arg_3261: GLenum, arg_3262: GLfloat) void {
    return epoxy_glFragmentMaterialfSGIX.?(arg_3260, arg_3261, arg_3262);
}
pub const __FLT_EPSILON__ = @as(f32, 1.19209290e-7);
pub const GL_MAX_SPARSE_3D_TEXTURE_SIZE_ARB = 0x9199;
pub const GL_MAX_NAME_STACK_DEPTH = 0x0D37;
pub const GL_WEIGHT_ARRAY_TYPE_OES = 0x86A9;
pub const GL_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x8805;
pub inline fn glDrawBuffersATI(arg_3263: GLsizei, arg_3264: [*c]const GLenum) void {
    return epoxy_glDrawBuffersATI.?(arg_3263, arg_3264);
}
pub const GL_REFLECTION_MAP_EXT = 0x8512;
pub const GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS = 0x8B4D;
pub const GL_CLIENT_ACTIVE_TEXTURE_ARB = 0x84E1;
pub inline fn glVertexAttribL1ui64NV(arg_3265: GLuint, arg_3266: GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64NV.?(arg_3265, arg_3266);
}
pub const GL_GEOMETRY_TEXTURE = 0x829E;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET = 0x8904;
pub inline fn glDeleteCommandListsNV(arg_3267: GLsizei, arg_3268: [*c]const GLuint) void {
    return epoxy_glDeleteCommandListsNV.?(arg_3267, arg_3268);
}
pub const GL_HILO8_NV = 0x885E;
pub inline fn glVertexAttribL3dvEXT(arg_3269: GLuint, arg_3270: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL3dvEXT.?(arg_3269, arg_3270);
}
pub const GL_SPIR_V_BINARY_ARB = 0x9552;
pub const GL_MAX_COMBINED_MESH_UNIFORM_COMPONENTS_NV = 0x8E67;
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN(arg_3271: [*c]const GLuint, arg_3272: [*c]const GLfloat, arg_3273: [*c]const GLfloat, arg_3274: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN.?(arg_3271, arg_3272, arg_3273, arg_3274);
}
pub inline fn glUniformHandleui64vARB(arg_3275: GLint, arg_3276: GLsizei, arg_3277: [*c]const GLuint64) void {
    return epoxy_glUniformHandleui64vARB.?(arg_3275, arg_3276, arg_3277);
}
pub const GL_TEXTURE_VIEW_MIN_LAYER_EXT = 0x82DD;
pub inline fn glProgramUniform4iv(arg_3278: GLuint, arg_3279: GLint, arg_3280: GLsizei, arg_3281: [*c]const GLint) void {
    return epoxy_glProgramUniform4iv.?(arg_3278, arg_3279, arg_3280, arg_3281);
}
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_OES = 0x8519;
pub const GL_DOT3_RGBA_EXT = 0x8741;
pub const GL_LINEAR_DETAIL_SGIS = 0x8097;
pub inline fn glVertex3d(arg_3282: GLdouble, arg_3283: GLdouble, arg_3284: GLdouble) void {
    return epoxy_glVertex3d.?(arg_3282, arg_3283, arg_3284);
}
pub const GL_UPPER_LEFT_EXT = 0x8CA2;
pub inline fn glGetInvariantBooleanvEXT(arg_3285: GLuint, arg_3286: GLenum, arg_3287: [*c]GLboolean) void {
    return epoxy_glGetInvariantBooleanvEXT.?(arg_3285, arg_3286, arg_3287);
}
pub const GL_MAX_SUBROUTINE_UNIFORM_LOCATIONS = 0x8DE8;
pub const GL_4PASS_3_EXT = 0x80A7;
pub inline fn glScissorArrayvOES(arg_3288: GLuint, arg_3289: GLsizei, arg_3290: [*c]const GLint) void {
    return epoxy_glScissorArrayvOES.?(arg_3288, arg_3289, arg_3290);
}
pub const GL_VERTEX_SHADER = 0x8B31;
pub inline fn glTexImage2D(arg_3291: GLenum, arg_3292: GLint, arg_3293: GLint, arg_3294: GLsizei, arg_3295: GLsizei, arg_3296: GLint, arg_3297: GLenum, arg_3298: GLenum, arg_3299: ?*const c_void) void {
    return epoxy_glTexImage2D.?(arg_3291, arg_3292, arg_3293, arg_3294, arg_3295, arg_3296, arg_3297, arg_3298, arg_3299);
}
pub inline fn glTextureBarrierNV() void {
    return epoxy_glTextureBarrierNV.?();
}
pub inline fn glGetQueryObjecti64v(arg_3300: GLuint, arg_3301: GLenum, arg_3302: [*c]GLint64) void {
    return epoxy_glGetQueryObjecti64v.?(arg_3300, arg_3301, arg_3302);
}
pub inline fn glBinormal3ivEXT(arg_3303: [*c]const GLint) void {
    return epoxy_glBinormal3ivEXT.?(arg_3303);
}
pub const PRIX16 = "X";
pub const __GNU_LIBRARY__ = 6;
pub const GL_VERTEX_STREAM3_ATI = 0x876F;
pub inline fn glMulticastFramebufferSampleLocationsfvNV(arg_3304: GLuint, arg_3305: GLuint, arg_3306: GLuint, arg_3307: GLsizei, arg_3308: [*c]const GLfloat) void {
    return epoxy_glMulticastFramebufferSampleLocationsfvNV.?(arg_3304, arg_3305, arg_3306, arg_3307, arg_3308);
}
pub inline fn glTransformFeedbackBufferRange(arg_3309: GLuint, arg_3310: GLuint, arg_3311: GLuint, arg_3312: GLintptr, arg_3313: GLsizeiptr) void {
    return epoxy_glTransformFeedbackBufferRange.?(arg_3309, arg_3310, arg_3311, arg_3312, arg_3313);
}
pub const GL_MAX_SERVER_WAIT_TIMEOUT_APPLE = 0x9111;
pub const GL_VERTEX_ID_NV = 0x8C7B;
pub inline fn glClearColorIiEXT(arg_3314: GLint, arg_3315: GLint, arg_3316: GLint, arg_3317: GLint) void {
    return epoxy_glClearColorIiEXT.?(arg_3314, arg_3315, arg_3316, arg_3317);
}
pub const __BLKCNT_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const GL_EXT_x11_sync_object = 1;
pub const GL_INTENSITY4_EXT = 0x804A;
pub const GL_SHADER_STORAGE_BLOCK = 0x92E6;
pub inline fn glUniform4fv(arg_3318: GLint, arg_3319: GLsizei, arg_3320: [*c]const GLfloat) void {
    return epoxy_glUniform4fv.?(arg_3318, arg_3319, arg_3320);
}
pub const GL_EYE_DISTANCE_TO_LINE_SGIS = 0x81F2;
pub const GL_ALL_STATIC_DATA_IBM = 103060;
pub const GL_GEOMETRY_DEFORMATION_SGIX = 0x8194;
pub inline fn glGetTexParameterIivEXT(arg_3321: GLenum, arg_3322: GLenum, arg_3323: [*c]GLint) void {
    return epoxy_glGetTexParameterIivEXT.?(arg_3321, arg_3322, arg_3323);
}
pub const GL_SHARPEN_TEXTURE_FUNC_POINTS_SGIS = 0x80B0;
pub const GL_CONTEXT_ROBUST_ACCESS = 0x90F3;
pub inline fn glGetFragDataIndex(arg_3324: GLuint, arg_3325: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataIndex.?(arg_3324, arg_3325);
}
pub const GL_EXT_stencil_wrap = 1;
pub inline fn glPushMatrix() void {
    return epoxy_glPushMatrix.?();
}
pub const GL_MATRIX3_NV = 0x8633;
pub inline fn glVertexArrayElementBuffer(arg_3326: GLuint, arg_3327: GLuint) void {
    return epoxy_glVertexArrayElementBuffer.?(arg_3326, arg_3327);
}
pub inline fn glLineWidthx(arg_3328: GLfixed) void {
    return epoxy_glLineWidthx.?(arg_3328);
}
pub const GL_SAMPLER_2D_SHADOW_ARB = 0x8B62;
pub inline fn glFragmentMaterialivSGIX(arg_3329: GLenum, arg_3330: GLenum, arg_3331: [*c]const GLint) void {
    return epoxy_glFragmentMaterialivSGIX.?(arg_3329, arg_3330, arg_3331);
}
pub const GL_FOG_COORD_ARRAY_TYPE = 0x8454;
pub const GL_CONTEXT_PROFILE_MASK = 0x9126;
pub const GL_DEPTH_STENCIL_NV = 0x84F9;
pub const GL_OP_DOT4_EXT = 0x8785;
pub const GL_MAX_VERTEX_ATTRIB_RELATIVE_OFFSET = 0x82D9;
pub const GL_PATH_DASH_CAPS_NV = 0x907B;
pub inline fn glAlphaFuncQCOM(arg_3332: GLenum, arg_3333: GLclampf) void {
    return epoxy_glAlphaFuncQCOM.?(arg_3332, arg_3333);
}
pub const GL_COLOR_ATTACHMENT31 = 0x8CFF;
pub inline fn glBufferDataARB(arg_3334: GLenum, arg_3335: GLsizeiptrARB, arg_3336: ?*const c_void, arg_3337: GLenum) void {
    return epoxy_glBufferDataARB.?(arg_3334, arg_3335, arg_3336, arg_3337);
}
pub inline fn glFramebufferTextureLayer(arg_3338: GLenum, arg_3339: GLenum, arg_3340: GLuint, arg_3341: GLint, arg_3342: GLint) void {
    return epoxy_glFramebufferTextureLayer.?(arg_3338, arg_3339, arg_3340, arg_3341, arg_3342);
}
pub const GL_INT64_VEC3_NV = 0x8FEA;
pub inline fn glMakeImageHandleResidentNV(arg_3343: GLuint64, arg_3344: GLenum) void {
    return epoxy_glMakeImageHandleResidentNV.?(arg_3343, arg_3344);
}
pub const GL_COVERAGE_SAMPLES_NV = 0x8ED4;
pub inline fn glTestFenceNV(arg_3345: GLuint) GLboolean {
    return epoxy_glTestFenceNV.?(arg_3345);
}
pub const WINT_MIN = @as(c_uint, 0);
pub const GL_COORD_REPLACE = 0x8862;
pub const GL_PIXEL_TEX_GEN_MODE_SGIX = 0x832B;
pub inline fn glLightModelxOES(arg_3346: GLenum, arg_3347: GLfixed) void {
    return epoxy_glLightModelxOES.?(arg_3346, arg_3347);
}
pub inline fn glGetTexEnvfv(arg_3348: GLenum, arg_3349: GLenum, arg_3350: [*c]GLfloat) void {
    return epoxy_glGetTexEnvfv.?(arg_3348, arg_3349, arg_3350);
}
pub const __fortify_function = __extern_always_inline ++ __attribute_artificial__;
pub inline fn glGetCombinerStageParameterfvNV(arg_3351: GLenum, arg_3352: GLenum, arg_3353: [*c]GLfloat) void {
    return epoxy_glGetCombinerStageParameterfvNV.?(arg_3351, arg_3352, arg_3353);
}
pub const GL_OR_REVERSE = 0x150B;
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR_KHR = 0x824D;
pub const __UINTPTR_FMTu__ = "lu";
pub inline fn glBindBufferOffsetNV(arg_3354: GLenum, arg_3355: GLuint, arg_3356: GLuint, arg_3357: GLintptr) void {
    return epoxy_glBindBufferOffsetNV.?(arg_3354, arg_3355, arg_3356, arg_3357);
}
pub inline fn glGenProgramPipelines(arg_3358: GLsizei, arg_3359: [*c]GLuint) void {
    return epoxy_glGenProgramPipelines.?(arg_3358, arg_3359);
}
pub const GL_DEBUG_TYPE_ERROR_KHR = 0x824C;
pub const GL_ASYNC_HISTOGRAM_SGIX = 0x832C;
pub const __UINT16_FMTx__ = "hx";
pub const GL_QUERY_RESOURCE_BUFFEROBJECT_NV = 0x9547;
pub inline fn glEndTransformFeedback() void {
    return epoxy_glEndTransformFeedback.?();
}
pub const GL_MAX_COMBINED_COMPUTE_UNIFORM_COMPONENTS = 0x8266;
pub const GL_POST_CONVOLUTION_COLOR_TABLE = 0x80D1;
pub inline fn glGetPerfMonitorCounterDataAMD(arg_3360: GLuint, arg_3361: GLenum, arg_3362: GLsizei, arg_3363: [*c]GLuint, arg_3364: [*c]GLint) void {
    return epoxy_glGetPerfMonitorCounterDataAMD.?(arg_3360, arg_3361, arg_3362, arg_3363, arg_3364);
}
pub const GL_INT_VEC4 = 0x8B55;
pub inline fn glRasterPos2d(arg_3365: GLdouble, arg_3366: GLdouble) void {
    return epoxy_glRasterPos2d.?(arg_3365, arg_3366);
}
pub const GL_TEXTURE_BINDING_BUFFER_ARB = 0x8C2C;
pub const GL_INT_VEC4_ARB = 0x8B55;
pub const GL_EVAL_VERTEX_ATTRIB8_NV = 0x86CE;
pub const GL_VERSION_1_2 = 1;
pub const GL_TEXTURE_NUM_LEVELS_QCOM = 0x8BD9;
pub inline fn glGetUniformIndices(arg_3367: GLuint, arg_3368: GLsizei, arg_3369: [*c]const [*c]const GLchar, arg_3370: [*c]GLuint) void {
    return epoxy_glGetUniformIndices.?(arg_3367, arg_3368, arg_3369, arg_3370);
}
pub const GL_TEXTURE_RESIDENT = 0x8067;
pub const GL_SAMPLER_2D_ARRAY_SHADOW_NV = 0x8DC4;
pub inline fn glEvalCoord2d(arg_3371: GLdouble, arg_3372: GLdouble) void {
    return epoxy_glEvalCoord2d.?(arg_3371, arg_3372);
}
pub const __UINTPTR_WIDTH__ = 64;
pub const GL_BUFFER_UPDATE_BARRIER_BIT_EXT = 0x00000200;
pub const GL_RENDERBUFFER_OES = 0x8D41;
pub const GL_OBJECT_BUFFER_SIZE_ATI = 0x8764;
pub const GL_COPY_READ_BUFFER_NV = 0x8F36;
pub inline fn glGenVertexArraysAPPLE(arg_3373: GLsizei, arg_3374: [*c]GLuint) void {
    return epoxy_glGenVertexArraysAPPLE.?(arg_3373, arg_3374);
}
pub inline fn glMultiTexCoord2bOES(arg_3375: GLenum, arg_3376: GLbyte, arg_3377: GLbyte) void {
    return epoxy_glMultiTexCoord2bOES.?(arg_3375, arg_3376, arg_3377);
}
pub const GL_FETCH_PER_SAMPLE_ARM = 0x8F65;
pub const GL_AUX2 = 0x040B;
pub const GL_SAMPLE_LOCATION_NV = 0x8E50;
pub const GL_VERTEX_ARRAY_TYPE = 0x807B;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS = 0x8E8A;
pub inline fn glIndexPointer(arg_3378: GLenum, arg_3379: GLsizei, arg_3380: ?*const c_void) void {
    return epoxy_glIndexPointer.?(arg_3378, arg_3379, arg_3380);
}
pub const GL_SLUMINANCE8_EXT = 0x8C47;
pub const GL_TEXTURE_BUFFER_SIZE_OES = 0x919E;
pub const GL_MAGNITUDE_SCALE_NV = 0x8712;
pub const GL_FRAGMENT_COVERAGE_TO_COLOR_NV = 0x92DD;
pub inline fn glVertexAttrib3fvARB(arg_3381: GLuint, arg_3382: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib3fvARB.?(arg_3381, arg_3382);
}
pub const GL_CON_27_ATI = 0x895C;
pub const GL_INT_SAMPLER_1D_EXT = 0x8DC9;
pub const __DBL_MAX__ = 1.7976931348623157e+308;
pub inline fn glGetVertexAttribPointervARB(arg_3383: GLuint, arg_3384: GLenum, arg_3385: [*c]?*c_void) void {
    return epoxy_glGetVertexAttribPointervARB.?(arg_3383, arg_3384, arg_3385);
}
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_EXT = 0x8D44;
pub const GL_RGB16F = 0x881B;
pub inline fn glWindowRectanglesEXT(arg_3386: GLenum, arg_3387: GLsizei, arg_3388: [*c]const GLint) void {
    return epoxy_glWindowRectanglesEXT.?(arg_3386, arg_3387, arg_3388);
}
pub const __DBL_DECIMAL_DIG__ = 17;
pub const GL_COLOR_ATTACHMENT2 = 0x8CE2;
pub const GL_FRAMEBUFFER_BINDING_OES = 0x8CA6;
pub const GL_MULTISAMPLE_BUFFER_BIT4_QCOM = 0x10000000;
pub const GL_TEXTURE_BIT = 0x00040000;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x4_OES = 0x93E5;
pub inline fn glGetColorTableParameterfv(arg_3389: GLenum, arg_3390: GLenum, arg_3391: [*c]GLfloat) void {
    return epoxy_glGetColorTableParameterfv.?(arg_3389, arg_3390, arg_3391);
}
pub inline fn glTextureStorage3DMultisample(arg_3392: GLuint, arg_3393: GLsizei, arg_3394: GLenum, arg_3395: GLsizei, arg_3396: GLsizei, arg_3397: GLsizei, arg_3398: GLboolean) void {
    return epoxy_glTextureStorage3DMultisample.?(arg_3392, arg_3393, arg_3394, arg_3395, arg_3396, arg_3397, arg_3398);
}
pub const GL_MAP2_TEXTURE_COORD_3 = 0x0DB5;
pub const GL_MAX_PROGRAM_PARAMETER_BUFFER_SIZE_NV = 0x8DA1;
pub const GL_PATH_FILL_MODE_NV = 0x9080;
pub const GL_GLYPH_WIDTH_BIT_NV = 0x01;
pub const GL_RGB5_A1_OES = 0x8057;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_ARB = 0x851C;
pub const GL_PASS_THROUGH_TOKEN = 0x0700;
pub const GL_EXT_map_buffer_range = 1;
pub inline fn glUniform4i64NV(arg_3399: GLint, arg_3400: GLint64EXT, arg_3401: GLint64EXT, arg_3402: GLint64EXT, arg_3403: GLint64EXT) void {
    return epoxy_glUniform4i64NV.?(arg_3399, arg_3400, arg_3401, arg_3402, arg_3403);
}
pub inline fn glBlendColor(arg_3404: GLfloat, arg_3405: GLfloat, arg_3406: GLfloat, arg_3407: GLfloat) void {
    return epoxy_glBlendColor.?(arg_3404, arg_3405, arg_3406, arg_3407);
}
pub inline fn glProgramUniform4dEXT(arg_3408: GLuint, arg_3409: GLint, arg_3410: GLdouble, arg_3411: GLdouble, arg_3412: GLdouble, arg_3413: GLdouble) void {
    return epoxy_glProgramUniform4dEXT.?(arg_3408, arg_3409, arg_3410, arg_3411, arg_3412, arg_3413);
}
pub inline fn glSecondaryColor3ivEXT(arg_3414: [*c]const GLint) void {
    return epoxy_glSecondaryColor3ivEXT.?(arg_3414);
}
pub const GL_PATH_FORMAT_PS_NV = 0x9071;
pub inline fn glVertexArrayVertexBindingDivisorEXT(arg_3415: GLuint, arg_3416: GLuint, arg_3417: GLuint) void {
    return epoxy_glVertexArrayVertexBindingDivisorEXT.?(arg_3415, arg_3416, arg_3417);
}
pub const GL_FOG_COORD_ARRAY_BUFFER_BINDING = 0x889D;
pub const GL_QCOM_perfmon_global_mode = 1;
pub const GL_SEPARATE_ATTRIBS_EXT = 0x8C8D;
pub inline fn glTexCoord1sv(arg_3418: [*c]const GLshort) void {
    return epoxy_glTexCoord1sv.?(arg_3418);
}
pub inline fn glWindowPos2sMESA(arg_3419: GLshort, arg_3420: GLshort) void {
    return epoxy_glWindowPos2sMESA.?(arg_3419, arg_3420);
}
pub const GL_PROXY_TEXTURE_CUBE_MAP = 0x851B;
pub const GL_SECONDARY_COLOR_ARRAY_LIST_STRIDE_IBM = 103087;
pub inline fn glEvalCoord1fv(arg_3421: [*c]const GLfloat) void {
    return epoxy_glEvalCoord1fv.?(arg_3421);
}
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_KHR = 0x9144;
pub const GL_CONSERVATIVE_RASTER_MODE_NV = 0x954D;
pub const GL_RGBA_FLOAT32_ATI = 0x8814;
pub inline fn glIndexub(arg_3422: GLubyte) void {
    return epoxy_glIndexub.?(arg_3422);
}
pub inline fn glMaterialxvOES(arg_3423: GLenum, arg_3424: GLenum, arg_3425: [*c]const GLfixed) void {
    return epoxy_glMaterialxvOES.?(arg_3423, arg_3424, arg_3425);
}
pub const GL_ARB_sparse_buffer = 1;
pub const GL_BLEND_DST = 0x0BE0;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL_ATI = 0x8802;
pub inline fn glProgramUniform1fvEXT(arg_3426: GLuint, arg_3427: GLint, arg_3428: GLsizei, arg_3429: [*c]const GLfloat) void {
    return epoxy_glProgramUniform1fvEXT.?(arg_3426, arg_3427, arg_3428, arg_3429);
}
pub const GL_MATRIX13_ARB = 0x88CD;
pub const GL_NORMALIZE = 0x0BA1;
pub const GL_DEBUG_CATEGORY_SHADER_COMPILER_AMD = 0x914E;
pub const GL_RGBA16F_EXT = 0x881A;
pub const GL_LUMINANCE_SNORM = 0x9011;
pub const GL_VERSION_4_4 = 1;
pub const __ATOMIC_ACQ_REL = 4;
pub const GL_REG_13_ATI = 0x892E;
pub const GL_SRGB8_NV = 0x8C41;
pub const GL_MAX_SUBPIXEL_PRECISION_BIAS_BITS_NV = 0x9349;
pub inline fn glTexStorage3D(arg_3430: GLenum, arg_3431: GLsizei, arg_3432: GLenum, arg_3433: GLsizei, arg_3434: GLsizei, arg_3435: GLsizei) void {
    return epoxy_glTexStorage3D.?(arg_3430, arg_3431, arg_3432, arg_3433, arg_3434, arg_3435);
}
pub const GL_CONSTANT_BORDER = 0x8151;
pub const GL_TRUE = 1;
pub const GL_V3F = 0x2A21;
pub const GL_STENCIL_FUNC = 0x0B92;
pub const _BITS_WCHAR_H = 1;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT_KHR = 0x00000008;
pub const GL_RGB5 = 0x8050;
pub const GL_FRAMEBUFFER_PROGRAMMABLE_SAMPLE_LOCATIONS_ARB = 0x9342;
pub const GL_DRAW_ELEMENTS_STRIP_COMMAND_NV = 0x0004;
pub const GL_INVERSE_TRANSPOSE_NV = 0x862D;
pub const GL_EXT_vertex_array_bgra = 1;
pub const GL_EMBOSS_MAP_NV = 0x855F;
pub const GL_COMPRESSED_SIGNED_RG11_EAC = 0x9273;
pub const GL_PROGRAM_NATIVE_ALU_INSTRUCTIONS_ARB = 0x8808;
pub inline fn glDetachShader(arg_3436: GLuint, arg_3437: GLuint) void {
    return epoxy_glDetachShader.?(arg_3436, arg_3437);
}
pub const GL_TEXTURE_TARGET_QCOM = 0x8BDA;
pub inline fn glGenVertexArrays(arg_3438: GLsizei, arg_3439: [*c]GLuint) void {
    return epoxy_glGenVertexArrays.?(arg_3438, arg_3439);
}
pub const GL_PRIMITIVES_GENERATED_NV = 0x8C87;
pub inline fn glMultiTexCoordP2uiv(arg_3440: GLenum, arg_3441: GLenum, arg_3442: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP2uiv.?(arg_3440, arg_3441, arg_3442);
}
pub const GL_EXT_texture_mirror_clamp_to_edge = 1;
pub const GL_COMPRESSED_SRGB = 0x8C48;
pub inline fn glGetQueryObjecti64vEXT(arg_3443: GLuint, arg_3444: GLenum, arg_3445: [*c]GLint64) void {
    return epoxy_glGetQueryObjecti64vEXT.?(arg_3443, arg_3444, arg_3445);
}
pub const GL_PERFQUERY_GLOBAL_CONTEXT_INTEL = 0x00000001;
pub const GL_SHADER_INCLUDE_ARB = 0x8DAE;
pub inline fn glCreateShaderProgramvEXT(arg_3446: GLenum, arg_3447: GLsizei, arg_3448: [*c][*c]const GLchar) GLuint {
    return epoxy_glCreateShaderProgramvEXT.?(arg_3446, arg_3447, arg_3448);
}
pub inline fn glEndConditionalRenderNVX() void {
    return epoxy_glEndConditionalRenderNVX.?();
}
pub const GL_TEXTURE8 = 0x84C8;
pub const GL_ELEMENT_ARRAY_POINTER_APPLE = 0x8A0E;
pub const GL_VERTEX_ATTRIB_BINDING = 0x82D4;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM = 0x8E8D;
pub const GL_MODULATE = 0x2100;
pub inline fn glVDPAUUnmapSurfacesNV(arg_3449: GLsizei, arg_3450: [*c]const GLvdpauSurfaceNV) void {
    return epoxy_glVDPAUUnmapSurfacesNV.?(arg_3449, arg_3450);
}
pub const GL_PROXY_TEXTURE_4D_SGIS = 0x8135;
pub const GL_FIXED_OES = 0x140C;
pub inline fn glDeleteRenderbuffersOES(arg_3451: GLsizei, arg_3452: [*c]const GLuint) void {
    return epoxy_glDeleteRenderbuffersOES.?(arg_3451, arg_3452);
}
pub inline fn glProgramNamedParameter4dvNV(arg_3453: GLuint, arg_3454: GLsizei, arg_3455: [*c]const GLubyte, arg_3456: [*c]const GLdouble) void {
    return epoxy_glProgramNamedParameter4dvNV.?(arg_3453, arg_3454, arg_3455, arg_3456);
}
pub inline fn glRasterPos4xvOES(arg_3457: [*c]const GLfixed) void {
    return epoxy_glRasterPos4xvOES.?(arg_3457);
}
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_EXT = 0x8C29;
pub inline fn glTexCoord3i(arg_3458: GLint, arg_3459: GLint, arg_3460: GLint) void {
    return epoxy_glTexCoord3i.?(arg_3458, arg_3459, arg_3460);
}
pub const GL_MAX_TEXTURE_COORDS_NV = 0x8871;
pub const GL_ACTIVE_UNIFORM_BLOCKS = 0x8A36;
pub const GL_MAX_DEEP_3D_TEXTURE_WIDTH_HEIGHT_NV = 0x90D0;
pub const GL_ATI_text_fragment_shader = 1;
pub const GL_NV_read_stencil = 1;
pub inline fn glDisableVertexArrayEXT(arg_3461: GLuint, arg_3462: GLenum) void {
    return epoxy_glDisableVertexArrayEXT.?(arg_3461, arg_3462);
}
pub inline fn glDrawRangeElementsBaseVertex(arg_3463: GLenum, arg_3464: GLuint, arg_3465: GLuint, arg_3466: GLsizei, arg_3467: GLenum, arg_3468: ?*const c_void, arg_3469: GLint) void {
    return epoxy_glDrawRangeElementsBaseVertex.?(arg_3463, arg_3464, arg_3465, arg_3466, arg_3467, arg_3468, arg_3469);
}
pub const GL_OUTPUT_TEXTURE_COORD28_EXT = 0x87B9;
pub inline fn glPixelMapfv(arg_3470: GLenum, arg_3471: GLsizei, arg_3472: [*c]const GLfloat) void {
    return epoxy_glPixelMapfv.?(arg_3470, arg_3471, arg_3472);
}
pub const GL_ARB_texture_buffer_object = 1;
pub const GL_LARGE_CCW_ARC_TO_NV = 0x16;
pub inline fn glSpecializeShaderARB(arg_3473: GLuint, arg_3474: [*c]const GLchar, arg_3475: GLuint, arg_3476: [*c]const GLuint, arg_3477: [*c]const GLuint) void {
    return epoxy_glSpecializeShaderARB.?(arg_3473, arg_3474, arg_3475, arg_3476, arg_3477);
}
pub const GL_ALLOW_DRAW_MEM_HINT_PGI = 0x1A211;
pub inline fn glCreateVertexArrays(arg_3478: GLsizei, arg_3479: [*c]GLuint) void {
    return epoxy_glCreateVertexArrays.?(arg_3478, arg_3479);
}
pub const GL_NV_conservative_raster = 1;
pub const GL_PACK_COMPRESSED_BLOCK_HEIGHT = 0x912C;
pub const GL_SHADER_IMAGE_ACCESS_BARRIER_BIT_EXT = 0x00000020;
pub const GL_VERTEX_ATTRIB_ARRAY10_NV = 0x865A;
pub const GL_IMAGE_CUBE_MAP_ARRAY_EXT = 0x9054;
pub const GL_QUERY_RESULT_NO_WAIT = 0x9194;
pub const GL_OVERLAY_NV = 0x9296;
pub inline fn glGetMultisamplefvNV(arg_3480: GLenum, arg_3481: GLuint, arg_3482: [*c]GLfloat) void {
    return epoxy_glGetMultisamplefvNV.?(arg_3480, arg_3481, arg_3482);
}
pub const GL_PROGRAM_RESIDENT_NV = 0x8647;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR = 0x93D8;
pub const GL_MAX_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AB;
pub const GL_DEPTH_BUFFER_BIT1_QCOM = 0x00000200;
pub const GL_FRAMEBUFFER_COMPLETE = 0x8CD5;
pub inline fn glSampleMaskIndexedNV(arg_3483: GLuint, arg_3484: GLbitfield) void {
    return epoxy_glSampleMaskIndexedNV.?(arg_3483, arg_3484);
}
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARB = 0x851B;
pub const GL_EXT_texture_object = 1;
pub const GL_INTERLACE_SGIX = 0x8094;
pub const GL_DIFFERENCE = 0x929E;
pub const __ORDER_LITTLE_ENDIAN__ = 1234;
pub const GL_COLOR_MATRIX_SGI = 0x80B1;
pub const __attribute_noinline__ = __attribute__(__noinline__);
pub inline fn glProgramUniformHandleui64vARB(arg_3485: GLuint, arg_3486: GLint, arg_3487: GLsizei, arg_3488: [*c]const GLuint64) void {
    return epoxy_glProgramUniformHandleui64vARB.?(arg_3485, arg_3486, arg_3487, arg_3488);
}
pub const GL_BUFFER_BINDING = 0x9302;
pub const GL_PIXEL_MAP_G_TO_G = 0x0C77;
pub const __UINT_FAST32_MAX__ = @as(c_uint, 4294967295);
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_OES = 0x889E;
pub inline fn glTextureImage3DMultisampleCoverageNV(arg_3489: GLuint, arg_3490: GLenum, arg_3491: GLsizei, arg_3492: GLsizei, arg_3493: GLint, arg_3494: GLsizei, arg_3495: GLsizei, arg_3496: GLsizei, arg_3497: GLboolean) void {
    return epoxy_glTextureImage3DMultisampleCoverageNV.?(arg_3489, arg_3490, arg_3491, arg_3492, arg_3493, arg_3494, arg_3495, arg_3496, arg_3497);
}
pub const GL_DEBUG_TYPE_PORTABILITY = 0x824F;
pub const GL_ABGR_EXT = 0x8000;
pub const GL_TESS_CONTROL_SHADER_PATCHES = 0x82F1;
pub const GL_TRANSPOSE_COLOR_MATRIX = 0x84E6;
pub const GL_DSDT8_MAG8_NV = 0x870A;
pub inline fn glNamedFramebufferTextureFaceEXT(arg_3498: GLuint, arg_3499: GLenum, arg_3500: GLuint, arg_3501: GLint, arg_3502: GLenum) void {
    return epoxy_glNamedFramebufferTextureFaceEXT.?(arg_3498, arg_3499, arg_3500, arg_3501, arg_3502);
}
pub const GL_MAX_MAP_TESSELLATION_NV = 0x86D6;
pub const GL_BLUE_MAX_CLAMP_INGR = 0x8566;
pub inline fn glUniform2i64NV(arg_3503: GLint, arg_3504: GLint64EXT, arg_3505: GLint64EXT) void {
    return epoxy_glUniform2i64NV.?(arg_3503, arg_3504, arg_3505);
}
pub const GL_SAMPLE_COVERAGE_INVERT_ARB = 0x80AB;
pub const GL_TEXTURE_BUFFER_EXT = 0x8C2A;
pub const GL_MAP_WRITE_BIT = 0x0002;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS_SGI = 0x80B9;
pub const GL_VIEWPORT_SUBPIXEL_BITS_EXT = 0x825C;
pub inline fn glOrthof(arg_3506: GLfloat, arg_3507: GLfloat, arg_3508: GLfloat, arg_3509: GLfloat, arg_3510: GLfloat, arg_3511: GLfloat) void {
    return epoxy_glOrthof.?(arg_3506, arg_3507, arg_3508, arg_3509, arg_3510, arg_3511);
}
pub inline fn offsetof(t: var, d: var) @TypeOf(__builtin_offsetof(t, d)) {
    return __builtin_offsetof(t, d);
}
pub const GL_CON_9_ATI = 0x894A;
pub const GL_REG_23_ATI = 0x8938;
pub inline fn glReleaseKeyedMutexWin32EXT(arg_3512: GLuint, arg_3513: GLuint64) GLboolean {
    return epoxy_glReleaseKeyedMutexWin32EXT.?(arg_3512, arg_3513);
}
pub inline fn glGetSamplerParameterfv(arg_3514: GLuint, arg_3515: GLenum, arg_3516: [*c]GLfloat) void {
    return epoxy_glGetSamplerParameterfv.?(arg_3514, arg_3515, arg_3516);
}
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_EXT = 0x8904;
pub inline fn glRasterPos4f(arg_3517: GLfloat, arg_3518: GLfloat, arg_3519: GLfloat, arg_3520: GLfloat) void {
    return epoxy_glRasterPos4f.?(arg_3517, arg_3518, arg_3519, arg_3520);
}
pub const GL_ALPHA12 = 0x803D;
pub const GL_PROGRAM_PIPELINE = 0x82E4;
pub inline fn glTexCoord4dv(arg_3521: [*c]const GLdouble) void {
    return epoxy_glTexCoord4dv.?(arg_3521);
}
pub const GL_NV_texgen_emboss = 1;
pub const __SIZEOF_SIZE_T__ = 8;
pub const GL_UNPACK_IMAGE_DEPTH_SGIS = 0x8133;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_TESS_CONTROL_SHADER = 0x92C8;
pub const GL_DEBUG_TYPE_PUSH_GROUP_KHR = 0x8269;
pub inline fn glIsBufferResidentNV(arg_3522: GLenum) GLboolean {
    return epoxy_glIsBufferResidentNV.?(arg_3522);
}
pub const GL_CONSTANT_COLOR0_NV = 0x852A;
pub const GL_QUERY_BUFFER = 0x9192;
pub const GL_LIGHTING = 0x0B50;
pub inline fn glProgramUniform4fEXT(arg_3523: GLuint, arg_3524: GLint, arg_3525: GLfloat, arg_3526: GLfloat, arg_3527: GLfloat, arg_3528: GLfloat) void {
    return epoxy_glProgramUniform4fEXT.?(arg_3523, arg_3524, arg_3525, arg_3526, arg_3527, arg_3528);
}
pub const GL_LINE_RESET_TOKEN = 0x0707;
pub inline fn glTextureImage2DEXT(arg_3529: GLuint, arg_3530: GLenum, arg_3531: GLint, arg_3532: GLint, arg_3533: GLsizei, arg_3534: GLsizei, arg_3535: GLint, arg_3536: GLenum, arg_3537: GLenum, arg_3538: ?*const c_void) void {
    return epoxy_glTextureImage2DEXT.?(arg_3529, arg_3530, arg_3531, arg_3532, arg_3533, arg_3534, arg_3535, arg_3536, arg_3537, arg_3538);
}
pub const GL_POST_COLOR_MATRIX_RED_SCALE = 0x80B4;
pub const GL_DEBUG_SOURCE_API_ARB = 0x8246;
pub const GL_KHR_context_flush_control = 1;
pub const GL_PROGRAM_INSTRUCTIONS_ARB = 0x88A0;
pub const GL_RENDERBUFFER_SAMPLES_EXT = 0x8CAB;
pub inline fn glGetPixelMapusv(arg_3539: GLenum, arg_3540: [*c]GLushort) void {
    return epoxy_glGetPixelMapusv.?(arg_3539, arg_3540);
}
pub const GL_WEIGHT_ARRAY_POINTER_ARB = 0x86AC;
pub inline fn glDebugMessageCallback(arg_3541: GLDEBUGPROC, arg_3542: ?*const c_void) void {
    return epoxy_glDebugMessageCallback.?(arg_3541, arg_3542);
}
pub const __FINITE_MATH_ONLY__ = 0;
pub inline fn glRasterPos3i(arg_3543: GLint, arg_3544: GLint, arg_3545: GLint) void {
    return epoxy_glRasterPos3i.?(arg_3543, arg_3544, arg_3545);
}
pub const GL_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B7;
pub const GL_BGR = 0x80E0;
pub const GL_TESS_EVALUATION_PROGRAM_NV = 0x891F;
pub inline fn glTexCoord1f(arg_3546: GLfloat) void {
    return epoxy_glTexCoord1f.?(arg_3546);
}
pub inline fn glCompileShaderIncludeARB(arg_3547: GLuint, arg_3548: GLsizei, arg_3549: [*c]const [*c]const GLchar, arg_3550: [*c]const GLint) void {
    return epoxy_glCompileShaderIncludeARB.?(arg_3547, arg_3548, arg_3549, arg_3550);
}
pub const GL_OES_stencil1 = 1;
pub const GL_UNIFORM_BLOCK = 0x92E2;
pub inline fn glUniformMatrix3fv(arg_3551: GLint, arg_3552: GLsizei, arg_3553: GLboolean, arg_3554: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3fv.?(arg_3551, arg_3552, arg_3553, arg_3554);
}
pub inline fn __GNUC_PREREQ(maj: var, min: var) @TypeOf((__GNUC__ << 16) + @boolToInt(__GNUC_MINOR__ >= ((maj << 16) + min))) {
    return (__GNUC__ << 16) + @boolToInt(__GNUC_MINOR__ >= ((maj << 16) + min));
}
pub const __INTMAX_FMTi__ = "li";
pub const GL_DRAW_BUFFER10_NV = 0x882F;
pub const GL_REG_14_ATI = 0x892F;
pub const GL_EDGE_FLAG_ARRAY_EXT = 0x8079;
pub inline fn glBinormal3iEXT(arg_3555: GLint, arg_3556: GLint, arg_3557: GLint) void {
    return epoxy_glBinormal3iEXT.?(arg_3555, arg_3556, arg_3557);
}
pub const __bool_true_false_are_defined = 1;
pub const GL_BLEND_ADVANCED_COHERENT_KHR = 0x9285;
pub const GL_OES_texture_cube_map = 1;
pub const GL_TEXTURE_MAX_LOD = 0x813B;
pub const __INT_LEAST64_MAX__ = @as(c_long, 9223372036854775807);
pub inline fn glTangent3fEXT(arg_3558: GLfloat, arg_3559: GLfloat, arg_3560: GLfloat) void {
    return epoxy_glTangent3fEXT.?(arg_3558, arg_3559, arg_3560);
}
pub const GL_MAX_SHADER_COMPILER_THREADS_KHR = 0x91B0;
pub inline fn glVertexAttribI4iEXT(arg_3561: GLuint, arg_3562: GLint, arg_3563: GLint, arg_3564: GLint, arg_3565: GLint) void {
    return epoxy_glVertexAttribI4iEXT.?(arg_3561, arg_3562, arg_3563, arg_3564, arg_3565);
}
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_NV = 0x88FE;
pub const GL_EXT_texture_snorm = 1;
pub const GL_QUERY_RESULT = 0x8866;
pub inline fn glMultiTexGenfEXT(arg_3566: GLenum, arg_3567: GLenum, arg_3568: GLenum, arg_3569: GLfloat) void {
    return epoxy_glMultiTexGenfEXT.?(arg_3566, arg_3567, arg_3568, arg_3569);
}
pub const GL_TESS_GEN_MODE = 0x8E76;
pub const GL_MAX_VERTEX_ARRAY_RANGE_ELEMENT_NV = 0x8520;
pub inline fn glGetMinmaxParameterfv(arg_3570: GLenum, arg_3571: GLenum, arg_3572: [*c]GLfloat) void {
    return epoxy_glGetMinmaxParameterfv.?(arg_3570, arg_3571, arg_3572);
}
pub const GL_SGIS_sharpen_texture = 1;
pub const GL_EXT_draw_buffers2 = 1;
pub const GL_CONSERVATIVE_RASTER_DILATE_RANGE_NV = 0x937A;
pub const GL_HISTOGRAM_WIDTH_EXT = 0x8026;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_ARB = 0x9198;
pub const GL_CURRENT_INDEX = 0x0B01;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS = 0x8DA8;
pub const __ELF__ = 1;
pub const GL_NV_conservative_raster_underestimation = 1;
pub inline fn glSwizzleEXT(arg_3573: GLuint, arg_3574: GLuint, arg_3575: GLenum, arg_3576: GLenum, arg_3577: GLenum, arg_3578: GLenum) void {
    return epoxy_glSwizzleEXT.?(arg_3573, arg_3574, arg_3575, arg_3576, arg_3577, arg_3578);
}
pub const GL_SHADING_RATE_SAMPLE_ORDER_PIXEL_MAJOR_NV = 0x95AF;
pub const GL_UPLOAD_GPU_MASK_NVX = 0x954A;
pub const GL_VERTEX_ATTRIB_ARRAY_POINTER_ARB = 0x8645;
pub inline fn glBlitFramebufferANGLE(arg_3579: GLint, arg_3580: GLint, arg_3581: GLint, arg_3582: GLint, arg_3583: GLint, arg_3584: GLint, arg_3585: GLint, arg_3586: GLint, arg_3587: GLbitfield, arg_3588: GLenum) void {
    return epoxy_glBlitFramebufferANGLE.?(arg_3579, arg_3580, arg_3581, arg_3582, arg_3583, arg_3584, arg_3585, arg_3586, arg_3587, arg_3588);
}
pub const GL_MAX_PROGRAM_TOTAL_OUTPUT_COMPONENTS_NV = 0x8C28;
pub const GL_OPERAND1_ALPHA_EXT = 0x8599;
pub inline fn glVertexAttribI1ivEXT(arg_3589: GLuint, arg_3590: [*c]const GLint) void {
    return epoxy_glVertexAttribI1ivEXT.?(arg_3589, arg_3590);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE = 0x8E24;
pub const GL_LAYOUT_GENERAL_EXT = 0x958D;
pub inline fn glEnableVertexArrayEXT(arg_3591: GLuint, arg_3592: GLenum) void {
    return epoxy_glEnableVertexArrayEXT.?(arg_3591, arg_3592);
}
pub const GL_OES_geometry_shader = 1;
pub inline fn glGetFinalCombinerInputParameterivNV(arg_3593: GLenum, arg_3594: GLenum, arg_3595: [*c]GLint) void {
    return epoxy_glGetFinalCombinerInputParameterivNV.?(arg_3593, arg_3594, arg_3595);
}
pub const GL_VERTEX_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F5;
pub inline fn glVideoCaptureStreamParameterfvNV(arg_3596: GLuint, arg_3597: GLuint, arg_3598: GLenum, arg_3599: [*c]const GLfloat) void {
    return epoxy_glVideoCaptureStreamParameterfvNV.?(arg_3596, arg_3597, arg_3598, arg_3599);
}
pub const GL_MINUS_NV = 0x929F;
pub const GL_AMD_compressed_ATC_texture = 1;
pub inline fn glVertexAttribL1ui64ARB(arg_3600: GLuint, arg_3601: GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64ARB.?(arg_3600, arg_3601);
}
pub inline fn glProgramLocalParameter4fARB(arg_3602: GLenum, arg_3603: GLuint, arg_3604: GLfloat, arg_3605: GLfloat, arg_3606: GLfloat, arg_3607: GLfloat) void {
    return epoxy_glProgramLocalParameter4fARB.?(arg_3602, arg_3603, arg_3604, arg_3605, arg_3606, arg_3607);
}
pub inline fn glVideoCaptureStreamParameterivNV(arg_3608: GLuint, arg_3609: GLuint, arg_3610: GLenum, arg_3611: [*c]const GLint) void {
    return epoxy_glVideoCaptureStreamParameterivNV.?(arg_3608, arg_3609, arg_3610, arg_3611);
}
pub inline fn glIndexPointerEXT(arg_3612: GLenum, arg_3613: GLsizei, arg_3614: GLsizei, arg_3615: ?*const c_void) void {
    return epoxy_glIndexPointerEXT.?(arg_3612, arg_3613, arg_3614, arg_3615);
}
pub const GL_PIXEL_PACK_BUFFER_EXT = 0x88EB;
pub const GL_FLOAT16_VEC2_NV = 0x8FF9;
pub const GL_INT_IMAGE_2D_ARRAY = 0x905E;
pub const GL_LOSE_CONTEXT_ON_RESET_EXT = 0x8252;
pub inline fn glUniform1fARB(arg_3616: GLint, arg_3617: GLfloat) void {
    return epoxy_glUniform1fARB.?(arg_3616, arg_3617);
}
pub const GL_PACK_COMPRESSED_BLOCK_WIDTH = 0x912B;
pub const __LITTLE_ENDIAN__ = 1;
pub const GL_VBO_FREE_MEMORY_ATI = 0x87FB;
pub inline fn glDrawArrays(arg_3618: GLenum, arg_3619: GLint, arg_3620: GLsizei) void {
    return epoxy_glDrawArrays.?(arg_3618, arg_3619, arg_3620);
}
pub const GL_2_BYTES_NV = 0x1407;
pub const GL_INDEX_BIT_PGI = 0x00080000;
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_ARB = 0x8DA7;
pub const GL_RESCALE_NORMAL = 0x803A;
pub inline fn glGetVideoCaptureStreamfvNV(arg_3621: GLuint, arg_3622: GLuint, arg_3623: GLenum, arg_3624: [*c]GLfloat) void {
    return epoxy_glGetVideoCaptureStreamfvNV.?(arg_3621, arg_3622, arg_3623, arg_3624);
}
pub const GL_SAMPLE_MASK_VALUE_EXT = 0x80AA;
pub const GL_COMPRESSED_RGBA_ASTC_10x10 = 0x93BB;
pub const GL_TEXTURE_BORDER_COLOR_EXT = 0x1004;
pub const GL_APPLE_color_buffer_packed_float = 1;
pub const GL_TYPE = 0x92FA;
pub inline fn glCompressedTexSubImage3DARB(arg_3625: GLenum, arg_3626: GLint, arg_3627: GLint, arg_3628: GLint, arg_3629: GLint, arg_3630: GLsizei, arg_3631: GLsizei, arg_3632: GLsizei, arg_3633: GLenum, arg_3634: GLsizei, arg_3635: ?*const c_void) void {
    return epoxy_glCompressedTexSubImage3DARB.?(arg_3625, arg_3626, arg_3627, arg_3628, arg_3629, arg_3630, arg_3631, arg_3632, arg_3633, arg_3634, arg_3635);
}
pub const GL_CLAMP_FRAGMENT_COLOR = 0x891B;
pub const GL_FRAGMENT_SHADER_INVOCATIONS = 0x82F4;
pub const GL_MODELVIEW27_ARB = 0x873B;
pub const GL_READ_PIXEL_DATA_RANGE_NV = 0x8879;
pub const GL_BLEND_PREMULTIPLIED_SRC_NV = 0x9280;
pub inline fn glVertex2f(arg_3636: GLfloat, arg_3637: GLfloat) void {
    return epoxy_glVertex2f.?(arg_3636, arg_3637);
}
pub const GL_VERSION_1_3 = 1;
pub const GL_TRANSPOSE_PROGRAM_MATRIX_EXT = 0x8E2E;
pub const GL_EXT_paletted_texture = 1;
pub const GL_LINEAR_DETAIL_COLOR_SGIS = 0x8099;
pub const GL_COLOR_CLEAR_VALUE = 0x0C22;
pub const GL_DRAW_INDIRECT_BUFFER = 0x8F3F;
pub inline fn glGetUniformi64vARB(arg_3638: GLuint, arg_3639: GLint, arg_3640: [*c]GLint64) void {
    return epoxy_glGetUniformi64vARB.?(arg_3638, arg_3639, arg_3640);
}
pub const GL_SUN_triangle_list = 1;
pub inline fn glCompressedTextureSubImage1D(arg_3641: GLuint, arg_3642: GLint, arg_3643: GLint, arg_3644: GLsizei, arg_3645: GLenum, arg_3646: GLsizei, arg_3647: ?*const c_void) void {
    return epoxy_glCompressedTextureSubImage1D.?(arg_3641, arg_3642, arg_3643, arg_3644, arg_3645, arg_3646, arg_3647);
}
pub const GL_QUAD_LUMINANCE8_SGIS = 0x8121;
pub const GL_EXT_shader_image_load_formatted = 1;
pub inline fn glFlushStaticDataIBM(arg_3648: GLenum) void {
    return epoxy_glFlushStaticDataIBM.?(arg_3648);
}
pub const GL_RGBA16_SNORM_EXT = 0x8F9B;
pub const GL_NORMAL_ARRAY_POINTER_EXT = 0x808F;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5x5_OES = 0x93E6;
pub inline fn glViewportIndexedfvNV(arg_3649: GLuint, arg_3650: [*c]const GLfloat) void {
    return epoxy_glViewportIndexedfvNV.?(arg_3649, arg_3650);
}
pub const GL_TEXTURE28_ARB = 0x84DC;
pub const GL_PIXEL_TILE_GRID_WIDTH_SGIX = 0x8142;
pub const GL_OUTPUT_TEXTURE_COORD31_EXT = 0x87BC;
pub const GL_MODELVIEW26_ARB = 0x873A;
pub const __UINT_FAST8_FMTo__ = "hho";
pub const GL_MODELVIEW_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898D;
pub const GL_ATTACHED_MEMORY_OBJECT_NV = 0x95A4;
pub inline fn glPixelTransformParameteriEXT(arg_3651: GLenum, arg_3652: GLenum, arg_3653: GLint) void {
    return epoxy_glPixelTransformParameteriEXT.?(arg_3651, arg_3652, arg_3653);
}
pub inline fn glProgramUniform2f(arg_3654: GLuint, arg_3655: GLint, arg_3656: GLfloat, arg_3657: GLfloat) void {
    return epoxy_glProgramUniform2f.?(arg_3654, arg_3655, arg_3656, arg_3657);
}
pub const GL_MAX_CULL_DISTANCES = 0x82F9;
pub const SCNd32 = "d";
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS = 0x92CF;
pub inline fn glIsProgramNV(arg_3658: GLuint) GLboolean {
    return epoxy_glIsProgramNV.?(arg_3658);
}
pub inline fn glGetMultiTexParameterfvEXT(arg_3659: GLenum, arg_3660: GLenum, arg_3661: GLenum, arg_3662: [*c]GLfloat) void {
    return epoxy_glGetMultiTexParameterfvEXT.?(arg_3659, arg_3660, arg_3661, arg_3662);
}
pub const GL_SRGB_ALPHA_EXT = 0x8C42;
pub const GL_OES_tessellation_point_size = 1;
pub inline fn glGetActiveSubroutineUniformName(arg_3663: GLuint, arg_3664: GLenum, arg_3665: GLuint, arg_3666: GLsizei, arg_3667: [*c]GLsizei, arg_3668: [*c]GLchar) void {
    return epoxy_glGetActiveSubroutineUniformName.?(arg_3663, arg_3664, arg_3665, arg_3666, arg_3667, arg_3668);
}
pub const GL_TEXTURE_BUFFER_OES = 0x8C2A;
pub inline fn glGenFragmentShadersATI(arg_3669: GLuint) GLuint {
    return epoxy_glGenFragmentShadersATI.?(arg_3669);
}
pub const __BLKSIZE_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const GL_OES_texture_float = 1;
pub const GL_SAMPLER_CUBE_SHADOW_NV = 0x8DC5;
pub const GL_UNSIGNED_SHORT_5_6_5 = 0x8363;
pub const GL_SOURCE2_ALPHA = 0x858A;
pub const __UINT_FAST64_FMTu__ = "lu";
pub inline fn glGetVideoui64vNV(arg_3670: GLuint, arg_3671: GLenum, arg_3672: [*c]GLuint64EXT) void {
    return epoxy_glGetVideoui64vNV.?(arg_3670, arg_3671, arg_3672);
}
pub const GL_VIEW_CLASS_ASTC_6x5_RGBA = 0x938B;
pub const GL_DOT3_ATI = 0x8966;
pub const GL_INT_IMAGE_2D_ARRAY_EXT = 0x905E;
pub const GL_TEXTURE_2D_ARRAY = 0x8C1A;
pub const GL_LIST_MODE = 0x0B30;
pub const GL_STENCIL_CLEAR_TAG_VALUE_EXT = 0x88F3;
pub const GL_QCOM_YUV_texture_gather = 1;
pub const GL_CONVOLUTION_HEIGHT = 0x8019;
pub const GL_UNSIGNED_INT16_VEC3_NV = 0x8FF2;
pub const GL_MAX_COMBINED_ATOMIC_COUNTERS = 0x92D7;
pub const GL_COMBINER4_NV = 0x8554;
pub const GL_STRICT_LIGHTING_HINT_PGI = 0x1A217;
pub inline fn glProgramUniform4f(arg_3673: GLuint, arg_3674: GLint, arg_3675: GLfloat, arg_3676: GLfloat, arg_3677: GLfloat, arg_3678: GLfloat) void {
    return epoxy_glProgramUniform4f.?(arg_3673, arg_3674, arg_3675, arg_3676, arg_3677, arg_3678);
}
pub inline fn glVertexAttrib4bv(arg_3679: GLuint, arg_3680: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4bv.?(arg_3679, arg_3680);
}
pub const GL_OES_standard_derivatives = 1;
pub inline fn glGetRenderbufferParameteriv(arg_3681: GLenum, arg_3682: GLenum, arg_3683: [*c]GLint) void {
    return epoxy_glGetRenderbufferParameteriv.?(arg_3681, arg_3682, arg_3683);
}
pub const GL_DMP_program_binary = 1;
pub const GL_APPLE_texture_max_level = 1;
pub inline fn glResetMinmax(arg_3684: GLenum) void {
    return epoxy_glResetMinmax.?(arg_3684);
}
pub inline fn glStopInstrumentsSGIX(arg_3685: GLint) void {
    return epoxy_glStopInstrumentsSGIX.?(arg_3685);
}
pub inline fn glGetNamedFramebufferParameterfvAMD(arg_3686: GLuint, arg_3687: GLenum, arg_3688: GLuint, arg_3689: GLuint, arg_3690: GLsizei, arg_3691: [*c]GLfloat) void {
    return epoxy_glGetNamedFramebufferParameterfvAMD.?(arg_3686, arg_3687, arg_3688, arg_3689, arg_3690, arg_3691);
}
pub const GL_422_REV_EXT = 0x80CD;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW = 0x82EC;
pub const GL_TEXTURE18 = 0x84D2;
pub const GL_SYNC_FLUSH_COMMANDS_BIT = 0x00000001;
pub inline fn glVertexAttrib3s(arg_3692: GLuint, arg_3693: GLshort, arg_3694: GLshort, arg_3695: GLshort) void {
    return epoxy_glVertexAttrib3s.?(arg_3692, arg_3693, arg_3694, arg_3695);
}
pub const SCNoFAST64 = __PRI64_PREFIX ++ "o";
pub const GL_UNSIGNED_INT_24_8_EXT = 0x84FA;
pub inline fn glWindowPos4iMESA(arg_3696: GLint, arg_3697: GLint, arg_3698: GLint, arg_3699: GLint) void {
    return epoxy_glWindowPos4iMESA.?(arg_3696, arg_3697, arg_3698, arg_3699);
}
pub const GL_ALPHA_TO_COVERAGE_DITHER_DISABLE_NV = 0x934F;
pub const GL_PACK_RESAMPLE_SGIX = 0x842E;
pub const GL_OES_single_precision = 1;
pub const GL_SOURCE0_ALPHA = 0x8588;
pub const GL_SUBGROUP_FEATURE_PARTITIONED_BIT_NV = 0x00000100;
pub const GL_AMD_program_binary_Z400 = 1;
pub inline fn glInvalidateTexImage(arg_3700: GLuint, arg_3701: GLint) void {
    return epoxy_glInvalidateTexImage.?(arg_3700, arg_3701);
}
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9061;
pub const GL_CLIP_PLANE1_IMG = 0x3001;
pub inline fn glVertexAttrib1svARB(arg_3702: GLuint, arg_3703: [*c]const GLshort) void {
    return epoxy_glVertexAttrib1svARB.?(arg_3702, arg_3703);
}
pub inline fn glActiveTextureARB(arg_3704: GLenum) void {
    return epoxy_glActiveTextureARB.?(arg_3704);
}
pub const GL_FUNC_ADD_EXT = 0x8006;
pub const GL_TEXTURE_SAMPLES_IMG = 0x9136;
pub const GL_HISTOGRAM_FORMAT_EXT = 0x8027;
pub const GL_POLYGON_OFFSET_COMMAND_NV = 0x000E;
pub const GL_MATERIAL_SIDE_HINT_PGI = 0x1A22C;
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_NV = 0x84F8;
pub const GL_QUERY_DEPTH_FAIL_EVENT_BIT_AMD = 0x00000002;
pub inline fn INT16_C(c: var) @TypeOf(c) {
    return c;
}
pub const GL_TEXTURE11 = 0x84CB;
pub const GL_SEPARATE_ATTRIBS_NV = 0x8C8D;
pub inline fn glShadingRateSampleOrderCustomNV(arg_3705: GLenum, arg_3706: GLuint, arg_3707: [*c]const GLint) void {
    return epoxy_glShadingRateSampleOrderCustomNV.?(arg_3705, arg_3706, arg_3707);
}
pub inline fn glProgramUniform1iv(arg_3708: GLuint, arg_3709: GLint, arg_3710: GLsizei, arg_3711: [*c]const GLint) void {
    return epoxy_glProgramUniform1iv.?(arg_3708, arg_3709, arg_3710, arg_3711);
}
pub const _BITS_TYPESIZES_H = 1;
pub const GL_HP_texture_lighting = 1;
pub const GL_NUM_WINDOW_RECTANGLES_EXT = 0x8F15;
pub inline fn glObjectLabelKHR(arg_3712: GLenum, arg_3713: GLuint, arg_3714: GLsizei, arg_3715: [*c]const GLchar) void {
    return epoxy_glObjectLabelKHR.?(arg_3712, arg_3713, arg_3714, arg_3715);
}
pub const GL_TEXTURE_WRAP_R_EXT = 0x8072;
pub const GL_EDGE_FLAG_ARRAY_LIST_STRIDE_IBM = 103085;
pub inline fn glBindShadingRateImageNV(arg_3716: GLuint) void {
    return epoxy_glBindShadingRateImageNV.?(arg_3716);
}
pub inline fn glEndVertexShaderEXT() void {
    return epoxy_glEndVertexShaderEXT.?();
}
pub inline fn glGlobalAlphaFactoriSUN(arg_3717: GLint) void {
    return epoxy_glGlobalAlphaFactoriSUN.?(arg_3717);
}
pub const GL_LAYOUT_SHADER_READ_ONLY_EXT = 0x9591;
pub const GL_GPU_DISJOINT_EXT = 0x8FBB;
pub const GL_SUN_vertex = 1;
pub const GL_MAX_PROGRAM_MATRICES_ARB = 0x862F;
pub const GL_MATRIX24_ARB = 0x88D8;
pub const GL_SMAPHS30_PROGRAM_BINARY_DMP = 0x9251;
pub const GL_TEXTURE_WRAP_S = 0x2802;
pub inline fn glVertexAttrib4dvARB(arg_3718: GLuint, arg_3719: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib4dvARB.?(arg_3718, arg_3719);
}
pub const GL_REFERENCED_BY_GEOMETRY_SHADER_EXT = 0x9309;
pub inline fn glClearNamedFramebufferiv(arg_3720: GLuint, arg_3721: GLenum, arg_3722: GLint, arg_3723: [*c]const GLint) void {
    return epoxy_glClearNamedFramebufferiv.?(arg_3720, arg_3721, arg_3722, arg_3723);
}
pub inline fn glGetMultiTexEnvfvEXT(arg_3724: GLenum, arg_3725: GLenum, arg_3726: GLenum, arg_3727: [*c]GLfloat) void {
    return epoxy_glGetMultiTexEnvfvEXT.?(arg_3724, arg_3725, arg_3726, arg_3727);
}
pub inline fn glColor4hvNV(arg_3728: [*c]const GLhalfNV) void {
    return epoxy_glColor4hvNV.?(arg_3728);
}
pub inline fn glTexStorageMem1DEXT(arg_3729: GLenum, arg_3730: GLsizei, arg_3731: GLenum, arg_3732: GLsizei, arg_3733: GLuint, arg_3734: GLuint64) void {
    return epoxy_glTexStorageMem1DEXT.?(arg_3729, arg_3730, arg_3731, arg_3732, arg_3733, arg_3734);
}
pub const GL_AFFINE_3D_NV = 0x9094;
pub inline fn glDrawMeshTasksNV(arg_3735: GLuint, arg_3736: GLuint) void {
    return epoxy_glDrawMeshTasksNV.?(arg_3735, arg_3736);
}
pub inline fn glGetProgramPipelineivEXT(arg_3737: GLuint, arg_3738: GLenum, arg_3739: [*c]GLint) void {
    return epoxy_glGetProgramPipelineivEXT.?(arg_3737, arg_3738, arg_3739);
}
pub const GL_FLOAT_MAT3x2_NV = 0x8B67;
pub const GL_UNSIGNED_SHORT_8_8_REV_APPLE = 0x85BB;
pub const GL_STATIC_DRAW_ARB = 0x88E4;
pub inline fn glMultiTexCoordP1uiv(arg_3740: GLenum, arg_3741: GLenum, arg_3742: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP1uiv.?(arg_3740, arg_3741, arg_3742);
}
pub inline fn glReplacementCodeusSUN(arg_3743: GLushort) void {
    return epoxy_glReplacementCodeusSUN.?(arg_3743);
}
pub inline fn __glibc_clang_prereq(maj: var, min: var) @TypeOf((__clang_major__ << 16) + @boolToInt(__clang_minor__ >= ((maj << 16) + min))) {
    return (__clang_major__ << 16) + @boolToInt(__clang_minor__ >= ((maj << 16) + min));
}
pub const GL_PROGRAM_BINARY_LENGTH = 0x8741;
pub inline fn glBindTransformFeedback(arg_3744: GLenum, arg_3745: GLuint) void {
    return epoxy_glBindTransformFeedback.?(arg_3744, arg_3745);
}
pub inline fn glRasterPos4iv(arg_3746: [*c]const GLint) void {
    return epoxy_glRasterPos4iv.?(arg_3746);
}
pub const GL_TEXTURE_BORDER = 0x1005;
pub inline fn glTexCoord3dv(arg_3747: [*c]const GLdouble) void {
    return epoxy_glTexCoord3dv.?(arg_3747);
}
pub const GL_MAP1_TEXTURE_COORD_4 = 0x0D96;
pub const GL_DT_SCALE_NV = 0x8711;
pub const GL_TEXTURE_2D_MULTISAMPLE = 0x9100;
pub const GL_PROXY_TEXTURE_1D = 0x8063;
pub const GL_SRC2_RGB = 0x8582;
pub const GL_CLIP_DISTANCE3_APPLE = 0x3003;
pub const GL_UNSIGNED_INT64_ARB = 0x140F;
pub const GL_UNIFORM_BUFFER_BINDING_EXT = 0x8DEF;
pub inline fn glUniform1uivEXT(arg_3748: GLint, arg_3749: GLsizei, arg_3750: [*c]const GLuint) void {
    return epoxy_glUniform1uivEXT.?(arg_3748, arg_3749, arg_3750);
}
pub const GL_MIN_MAP_BUFFER_ALIGNMENT = 0x90BC;
pub const GL_VERTEX_ARRAY_RANGE_POINTER_NV = 0x8521;
pub const GL_INT64_VEC4_ARB = 0x8FEB;
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT_EXT = 0x00000001;
pub const GL_COMPRESSED_SIGNED_R11_EAC = 0x9271;
pub inline fn glGetSeparableFilterEXT(arg_3751: GLenum, arg_3752: GLenum, arg_3753: GLenum, arg_3754: ?*c_void, arg_3755: ?*c_void, arg_3756: ?*c_void) void {
    return epoxy_glGetSeparableFilterEXT.?(arg_3751, arg_3752, arg_3753, arg_3754, arg_3755, arg_3756);
}
pub inline fn glGetPerfMonitorCounterStringAMD(arg_3757: GLuint, arg_3758: GLuint, arg_3759: GLsizei, arg_3760: [*c]GLsizei, arg_3761: [*c]GLchar) void {
    return epoxy_glGetPerfMonitorCounterStringAMD.?(arg_3757, arg_3758, arg_3759, arg_3760, arg_3761);
}
pub const GL_INT_SAMPLER_2D_ARRAY = 0x8DCF;
pub const GL_TRANSFORM_FEEDBACK_VARYING_MAX_LENGTH_EXT = 0x8C76;
pub const __SIZEOF_LONG_DOUBLE__ = 16;
pub inline fn glCompressedTextureSubImage1DEXT(arg_3762: GLuint, arg_3763: GLenum, arg_3764: GLint, arg_3765: GLint, arg_3766: GLsizei, arg_3767: GLenum, arg_3768: GLsizei, arg_3769: ?*const c_void) void {
    return epoxy_glCompressedTextureSubImage1DEXT.?(arg_3762, arg_3763, arg_3764, arg_3765, arg_3766, arg_3767, arg_3768, arg_3769);
}
pub const GL_FENCE_STATUS_NV = 0x84F3;
pub const GL_FRAMEBUFFER_UNDEFINED_OES = 0x8219;
pub inline fn glMultiTexCoord3sv(arg_3770: GLenum, arg_3771: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord3sv.?(arg_3770, arg_3771);
}
pub const GL_LINK_STATUS = 0x8B82;
pub const GL_ARB_cl_event = 1;
pub const GL_SIGNED_LUMINANCE_NV = 0x8701;
pub inline fn glFramebufferRenderbufferOES(arg_3772: GLenum, arg_3773: GLenum, arg_3774: GLenum, arg_3775: GLuint) void {
    return epoxy_glFramebufferRenderbufferOES.?(arg_3772, arg_3773, arg_3774, arg_3775);
}
pub const GL_GREMEDY_frame_terminator = 1;
pub const GL_PALETTE4_RGB5_A1_OES = 0x8B94;
pub inline fn glProgramUniform2ui64NV(arg_3776: GLuint, arg_3777: GLint, arg_3778: GLuint64EXT, arg_3779: GLuint64EXT) void {
    return epoxy_glProgramUniform2ui64NV.?(arg_3776, arg_3777, arg_3778, arg_3779);
}
pub const GL_EXT_index_array_formats = 1;
pub const GL_BOUNDING_BOX_OF_BOUNDING_BOXES_NV = 0x909C;
pub const GL_MAX_FRAMEBUFFER_WIDTH = 0x9315;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTER_BUFFERS = 0x8264;
pub const GL_COORD_REPLACE_ARB = 0x8862;
pub const GL_COMP_BIT_ATI = 0x00000002;
pub const GL_ALL_SHADER_BITS_EXT = 0xFFFFFFFF;
pub const GL_SECONDARY_COLOR_ARRAY_POINTER_EXT = 0x845D;
pub inline fn glReplacementCodeuiNormal3fVertex3fvSUN(arg_3780: [*c]const GLuint, arg_3781: [*c]const GLfloat, arg_3782: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiNormal3fVertex3fvSUN.?(arg_3780, arg_3781, arg_3782);
}
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X1_PIXELS_NV = 0x9567;
pub inline fn glDeleteAsyncMarkersSGIX(arg_3783: GLuint, arg_3784: GLsizei) void {
    return epoxy_glDeleteAsyncMarkersSGIX.?(arg_3783, arg_3784);
}
pub inline fn glMultiDrawElementsIndirectEXT(arg_3785: GLenum, arg_3786: GLenum, arg_3787: ?*const c_void, arg_3788: GLsizei, arg_3789: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectEXT.?(arg_3785, arg_3786, arg_3787, arg_3788, arg_3789);
}
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES = 0x8DE0;
pub const GL_ALPHA8_OES = 0x803C;
pub inline fn glSecondaryColor3s(arg_3790: GLshort, arg_3791: GLshort, arg_3792: GLshort) void {
    return epoxy_glSecondaryColor3s.?(arg_3790, arg_3791, arg_3792);
}
pub const GL_SGIX_igloo_interface = 1;
pub const GL_MAX_FRAGMENT_UNIFORM_VECTORS = 0x8DFD;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 0x8CD0;
pub const GL_MAX_TEXTURE_LOD_BIAS = 0x84FD;
pub inline fn glGetDebugMessageLogARB(arg_3793: GLuint, arg_3794: GLsizei, arg_3795: [*c]GLenum, arg_3796: [*c]GLenum, arg_3797: [*c]GLuint, arg_3798: [*c]GLenum, arg_3799: [*c]GLsizei, arg_3800: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLogARB.?(arg_3793, arg_3794, arg_3795, arg_3796, arg_3797, arg_3798, arg_3799, arg_3800);
}
pub inline fn glWindowPos3fMESA(arg_3801: GLfloat, arg_3802: GLfloat, arg_3803: GLfloat) void {
    return epoxy_glWindowPos3fMESA.?(arg_3801, arg_3802, arg_3803);
}
pub inline fn glUniformMatrix2x4fvNV(arg_3804: GLint, arg_3805: GLsizei, arg_3806: GLboolean, arg_3807: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x4fvNV.?(arg_3804, arg_3805, arg_3806, arg_3807);
}
pub inline fn glVertex2s(arg_3808: GLshort, arg_3809: GLshort) void {
    return epoxy_glVertex2s.?(arg_3808, arg_3809);
}
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE_ARB = 0x8623;
pub const GL_RENDERER = 0x1F01;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS_EXT = 0x88FF;
pub inline fn __glibc_has_attribute(attr: var) @TypeOf(__has_attribute(attr)) {
    return __has_attribute(attr);
}
pub const GL_MESH_SUBROUTINE_UNIFORM_NV = 0x957E;
pub const SCNxFAST32 = __PRIPTR_PREFIX ++ "x";
pub const GL_TIMEOUT_IGNORED = 0xFFFFFFFFFFFFFFFF;
pub const GL_COLOR_ATTACHMENT10 = 0x8CEA;
pub const GL_COMPRESSED_RGB8_ETC2 = 0x9274;
pub const GL_UNPACK_COMPRESSED_BLOCK_WIDTH = 0x9127;
pub inline fn glFramebufferTexture3D(arg_3810: GLenum, arg_3811: GLenum, arg_3812: GLenum, arg_3813: GLuint, arg_3814: GLint, arg_3815: GLint) void {
    return epoxy_glFramebufferTexture3D.?(arg_3810, arg_3811, arg_3812, arg_3813, arg_3814, arg_3815);
}
pub inline fn glVertexAttribI1i(arg_3816: GLuint, arg_3817: GLint) void {
    return epoxy_glVertexAttribI1i.?(arg_3816, arg_3817);
}
pub inline fn glTexStorage2DEXT(arg_3818: GLenum, arg_3819: GLsizei, arg_3820: GLenum, arg_3821: GLsizei, arg_3822: GLsizei) void {
    return epoxy_glTexStorage2DEXT.?(arg_3818, arg_3819, arg_3820, arg_3821, arg_3822);
}
pub inline fn glStartTilingQCOM(arg_3823: GLuint, arg_3824: GLuint, arg_3825: GLuint, arg_3826: GLuint, arg_3827: GLbitfield) void {
    return epoxy_glStartTilingQCOM.?(arg_3823, arg_3824, arg_3825, arg_3826, arg_3827);
}
pub const GL_IMAGE_3D_EXT = 0x904E;
pub const GL_POLYGON_STIPPLE_BIT = 0x00000010;
pub inline fn glTextureBarrier() void {
    return epoxy_glTextureBarrier.?();
}
pub const GL_QCOM_tiled_rendering = 1;
pub inline fn glIsNamedBufferResidentNV(arg_3828: GLuint) GLboolean {
    return epoxy_glIsNamedBufferResidentNV.?(arg_3828);
}
pub const GL_DOT4_ATI = 0x8967;
pub const GL_SELECTION_BUFFER_SIZE = 0x0DF4;
pub const GL_LINEAR_TILING_EXT = 0x9585;
pub const GL_PREVIOUS_EXT = 0x8578;
pub const GL_TEXTURE_BINDING_1D = 0x8068;
pub const GL_IMAGE_BINDING_LEVEL_EXT = 0x8F3B;
pub const GL_VIEW_CLASS_ASTC_10x6_RGBA = 0x9391;
pub const GL_OES_primitive_bounding_box = 1;
pub const GL_CLIP_DISTANCE0_EXT = 0x3000;
pub inline fn glRasterPos3fv(arg_3829: [*c]const GLfloat) void {
    return epoxy_glRasterPos3fv.?(arg_3829);
}
pub inline fn glVertexAttribI3iv(arg_3830: GLuint, arg_3831: [*c]const GLint) void {
    return epoxy_glVertexAttribI3iv.?(arg_3830, arg_3831);
}
pub const GL_VIEW_CLASS_ASTC_8x6_RGBA = 0x938E;
pub const GL_LINE_STIPPLE_REPEAT = 0x0B26;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS_SGI = 0x80BB;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE = 0x80D2;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT = 0x8CD6;
pub inline fn glApplyFramebufferAttachmentCMAAINTEL() void {
    return epoxy_glApplyFramebufferAttachmentCMAAINTEL.?();
}
pub const GL_SHADER_BINARY_FORMATS = 0x8DF8;
pub inline fn glGenTexturesEXT(arg_3832: GLsizei, arg_3833: [*c]GLuint) void {
    return epoxy_glGenTexturesEXT.?(arg_3832, arg_3833);
}
pub const GL_PIXEL_MAP_I_TO_R_SIZE = 0x0CB2;
pub const GL_UNSIGNED_BYTE_3_3_2_EXT = 0x8032;
pub const GL_NV_texture_compression_s3tc_update = 1;
pub const GL_DEPTH_TEST = 0x0B71;
pub const GL_EXT_pixel_transform_color_table = 1;
pub inline fn glUniform4fvARB(arg_3834: GLint, arg_3835: GLsizei, arg_3836: [*c]const GLfloat) void {
    return epoxy_glUniform4fvARB.?(arg_3834, arg_3835, arg_3836);
}
pub inline fn glGetProgramResourceLocation(arg_3837: GLuint, arg_3838: GLenum, arg_3839: [*c]const GLchar) GLint {
    return epoxy_glGetProgramResourceLocation.?(arg_3837, arg_3838, arg_3839);
}
pub const GL_FULL_STIPPLE_HINT_PGI = 0x1A219;
pub inline fn glPathColorGenNV(arg_3840: GLenum, arg_3841: GLenum, arg_3842: GLenum, arg_3843: [*c]const GLfloat) void {
    return epoxy_glPathColorGenNV.?(arg_3840, arg_3841, arg_3842, arg_3843);
}
pub const GL_LAYER_NV = 0x8DAA;
pub inline fn glUniform3ui(arg_3844: GLint, arg_3845: GLuint, arg_3846: GLuint, arg_3847: GLuint) void {
    return epoxy_glUniform3ui.?(arg_3844, arg_3845, arg_3846, arg_3847);
}
pub const GL_ARB_robustness_isolation = 1;
pub inline fn glUniformMatrix3x4fvNV(arg_3848: GLint, arg_3849: GLsizei, arg_3850: GLboolean, arg_3851: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x4fvNV.?(arg_3848, arg_3849, arg_3850, arg_3851);
}
pub const GL_FRAMEBUFFER_BINDING = 0x8CA6;
pub const GL_ARB_separate_shader_objects = 1;
pub const GL_BUFFER_FLUSHING_UNMAP_APPLE = 0x8A13;
pub inline fn __glibc_macro_warning(message: var) @TypeOf(__glibc_macro_warning1(GCC ++ (warning ++ message))) {
    return __glibc_macro_warning1(GCC ++ (warning ++ message));
}
pub const GL_SUB_ATI = 0x8965;
pub const GL_E_TIMES_F_NV = 0x8531;
pub const GL_VERSION_3_2 = 1;
pub const GL_SGX_PROGRAM_BINARY_IMG = 0x9130;
pub inline fn glTextureParameterIuiv(arg_3852: GLuint, arg_3853: GLenum, arg_3854: [*c]const GLuint) void {
    return epoxy_glTextureParameterIuiv.?(arg_3852, arg_3853, arg_3854);
}
pub inline fn glInvalidateBufferData(arg_3855: GLuint) void {
    return epoxy_glInvalidateBufferData.?(arg_3855);
}
pub const GL_VIEWPORT_SWIZZLE_X_NV = 0x9358;
pub const GL_TEXTURE12_ARB = 0x84CC;
pub const GL_NATIVE_GRAPHICS_END_HINT_PGI = 0x1A204;
pub const GL_EXT_clear_texture = 1;
pub const GL_NAND = 0x150E;
pub inline fn glVertexAttribIPointer(arg_3856: GLuint, arg_3857: GLint, arg_3858: GLenum, arg_3859: GLsizei, arg_3860: ?*const c_void) void {
    return epoxy_glVertexAttribIPointer.?(arg_3856, arg_3857, arg_3858, arg_3859, arg_3860);
}
pub const SCNdMAX = __PRI64_PREFIX ++ "d";
pub inline fn glGetVertexAttribIuiv(arg_3861: GLuint, arg_3862: GLenum, arg_3863: [*c]GLuint) void {
    return epoxy_glGetVertexAttribIuiv.?(arg_3861, arg_3862, arg_3863);
}
pub const GL_NV_bindless_texture = 1;
pub const PRIiPTR = __PRIPTR_PREFIX ++ "i";
pub inline fn glMultiTexEnvfEXT(arg_3864: GLenum, arg_3865: GLenum, arg_3866: GLenum, arg_3867: GLfloat) void {
    return epoxy_glMultiTexEnvfEXT.?(arg_3864, arg_3865, arg_3866, arg_3867);
}
pub const GL_ETC1_SRGB8_NV = 0x88EE;
pub const GL_RED_INTEGER_EXT = 0x8D94;
pub const GL_VIV_shader_binary = 1;
pub inline fn glArrayObjectATI(arg_3868: GLenum, arg_3869: GLint, arg_3870: GLenum, arg_3871: GLsizei, arg_3872: GLuint, arg_3873: GLuint) void {
    return epoxy_glArrayObjectATI.?(arg_3868, arg_3869, arg_3870, arg_3871, arg_3872, arg_3873);
}
pub const GL_TANGENT_ARRAY_EXT = 0x8439;
pub const SCNdPTR = __PRIPTR_PREFIX ++ "d";
pub const GL_COMPRESSED_RG = 0x8226;
pub const GL_OBJECT_BUFFER_USAGE_ATI = 0x8765;
pub const GL_STENCIL_BACK_VALUE_MASK = 0x8CA4;
pub inline fn glResetHistogram(arg_3874: GLenum) void {
    return epoxy_glResetHistogram.?(arg_3874);
}
pub inline fn glVertex4dv(arg_3875: [*c]const GLdouble) void {
    return epoxy_glVertex4dv.?(arg_3875);
}
pub const PRIuFAST64 = __PRI64_PREFIX ++ "u";
pub const GL_TEXTURE_1D_STACK_MESAX = 0x8759;
pub const INT_FAST16_MAX = @as(c_long, 9223372036854775807);
pub const GL_TEXTURE_COMPRESSED_ARB = 0x86A1;
pub const GL_R11F_G11F_B10F = 0x8C3A;
pub const GL_MAX_VERTEX_ATOMIC_COUNTERS = 0x92D2;
pub inline fn glMapControlPointsNV(arg_3876: GLenum, arg_3877: GLuint, arg_3878: GLenum, arg_3879: GLsizei, arg_3880: GLsizei, arg_3881: GLint, arg_3882: GLint, arg_3883: GLboolean, arg_3884: ?*const c_void) void {
    return epoxy_glMapControlPointsNV.?(arg_3876, arg_3877, arg_3878, arg_3879, arg_3880, arg_3881, arg_3882, arg_3883, arg_3884);
}
pub const GL_TEXTURE_LUMINANCE_TYPE = 0x8C14;
pub const GL_CMYKA_EXT = 0x800D;
pub inline fn glLightModelfv(arg_3885: GLenum, arg_3886: [*c]const GLfloat) void {
    return epoxy_glLightModelfv.?(arg_3885, arg_3886);
}
pub inline fn glCopyTexSubImage3DEXT(arg_3887: GLenum, arg_3888: GLint, arg_3889: GLint, arg_3890: GLint, arg_3891: GLint, arg_3892: GLint, arg_3893: GLint, arg_3894: GLsizei, arg_3895: GLsizei) void {
    return epoxy_glCopyTexSubImage3DEXT.?(arg_3887, arg_3888, arg_3889, arg_3890, arg_3891, arg_3892, arg_3893, arg_3894, arg_3895);
}
pub const GL_PLUS_CLAMPED_NV = 0x92B1;
pub const GL_ARB_base_instance = 1;
pub const GL_ARB_sparse_texture_clamp = 1;
pub const GL_EXPAND_NORMAL_NV = 0x8538;
pub inline fn glCompressedMultiTexSubImage3DEXT(arg_3896: GLenum, arg_3897: GLenum, arg_3898: GLint, arg_3899: GLint, arg_3900: GLint, arg_3901: GLint, arg_3902: GLsizei, arg_3903: GLsizei, arg_3904: GLsizei, arg_3905: GLenum, arg_3906: GLsizei, arg_3907: ?*const c_void) void {
    return epoxy_glCompressedMultiTexSubImage3DEXT.?(arg_3896, arg_3897, arg_3898, arg_3899, arg_3900, arg_3901, arg_3902, arg_3903, arg_3904, arg_3905, arg_3906, arg_3907);
}
pub const GL_ARB_texture_query_lod = 1;
pub inline fn glSamplerParameterfv(arg_3908: GLuint, arg_3909: GLenum, arg_3910: [*c]const GLfloat) void {
    return epoxy_glSamplerParameterfv.?(arg_3908, arg_3909, arg_3910);
}
pub inline fn glFogxOES(arg_3911: GLenum, arg_3912: GLfixed) void {
    return epoxy_glFogxOES.?(arg_3911, arg_3912);
}
pub const GL_INTENSITY32F_ARB = 0x8817;
pub const GL_COMPUTE_PROGRAM_NV = 0x90FB;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_OES = 0x900D;
pub const GL_LUMINANCE32F_ARB = 0x8818;
pub const GL_MAX_MESH_OUTPUT_PRIMITIVES_NV = 0x9539;
pub const GL_VERSION_4_1 = 1;
pub inline fn glVertexStream2svATI(arg_3913: GLenum, arg_3914: [*c]const GLshort) void {
    return epoxy_glVertexStream2svATI.?(arg_3913, arg_3914);
}
pub const GL_UNIFORM_BUFFER_LENGTH_NV = 0x9370;
pub inline fn __GLIBC_PREREQ(maj: var, min: var) @TypeOf((__GLIBC__ << 16) + @boolToInt(__GLIBC_MINOR__ >= ((maj << 16) + min))) {
    return (__GLIBC__ << 16) + @boolToInt(__GLIBC_MINOR__ >= ((maj << 16) + min));
}
pub const GL_ARB_depth_texture = 1;
pub const GL_AMD_gcn_shader = 1;
pub inline fn glGetTransformFeedbackVaryingNV(arg_3915: GLuint, arg_3916: GLuint, arg_3917: [*c]GLint) void {
    return epoxy_glGetTransformFeedbackVaryingNV.?(arg_3915, arg_3916, arg_3917);
}
pub const GL_VERTEX_ATTRIB_MAP2_SIZE_APPLE = 0x8A06;
pub inline fn glAlphaFuncxOES(arg_3918: GLenum, arg_3919: GLfixed) void {
    return epoxy_glAlphaFuncxOES.?(arg_3918, arg_3919);
}
pub const GL_COVERAGE_COMPONENT4_NV = 0x8ED1;
pub const GL_VERTEX_ARRAY_RANGE_WITHOUT_FLUSH_NV = 0x8533;
pub inline fn glShaderOp1EXT(arg_3920: GLenum, arg_3921: GLuint, arg_3922: GLuint) void {
    return epoxy_glShaderOp1EXT.?(arg_3920, arg_3921, arg_3922);
}
pub const GL_TEXTURE_BINDING_2D_MULTISAMPLE_ARRAY_OES = 0x9105;
pub const GL_LINE_STRIP_ADJACENCY_ARB = 0x000B;
pub inline fn glNamedProgramLocalParameterI4uivEXT(arg_3923: GLuint, arg_3924: GLenum, arg_3925: GLuint, arg_3926: [*c]const GLuint) void {
    return epoxy_glNamedProgramLocalParameterI4uivEXT.?(arg_3923, arg_3924, arg_3925, arg_3926);
}
pub const GL_BUFFER_GPU_ADDRESS_NV = 0x8F1D;
pub const GL_CULL_MODES_NV = 0x86E0;
pub const GL_INT8_VEC2_NV = 0x8FE1;
pub inline fn __LDBL_REDIR_NTH(name: var, proto: var) @TypeOf(name ++ (proto ++ __THROW)) {
    return name ++ (proto ++ __THROW);
}
pub const GL_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x8898;
pub const INT64_MIN = -__INT64_C(9223372036854775807) - 1;
pub inline fn glTransformPathNV(arg_3927: GLuint, arg_3928: GLuint, arg_3929: GLenum, arg_3930: [*c]const GLfloat) void {
    return epoxy_glTransformPathNV.?(arg_3927, arg_3928, arg_3929, arg_3930);
}
pub const GL_TRANSFORM_FEEDBACK_NV = 0x8E22;
pub inline fn glGetTransformFeedbacki_v(arg_3931: GLuint, arg_3932: GLenum, arg_3933: GLuint, arg_3934: [*c]GLint) void {
    return epoxy_glGetTransformFeedbacki_v.?(arg_3931, arg_3932, arg_3933, arg_3934);
}
pub const GL_FOG_END = 0x0B64;
pub const GL_POST_COLOR_MATRIX_ALPHA_SCALE_SGI = 0x80B7;
pub inline fn glSamplePatternEXT(arg_3935: GLenum) void {
    return epoxy_glSamplePatternEXT.?(arg_3935);
}
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_EXT = 0x851C;
pub inline fn glVDPAUGetSurfaceivNV(arg_3936: GLvdpauSurfaceNV, arg_3937: GLenum, arg_3938: GLsizei, arg_3939: [*c]GLsizei, arg_3940: [*c]GLint) void {
    return epoxy_glVDPAUGetSurfaceivNV.?(arg_3936, arg_3937, arg_3938, arg_3939, arg_3940);
}
pub const GL_KHR_robustness = 1;
pub const GL_RENDERBUFFER_ALPHA_SIZE_EXT = 0x8D53;
pub inline fn glDrawElementsIndirect(arg_3941: GLenum, arg_3942: GLenum, arg_3943: ?*const c_void) void {
    return epoxy_glDrawElementsIndirect.?(arg_3941, arg_3942, arg_3943);
}
pub inline fn glCopyTexSubImage3DOES(arg_3944: GLenum, arg_3945: GLint, arg_3946: GLint, arg_3947: GLint, arg_3948: GLint, arg_3949: GLint, arg_3950: GLint, arg_3951: GLsizei, arg_3952: GLsizei) void {
    return epoxy_glCopyTexSubImage3DOES.?(arg_3944, arg_3945, arg_3946, arg_3947, arg_3948, arg_3949, arg_3950, arg_3951, arg_3952);
}
pub inline fn glFramebufferTexture3DOES(arg_3953: GLenum, arg_3954: GLenum, arg_3955: GLenum, arg_3956: GLuint, arg_3957: GLint, arg_3958: GLint) void {
    return epoxy_glFramebufferTexture3DOES.?(arg_3953, arg_3954, arg_3955, arg_3956, arg_3957, arg_3958);
}
pub const GL_DEPTH32F_STENCIL8 = 0x8CAD;
pub const GL_LINEAR_ATTENUATION = 0x1208;
pub const WINT_MAX = @as(c_uint, 4294967295);
pub const __USE_POSIX199309 = 1;
pub const GL_SAMPLER_2D_SHADOW_EXT = 0x8B62;
pub const GL_OFFSET_TEXTURE_2D_SCALE_NV = 0x86E2;
pub const GL_COMPRESSED_SRGB_ALPHA_EXT = 0x8C49;
pub inline fn glGetMultisamplefv(arg_3959: GLenum, arg_3960: GLuint, arg_3961: [*c]GLfloat) void {
    return epoxy_glGetMultisamplefv.?(arg_3959, arg_3960, arg_3961);
}
pub const GL_INDEX_TEST_REF_EXT = 0x81B7;
pub const GL_FRAGMENT_SHADER = 0x8B30;
pub const GL_FRAMEBUFFER_FETCH_NONCOHERENT_QCOM = 0x96A2;
pub const GL_EFFECTIVE_RASTER_SAMPLES_EXT = 0x932C;
pub const GL_PATH_FILL_COVER_MODE_NV = 0x9082;
pub inline fn glIsAsyncMarkerSGIX(arg_3962: GLuint) GLboolean {
    return epoxy_glIsAsyncMarkerSGIX.?(arg_3962);
}
pub inline fn glClipPlane(arg_3963: GLenum, arg_3964: [*c]const GLdouble) void {
    return epoxy_glClipPlane.?(arg_3963, arg_3964);
}
pub const GL_SAMPLES_PASSED_ARB = 0x8914;
pub const PRIoLEAST64 = __PRI64_PREFIX ++ "o";
pub const INT64_MAX = __INT64_C(9223372036854775807);
pub const GL_ALWAYS_FAST_HINT_PGI = 0x1A20C;
pub const GL_EXT_shadow_samplers = 1;
pub const GL_BINORMAL_ARRAY_EXT = 0x843A;
pub const GL_COLOR_ATTACHMENT30 = 0x8CFE;
pub const GL_MAX_ATOMIC_COUNTER_BUFFER_SIZE = 0x92D8;
pub const GL_RG16F_EXT = 0x822F;
pub const GL_LINE_STRIP_ADJACENCY_EXT = 0x000B;
pub const GL_LIGHTING_BIT = 0x00000040;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_APPLE = 0x8D56;
pub const GL_PARAMETER_BUFFER = 0x80EE;
pub inline fn glMultiTexCoord1fvARB(arg_3965: GLenum, arg_3966: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord1fvARB.?(arg_3965, arg_3966);
}
pub const GL_NEAREST_MIPMAP_NEAREST = 0x2700;
pub inline fn glWindowPos2fvARB(arg_3967: [*c]const GLfloat) void {
    return epoxy_glWindowPos2fvARB.?(arg_3967);
}
pub const GL_FRAGMENT_LIGHT1_SGIX = 0x840D;
pub const GL_DETAIL_TEXTURE_LEVEL_SGIS = 0x809A;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900C;
pub const GL_EXT_texture_type_2_10_10_10_REV = 1;
pub inline fn glProgramUniformMatrix4dv(arg_3968: GLuint, arg_3969: GLint, arg_3970: GLsizei, arg_3971: GLboolean, arg_3972: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4dv.?(arg_3968, arg_3969, arg_3970, arg_3971, arg_3972);
}
pub inline fn glMulticastGetQueryObjecti64vNV(arg_3973: GLuint, arg_3974: GLuint, arg_3975: GLenum, arg_3976: [*c]GLint64) void {
    return epoxy_glMulticastGetQueryObjecti64vNV.?(arg_3973, arg_3974, arg_3975, arg_3976);
}
pub const GL_DRAW_BUFFER2_ARB = 0x8827;
pub const GL_LUMINANCE_FLOAT32_ATI = 0x8818;
pub const GL_BOOL_VEC4 = 0x8B59;
pub const GL_EXT_texture_array = 1;
pub inline fn glGetMapdv(arg_3977: GLenum, arg_3978: GLenum, arg_3979: [*c]GLdouble) void {
    return epoxy_glGetMapdv.?(arg_3977, arg_3978, arg_3979);
}
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CE;
pub const GL_COMPRESSED_RGBA_ASTC_4x4_KHR = 0x93B0;
pub const GL_PIXEL_MAP_A_TO_A = 0x0C79;
pub inline fn glMultiTexCoord1dv(arg_3980: GLenum, arg_3981: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord1dv.?(arg_3980, arg_3981);
}
pub const GL_ARB_shader_subroutine = 1;
pub const GL_OML_subsample = 1;
pub inline fn glPointSize(arg_3982: GLfloat) void {
    return epoxy_glPointSize.?(arg_3982);
}
pub const GL_UNPACK_PREMULTIPLY_ALPHA_WEBGL = 0x9241;
pub const GL_NV_vertex_program2 = 1;
pub const GL_TILE_RASTER_ORDER_FIXED_MESA = 0x8BB8;
pub const __FLOAT128__ = 1;
pub inline fn glListBase(arg_3983: GLuint) void {
    return epoxy_glListBase.?(arg_3983);
}
pub const GL_FONT_HEIGHT_BIT_NV = 0x00800000;
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS_EXT = 0x886C;
pub const GL_TEXTURE_HEIGHT = 0x1001;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_ARB = 0x8519;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY = 0x905F;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET = 0x8E5B;
pub const GL_NV_parameter_buffer_object2 = 1;
pub const GL_PROGRAM_PIPELINE_BINDING = 0x825A;
pub inline fn glBindVertexArray(arg_3984: GLuint) void {
    return epoxy_glBindVertexArray.?(arg_3984);
}
pub inline fn glUniformMatrix2dv(arg_3985: GLint, arg_3986: GLsizei, arg_3987: GLboolean, arg_3988: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix2dv.?(arg_3985, arg_3986, arg_3987, arg_3988);
}
pub const GL_RENDERBUFFER_STENCIL_SIZE = 0x8D55;
pub const GL_ALPHA_TEST_REF_QCOM = 0x0BC2;
pub const GL_DSDT8_MAG8_INTENSITY8_NV = 0x870B;
pub const GL_1PASS_SGIS = 0x80A1;
pub const __USE_MISC = 1;
pub inline fn glGetInternalformatSampleivNV(arg_3989: GLenum, arg_3990: GLenum, arg_3991: GLsizei, arg_3992: GLenum, arg_3993: GLsizei, arg_3994: [*c]GLint) void {
    return epoxy_glGetInternalformatSampleivNV.?(arg_3989, arg_3990, arg_3991, arg_3992, arg_3993, arg_3994);
}
pub inline fn glMaterialfv(arg_3995: GLenum, arg_3996: GLenum, arg_3997: [*c]const GLfloat) void {
    return epoxy_glMaterialfv.?(arg_3995, arg_3996, arg_3997);
}
pub const GL_TEXTURE_MATRIX_FLOAT_AS_INT_BITS_OES = 0x898F;
pub inline fn glMultiTexCoord1s(arg_3998: GLenum, arg_3999: GLshort) void {
    return epoxy_glMultiTexCoord1s.?(arg_3998, arg_3999);
}
pub const GL_CONVEX_HULL_NV = 0x908B;
pub inline fn glIndexxvOES(arg_4000: [*c]const GLfixed) void {
    return epoxy_glIndexxvOES.?(arg_4000);
}
pub inline fn glTexCoord2d(arg_4001: GLdouble, arg_4002: GLdouble) void {
    return epoxy_glTexCoord2d.?(arg_4001, arg_4002);
}
pub const GL_C4F_N3F_V3F = 0x2A26;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES_EXT = 0x8E75;
pub inline fn glPointParameteriv(arg_4003: GLenum, arg_4004: [*c]const GLint) void {
    return epoxy_glPointParameteriv.?(arg_4003, arg_4004);
}
pub const GL_ATI_vertex_array_object = 1;
pub const GL_VIDEO_COLOR_CONVERSION_MIN_NV = 0x902B;
pub const GL_DRAW_BUFFER8_NV = 0x882D;
pub inline fn glLineWidth(arg_4005: GLfloat) void {
    return epoxy_glLineWidth.?(arg_4005);
}
pub const GL_FRAMEBUFFER_UNSUPPORTED_OES = 0x8CDD;
pub inline fn glPushAttrib(arg_4006: GLbitfield) void {
    return epoxy_glPushAttrib.?(arg_4006);
}
pub const GL_ANY_SAMPLES_PASSED_EXT = 0x8C2F;
pub const GL_TRANSFORM_FEEDBACK_ACTIVE = 0x8E24;
pub const UINT64_MAX = __UINT64_C(18446744073709551615);
pub inline fn glQueryResourceNV(arg_4007: GLenum, arg_4008: GLint, arg_4009: GLuint, arg_4010: [*c]GLint) GLint {
    return epoxy_glQueryResourceNV.?(arg_4007, arg_4008, arg_4009, arg_4010);
}
pub inline fn glUniform4d(arg_4011: GLint, arg_4012: GLdouble, arg_4013: GLdouble, arg_4014: GLdouble, arg_4015: GLdouble) void {
    return epoxy_glUniform4d.?(arg_4011, arg_4012, arg_4013, arg_4014, arg_4015);
}
pub inline fn glVertexP3ui(arg_4016: GLenum, arg_4017: GLuint) void {
    return epoxy_glVertexP3ui.?(arg_4016, arg_4017);
}
pub inline fn glGetClipPlane(arg_4018: GLenum, arg_4019: [*c]GLdouble) void {
    return epoxy_glGetClipPlane.?(arg_4018, arg_4019);
}
pub const GL_DEBUG_TYPE_POP_GROUP = 0x826A;
pub const GL_EYE_RADIAL_NV = 0x855B;
pub inline fn glCreateFramebuffers(arg_4020: GLsizei, arg_4021: [*c]GLuint) void {
    return epoxy_glCreateFramebuffers.?(arg_4020, arg_4021);
}
pub const GL_SAMPLE_BUFFERS_3DFX = 0x86B3;
pub const GL_QUAD_MESH_SUN = 0x8614;
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER = 0x8CDC;
pub const GL_LINE_LOOP = 0x0002;
pub const __POINTER_WIDTH__ = 64;
pub const GL_VIEW_CLASS_ASTC_10x5_RGBA = 0x9390;
pub const GL_IMAGE_CLASS_1_X_16 = 0x82BE;
pub const GL_COLOR_TABLE_RED_SIZE = 0x80DA;
pub inline fn glGetProgramSubroutineParameteruivNV(arg_4022: GLenum, arg_4023: GLuint, arg_4024: [*c]GLuint) void {
    return epoxy_glGetProgramSubroutineParameteruivNV.?(arg_4022, arg_4023, arg_4024);
}
pub const GL_RESAMPLE_DECIMATE_SGIX = 0x8430;
pub const GL_SPRITE_OBJECT_ALIGNED_SGIX = 0x814D;
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Z_NV = 0x9354;
pub const GL_EXT_histogram = 1;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_ARB = 0x8242;
pub inline fn glFlushMappedBufferRangeAPPLE(arg_4025: GLenum, arg_4026: GLintptr, arg_4027: GLsizeiptr) void {
    return epoxy_glFlushMappedBufferRangeAPPLE.?(arg_4025, arg_4026, arg_4027);
}
pub const GL_FLOAT_RG32_NV = 0x8887;
pub inline fn glMultiDrawArraysIndirectBindlessNV(arg_4028: GLenum, arg_4029: ?*const c_void, arg_4030: GLsizei, arg_4031: GLsizei, arg_4032: GLint) void {
    return epoxy_glMultiDrawArraysIndirectBindlessNV.?(arg_4028, arg_4029, arg_4030, arg_4031, arg_4032);
}
pub const GL_CLIP_DISTANCE_NV = 0x8C7A;
pub const GL_CON_25_ATI = 0x895A;
pub inline fn glTexBumpParameterivATI(arg_4033: GLenum, arg_4034: [*c]const GLint) void {
    return epoxy_glTexBumpParameterivATI.?(arg_4033, arg_4034);
}
pub const PRId16 = "d";
pub const GL_REPLACEMENT_CODE_ARRAY_POINTER_SUN = 0x85C3;
pub inline fn glIsEnablediNV(arg_4035: GLenum, arg_4036: GLuint) GLboolean {
    return epoxy_glIsEnablediNV.?(arg_4035, arg_4036);
}
pub inline fn glActiveTexture(arg_4037: GLenum) void {
    return epoxy_glActiveTexture.?(arg_4037);
}
pub const GL_WIDE_LINE_HINT_PGI = 0x1A222;
pub const GL_RECT_NV = 0xF6;
pub inline fn glCopyTexImage2D(arg_4038: GLenum, arg_4039: GLint, arg_4040: GLenum, arg_4041: GLint, arg_4042: GLint, arg_4043: GLsizei, arg_4044: GLsizei, arg_4045: GLint) void {
    return epoxy_glCopyTexImage2D.?(arg_4038, arg_4039, arg_4040, arg_4041, arg_4042, arg_4043, arg_4044, arg_4045);
}
pub const GL_MATRIX7_ARB = 0x88C7;
pub const GL_COLOR_ATTACHMENT0_EXT = 0x8CE0;
pub inline fn glMultiTexParameteriEXT(arg_4046: GLenum, arg_4047: GLenum, arg_4048: GLenum, arg_4049: GLint) void {
    return epoxy_glMultiTexParameteriEXT.?(arg_4046, arg_4047, arg_4048, arg_4049);
}
pub inline fn glTexImage2DMultisampleCoverageNV(arg_4050: GLenum, arg_4051: GLsizei, arg_4052: GLsizei, arg_4053: GLint, arg_4054: GLsizei, arg_4055: GLsizei, arg_4056: GLboolean) void {
    return epoxy_glTexImage2DMultisampleCoverageNV.?(arg_4050, arg_4051, arg_4052, arg_4053, arg_4054, arg_4055, arg_4056);
}
pub const GL_LIGHT1 = 0x4001;
pub inline fn glBlendEquationSeparateIndexedAMD(arg_4057: GLuint, arg_4058: GLenum, arg_4059: GLenum) void {
    return epoxy_glBlendEquationSeparateIndexedAMD.?(arg_4057, arg_4058, arg_4059);
}
pub const GL_DEBUG_TYPE_DEPRECATED_BEHAVIOR = 0x824D;
pub const GL_OBJECT_LINE_SGIS = 0x81F7;
pub const GL_MAX_NUM_ACTIVE_VARIABLES = 0x92F7;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN = 0x8C88;
pub const GL_RG8I = 0x8237;
pub const GL_MAX_COMPUTE_UNIFORM_BLOCKS = 0x91BB;
pub inline fn glVertexAttribFormatNV(arg_4060: GLuint, arg_4061: GLint, arg_4062: GLenum, arg_4063: GLboolean, arg_4064: GLsizei) void {
    return epoxy_glVertexAttribFormatNV.?(arg_4060, arg_4061, arg_4062, arg_4063, arg_4064);
}
pub const GL_SPARSE_STORAGE_BIT_ARB = 0x0400;
pub const __INT_FAST16_FMTi__ = "hi";
pub inline fn glGetPerfMonitorGroupsAMD(arg_4065: [*c]GLint, arg_4066: GLsizei, arg_4067: [*c]GLuint) void {
    return epoxy_glGetPerfMonitorGroupsAMD.?(arg_4065, arg_4066, arg_4067);
}
pub inline fn glGetSamplerParameterIivEXT(arg_4068: GLuint, arg_4069: GLenum, arg_4070: [*c]GLint) void {
    return epoxy_glGetSamplerParameterIivEXT.?(arg_4068, arg_4069, arg_4070);
}
pub const GL_OBJECT_COMPILE_STATUS_ARB = 0x8B81;
pub const GL_PRIMITIVES_SUBMITTED = 0x82EF;
pub inline fn glGenFramebuffersEXT(arg_4071: GLsizei, arg_4072: [*c]GLuint) void {
    return epoxy_glGenFramebuffersEXT.?(arg_4071, arg_4072);
}
pub inline fn glGetCombinerInputParameterfvNV(arg_4073: GLenum, arg_4074: GLenum, arg_4075: GLenum, arg_4076: GLenum, arg_4077: [*c]GLfloat) void {
    return epoxy_glGetCombinerInputParameterfvNV.?(arg_4073, arg_4074, arg_4075, arg_4076, arg_4077);
}
pub const GL_DOUBLE_MAT2 = 0x8F46;
pub const GL_FRONT_FACE = 0x0B46;
pub const GL_DEBUG_GROUP_STACK_DEPTH = 0x826D;
pub inline fn glDepthRangedNV(arg_4078: GLdouble, arg_4079: GLdouble) void {
    return epoxy_glDepthRangedNV.?(arg_4078, arg_4079);
}
pub const GL_TEXTURE1 = 0x84C1;
pub const GL_TESS_CONTROL_SUBROUTINE = 0x92E9;
pub const GL_MAX_DRAW_BUFFERS_ATI = 0x8824;
pub const GL_MAP1_VERTEX_ATTRIB4_4_NV = 0x8664;
pub inline fn glVertexAttrib4d(arg_4080: GLuint, arg_4081: GLdouble, arg_4082: GLdouble, arg_4083: GLdouble, arg_4084: GLdouble) void {
    return epoxy_glVertexAttrib4d.?(arg_4080, arg_4081, arg_4082, arg_4083, arg_4084);
}
pub const GL_REG_27_ATI = 0x893C;
pub inline fn glMultiTexCoord2sv(arg_4085: GLenum, arg_4086: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord2sv.?(arg_4085, arg_4086);
}
pub const GL_ARB_ES3_1_compatibility = 1;
pub inline fn glUniformMatrix4fv(arg_4087: GLint, arg_4088: GLsizei, arg_4089: GLboolean, arg_4090: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4fv.?(arg_4087, arg_4088, arg_4089, arg_4090);
}
pub const GL_COLOR_ATTACHMENT13_NV = 0x8CED;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING_ARB = 0x889D;
pub const GL_MAX_COMPUTE_FIXED_GROUP_INVOCATIONS_ARB = 0x90EB;
pub const GL_TEXTURE_FORMAT_QCOM = 0x8BD6;
pub const GL_REFERENCED_BY_MESH_SHADER_NV = 0x95A0;
pub inline fn glVertexAttrib3d(arg_4091: GLuint, arg_4092: GLdouble, arg_4093: GLdouble, arg_4094: GLdouble) void {
    return epoxy_glVertexAttrib3d.?(arg_4091, arg_4092, arg_4093, arg_4094);
}
pub const GL_LUMINANCE12_EXT = 0x8041;
pub inline fn glColorTableParameteriv(arg_4095: GLenum, arg_4096: GLenum, arg_4097: [*c]const GLint) void {
    return epoxy_glColorTableParameteriv.?(arg_4095, arg_4096, arg_4097);
}
pub const __INT_FAST8_FMTi__ = "hhi";
pub const GL_NV_fill_rectangle = 1;
pub inline fn glBlendEquationiEXT(arg_4098: GLuint, arg_4099: GLenum) void {
    return epoxy_glBlendEquationiEXT.?(arg_4098, arg_4099);
}
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING = 0x8895;
pub const GL_NEXT_BUFFER_NV = -2;
pub const GL_QCOM_texture_foveated = 1;
pub inline fn glTexStorage1DEXT(arg_4100: GLenum, arg_4101: GLsizei, arg_4102: GLenum, arg_4103: GLsizei) void {
    return epoxy_glTexStorage1DEXT.?(arg_4100, arg_4101, arg_4102, arg_4103);
}
pub const __USE_POSIX = 1;
pub const GL_OCCLUSION_TEST_RESULT_HP = 0x8166;
pub const GL_RESAMPLE_DECIMATE_OML = 0x8989;
pub const GL_ES_VERSION_3_2 = 1;
pub inline fn glAlphaFuncx(arg_4104: GLenum, arg_4105: GLfixed) void {
    return epoxy_glAlphaFuncx.?(arg_4104, arg_4105);
}
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_KHR = 0x8248;
pub const GL_HSL_LUMINOSITY_KHR = 0x92B0;
pub const GL_CALLIGRAPHIC_FRAGMENT_SGIX = 0x8183;
pub inline fn glPointParameterfvEXT(arg_4106: GLenum, arg_4107: [*c]const GLfloat) void {
    return epoxy_glPointParameterfvEXT.?(arg_4106, arg_4107);
}
pub const GL_PATCH_DEFAULT_OUTER_LEVEL = 0x8E74;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT = 0x8210;
pub const GL_COLOR_ARRAY_EXT = 0x8076;
pub const GL_NV_shader_buffer_load = 1;
pub const GL_MAX_RENDERBUFFER_SIZE_OES = 0x84E8;
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_W_NV = 0x9357;
pub const GL_FRAMEBUFFER_FLIP_Y_MESA = 0x8BBB;
pub const __FSWORD_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const GL_CLOSE_PATH_NV = 0x00;
pub const GL_SGIX_ycrcb = 1;
pub inline fn glStencilStrokePathInstancedNV(arg_4108: GLsizei, arg_4109: GLenum, arg_4110: ?*const c_void, arg_4111: GLuint, arg_4112: GLint, arg_4113: GLuint, arg_4114: GLenum, arg_4115: [*c]const GLfloat) void {
    return epoxy_glStencilStrokePathInstancedNV.?(arg_4108, arg_4109, arg_4110, arg_4111, arg_4112, arg_4113, arg_4114, arg_4115);
}
pub const GL_AMD_interleaved_elements = 1;
pub inline fn glUniformMatrix3x2fv(arg_4116: GLint, arg_4117: GLsizei, arg_4118: GLboolean, arg_4119: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x2fv.?(arg_4116, arg_4117, arg_4118, arg_4119);
}
pub const GL_NV_coverage_sample = 1;
pub const GL_DEBUG_TYPE_ERROR = 0x824C;
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING = 0x889E;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_OES = 0x92CD;
pub const GL_TRACE_TEXTURES_BIT_MESA = 0x0008;
pub const GL_MAX_GENERAL_COMBINERS_NV = 0x854D;
pub const GL_OPERAND0_RGB = 0x8590;
pub const GL_DRAW_BUFFER12 = 0x8831;
pub const GL_NV_read_depth_stencil = 1;
pub const __INTPTR_WIDTH__ = 64;
pub const GL_OES_gpu_shader5 = 1;
pub const GL_INDEX_ARRAY_TYPE = 0x8085;
pub inline fn glVertex4iv(arg_4120: [*c]const GLint) void {
    return epoxy_glVertex4iv.?(arg_4120);
}
pub const GL_DOUBLE_MAT2x4_EXT = 0x8F4A;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV = 0x8DAD;
pub const GL_FONT_NUM_GLYPH_INDICES_BIT_NV = 0x20000000;
pub const GL_SAMPLER_EXTERNAL_2D_Y2Y_EXT = 0x8BE7;
pub const GL_RENDERBUFFER_BINDING_OES = 0x8CA7;
pub const GL_LAYOUT_DEPTH_STENCIL_ATTACHMENT_EXT = 0x958F;
pub const PRIXLEAST8 = "X";
pub const __corei7__ = 1;
pub const GL_NUM_COMPATIBLE_SUBROUTINES = 0x8E4A;
pub const GL_BUFFER_IMMUTABLE_STORAGE_EXT = 0x821F;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10 = 0x93DC;
pub inline fn glTessellationModeAMD(arg_4121: GLenum) void {
    return epoxy_glTessellationModeAMD.?(arg_4121);
}
pub const GL_RELATIVE_ARC_TO_NV = 0xFF;
pub inline fn glMultiTexImage1DEXT(arg_4122: GLenum, arg_4123: GLenum, arg_4124: GLint, arg_4125: GLint, arg_4126: GLsizei, arg_4127: GLint, arg_4128: GLenum, arg_4129: GLenum, arg_4130: ?*const c_void) void {
    return epoxy_glMultiTexImage1DEXT.?(arg_4122, arg_4123, arg_4124, arg_4125, arg_4126, arg_4127, arg_4128, arg_4129, arg_4130);
}
pub const GL_MAX_SHADER_SUBSAMPLED_IMAGE_UNITS_QCOM = 0x8FA1;
pub const GL_MINOR_VERSION = 0x821C;
pub inline fn glVertex4hNV(arg_4131: GLhalfNV, arg_4132: GLhalfNV, arg_4133: GLhalfNV, arg_4134: GLhalfNV) void {
    return epoxy_glVertex4hNV.?(arg_4131, arg_4132, arg_4133, arg_4134);
}
pub const GL_NV_shader_thread_shuffle = 1;
pub const GL_NV_packed_depth_stencil = 1;
pub const __LDBL_MANT_DIG__ = 64;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_ARB = 0x824E;
pub inline fn glGetMapAttribParameterfvNV(arg_4135: GLenum, arg_4136: GLuint, arg_4137: GLenum, arg_4138: [*c]GLfloat) void {
    return epoxy_glGetMapAttribParameterfvNV.?(arg_4135, arg_4136, arg_4137, arg_4138);
}
pub const GL_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8906;
pub const GL_BUFFER_UPDATE_BARRIER_BIT = 0x00000200;
pub const GL_SUBTRACT = 0x84E7;
pub const GL_TEXTURE_3D_BINDING_OES = 0x806A;
pub const GL_NV_memory_attachment = 1;
pub inline fn glWeightPointerOES(arg_4139: GLint, arg_4140: GLenum, arg_4141: GLsizei, arg_4142: ?*const c_void) void {
    return epoxy_glWeightPointerOES.?(arg_4139, arg_4140, arg_4141, arg_4142);
}
pub const GL_ARB_sample_locations = 1;
pub const GL_TEXTURE_COORD_ARRAY_ADDRESS_NV = 0x8F25;
pub const GL_UNPACK_COMPRESSED_SIZE_SGIX = 0x831A;
pub const GL_ARB_shading_language_include = 1;
pub inline fn glSecondaryColor3dvEXT(arg_4143: [*c]const GLdouble) void {
    return epoxy_glSecondaryColor3dvEXT.?(arg_4143);
}
pub const GL_TEXTURE_BINDING_1D_ARRAY = 0x8C1C;
pub const GL_CLIP_DISTANCE1_EXT = 0x3001;
pub inline fn glMultiTexCoord1hvNV(arg_4144: GLenum, arg_4145: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord1hvNV.?(arg_4144, arg_4145);
}
pub const GL_SAMPLER_BUFFER_EXT = 0x8DC2;
pub const GL_TRANSFORM_FEEDBACK_PRIMITIVES_WRITTEN_NV = 0x8C88;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_3x3x3_OES = 0x93E0;
pub const GL_POST_CONVOLUTION_BLUE_SCALE = 0x801E;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS = 0x90CB;
pub const GL_GREEN_BITS = 0x0D53;
pub const GL_UNSIGNED_BYTE_2_3_3_REV = 0x8362;
pub const GL_TEXTURE_CLIPMAP_FRAME_SGIX = 0x8172;
pub inline fn glGetProgramNamedParameterfvNV(arg_4146: GLuint, arg_4147: GLsizei, arg_4148: [*c]const GLubyte, arg_4149: [*c]GLfloat) void {
    return epoxy_glGetProgramNamedParameterfvNV.?(arg_4146, arg_4147, arg_4148, arg_4149);
}
pub inline fn glTextureImage2DMultisampleNV(arg_4150: GLuint, arg_4151: GLenum, arg_4152: GLsizei, arg_4153: GLint, arg_4154: GLsizei, arg_4155: GLsizei, arg_4156: GLboolean) void {
    return epoxy_glTextureImage2DMultisampleNV.?(arg_4150, arg_4151, arg_4152, arg_4153, arg_4154, arg_4155, arg_4156);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC = 0x9279;
pub const GL_EMBOSS_CONSTANT_NV = 0x855E;
pub inline fn glRasterPos2f(arg_4157: GLfloat, arg_4158: GLfloat) void {
    return epoxy_glRasterPos2f.?(arg_4157, arg_4158);
}
pub const GL_OUTPUT_TEXTURE_COORD10_EXT = 0x87A7;
pub const GL_MAP2_VERTEX_ATTRIB10_4_NV = 0x867A;
pub inline fn glUniformMatrix2fvARB(arg_4159: GLint, arg_4160: GLsizei, arg_4161: GLboolean, arg_4162: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2fvARB.?(arg_4159, arg_4160, arg_4161, arg_4162);
}
pub const GL_SGIX_ir_instrument1 = 1;
pub inline fn glInvalidateFramebuffer(arg_4163: GLenum, arg_4164: GLsizei, arg_4165: [*c]const GLenum) void {
    return epoxy_glInvalidateFramebuffer.?(arg_4163, arg_4164, arg_4165);
}
pub inline fn glConvolutionParameterivEXT(arg_4166: GLenum, arg_4167: GLenum, arg_4168: [*c]const GLint) void {
    return epoxy_glConvolutionParameterivEXT.?(arg_4166, arg_4167, arg_4168);
}
pub inline fn glGetNextPerfQueryIdINTEL(arg_4169: GLuint, arg_4170: [*c]GLuint) void {
    return epoxy_glGetNextPerfQueryIdINTEL.?(arg_4169, arg_4170);
}
pub const __LDBL_HAS_DENORM__ = 1;
pub const GL_GLYPH_HORIZONTAL_BEARING_Y_BIT_NV = 0x08;
pub const __FMA__ = 1;
pub const GL_FLOAT_MAT3_ARB = 0x8B5B;
pub const GL_MAX_3D_TEXTURE_SIZE_EXT = 0x8073;
pub inline fn glVertexAttrib3sNV(arg_4171: GLuint, arg_4172: GLshort, arg_4173: GLshort, arg_4174: GLshort) void {
    return epoxy_glVertexAttrib3sNV.?(arg_4171, arg_4172, arg_4173, arg_4174);
}
pub const GL_PIXEL_TILE_CACHE_INCREMENT_SGIX = 0x813F;
pub const __RLIM_T_MATCHES_RLIM64_T = 1;
pub const GL_INT_IMAGE_2D_MULTISAMPLE = 0x9060;
pub inline fn glVertexArraySecondaryColorOffsetEXT(arg_4175: GLuint, arg_4176: GLuint, arg_4177: GLint, arg_4178: GLenum, arg_4179: GLsizei, arg_4180: GLintptr) void {
    return epoxy_glVertexArraySecondaryColorOffsetEXT.?(arg_4175, arg_4176, arg_4177, arg_4178, arg_4179, arg_4180);
}
pub inline fn glGetUniformuivEXT(arg_4181: GLuint, arg_4182: GLint, arg_4183: [*c]GLuint) void {
    return epoxy_glGetUniformuivEXT.?(arg_4181, arg_4182, arg_4183);
}
pub const GL_POINT_SIZE_ARRAY_POINTER_OES = 0x898C;
pub const PRIo64 = __PRI64_PREFIX ++ "o";
pub const GL_LUMINANCE_FLOAT16_ATI = 0x881E;
pub const GL_R1UI_T2F_N3F_V3F_SUN = 0x85CA;
pub const GL_COMPRESSED_RGBA_ASTC_12x12_KHR = 0x93BD;
pub const GL_OES_fbo_render_mipmap = 1;
pub inline fn glTexCoordP2uiv(arg_4184: GLenum, arg_4185: [*c]const GLuint) void {
    return epoxy_glTexCoordP2uiv.?(arg_4184, arg_4185);
}
pub const GL_OBJECT_ACTIVE_ATTRIBUTES_ARB = 0x8B89;
pub inline fn glVertexAttrib2d(arg_4186: GLuint, arg_4187: GLdouble, arg_4188: GLdouble) void {
    return epoxy_glVertexAttrib2d.?(arg_4186, arg_4187, arg_4188);
}
pub const __INVPCID__ = 1;
pub const GL_DOUBLE_MAT3x2 = 0x8F4B;
pub inline fn glGetnSeparableFilterARB(arg_4189: GLenum, arg_4190: GLenum, arg_4191: GLenum, arg_4192: GLsizei, arg_4193: ?*c_void, arg_4194: GLsizei, arg_4195: ?*c_void, arg_4196: ?*c_void) void {
    return epoxy_glGetnSeparableFilterARB.?(arg_4189, arg_4190, arg_4191, arg_4192, arg_4193, arg_4194, arg_4195, arg_4196);
}
pub const GL_TEXTURE_CUBE_MAP_ARB = 0x8513;
pub const GL_COMPRESSED_RGBA_ASTC_12x10_KHR = 0x93BC;
pub const INT_FAST32_MAX = @as(c_long, 9223372036854775807);
pub const GL_ARB_framebuffer_object = 1;
pub const GL_MODELVIEW3_ARB = 0x8723;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR = 0x824E;
pub inline fn glImportSemaphoreWin32HandleEXT(arg_4197: GLuint, arg_4198: GLenum, arg_4199: ?*c_void) void {
    return epoxy_glImportSemaphoreWin32HandleEXT.?(arg_4197, arg_4198, arg_4199);
}
pub const GL_PIXEL_TEX_GEN_ALPHA_REPLACE_SGIX = 0x8187;
pub const GL_DEPTH_SCALE = 0x0D1E;
pub inline fn glGetMultiTexGendvEXT(arg_4200: GLenum, arg_4201: GLenum, arg_4202: GLenum, arg_4203: [*c]GLdouble) void {
    return epoxy_glGetMultiTexGendvEXT.?(arg_4200, arg_4201, arg_4202, arg_4203);
}
pub const GL_DRAW_BUFFER11_ATI = 0x8830;
pub inline fn glCombinerParameteriNV(arg_4204: GLenum, arg_4205: GLint) void {
    return epoxy_glCombinerParameteriNV.?(arg_4204, arg_4205);
}
pub const GL_MAX_FRAMEBUFFER_SAMPLES = 0x9318;
pub inline fn glMapParameterfvNV(arg_4206: GLenum, arg_4207: GLenum, arg_4208: [*c]const GLfloat) void {
    return epoxy_glMapParameterfvNV.?(arg_4206, arg_4207, arg_4208);
}
pub inline fn glGetTexGendv(arg_4209: GLenum, arg_4210: GLenum, arg_4211: [*c]GLdouble) void {
    return epoxy_glGetTexGendv.?(arg_4209, arg_4210, arg_4211);
}
pub const GL_SYNC_GPU_COMMANDS_COMPLETE_APPLE = 0x9117;
pub const GL_OES_blend_equation_separate = 1;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_OES = 0x8515;
pub const GL_VERTEX_SUBROUTINE = 0x92E8;
pub const GL_VERTEX_ATTRIB_ARRAY4_NV = 0x8654;
pub const GL_DEPTH_BUFFER_BIT4_QCOM = 0x00001000;
pub const GL_PALETTE8_RGB8_OES = 0x8B95;
pub const GL_FOG_COLOR = 0x0B66;
pub const GL_VIEW_CLASS_64_BITS = 0x82C6;
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_SIZE_EXT = 0x9651;
pub const GL_POST_COLOR_MATRIX_ALPHA_BIAS = 0x80BB;
pub inline fn glRectdv(arg_4212: [*c]const GLdouble, arg_4213: [*c]const GLdouble) void {
    return epoxy_glRectdv.?(arg_4212, arg_4213);
}
pub inline fn glEnableClientStateIndexedEXT(arg_4214: GLenum, arg_4215: GLuint) void {
    return epoxy_glEnableClientStateIndexedEXT.?(arg_4214, arg_4215);
}
pub const GL_TEXTURE_MAX_LEVEL_APPLE = 0x813D;
pub const GL_READ_BUFFER_EXT = 0x0C02;
pub const GL_POINT_FADE_THRESHOLD_SIZE = 0x8128;
pub inline fn glLoadName(arg_4216: GLuint) void {
    return epoxy_glLoadName.?(arg_4216);
}
pub const GL_SPRITE_TRANSLATION_SGIX = 0x814B;
pub const GL_GPU_MEMORY_INFO_EVICTION_COUNT_NVX = 0x904A;
pub const GL_PATH_PROJECTION_NV = 0x1701;
pub const GL_MAP1_NORMAL = 0x0D92;
pub const GL_MAX_LABEL_LENGTH = 0x82E8;
pub const GL_EXT_debug_marker = 1;
pub const GL_FOG_COORDINATE_ARRAY_TYPE = 0x8454;
pub const GL_TESS_EVALUATION_SHADER_BIT_EXT = 0x00000010;
pub inline fn glGetDetailTexFuncSGIS(arg_4217: GLenum, arg_4218: [*c]GLfloat) void {
    return epoxy_glGetDetailTexFuncSGIS.?(arg_4217, arg_4218);
}
pub const GL_RENDER_DIRECT_TO_FRAMEBUFFER_QCOM = 0x8FB3;
pub inline fn glEvalCoord2dv(arg_4219: [*c]const GLdouble) void {
    return epoxy_glEvalCoord2dv.?(arg_4219);
}
pub const GL_TESS_CONTROL_SHADER_BIT_OES = 0x00000008;
pub const GL_OBJECT_PLANE = 0x2501;
pub inline fn glProgramLocalParameter4dvARB(arg_4220: GLenum, arg_4221: GLuint, arg_4222: [*c]const GLdouble) void {
    return epoxy_glProgramLocalParameter4dvARB.?(arg_4220, arg_4221, arg_4222);
}
pub const __LDBL_HAS_QUIET_NAN__ = 1;
pub const GL_EXT_draw_range_elements = 1;
pub const GL_OP_MADD_EXT = 0x8788;
pub inline fn glAsyncCopyImageSubDataNVX(arg_4223: GLsizei, arg_4224: [*c]const GLuint, arg_4225: [*c]const GLuint64, arg_4226: GLuint, arg_4227: GLbitfield, arg_4228: GLuint, arg_4229: GLenum, arg_4230: GLint, arg_4231: GLint, arg_4232: GLint, arg_4233: GLint, arg_4234: GLuint, arg_4235: GLenum, arg_4236: GLint, arg_4237: GLint, arg_4238: GLint, arg_4239: GLint, arg_4240: GLsizei, arg_4241: GLsizei, arg_4242: GLsizei, arg_4243: GLsizei, arg_4244: [*c]const GLuint, arg_4245: [*c]const GLuint64) GLuint {
    return epoxy_glAsyncCopyImageSubDataNVX.?(arg_4223, arg_4224, arg_4225, arg_4226, arg_4227, arg_4228, arg_4229, arg_4230, arg_4231, arg_4232, arg_4233, arg_4234, arg_4235, arg_4236, arg_4237, arg_4238, arg_4239, arg_4240, arg_4241, arg_4242, arg_4243, arg_4244, arg_4245);
}
pub const _DEFAULT_SOURCE = 1;
pub const GL_DECR_WRAP_OES = 0x8508;
pub inline fn glGetVertexAttribLi64vNV(arg_4246: GLuint, arg_4247: GLenum, arg_4248: [*c]GLint64EXT) void {
    return epoxy_glGetVertexAttribLi64vNV.?(arg_4246, arg_4247, arg_4248);
}
pub const GL_TIMEOUT_EXPIRED_APPLE = 0x911B;
pub const GL_EXT_texture_compression_rgtc = 1;
pub const GL_R1UI_T2F_V3F_SUN = 0x85C9;
pub const GL_DOUBLE_MAT2x4 = 0x8F4A;
pub const GL_GEOMETRY_LINKED_INPUT_TYPE_OES = 0x8917;
pub inline fn glProgramUniformMatrix4fv(arg_4249: GLuint, arg_4250: GLint, arg_4251: GLsizei, arg_4252: GLboolean, arg_4253: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4fv.?(arg_4249, arg_4250, arg_4251, arg_4252, arg_4253);
}
pub const GL_ARRAY_OBJECT_OFFSET_ATI = 0x8767;
pub const GL_MAX_PROGRAM_GENERIC_ATTRIBS_NV = 0x8DA5;
pub const GL_RGB2_EXT = 0x804E;
pub const GL_RGBA32F_EXT = 0x8814;
pub const GL_VERTEX_BINDING_OFFSET = 0x82D7;
pub const GL_LUMINANCE_ALPHA_FLOAT16_APPLE = 0x881F;
pub const __restrict_arr = __restrict;
pub const GL_BLEND_DST_RGB_OES = 0x80C8;
pub inline fn glMultTransposeMatrixdARB(arg_4254: [*c]const GLdouble) void {
    return epoxy_glMultTransposeMatrixdARB.?(arg_4254);
}
pub inline fn glUniformMatrix3x2fvNV(arg_4255: GLint, arg_4256: GLsizei, arg_4257: GLboolean, arg_4258: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x2fvNV.?(arg_4255, arg_4256, arg_4257, arg_4258);
}
pub const GL_COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 0x8C02;
pub const GL_COLOR_BUFFER_BIT4_QCOM = 0x00000010;
pub const GL_PALETTE8_R5_G6_B5_OES = 0x8B97;
pub inline fn glMulticastGetQueryObjectivNV(arg_4259: GLuint, arg_4260: GLuint, arg_4261: GLenum, arg_4262: [*c]GLint) void {
    return epoxy_glMulticastGetQueryObjectivNV.?(arg_4259, arg_4260, arg_4261, arg_4262);
}
pub const GL_DEBUG_ASSERT_MESA = 0x875B;
pub inline fn glTexEnvxvOES(arg_4263: GLenum, arg_4264: GLenum, arg_4265: [*c]const GLfixed) void {
    return epoxy_glTexEnvxvOES.?(arg_4263, arg_4264, arg_4265);
}
pub const GL_SRC2_ALPHA = 0x858A;
pub const GL_VERTEX_ATTRIB_ARRAY_ADDRESS_NV = 0x8F20;
pub inline fn glBindBuffersRange(arg_4266: GLenum, arg_4267: GLuint, arg_4268: GLsizei, arg_4269: [*c]const GLuint, arg_4270: [*c]const GLintptr, arg_4271: [*c]const GLsizeiptr) void {
    return epoxy_glBindBuffersRange.?(arg_4266, arg_4267, arg_4268, arg_4269, arg_4270, arg_4271);
}
pub const GL_ACCUM_BLUE_BITS = 0x0D5A;
pub const PRIuPTR = __PRIPTR_PREFIX ++ "u";
pub const GL_NV_fbo_color_attachments = 1;
pub const GL_TRANSLATE_X_NV = 0x908E;
pub const GL_VERTEX_SHADER_BIT_EXT = 0x00000001;
pub const GL_VIEW_CLASS_24_BITS = 0x82C9;
pub const GL_WEIGHT_ARRAY_ARB = 0x86AD;
pub const GL_RGBA8I_EXT = 0x8D8E;
pub inline fn glAreTexturesResidentEXT(arg_4272: GLsizei, arg_4273: [*c]const GLuint, arg_4274: [*c]GLboolean) GLboolean {
    return epoxy_glAreTexturesResidentEXT.?(arg_4272, arg_4273, arg_4274);
}
pub const GL_STENCIL_BACK_FUNC_ATI = 0x8800;
pub const GL_SAMPLER_BUFFER_AMD = 0x9001;
pub inline fn glCompileShaderARB(arg_4275: GLhandleARB) void {
    return epoxy_glCompileShaderARB.?(arg_4275);
}
pub inline fn glGetShadingRateSampleLocationivNV(arg_4276: GLenum, arg_4277: GLuint, arg_4278: GLuint, arg_4279: [*c]GLint) void {
    return epoxy_glGetShadingRateSampleLocationivNV.?(arg_4276, arg_4277, arg_4278, arg_4279);
}
pub const GL_NV_instanced_arrays = 1;
pub inline fn glTextureBufferRangeEXT(arg_4280: GLuint, arg_4281: GLenum, arg_4282: GLenum, arg_4283: GLuint, arg_4284: GLintptr, arg_4285: GLsizeiptr) void {
    return epoxy_glTextureBufferRangeEXT.?(arg_4280, arg_4281, arg_4282, arg_4283, arg_4284, arg_4285);
}
pub const GL_TESS_CONTROL_SHADER_PATCHES_ARB = 0x82F1;
pub const GL_COLOR_TABLE_BLUE_SIZE = 0x80DC;
pub const GL_FLOAT_VEC3 = 0x8B51;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARB = 0x8514;
pub const SCNu32 = "u";
pub inline fn glProgramUniformHandleui64vIMG(arg_4286: GLuint, arg_4287: GLint, arg_4288: GLsizei, arg_4289: [*c]const GLuint64) void {
    return epoxy_glProgramUniformHandleui64vIMG.?(arg_4286, arg_4287, arg_4288, arg_4289);
}
pub inline fn glImportMemoryWin32NameEXT(arg_4290: GLuint, arg_4291: GLuint64, arg_4292: GLenum, arg_4293: ?*const c_void) void {
    return epoxy_glImportMemoryWin32NameEXT.?(arg_4290, arg_4291, arg_4292, arg_4293);
}
pub const GL_ALL_BARRIER_BITS = 0xFFFFFFFF;
pub inline fn glBinormalPointerEXT(arg_4294: GLenum, arg_4295: GLsizei, arg_4296: ?*const c_void) void {
    return epoxy_glBinormalPointerEXT.?(arg_4294, arg_4295, arg_4296);
}
pub const GL_POST_TEXTURE_FILTER_SCALE_SGIX = 0x817A;
pub const GL_COLOR_INDEXES = 0x1603;
pub const GL_FRAMEBUFFER_ATTACHMENT_ALPHA_SIZE = 0x8215;
pub inline fn glDrawTexiOES(arg_4297: GLint, arg_4298: GLint, arg_4299: GLint, arg_4300: GLint, arg_4301: GLint) void {
    return epoxy_glDrawTexiOES.?(arg_4297, arg_4298, arg_4299, arg_4300, arg_4301);
}
pub inline fn glColor4xOES(arg_4302: GLfixed, arg_4303: GLfixed, arg_4304: GLfixed, arg_4305: GLfixed) void {
    return epoxy_glColor4xOES.?(arg_4302, arg_4303, arg_4304, arg_4305);
}
pub const GL_ARB_shader_image_load_store = 1;
pub const GL_FOG_COORD_ARRAY_ADDRESS_NV = 0x8F28;
pub const GL_NORMAL_ARRAY_EXT = 0x8075;
pub inline fn glMultiTexCoord1sv(arg_4306: GLenum, arg_4307: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord1sv.?(arg_4306, arg_4307);
}
pub const GL_SCISSOR_BIT = 0x00080000;
pub const GL_RENDERBUFFER_SAMPLES_ANGLE = 0x8CAB;
pub inline fn glProgramUniform3dEXT(arg_4308: GLuint, arg_4309: GLint, arg_4310: GLdouble, arg_4311: GLdouble, arg_4312: GLdouble) void {
    return epoxy_glProgramUniform3dEXT.?(arg_4308, arg_4309, arg_4310, arg_4311, arg_4312);
}
pub inline fn glProgramUniformMatrix3x4fvEXT(arg_4313: GLuint, arg_4314: GLint, arg_4315: GLsizei, arg_4316: GLboolean, arg_4317: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x4fvEXT.?(arg_4313, arg_4314, arg_4315, arg_4316, arg_4317);
}
pub const GL_RGB32UI = 0x8D71;
pub const INT16_MIN = -32767 - 1;
pub const GL_OCCLUSION_QUERY_EVENT_MASK_AMD = 0x874F;
pub inline fn glGetnHistogramARB(arg_4318: GLenum, arg_4319: GLboolean, arg_4320: GLenum, arg_4321: GLenum, arg_4322: GLsizei, arg_4323: ?*c_void) void {
    return epoxy_glGetnHistogramARB.?(arg_4318, arg_4319, arg_4320, arg_4321, arg_4322, arg_4323);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_RED_SIZE = 0x8212;
pub inline fn glPauseTransformFeedbackNV() void {
    return epoxy_glPauseTransformFeedbackNV.?();
}
pub inline fn glPresentFrameKeyedNV(arg_4324: GLuint, arg_4325: GLuint64EXT, arg_4326: GLuint, arg_4327: GLuint, arg_4328: GLenum, arg_4329: GLenum, arg_4330: GLuint, arg_4331: GLuint, arg_4332: GLenum, arg_4333: GLuint, arg_4334: GLuint) void {
    return epoxy_glPresentFrameKeyedNV.?(arg_4324, arg_4325, arg_4326, arg_4327, arg_4328, arg_4329, arg_4330, arg_4331, arg_4332, arg_4333, arg_4334);
}
pub inline fn glRasterPos2i(arg_4335: GLint, arg_4336: GLint) void {
    return epoxy_glRasterPos2i.?(arg_4335, arg_4336);
}
pub const GL_OPERAND0_ALPHA = 0x8598;
pub inline fn glIsPointInStrokePathNV(arg_4337: GLuint, arg_4338: GLfloat, arg_4339: GLfloat) GLboolean {
    return epoxy_glIsPointInStrokePathNV.?(arg_4337, arg_4338, arg_4339);
}
pub const GL_SECONDARY_COLOR_NV = 0x852D;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_EXT = 0x8D56;
pub const GL_RGBA4_S3TC = 0x83A3;
pub const GL_BACK_RIGHT = 0x0403;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_EXT = 0x8C2D;
pub const GL_HALF_APPLE = 0x140B;
pub inline fn glTexCoord1xvOES(arg_4340: [*c]const GLfixed) void {
    return epoxy_glTexCoord1xvOES.?(arg_4340);
}
pub const GL_CONVOLUTION_2D_EXT = 0x8011;
pub const GL_TANGENT_ARRAY_POINTER_EXT = 0x8442;
pub const GL_TEXTURE_SWIZZLE_A_EXT = 0x8E45;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_TEST = 0x82AC;
pub const GL_STENCIL_BACK_FUNC = 0x8800;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS_KHR = 0x8242;
pub const GL_ALPHA_TO_COVERAGE_DITHER_ENABLE_NV = 0x934E;
pub const GL_STREAM_READ = 0x88E1;
pub const GL_HANDLE_TYPE_OPAQUE_WIN32_EXT = 0x9587;
pub const GL_STATIC_ATI = 0x8760;
pub const GL_COVERAGE_MODULATION_TABLE_NV = 0x9331;
pub inline fn glPollAsyncSGIX(arg_4341: [*c]GLuint) GLint {
    return epoxy_glPollAsyncSGIX.?(arg_4341);
}
pub const GL_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B0;
pub inline fn glFramebufferTexture2DMultisampleIMG(arg_4342: GLenum, arg_4343: GLenum, arg_4344: GLenum, arg_4345: GLuint, arg_4346: GLint, arg_4347: GLsizei) void {
    return epoxy_glFramebufferTexture2DMultisampleIMG.?(arg_4342, arg_4343, arg_4344, arg_4345, arg_4346, arg_4347);
}
pub inline fn glWindowPos2dvARB(arg_4348: [*c]const GLdouble) void {
    return epoxy_glWindowPos2dvARB.?(arg_4348);
}
pub const GL_COLOR_ATTACHMENT15_NV = 0x8CEF;
pub const __INTPTR_MAX__ = @as(c_long, 9223372036854775807);
pub const __INTMAX_WIDTH__ = 64;
pub const GL_UNIFORM_ARRAY_STRIDE = 0x8A3C;
pub const GL_CONTEXT_RELEASE_BEHAVIOR = 0x82FB;
pub const GL_COVERAGE_AUTOMATIC_NV = 0x8ED7;
pub inline fn glGetMemoryObjectParameterivEXT(arg_4349: GLuint, arg_4350: GLenum, arg_4351: [*c]GLint) void {
    return epoxy_glGetMemoryObjectParameterivEXT.?(arg_4349, arg_4350, arg_4351);
}
pub const GL_TEXTURE_SHARED_SIZE_EXT = 0x8C3F;
pub const GL_FLOAT_MAT2x4 = 0x8B66;
pub const GL_NV_draw_texture = 1;
pub inline fn glColor4x(arg_4352: GLfixed, arg_4353: GLfixed, arg_4354: GLfixed, arg_4355: GLfixed) void {
    return epoxy_glColor4x.?(arg_4352, arg_4353, arg_4354, arg_4355);
}
pub const GL_WRITE_ONLY_OES = 0x88B9;
pub const GL_DOUBLE_MAT4 = 0x8F48;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_OES = 0x919F;
pub const GL_POLYGON_SMOOTH = 0x0B41;
pub const GL_ALPHA_INTEGER = 0x8D97;
pub const INT_LEAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub inline fn glMultiTexCoord1bOES(arg_4356: GLenum, arg_4357: GLbyte) void {
    return epoxy_glMultiTexCoord1bOES.?(arg_4356, arg_4357);
}
pub const GL_LOGIC_OP_MODE = 0x0BF0;
pub const GL_AUX3 = 0x040C;
pub const GL_EXCLUSION = 0x92A0;
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE_OES = 0x851C;
pub const GL_BUFFER_USAGE_ARB = 0x8765;
pub const GL_VIEW_CLASS_16_BITS = 0x82CA;
pub inline fn glProgramUniform4ui64vNV(arg_4358: GLuint, arg_4359: GLint, arg_4360: GLsizei, arg_4361: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform4ui64vNV.?(arg_4358, arg_4359, arg_4360, arg_4361);
}
pub const GL_QUERY_COUNTER_BITS_ARB = 0x8864;
pub const GL_PATH_COORD_COUNT_NV = 0x909E;
pub const __ID_T_TYPE = __U32_TYPE;
pub inline fn glTexCoord2iv(arg_4362: [*c]const GLint) void {
    return epoxy_glTexCoord2iv.?(arg_4362);
}
pub inline fn glTextureView(arg_4363: GLuint, arg_4364: GLenum, arg_4365: GLuint, arg_4366: GLenum, arg_4367: GLuint, arg_4368: GLuint, arg_4369: GLuint, arg_4370: GLuint) void {
    return epoxy_glTextureView.?(arg_4363, arg_4364, arg_4365, arg_4366, arg_4367, arg_4368, arg_4369, arg_4370);
}
pub const SCNxLEAST16 = "hx";
pub const GL_VERTEX_STREAM0_ATI = 0x876C;
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_ARB = 0x91A9;
pub inline fn glSamplePatternSGIS(arg_4371: GLenum) void {
    return epoxy_glSamplePatternSGIS.?(arg_4371);
}
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_OES = 0x90D9;
pub const GL_ANGLE_texture_compression_dxt5 = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_BLUE_SIZE = 0x8214;
pub const GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 0x8C00;
pub inline fn glVertexStream2ivATI(arg_4372: GLenum, arg_4373: [*c]const GLint) void {
    return epoxy_glVertexStream2ivATI.?(arg_4372, arg_4373);
}
pub const GL_SGIX_texture_lod_bias = 1;
pub const GL_EXT_texture_shadow_lod = 1;
pub const GL_RELATIVE_CUBIC_CURVE_TO_NV = 0x0D;
pub inline fn glWindowPos2sv(arg_4374: [*c]const GLshort) void {
    return epoxy_glWindowPos2sv.?(arg_4374);
}
pub const GL_COLOR_ATTACHMENT2_EXT = 0x8CE2;
pub const GL_RGB32F = 0x8815;
pub const GL_TEXTURE23_ARB = 0x84D7;
pub const GL_QUAD_TEXTURE_SELECT_SGIS = 0x8125;
pub const GL_DEPTH_STENCIL_TO_BGRA_NV = 0x886F;
pub const GL_EXT_index_func = 1;
pub const GL_POST_CONVOLUTION_RED_SCALE_EXT = 0x801C;
pub const GL_DEPTH_CLAMP_NV = 0x864F;
pub inline fn glBufferSubData(arg_4375: GLenum, arg_4376: GLintptr, arg_4377: GLsizeiptr, arg_4378: ?*const c_void) void {
    return epoxy_glBufferSubData.?(arg_4375, arg_4376, arg_4377, arg_4378);
}
pub const GL_SAMPLER_OBJECT_AMD = 0x9155;
pub const GL_DEBUG_TYPE_PERFORMANCE_KHR = 0x8250;
pub inline fn glGetnUniformfvARB(arg_4379: GLuint, arg_4380: GLint, arg_4381: GLsizei, arg_4382: [*c]GLfloat) void {
    return epoxy_glGetnUniformfvARB.?(arg_4379, arg_4380, arg_4381, arg_4382);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_PAUSED = 0x8E23;
pub const GL_UNCORRELATED_NV = 0x9282;
pub inline fn glStencilOpSeparate(arg_4383: GLenum, arg_4384: GLenum, arg_4385: GLenum, arg_4386: GLenum) void {
    return epoxy_glStencilOpSeparate.?(arg_4383, arg_4384, arg_4385, arg_4386);
}
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION = 0x8E4C;
pub const GL_RED_SNORM = 0x8F90;
pub const GL_DUAL_LUMINANCE_ALPHA4_SGIS = 0x811C;
pub const GL_MAX_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F1;
pub inline fn glClearDepthdNV(arg_4387: GLdouble) void {
    return epoxy_glClearDepthdNV.?(arg_4387);
}
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS_OES = 0x8E1E;
pub inline fn glGetHandleARB(arg_4388: GLenum) GLhandleARB {
    return epoxy_glGetHandleARB.?(arg_4388);
}
pub inline fn glMaterialxv(arg_4389: GLenum, arg_4390: GLenum, arg_4391: [*c]const GLfixed) void {
    return epoxy_glMaterialxv.?(arg_4389, arg_4390, arg_4391);
}
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E1F;
pub const GL_OP_ADD_EXT = 0x8787;
pub const GL_MAX_MESH_IMAGE_UNIFORMS_NV = 0x8E62;
pub const GL_POINT_BIT = 0x00000002;
pub const GL_TEXTURE5 = 0x84C5;
pub const GL_TEXTURE_DEPTH_QCOM = 0x8BD4;
pub const GL_TESS_EVALUATION_TEXTURE = 0x829D;
pub inline fn glColorFragmentOp1ATI(arg_4392: GLenum, arg_4393: GLuint, arg_4394: GLuint, arg_4395: GLuint, arg_4396: GLuint, arg_4397: GLuint, arg_4398: GLuint) void {
    return epoxy_glColorFragmentOp1ATI.?(arg_4392, arg_4393, arg_4394, arg_4395, arg_4396, arg_4397, arg_4398);
}
pub inline fn glGetColorTableParameterivSGI(arg_4399: GLenum, arg_4400: GLenum, arg_4401: [*c]GLint) void {
    return epoxy_glGetColorTableParameterivSGI.?(arg_4399, arg_4400, arg_4401);
}
pub inline fn glProgramUniform2i64vARB(arg_4402: GLuint, arg_4403: GLint, arg_4404: GLsizei, arg_4405: [*c]const GLint64) void {
    return epoxy_glProgramUniform2i64vARB.?(arg_4402, arg_4403, arg_4404, arg_4405);
}
pub const GL_PIXEL_TILE_CACHE_SIZE_SGIX = 0x8145;
pub const GL_MAP2_VERTEX_ATTRIB1_4_NV = 0x8671;
pub const GL_R1UI_C3F_V3F_SUN = 0x85C6;
pub inline fn glNormal3hNV(arg_4406: GLhalfNV, arg_4407: GLhalfNV, arg_4408: GLhalfNV) void {
    return epoxy_glNormal3hNV.?(arg_4406, arg_4407, arg_4408);
}
pub const GL_ATI_fragment_shader = 1;
pub inline fn glDeleteProgramPipelines(arg_4409: GLsizei, arg_4410: [*c]const GLuint) void {
    return epoxy_glDeleteProgramPipelines.?(arg_4409, arg_4410);
}
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_OES = 0x8C2D;
pub const GL_POLYGON_OFFSET_LINE = 0x2A02;
pub const GL_VIDEO_BUFFER_NV = 0x9020;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y = 0x8518;
pub inline fn glNormalPointerEXT(arg_4411: GLenum, arg_4412: GLsizei, arg_4413: GLsizei, arg_4414: ?*const c_void) void {
    return epoxy_glNormalPointerEXT.?(arg_4411, arg_4412, arg_4413, arg_4414);
}
pub const GL_ARB_post_depth_coverage = 1;
pub inline fn glPresentFrameDualFillNV(arg_4415: GLuint, arg_4416: GLuint64EXT, arg_4417: GLuint, arg_4418: GLuint, arg_4419: GLenum, arg_4420: GLenum, arg_4421: GLuint, arg_4422: GLenum, arg_4423: GLuint, arg_4424: GLenum, arg_4425: GLuint, arg_4426: GLenum, arg_4427: GLuint) void {
    return epoxy_glPresentFrameDualFillNV.?(arg_4415, arg_4416, arg_4417, arg_4418, arg_4419, arg_4420, arg_4421, arg_4422, arg_4423, arg_4424, arg_4425, arg_4426, arg_4427);
}
pub inline fn glGetMaterialfv(arg_4428: GLenum, arg_4429: GLenum, arg_4430: [*c]GLfloat) void {
    return epoxy_glGetMaterialfv.?(arg_4428, arg_4429, arg_4430);
}
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS = 0x9124;
pub const GL_FLOAT_RGB16_NV = 0x8888;
pub inline fn glRenderbufferStorageMultisampleCoverageNV(arg_4431: GLenum, arg_4432: GLsizei, arg_4433: GLsizei, arg_4434: GLenum, arg_4435: GLsizei, arg_4436: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleCoverageNV.?(arg_4431, arg_4432, arg_4433, arg_4434, arg_4435, arg_4436);
}
pub inline fn glColorP4ui(arg_4437: GLenum, arg_4438: GLuint) void {
    return epoxy_glColorP4ui.?(arg_4437, arg_4438);
}
pub const GL_MINUS_CLAMPED_NV = 0x92B3;
pub const GL_TEXTURE31_ARB = 0x84DF;
pub const INT_LEAST32_MAX = 2147483647;
pub const GL_COMPUTE_SHADER_BIT = 0x00000020;
pub const GL_HI_SCALE_NV = 0x870E;
pub const GL_MOVE_TO_NV = 0x02;
pub inline fn glMultiTexCoord4fARB(arg_4439: GLenum, arg_4440: GLfloat, arg_4441: GLfloat, arg_4442: GLfloat, arg_4443: GLfloat) void {
    return epoxy_glMultiTexCoord4fARB.?(arg_4439, arg_4440, arg_4441, arg_4442, arg_4443);
}
pub inline fn glGenQueries(arg_4444: GLsizei, arg_4445: [*c]GLuint) void {
    return epoxy_glGenQueries.?(arg_4444, arg_4445);
}
pub const GL_ARB_texture_view = 1;
pub inline fn glColorP3uiv(arg_4446: GLenum, arg_4447: [*c]const GLuint) void {
    return epoxy_glColorP3uiv.?(arg_4446, arg_4447);
}
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_VERTEX_SHADER = 0x92C7;
pub const GL_CLIP_DISTANCE5_EXT = 0x3005;
pub inline fn glMinmax(arg_4448: GLenum, arg_4449: GLenum, arg_4450: GLboolean) void {
    return epoxy_glMinmax.?(arg_4448, arg_4449, arg_4450);
}
pub const GL_SRC_OUT_NV = 0x928C;
pub const GL_COLOR_ATTACHMENT16 = 0x8CF0;
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS_SGI = 0x80BA;
pub inline fn glColor4s(arg_4451: GLshort, arg_4452: GLshort, arg_4453: GLshort, arg_4454: GLshort) void {
    return epoxy_glColor4s.?(arg_4451, arg_4452, arg_4453, arg_4454);
}
pub inline fn glGetVertexAttribLdvEXT(arg_4455: GLuint, arg_4456: GLenum, arg_4457: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribLdvEXT.?(arg_4455, arg_4456, arg_4457);
}
pub inline fn glNamedFramebufferTextureLayer(arg_4458: GLuint, arg_4459: GLenum, arg_4460: GLuint, arg_4461: GLint, arg_4462: GLint) void {
    return epoxy_glNamedFramebufferTextureLayer.?(arg_4458, arg_4459, arg_4460, arg_4461, arg_4462);
}
pub const GL_MAX_SAMPLES_ANGLE = 0x8D57;
pub inline fn glDrawTransformFeedbackStream(arg_4463: GLenum, arg_4464: GLuint, arg_4465: GLuint) void {
    return epoxy_glDrawTransformFeedbackStream.?(arg_4463, arg_4464, arg_4465);
}
pub const GL_REG_26_ATI = 0x893B;
pub const GL_MAX_FRAGMENT_LIGHTS_SGIX = 0x8404;
pub const GL_NV_blend_equation_advanced_coherent = 1;
pub const GL_YCBCR_MESA = 0x8757;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_VARIANTS_EXT = 0x87CB;
pub inline fn glCopyConvolutionFilter2DEXT(arg_4466: GLenum, arg_4467: GLenum, arg_4468: GLint, arg_4469: GLint, arg_4470: GLsizei, arg_4471: GLsizei) void {
    return epoxy_glCopyConvolutionFilter2DEXT.?(arg_4466, arg_4467, arg_4468, arg_4469, arg_4470, arg_4471);
}
pub inline fn glProgramUniform1dv(arg_4472: GLuint, arg_4473: GLint, arg_4474: GLsizei, arg_4475: [*c]const GLdouble) void {
    return epoxy_glProgramUniform1dv.?(arg_4472, arg_4473, arg_4474, arg_4475);
}
pub const GL_COLOR_ATTACHMENT1_NV = 0x8CE1;
pub const GL_EXT_sparse_texture = 1;
pub const __S32_TYPE = c_int;
pub const GL_MIN_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5B;
pub inline fn glEndVideoCaptureNV(arg_4476: GLuint) void {
    return epoxy_glEndVideoCaptureNV.?(arg_4476);
}
pub inline fn glMultiTexCoord4bOES(arg_4477: GLenum, arg_4478: GLbyte, arg_4479: GLbyte, arg_4480: GLbyte, arg_4481: GLbyte) void {
    return epoxy_glMultiTexCoord4bOES.?(arg_4477, arg_4478, arg_4479, arg_4480, arg_4481);
}
pub const GL_NV_pixel_data_range = 1;
pub inline fn glPathFogGenNV(arg_4482: GLenum) void {
    return epoxy_glPathFogGenNV.?(arg_4482);
}
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_Y_NV = 0x9353;
pub const GL_SAMPLER_2D_ARRAY = 0x8DC1;
pub const PRIxFAST8 = "x";
pub const GL_VERTEX_BINDING_DIVISOR = 0x82D6;
pub const GL_LUMINANCE12_ALPHA12_EXT = 0x8047;
pub const GL_CONTEXT_LOST_WEBGL = 0x9242;
pub inline fn glSecondaryColor3fvEXT(arg_4483: [*c]const GLfloat) void {
    return epoxy_glSecondaryColor3fvEXT.?(arg_4483);
}
pub const GL_TEXTURE_NORMAL_EXT = 0x85AF;
pub const GL_BOOL_VEC3 = 0x8B58;
pub const _BITS_TIME64_H = 1;
pub const GL_SHADING_RATE_2_INVOCATIONS_PER_PIXEL_NV = 0x956C;
pub const GL_COMPUTE_WORK_GROUP_SIZE = 0x8267;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 0x8CD3;
pub const GL_APPLE_row_bytes = 1;
pub const GL_CULL_VERTEX_IBM = 103050;
pub const GL_MAX_DEEP_3D_TEXTURE_DEPTH_NV = 0x90D1;
pub const GL_MATRIX15_ARB = 0x88CF;
pub const GL_RELATIVE_SMALL_CCW_ARC_TO_NV = 0x13;
pub const GL_ARB_shader_texture_lod = 1;
pub const GL_IBM_multimode_draw_arrays = 1;
pub const __MOVBE__ = 1;
pub const GL_ONE = 1;
pub const GL_CON_14_ATI = 0x894F;
pub inline fn glViewportArrayvOES(arg_4484: GLuint, arg_4485: GLsizei, arg_4486: [*c]const GLfloat) void {
    return epoxy_glViewportArrayvOES.?(arg_4484, arg_4485, arg_4486);
}
pub const GL_RELATIVE_VERTICAL_LINE_TO_NV = 0x09;
pub const GL_ARB_get_program_binary = 1;
pub inline fn glProgramUniformMatrix3x4fv(arg_4487: GLuint, arg_4488: GLint, arg_4489: GLsizei, arg_4490: GLboolean, arg_4491: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x4fv.?(arg_4487, arg_4488, arg_4489, arg_4490, arg_4491);
}
pub const GL_DITHER = 0x0BD0;
pub const GL_ARB_vertex_array_bgra = 1;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_GEOMETRY_SHADER = 0x8A45;
pub const GL_MAX_LIGHTS = 0x0D31;
pub const GL_NV_copy_buffer = 1;
pub const GL_TEXTURE_APPLICATION_MODE_EXT = 0x834F;
pub inline fn glSecondaryColor3hvNV(arg_4492: [*c]const GLhalfNV) void {
    return epoxy_glSecondaryColor3hvNV.?(arg_4492);
}
pub const GL_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87D2;
pub inline fn glProgramUniform1f(arg_4493: GLuint, arg_4494: GLint, arg_4495: GLfloat) void {
    return epoxy_glProgramUniform1f.?(arg_4493, arg_4494, arg_4495);
}
pub const GL_GUILTY_CONTEXT_RESET_ARB = 0x8253;
pub inline fn glTexCoord2fColor3fVertex3fvSUN(arg_4496: [*c]const GLfloat, arg_4497: [*c]const GLfloat, arg_4498: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fColor3fVertex3fvSUN.?(arg_4496, arg_4497, arg_4498);
}
pub const GL_MULTIPLY = 0x9294;
pub const GL_UNSIGNED_INT64_VEC3_NV = 0x8FF6;
pub const GL_DUAL_LUMINANCE8_SGIS = 0x8115;
pub const GL_VERTEX_ATTRIB_ARRAY5_NV = 0x8655;
pub inline fn glEndPerfQueryINTEL(arg_4499: GLuint) void {
    return epoxy_glEndPerfQueryINTEL.?(arg_4499);
}
pub const GL_EXT_semaphore = 1;
pub const GL_EVAL_VERTEX_ATTRIB10_NV = 0x86D0;
pub const GL_RGBA_INTEGER = 0x8D99;
pub inline fn glUniform4ivARB(arg_4500: GLint, arg_4501: GLsizei, arg_4502: [*c]const GLint) void {
    return epoxy_glUniform4ivARB.?(arg_4500, arg_4501, arg_4502);
}
pub const GL_TRACE_PIXELS_BIT_MESA = 0x0010;
pub const GL_IMG_multisampled_render_to_texture = 1;
pub inline fn glMultiTexCoord3xvOES(arg_4503: GLenum, arg_4504: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord3xvOES.?(arg_4503, arg_4504);
}
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_EXT = 0x8918;
pub const GL_STENCIL_CLEAR_VALUE = 0x0B91;
pub inline fn glGetFragmentMaterialfvSGIX(arg_4505: GLenum, arg_4506: GLenum, arg_4507: [*c]GLfloat) void {
    return epoxy_glGetFragmentMaterialfvSGIX.?(arg_4505, arg_4506, arg_4507);
}
pub inline fn glMultiTexCoord4s(arg_4508: GLenum, arg_4509: GLshort, arg_4510: GLshort, arg_4511: GLshort, arg_4512: GLshort) void {
    return epoxy_glMultiTexCoord4s.?(arg_4508, arg_4509, arg_4510, arg_4511, arg_4512);
}
pub inline fn glImportSemaphoreFdEXT(arg_4513: GLuint, arg_4514: GLenum, arg_4515: GLint) void {
    return epoxy_glImportSemaphoreFdEXT.?(arg_4513, arg_4514, arg_4515);
}
pub inline fn glTexCoord3f(arg_4516: GLfloat, arg_4517: GLfloat, arg_4518: GLfloat) void {
    return epoxy_glTexCoord3f.?(arg_4516, arg_4517, arg_4518);
}
pub inline fn glUniform3i(arg_4519: GLint, arg_4520: GLint, arg_4521: GLint, arg_4522: GLint) void {
    return epoxy_glUniform3i.?(arg_4519, arg_4520, arg_4521, arg_4522);
}
pub const __USE_POSIX2 = 1;
pub const GL_TEXTURE_GEN_MODE = 0x2500;
pub inline fn glGetTextureParameterIuiv(arg_4523: GLuint, arg_4524: GLenum, arg_4525: [*c]GLuint) void {
    return epoxy_glGetTextureParameterIuiv.?(arg_4523, arg_4524, arg_4525);
}
pub const GL_CONVOLUTION_BORDER_COLOR = 0x8154;
pub const GL_CLIENT_ACTIVE_TEXTURE = 0x84E1;
pub const GL_ARB_compressed_texture_pixel_storage = 1;
pub const __SIZEOF_FLOAT128__ = 16;
pub const GL_STATE_RESTORE = 0x8BDC;
pub const GL_MAP1_TEXTURE_COORD_1 = 0x0D93;
pub const GL_AMD_name_gen_delete = 1;
pub const GL_PRESENT_DURATION_NV = 0x8E2B;
pub inline fn glTexCoord4bvOES(arg_4526: [*c]const GLbyte) void {
    return epoxy_glTexCoord4bvOES.?(arg_4526);
}
pub const GL_LUMINANCE8I_EXT = 0x8D92;
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_SIZE_ARB = 0x9345;
pub const GL_POLYGON_STIPPLE = 0x0B42;
pub inline fn glCompressedTexImage2DARB(arg_4527: GLenum, arg_4528: GLint, arg_4529: GLenum, arg_4530: GLsizei, arg_4531: GLsizei, arg_4532: GLint, arg_4533: GLsizei, arg_4534: ?*const c_void) void {
    return epoxy_glCompressedTexImage2DARB.?(arg_4527, arg_4528, arg_4529, arg_4530, arg_4531, arg_4532, arg_4533, arg_4534);
}
pub inline fn glProgramParameter4dvNV(arg_4535: GLenum, arg_4536: GLuint, arg_4537: [*c]const GLdouble) void {
    return epoxy_glProgramParameter4dvNV.?(arg_4535, arg_4536, arg_4537);
}
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING_ARB = 0x8C2D;
pub const GL_FUNC_SUBTRACT = 0x800A;
pub inline fn glIndexdv(arg_4538: [*c]const GLdouble) void {
    return epoxy_glIndexdv.?(arg_4538);
}
pub const GL_MATRIX5_NV = 0x8635;
pub const __DBL_DENORM_MIN__ = 4.9406564584124654e-324;
pub const GL_MAP2_VERTEX_ATTRIB8_4_NV = 0x8678;
pub const PRIxFAST16 = __PRIPTR_PREFIX ++ "x";
pub const GL_QUAD_LUMINANCE4_SGIS = 0x8120;
pub const GL_SGIX_ycrcba = 1;
pub const GL_OFFSET_TEXTURE_2D_MATRIX_NV = 0x86E1;
pub const GL_ARB_ES3_compatibility = 1;
pub const GL_TEXTURE_MULTI_BUFFER_HINT_SGIX = 0x812E;
pub inline fn glProgramUniform3uiv(arg_4539: GLuint, arg_4540: GLint, arg_4541: GLsizei, arg_4542: [*c]const GLuint) void {
    return epoxy_glProgramUniform3uiv.?(arg_4539, arg_4540, arg_4541, arg_4542);
}
pub const GL_POINT_SIZE_ARRAY_TYPE_OES = 0x898A;
pub const GL_DYNAMIC_DRAW_ARB = 0x88E8;
pub const GL_TESS_CONTROL_SHADER_BIT_EXT = 0x00000008;
pub const GL_ADD = 0x0104;
pub const __FLT_EVAL_METHOD__ = 0;
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE = 0x9101;
pub const GL_ATOMIC_COUNTER_BUFFER_SIZE = 0x92C3;
pub inline fn glMatrixLoadTransposedEXT(arg_4543: GLenum, arg_4544: [*c]const GLdouble) void {
    return epoxy_glMatrixLoadTransposedEXT.?(arg_4543, arg_4544);
}
pub const UINT8_MAX = 255;
pub inline fn glVertexArrayRangeNV(arg_4545: GLsizei, arg_4546: ?*const c_void) void {
    return epoxy_glVertexArrayRangeNV.?(arg_4545, arg_4546);
}
pub const GL_FLOAT_MAT4x3_NV = 0x8B6A;
pub const PRIuLEAST16 = "u";
pub const GL_FORCE_BLUE_TO_ONE_NV = 0x8860;
pub const GL_DRAW_BUFFER5_ARB = 0x882A;
pub const GL_PATH_MAX_PROJECTION_STACK_DEPTH_NV = 0x0D38;
pub const GL_SUBGROUP_SUPPORTED_FEATURES_KHR = 0x9534;
pub inline fn glMultiTexCoord1xvOES(arg_4547: GLenum, arg_4548: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord1xvOES.?(arg_4547, arg_4548);
}
pub const GL_MAX_RECTANGLE_TEXTURE_SIZE_ARB = 0x84F8;
pub inline fn glMultiTexCoord4sv(arg_4549: GLenum, arg_4550: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord4sv.?(arg_4549, arg_4550);
}
pub inline fn glTextureStorage2D(arg_4551: GLuint, arg_4552: GLsizei, arg_4553: GLenum, arg_4554: GLsizei, arg_4555: GLsizei) void {
    return epoxy_glTextureStorage2D.?(arg_4551, arg_4552, arg_4553, arg_4554, arg_4555);
}
pub const GL_SRGB_ALPHA = 0x8C42;
pub inline fn glConvolutionFilter2D(arg_4556: GLenum, arg_4557: GLenum, arg_4558: GLsizei, arg_4559: GLsizei, arg_4560: GLenum, arg_4561: GLenum, arg_4562: ?*const c_void) void {
    return epoxy_glConvolutionFilter2D.?(arg_4556, arg_4557, arg_4558, arg_4559, arg_4560, arg_4561, arg_4562);
}
pub const GL_AUX1 = 0x040A;
pub const GL_RGB9_E5 = 0x8C3D;
pub inline fn glVertexAttrib4Niv(arg_4563: GLuint, arg_4564: [*c]const GLint) void {
    return epoxy_glVertexAttrib4Niv.?(arg_4563, arg_4564);
}
pub inline fn glGetIntegeri_v(arg_4565: GLenum, arg_4566: GLuint, arg_4567: [*c]GLint) void {
    return epoxy_glGetIntegeri_v.?(arg_4565, arg_4566, arg_4567);
}
pub const GL_SAMPLER_RENDERBUFFER_NV = 0x8E56;
pub const GL_CONTEXT_FLAGS = 0x821E;
pub inline fn glUniform3i64vNV(arg_4568: GLint, arg_4569: GLsizei, arg_4570: [*c]const GLint64EXT) void {
    return epoxy_glUniform3i64vNV.?(arg_4568, arg_4569, arg_4570);
}
pub const PRIoFAST64 = __PRI64_PREFIX ++ "o";
pub const GL_ISOLINES = 0x8E7A;
pub const GL_DRAW_BUFFER14_NV = 0x8833;
pub const GL_TRANSPOSE_AFFINE_2D_NV = 0x9096;
pub const GL_SAMPLER_3D_ARB = 0x8B5F;
pub inline fn glCombinerOutputNV(arg_4571: GLenum, arg_4572: GLenum, arg_4573: GLenum, arg_4574: GLenum, arg_4575: GLenum, arg_4576: GLenum, arg_4577: GLenum, arg_4578: GLboolean, arg_4579: GLboolean, arg_4580: GLboolean) void {
    return epoxy_glCombinerOutputNV.?(arg_4571, arg_4572, arg_4573, arg_4574, arg_4575, arg_4576, arg_4577, arg_4578, arg_4579, arg_4580);
}
pub const GL_TEXTURE_COORD_ARRAY_SIZE = 0x8088;
pub inline fn glGetProgramLocalParameterdvARB(arg_4581: GLenum, arg_4582: GLuint, arg_4583: [*c]GLdouble) void {
    return epoxy_glGetProgramLocalParameterdvARB.?(arg_4581, arg_4582, arg_4583);
}
pub const GL_ARB_texture_barrier = 1;
pub inline fn glVertexAttrib3svNV(arg_4584: GLuint, arg_4585: [*c]const GLshort) void {
    return epoxy_glVertexAttrib3svNV.?(arg_4584, arg_4585);
}
pub inline fn glGetDriverControlStringQCOM(arg_4586: GLuint, arg_4587: GLsizei, arg_4588: [*c]GLsizei, arg_4589: [*c]GLchar) void {
    return epoxy_glGetDriverControlStringQCOM.?(arg_4586, arg_4587, arg_4588, arg_4589);
}
pub const GL_REG_29_ATI = 0x893E;
pub const GL_SGIX_clipmap = 1;
pub inline fn glDisableVertexAttribArray(arg_4590: GLuint) void {
    return epoxy_glDisableVertexAttribArray.?(arg_4590);
}
pub inline fn glVertexStream1sATI(arg_4591: GLenum, arg_4592: GLshort) void {
    return epoxy_glVertexStream1sATI.?(arg_4591, arg_4592);
}
pub inline fn glVertexP2uiv(arg_4593: GLenum, arg_4594: [*c]const GLuint) void {
    return epoxy_glVertexP2uiv.?(arg_4593, arg_4594);
}
pub inline fn glColor3i(arg_4595: GLint, arg_4596: GLint, arg_4597: GLint) void {
    return epoxy_glColor3i.?(arg_4595, arg_4596, arg_4597);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_NUM_VIEWS_OVR = 0x9630;
pub const GL_PALETTE4_RGB8_OES = 0x8B90;
pub const GL_NV_shader_thread_group = 1;
pub inline fn glVertexAttrib4NuivARB(arg_4598: GLuint, arg_4599: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4NuivARB.?(arg_4598, arg_4599);
}
pub inline fn glLighti(arg_4600: GLenum, arg_4601: GLenum, arg_4602: GLint) void {
    return epoxy_glLighti.?(arg_4600, arg_4601, arg_4602);
}
pub const GL_ALPHA8_EXT = 0x803C;
pub const GL_MIN_SAMPLE_SHADING_VALUE_ARB = 0x8C37;
pub inline fn glRasterPos4i(arg_4603: GLint, arg_4604: GLint, arg_4605: GLint, arg_4606: GLint) void {
    return epoxy_glRasterPos4i.?(arg_4603, arg_4604, arg_4605, arg_4606);
}
pub const GL_SUCCESS_NV = 0x902F;
pub const GL_FONT_HAS_KERNING_BIT_NV = 0x10000000;
pub const GL_UNSIGNED_INT_VEC2 = 0x8DC6;
pub inline fn glMap2xOES(arg_4607: GLenum, arg_4608: GLfixed, arg_4609: GLfixed, arg_4610: GLint, arg_4611: GLint, arg_4612: GLfixed, arg_4613: GLfixed, arg_4614: GLint, arg_4615: GLint, arg_4616: GLfixed) void {
    return epoxy_glMap2xOES.?(arg_4607, arg_4608, arg_4609, arg_4610, arg_4611, arg_4612, arg_4613, arg_4614, arg_4615, arg_4616);
}
pub inline fn glUniform3ivARB(arg_4617: GLint, arg_4618: GLsizei, arg_4619: [*c]const GLint) void {
    return epoxy_glUniform3ivARB.?(arg_4617, arg_4618, arg_4619);
}
pub const GL_TESS_EVALUATION_SHADER = 0x8E87;
pub const GL_INDEX_ARRAY_STRIDE_EXT = 0x8086;
pub const GL_UNSIGNED_INT_24_8_NV = 0x84FA;
pub inline fn glGetInternalformati64v(arg_4620: GLenum, arg_4621: GLenum, arg_4622: GLenum, arg_4623: GLsizei, arg_4624: [*c]GLint64) void {
    return epoxy_glGetInternalformati64v.?(arg_4620, arg_4621, arg_4622, arg_4623, arg_4624);
}
pub const GL_TEXTURE_COORD_ARRAY = 0x8078;
pub const GL_FLOAT_VEC4_ARB = 0x8B52;
pub inline fn glSampleCoverageARB(arg_4625: GLfloat, arg_4626: GLboolean) void {
    return epoxy_glSampleCoverageARB.?(arg_4625, arg_4626);
}
pub const GL_COMPRESSED_SLUMINANCE_ALPHA = 0x8C4B;
pub const GL_INT_IMAGE_1D_ARRAY_EXT = 0x905D;
pub const GL_FRAMEZOOM_SGIX = 0x818B;
pub inline fn glPrimitiveBoundingBoxARB(arg_4627: GLfloat, arg_4628: GLfloat, arg_4629: GLfloat, arg_4630: GLfloat, arg_4631: GLfloat, arg_4632: GLfloat, arg_4633: GLfloat, arg_4634: GLfloat) void {
    return epoxy_glPrimitiveBoundingBoxARB.?(arg_4627, arg_4628, arg_4629, arg_4630, arg_4631, arg_4632, arg_4633, arg_4634);
}
pub inline fn glBlendEquationiOES(arg_4635: GLuint, arg_4636: GLenum) void {
    return epoxy_glBlendEquationiOES.?(arg_4635, arg_4636);
}
pub const GL_COLOR_ATTACHMENT0_OES = 0x8CE0;
pub inline fn glGetSubroutineUniformLocation(arg_4637: GLuint, arg_4638: GLenum, arg_4639: [*c]const GLchar) GLint {
    return epoxy_glGetSubroutineUniformLocation.?(arg_4637, arg_4638, arg_4639);
}
pub const GL_PIXEL_GROUP_COLOR_SGIS = 0x8356;
pub const GL_TESS_EVALUATION_PROGRAM_PARAMETER_BUFFER_NV = 0x8C75;
pub inline fn glPopClientAttrib() void {
    return epoxy_glPopClientAttrib.?();
}
pub const GL_BUFFER_ACCESS_OES = 0x88BB;
pub inline fn glGetNamedFramebufferAttachmentParameteriv(arg_4640: GLuint, arg_4641: GLenum, arg_4642: GLenum, arg_4643: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferAttachmentParameteriv.?(arg_4640, arg_4641, arg_4642, arg_4643);
}
pub inline fn glVertexAttribLFormat(arg_4644: GLuint, arg_4645: GLint, arg_4646: GLenum, arg_4647: GLuint) void {
    return epoxy_glVertexAttribLFormat.?(arg_4644, arg_4645, arg_4646, arg_4647);
}
pub const GL_NO_RESET_NOTIFICATION_ARB = 0x8261;
pub const GL_CUBIC_EXT = 0x8334;
pub inline fn glGenVertexShadersEXT(arg_4648: GLuint) GLuint {
    return epoxy_glGenVertexShadersEXT.?(arg_4648);
}
pub inline fn glProgramUniform1i(arg_4649: GLuint, arg_4650: GLint, arg_4651: GLint) void {
    return epoxy_glProgramUniform1i.?(arg_4649, arg_4650, arg_4651);
}
pub const GL_TEXTURE27_ARB = 0x84DB;
pub const GL_NV_generate_mipmap_sRGB = 1;
pub const GL_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826D;
pub const GL_LOCATION = 0x930E;
pub const GL_ARB_draw_buffers_blend = 1;
pub const GL_INTERNALFORMAT_PREFERRED = 0x8270;
pub inline fn glTextureStorage3DEXT(arg_4652: GLuint, arg_4653: GLenum, arg_4654: GLsizei, arg_4655: GLenum, arg_4656: GLsizei, arg_4657: GLsizei, arg_4658: GLsizei) void {
    return epoxy_glTextureStorage3DEXT.?(arg_4652, arg_4653, arg_4654, arg_4655, arg_4656, arg_4657, arg_4658);
}
pub const GL_MAX_TASK_UNIFORM_BLOCKS_NV = 0x8E68;
pub const GL_RGB8_EXT = 0x8051;
pub const GL_TRANSPOSE_TEXTURE_MATRIX_ARB = 0x84E5;
pub inline fn glMultiTexCoord1sARB(arg_4659: GLenum, arg_4660: GLshort) void {
    return epoxy_glMultiTexCoord1sARB.?(arg_4659, arg_4660);
}
pub const GL_MAX_LGPU_GPUS_NVX = 0x92BA;
pub const GL_PIXEL_MIN_FILTER_EXT = 0x8332;
pub inline fn glGetLocalConstantIntegervEXT(arg_4661: GLuint, arg_4662: GLenum, arg_4663: [*c]GLint) void {
    return epoxy_glGetLocalConstantIntegervEXT.?(arg_4661, arg_4662, arg_4663);
}
pub inline fn glGetMultiTexLevelParameterfvEXT(arg_4664: GLenum, arg_4665: GLenum, arg_4666: GLint, arg_4667: GLenum, arg_4668: [*c]GLfloat) void {
    return epoxy_glGetMultiTexLevelParameterfvEXT.?(arg_4664, arg_4665, arg_4666, arg_4667, arg_4668);
}
pub const GL_R1UI_V3F_SUN = 0x85C4;
pub inline fn __LDBL_REDIR(name: var, proto: var) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub const GL_VIEW_CLASS_ASTC_12x12_RGBA = 0x9395;
pub const __UINT_LEAST8_FMTx__ = "hhx";
pub inline fn glMapGrid1f(arg_4669: GLint, arg_4670: GLfloat, arg_4671: GLfloat) void {
    return epoxy_glMapGrid1f.?(arg_4669, arg_4670, arg_4671);
}
pub const GL_COLOR_INDEX16_EXT = 0x80E7;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE_EXT = 0x8211;
pub const GL_CULL_FACE = 0x0B44;
pub const GL_NORMAL_ARRAY_POINTER = 0x808F;
pub const GL_FLOAT_R_NV = 0x8880;
pub const GL_UNSIGNED_INT_IMAGE_3D = 0x9064;
pub const GL_VERTEX_SHADER_INVOCATIONS = 0x82F0;
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_ANGLE = 0x83F3;
pub const GL_TIME_ELAPSED_EXT = 0x88BF;
pub inline fn glTextureSubImage1DEXT(arg_4672: GLuint, arg_4673: GLenum, arg_4674: GLint, arg_4675: GLint, arg_4676: GLsizei, arg_4677: GLenum, arg_4678: GLenum, arg_4679: ?*const c_void) void {
    return epoxy_glTextureSubImage1DEXT.?(arg_4672, arg_4673, arg_4674, arg_4675, arg_4676, arg_4677, arg_4678, arg_4679);
}
pub const GL_CURRENT_TIME_NV = 0x8E28;
pub const GL_EXT_timer_query = 1;
pub const GL_NV_internalformat_sample_query = 1;
pub inline fn glDrawBuffer(arg_4680: GLenum) void {
    return epoxy_glDrawBuffer.?(arg_4680);
}
pub const GL_DEBUG_CATEGORY_PERFORMANCE_AMD = 0x914D;
pub const GL_XOR = 0x1506;
pub const GL_TEXTURE_BASE_LEVEL_SGIS = 0x813C;
pub inline fn glVertexBindingDivisor(arg_4681: GLuint, arg_4682: GLuint) void {
    return epoxy_glVertexBindingDivisor.?(arg_4681, arg_4682);
}
pub const __INTMAX_MAX__ = @as(c_long, 9223372036854775807);
pub const GL_OES_compressed_ETC1_RGB8_sub_texture = 1;
pub const GL_AVERAGE_HP = 0x8160;
pub const GL_FRAGMENT_PROGRAM_CALLBACK_MESA = 0x8BB1;
pub const GL_CLIP_DISTANCE0 = 0x3000;
pub const GL_DRAW_BUFFER2_ATI = 0x8827;
pub const GL_DEBUG_CATEGORY_OTHER_AMD = 0x9150;
pub const GL_MAX_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8178;
pub const GL_COMPRESSED_SLUMINANCE_ALPHA_EXT = 0x8C4B;
pub const GL_RGBA16_SNORM = 0x8F9B;
pub const GL_MAX_TASK_SHADER_STORAGE_BLOCKS_NV = 0x8E6E;
pub inline fn glCreateShader(arg_4683: GLenum) GLuint {
    return epoxy_glCreateShader.?(arg_4683);
}
pub const GL_COMPRESSED_INTENSITY = 0x84EC;
pub const GL_SIGNED_HILO_NV = 0x86F9;
pub const GL_OES_depth32 = 1;
pub const GL_FLOAT_CLEAR_COLOR_VALUE_NV = 0x888D;
pub const GL_OES_texture_cube_map_array = 1;
pub const GL_FACTOR_ALPHA_MODULATE_IMG = 0x8C07;
pub const GL_TEXTURE_DS_SIZE_NV = 0x871D;
pub const SCNiFAST8 = "hhi";
pub inline fn glTexCoordP2ui(arg_4684: GLenum, arg_4685: GLuint) void {
    return epoxy_glTexCoordP2ui.?(arg_4684, arg_4685);
}
pub const GL_FRAGMENT_DEPTH_EXT = 0x8452;
pub const GL_TEXTURE_COORD_ARRAY_LENGTH_NV = 0x8F2F;
pub inline fn glGenQueryResourceTagNV(arg_4686: GLsizei, arg_4687: [*c]GLint) void {
    return epoxy_glGenQueryResourceTagNV.?(arg_4686, arg_4687);
}
pub const __LDBL_EPSILON__ = @as(c_longdouble, 1.08420217248550443401e-19);
pub const GL_SWIZZLE_STRQ_DQ_ATI = 0x897B;
pub inline fn glColorMaterial(arg_4688: GLenum, arg_4689: GLenum) void {
    return epoxy_glColorMaterial.?(arg_4688, arg_4689);
}
pub const GL_CONSTANT_ALPHA_EXT = 0x8003;
pub inline fn glFramebufferDrawBufferEXT(arg_4690: GLuint, arg_4691: GLenum) void {
    return epoxy_glFramebufferDrawBufferEXT.?(arg_4690, arg_4691);
}
pub const GL_MATRIX18_ARB = 0x88D2;
pub const GL_DEBUG_SEVERITY_HIGH = 0x9146;
pub const SCNxLEAST8 = "hhx";
pub const __UINT_LEAST32_FMTx__ = "x";
pub inline fn glVertexAttribL4ui64NV(arg_4692: GLuint, arg_4693: GLuint64EXT, arg_4694: GLuint64EXT, arg_4695: GLuint64EXT, arg_4696: GLuint64EXT) void {
    return epoxy_glVertexAttribL4ui64NV.?(arg_4692, arg_4693, arg_4694, arg_4695, arg_4696);
}
pub const GL_PARALLEL_ARRAYS_INTEL = 0x83F4;
pub const GL_MESA_resize_buffers = 1;
pub const GL_STENCIL_INDEX8_OES = 0x8D48;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_EXT = 0x8518;
pub const GL_FLOAT16_MAT3x4_AMD = 0x91CB;
pub inline fn glDisableClientState(arg_4697: GLenum) void {
    return epoxy_glDisableClientState.?(arg_4697);
}
pub inline fn glGetVideoCaptureStreamivNV(arg_4698: GLuint, arg_4699: GLuint, arg_4700: GLenum, arg_4701: [*c]GLint) void {
    return epoxy_glGetVideoCaptureStreamivNV.?(arg_4698, arg_4699, arg_4700, arg_4701);
}
pub const GL_R1UI_T2F_C4F_N3F_V3F_SUN = 0x85CB;
pub const GL_EXT_texture3D = 1;
pub inline fn glPointSizePointerOES(arg_4702: GLenum, arg_4703: GLsizei, arg_4704: ?*const c_void) void {
    return epoxy_glPointSizePointerOES.?(arg_4702, arg_4703, arg_4704);
}
pub const GL_MAP_ATTRIB_V_ORDER_NV = 0x86C4;
pub inline fn glMaterialxOES(arg_4705: GLenum, arg_4706: GLenum, arg_4707: GLfixed) void {
    return epoxy_glMaterialxOES.?(arg_4705, arg_4706, arg_4707);
}
pub const GL_GREEN_INTEGER = 0x8D95;
pub const GL_COMBINE_RGB_ARB = 0x8571;
pub const GL_SHADING_RATE_1_INVOCATION_PER_1X2_PIXELS_NV = 0x9566;
pub inline fn glDrawTransformFeedbackNV(arg_4708: GLenum, arg_4709: GLuint) void {
    return epoxy_glDrawTransformFeedbackNV.?(arg_4708, arg_4709);
}
pub const GL_MODELVIEW = 0x1700;
pub const GL_KHR_texture_compression_astc_ldr = 1;
pub const GL_IMAGE_CLASS_1_X_8 = 0x82C1;
pub inline fn glTextureNormalEXT(arg_4710: GLenum) void {
    return epoxy_glTextureNormalEXT.?(arg_4710);
}
pub inline fn glPrimitiveBoundingBox(arg_4711: GLfloat, arg_4712: GLfloat, arg_4713: GLfloat, arg_4714: GLfloat, arg_4715: GLfloat, arg_4716: GLfloat, arg_4717: GLfloat, arg_4718: GLfloat) void {
    return epoxy_glPrimitiveBoundingBox.?(arg_4711, arg_4712, arg_4713, arg_4714, arg_4715, arg_4716, arg_4717, arg_4718);
}
pub inline fn glMinmaxEXT(arg_4719: GLenum, arg_4720: GLenum, arg_4721: GLboolean) void {
    return epoxy_glMinmaxEXT.?(arg_4719, arg_4720, arg_4721);
}
pub inline fn glNamedBufferPageCommitmentARB(arg_4722: GLuint, arg_4723: GLintptr, arg_4724: GLsizeiptr, arg_4725: GLboolean) void {
    return epoxy_glNamedBufferPageCommitmentARB.?(arg_4722, arg_4723, arg_4724, arg_4725);
}
pub const __DBL_MANT_DIG__ = 53;
pub inline fn glSecondaryColor3uiv(arg_4726: [*c]const GLuint) void {
    return epoxy_glSecondaryColor3uiv.?(arg_4726);
}
pub inline fn glProgramUniform4i64vARB(arg_4727: GLuint, arg_4728: GLint, arg_4729: GLsizei, arg_4730: [*c]const GLint64) void {
    return epoxy_glProgramUniform4i64vARB.?(arg_4727, arg_4728, arg_4729, arg_4730);
}
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS = 0x8B49;
pub const GL_RGB10_EXT = 0x8052;
pub const GL_CON_31_ATI = 0x8960;
pub inline fn glBindTextures(arg_4731: GLuint, arg_4732: GLsizei, arg_4733: [*c]const GLuint) void {
    return epoxy_glBindTextures.?(arg_4731, arg_4732, arg_4733);
}
pub const GL_RENDERBUFFER_DEPTH_SIZE_OES = 0x8D54;
pub const GL_BUMP_ROT_MATRIX_ATI = 0x8775;
pub inline fn glColor3uiv(arg_4734: [*c]const GLuint) void {
    return epoxy_glColor3uiv.?(arg_4734);
}
pub const GL_COLORBURN_NV = 0x929A;
pub inline fn glGetDoublei_vEXT(arg_4735: GLenum, arg_4736: GLuint, arg_4737: [*c]GLdouble) void {
    return epoxy_glGetDoublei_vEXT.?(arg_4735, arg_4736, arg_4737);
}
pub const GL_POINTS = 0x0000;
pub inline fn glTexGenxOES(arg_4738: GLenum, arg_4739: GLenum, arg_4740: GLfixed) void {
    return epoxy_glTexGenxOES.?(arg_4738, arg_4739, arg_4740);
}
pub inline fn glUniform2dv(arg_4741: GLint, arg_4742: GLsizei, arg_4743: [*c]const GLdouble) void {
    return epoxy_glUniform2dv.?(arg_4741, arg_4742, arg_4743);
}
pub inline fn glVertexAttribBinding(arg_4744: GLuint, arg_4745: GLuint) void {
    return epoxy_glVertexAttribBinding.?(arg_4744, arg_4745);
}
pub const SCNuLEAST8 = "hhu";
pub const GL_PN_TRIANGLES_POINT_MODE_LINEAR_ATI = 0x87F5;
pub const GL_MAX_TEXTURE_LOD_BIAS_EXT = 0x84FD;
pub const GL_3DC_XY_AMD = 0x87FA;
pub const GL_ALPHA_FLOAT32_APPLE = 0x8816;
pub const GL_FUNC_REVERSE_SUBTRACT = 0x800B;
pub const GL_SAMPLER_1D_ARRAY_EXT = 0x8DC0;
pub const PRId8 = "d";
pub const GL_MALI_SHADER_BINARY_ARM = 0x8F60;
pub const GL_INTENSITY4 = 0x804A;
pub const GL_STATIC_DRAW = 0x88E4;
pub const GL_CLAMP_VERTEX_COLOR_ARB = 0x891A;
pub const GL_UNSIGNED_INT_IMAGE_2D = 0x9063;
pub const GL_POST_COLOR_MATRIX_GREEN_BIAS = 0x80B9;
pub const GL_CONVOLUTION_FILTER_SCALE_EXT = 0x8014;
pub inline fn glUniformHandleui64NV(arg_4746: GLint, arg_4747: GLuint64) void {
    return epoxy_glUniformHandleui64NV.?(arg_4746, arg_4747);
}
pub const GL_NV_path_rendering = 1;
pub const GL_R16UI = 0x8234;
pub const GL_EXT_texture_buffer_object = 1;
pub inline fn glMapNamedBuffer(arg_4748: GLuint, arg_4749: GLenum) ?*c_void {
    return epoxy_glMapNamedBuffer.?(arg_4748, arg_4749);
}
pub const GL_CLIP_PLANE4_IMG = 0x3004;
pub inline fn glProgramUniform4i64vNV(arg_4750: GLuint, arg_4751: GLint, arg_4752: GLsizei, arg_4753: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform4i64vNV.?(arg_4750, arg_4751, arg_4752, arg_4753);
}
pub const GL_FOG_COORDINATE_SOURCE_EXT = 0x8450;
pub inline fn glCopyConvolutionFilter2D(arg_4754: GLenum, arg_4755: GLenum, arg_4756: GLint, arg_4757: GLint, arg_4758: GLsizei, arg_4759: GLsizei) void {
    return epoxy_glCopyConvolutionFilter2D.?(arg_4754, arg_4755, arg_4756, arg_4757, arg_4758, arg_4759);
}
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT = 0x8E8E;
pub inline fn glTexCoord2bvOES(arg_4760: [*c]const GLbyte) void {
    return epoxy_glTexCoord2bvOES.?(arg_4760);
}
pub inline fn glGenBuffersARB(arg_4761: GLsizei, arg_4762: [*c]GLuint) void {
    return epoxy_glGenBuffersARB.?(arg_4761, arg_4762);
}
pub inline fn glVertexPointerEXT(arg_4763: GLint, arg_4764: GLenum, arg_4765: GLsizei, arg_4766: GLsizei, arg_4767: ?*const c_void) void {
    return epoxy_glVertexPointerEXT.?(arg_4763, arg_4764, arg_4765, arg_4766, arg_4767);
}
pub const SCNiLEAST8 = "hhi";
pub const GL_STENCIL_BACK_REF = 0x8CA3;
pub const GL_FRAMEBUFFER_BINDING_ANGLE = 0x8CA6;
pub inline fn glGetOcclusionQueryuivNV(arg_4768: GLuint, arg_4769: GLenum, arg_4770: [*c]GLuint) void {
    return epoxy_glGetOcclusionQueryuivNV.?(arg_4768, arg_4769, arg_4770);
}
pub const GL_RGB16_SNORM_EXT = 0x8F9A;
pub const GL_QUERY_BY_REGION_NO_WAIT_NV = 0x8E16;
pub inline fn glBindBufferRangeEXT(arg_4771: GLenum, arg_4772: GLuint, arg_4773: GLuint, arg_4774: GLintptr, arg_4775: GLsizeiptr) void {
    return epoxy_glBindBufferRangeEXT.?(arg_4771, arg_4772, arg_4773, arg_4774, arg_4775);
}
pub inline fn glTexParameterIivOES(arg_4776: GLenum, arg_4777: GLenum, arg_4778: [*c]const GLint) void {
    return epoxy_glTexParameterIivOES.?(arg_4776, arg_4777, arg_4778);
}
pub const GL_COLOR_ARRAY_POINTER_EXT = 0x8090;
pub const GL_ARB_texture_compression_rgtc = 1;
pub const GL_DEBUG_OBJECT_MESA = 0x8759;
pub const GL_FOG_COORDINATE_ARRAY = 0x8457;
pub const GL_EXT_texture_compression_bptc = 1;
pub const GL_MODELVIEW21_ARB = 0x8735;
pub const GL_BUMP_TARGET_ATI = 0x877C;
pub inline fn glReadPixels(arg_4779: GLint, arg_4780: GLint, arg_4781: GLsizei, arg_4782: GLsizei, arg_4783: GLenum, arg_4784: GLenum, arg_4785: ?*c_void) void {
    return epoxy_glReadPixels.?(arg_4779, arg_4780, arg_4781, arg_4782, arg_4783, arg_4784, arg_4785);
}
pub const __PTRDIFF_MAX__ = @as(c_long, 9223372036854775807);
pub const GL_NV_texture_shader2 = 1;
pub const SCNu64 = __PRI64_PREFIX ++ "u";
pub inline fn glGetHistogramParameterivEXT(arg_4786: GLenum, arg_4787: GLenum, arg_4788: [*c]GLint) void {
    return epoxy_glGetHistogramParameterivEXT.?(arg_4786, arg_4787, arg_4788);
}
pub inline fn glListDrawCommandsStatesClientNV(arg_4789: GLuint, arg_4790: GLuint, arg_4791: [*c]?*const c_void, arg_4792: [*c]const GLsizei, arg_4793: [*c]const GLuint, arg_4794: [*c]const GLuint, arg_4795: GLuint) void {
    return epoxy_glListDrawCommandsStatesClientNV.?(arg_4789, arg_4790, arg_4791, arg_4792, arg_4793, arg_4794, arg_4795);
}
pub inline fn glTexCoord4f(arg_4796: GLfloat, arg_4797: GLfloat, arg_4798: GLfloat, arg_4799: GLfloat) void {
    return epoxy_glTexCoord4f.?(arg_4796, arg_4797, arg_4798, arg_4799);
}
pub inline fn glVertexAttribLPointer(arg_4800: GLuint, arg_4801: GLint, arg_4802: GLenum, arg_4803: GLsizei, arg_4804: ?*const c_void) void {
    return epoxy_glVertexAttribLPointer.?(arg_4800, arg_4801, arg_4802, arg_4803, arg_4804);
}
pub const GL_MAX_COMBINED_CLIP_AND_CULL_DISTANCES = 0x82FA;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS = 0x8A32;
pub const GL_DECR_WRAP_EXT = 0x8508;
pub inline fn glTexImage2DMultisample(arg_4805: GLenum, arg_4806: GLsizei, arg_4807: GLenum, arg_4808: GLsizei, arg_4809: GLsizei, arg_4810: GLboolean) void {
    return epoxy_glTexImage2DMultisample.?(arg_4805, arg_4806, arg_4807, arg_4808, arg_4809, arg_4810);
}
pub const GL_LINE_STIPPLE_PATTERN = 0x0B25;
pub const GL_422_EXT = 0x80CC;
pub inline fn glGetProgramivARB(arg_4811: GLenum, arg_4812: GLenum, arg_4813: [*c]GLint) void {
    return epoxy_glGetProgramivARB.?(arg_4811, arg_4812, arg_4813);
}
pub const GL_TASK_SUBROUTINE_NV = 0x957D;
pub const GL_STENCIL_INDEX16_EXT = 0x8D49;
pub const GL_UNSIGNED_INT64_AMD = 0x8BC2;
pub inline fn glGetCommandHeaderNV(arg_4814: GLenum, arg_4815: GLuint) GLuint {
    return epoxy_glGetCommandHeaderNV.?(arg_4814, arg_4815);
}
pub const GL_CONSTANT_ARB = 0x8576;
pub const GL_REFERENCED_BY_FRAGMENT_SHADER = 0x930A;
pub inline fn glColorPointervINTEL(arg_4816: GLint, arg_4817: GLenum, arg_4818: [*c]?*const c_void) void {
    return epoxy_glColorPointervINTEL.?(arg_4816, arg_4817, arg_4818);
}
pub const GL_SYNC_GPU_COMMANDS_COMPLETE = 0x9117;
pub const GL_PIXEL_MAP_B_TO_B_SIZE = 0x0CB8;
pub const GL_COLOR_ATTACHMENT8_NV = 0x8CE8;
pub inline fn glExtTexObjectStateOverrideiQCOM(arg_4819: GLenum, arg_4820: GLenum, arg_4821: GLint) void {
    return epoxy_glExtTexObjectStateOverrideiQCOM.?(arg_4819, arg_4820, arg_4821);
}
pub const GL_EXT_blend_subtract = 1;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_ARB = 0x8DE1;
pub inline fn glFramebufferRenderbuffer(arg_4822: GLenum, arg_4823: GLenum, arg_4824: GLenum, arg_4825: GLuint) void {
    return epoxy_glFramebufferRenderbuffer.?(arg_4822, arg_4823, arg_4824, arg_4825);
}
pub inline fn glNamedBufferStorageEXT(arg_4826: GLuint, arg_4827: GLsizeiptr, arg_4828: ?*const c_void, arg_4829: GLbitfield) void {
    return epoxy_glNamedBufferStorageEXT.?(arg_4826, arg_4827, arg_4828, arg_4829);
}
pub const GL_VECTOR_EXT = 0x87BF;
pub inline fn glProgramEnvParameter4dvARB(arg_4830: GLenum, arg_4831: GLuint, arg_4832: [*c]const GLdouble) void {
    return epoxy_glProgramEnvParameter4dvARB.?(arg_4830, arg_4831, arg_4832);
}
pub inline fn glFogCoorddvEXT(arg_4833: [*c]const GLdouble) void {
    return epoxy_glFogCoorddvEXT.?(arg_4833);
}
pub inline fn glWindowPos3dv(arg_4834: [*c]const GLdouble) void {
    return epoxy_glWindowPos3dv.?(arg_4834);
}
pub const GL_VIEW_CLASS_ASTC_5x4_RGBA = 0x9389;
pub const GL_RG_INTEGER = 0x8228;
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS_ARB = 0x8C29;
pub const GL_SGIS_texture_edge_clamp = 1;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E1F;
pub const GL_QUAD_INTENSITY8_SGIS = 0x8123;
pub const GL_INT_SAMPLER_RENDERBUFFER_NV = 0x8E57;
pub const GL_UTF8_NV = 0x909A;
pub const GL_ACTIVE_VARIABLES = 0x9305;
pub const GL_DEBUG_TYPE_POP_GROUP_KHR = 0x826A;
pub const GL_CLAMP_VERTEX_COLOR = 0x891A;
pub const GL_FONT_UNAVAILABLE_NV = 0x936A;
pub const GL_SIGNED_RGB_NV = 0x86FE;
pub inline fn glQueryCounterEXT(arg_4835: GLuint, arg_4836: GLenum) void {
    return epoxy_glQueryCounterEXT.?(arg_4835, arg_4836);
}
pub const GL_FRAGMENT_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA4;
pub const GL_PIXEL_TEX_GEN_Q_CEILING_SGIX = 0x8184;
pub const GL_OUTPUT_TEXTURE_COORD8_EXT = 0x87A5;
pub const GL_EXT_draw_buffers = 1;
pub const GL_COMPRESSED_RGBA_ASTC_4x4 = 0x93B0;
pub inline fn glColorTableSGI(arg_4837: GLenum, arg_4838: GLenum, arg_4839: GLsizei, arg_4840: GLenum, arg_4841: GLenum, arg_4842: ?*const c_void) void {
    return epoxy_glColorTableSGI.?(arg_4837, arg_4838, arg_4839, arg_4840, arg_4841, arg_4842);
}
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_EXT = 0x90CD;
pub const GL_ARM_mali_program_binary = 1;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY = 0x906A;
pub inline fn glVariantArrayObjectATI(arg_4843: GLuint, arg_4844: GLenum, arg_4845: GLsizei, arg_4846: GLuint, arg_4847: GLuint) void {
    return epoxy_glVariantArrayObjectATI.?(arg_4843, arg_4844, arg_4845, arg_4846, arg_4847);
}
pub const GL_MAP_FLUSH_EXPLICIT_BIT = 0x0010;
pub const GL_PACK_RESAMPLE_OML = 0x8984;
pub const GL_HSL_COLOR_KHR = 0x92AF;
pub const GL_POINT_FADE_THRESHOLD_SIZE_EXT = 0x8128;
pub const GL_NONE = 0;
pub inline fn glProgramUniform4d(arg_4848: GLuint, arg_4849: GLint, arg_4850: GLdouble, arg_4851: GLdouble, arg_4852: GLdouble, arg_4853: GLdouble) void {
    return epoxy_glProgramUniform4d.?(arg_4848, arg_4849, arg_4850, arg_4851, arg_4852, arg_4853);
}
pub const GL_MAP1_VERTEX_ATTRIB15_4_NV = 0x866F;
pub inline fn glTexCoordP4uiv(arg_4854: GLenum, arg_4855: [*c]const GLuint) void {
    return epoxy_glTexCoordP4uiv.?(arg_4854, arg_4855);
}
pub const GL_R1UI_C4UB_V3F_SUN = 0x85C5;
pub const GL_SMOOTH_POINT_SIZE_RANGE = 0x0B12;
pub const GL_STENCIL_PASS_DEPTH_PASS = 0x0B96;
pub inline fn glFragmentLightfvSGIX(arg_4856: GLenum, arg_4857: GLenum, arg_4858: [*c]const GLfloat) void {
    return epoxy_glFragmentLightfvSGIX.?(arg_4856, arg_4857, arg_4858);
}
pub inline fn glSecondaryColor3iEXT(arg_4859: GLint, arg_4860: GLint, arg_4861: GLint) void {
    return epoxy_glSecondaryColor3iEXT.?(arg_4859, arg_4860, arg_4861);
}
pub const GL_NV_occlusion_query = 1;
pub inline fn glSecondaryColor3fv(arg_4862: [*c]const GLfloat) void {
    return epoxy_glSecondaryColor3fv.?(arg_4862);
}
pub const GL_HISTOGRAM_WIDTH = 0x8026;
pub const GL_RENDERBUFFER_BINDING_ANGLE = 0x8CA7;
pub inline fn glColorP4uiv(arg_4863: GLenum, arg_4864: [*c]const GLuint) void {
    return epoxy_glColorP4uiv.?(arg_4863, arg_4864);
}
pub inline fn glColorTable(arg_4865: GLenum, arg_4866: GLenum, arg_4867: GLsizei, arg_4868: GLenum, arg_4869: GLenum, arg_4870: ?*const c_void) void {
    return epoxy_glColorTable.?(arg_4865, arg_4866, arg_4867, arg_4868, arg_4869, arg_4870);
}
pub inline fn glStencilOp(arg_4871: GLenum, arg_4872: GLenum, arg_4873: GLenum) void {
    return epoxy_glStencilOp.?(arg_4871, arg_4872, arg_4873);
}
pub inline fn glTextureAttachMemoryNV(arg_4874: GLuint, arg_4875: GLuint, arg_4876: GLuint64) void {
    return epoxy_glTextureAttachMemoryNV.?(arg_4874, arg_4875, arg_4876);
}
pub const GL_EXT_tessellation_point_size = 1;
pub inline fn glBlendFuncSeparateiEXT(arg_4877: GLuint, arg_4878: GLenum, arg_4879: GLenum, arg_4880: GLenum, arg_4881: GLenum) void {
    return epoxy_glBlendFuncSeparateiEXT.?(arg_4877, arg_4878, arg_4879, arg_4880, arg_4881);
}
pub const GL_TEXTURE_BUFFER_SIZE = 0x919E;
pub const __UINT_FAST8_FMTu__ = "hhu";
pub const GL_RGB4 = 0x804F;
pub const GL_EXT_provoking_vertex = 1;
pub const GL_LUMINANCE16_ALPHA16_SNORM = 0x901A;
pub const GL_CURRENT_FOG_COORD = 0x8453;
pub const GL_TEXTURE_VIEW_NUM_LEVELS_EXT = 0x82DC;
pub const GL_PATH_FORMAT_SVG_NV = 0x9070;
pub inline fn glMultiTexParameterfEXT(arg_4882: GLenum, arg_4883: GLenum, arg_4884: GLenum, arg_4885: GLfloat) void {
    return epoxy_glMultiTexParameterfEXT.?(arg_4882, arg_4883, arg_4884, arg_4885);
}
pub const GL_LIST_BASE = 0x0B32;
pub const GL_STENCIL_REF_COMMAND_NV = 0x000C;
pub inline fn glPathSubCommandsNV(arg_4886: GLuint, arg_4887: GLsizei, arg_4888: GLsizei, arg_4889: GLsizei, arg_4890: [*c]const GLubyte, arg_4891: GLsizei, arg_4892: GLenum, arg_4893: ?*const c_void) void {
    return epoxy_glPathSubCommandsNV.?(arg_4886, arg_4887, arg_4888, arg_4889, arg_4890, arg_4891, arg_4892, arg_4893);
}
pub const GL_VIEWPORT_SUBPIXEL_BITS = 0x825C;
pub const GL_QUERY_WAIT_INVERTED = 0x8E17;
pub const GL_GEOMETRY_SHADER_INVOCATIONS_EXT = 0x887F;
pub inline fn glGenProgramsARB(arg_4894: GLsizei, arg_4895: [*c]GLuint) void {
    return epoxy_glGenProgramsARB.?(arg_4894, arg_4895);
}
pub const GL_RENDERBUFFER_BINDING = 0x8CA7;
pub const GL_SLIM12S_SGIX = 0x831F;
pub inline fn glBindRenderbuffer(arg_4896: GLenum, arg_4897: GLuint) void {
    return epoxy_glBindRenderbuffer.?(arg_4896, arg_4897);
}
pub inline fn glVertex3bvOES(arg_4898: [*c]const GLbyte) void {
    return epoxy_glVertex3bvOES.?(arg_4898);
}
pub inline fn glVertexAttribPointerNV(arg_4899: GLuint, arg_4900: GLint, arg_4901: GLenum, arg_4902: GLsizei, arg_4903: ?*const c_void) void {
    return epoxy_glVertexAttribPointerNV.?(arg_4899, arg_4900, arg_4901, arg_4902, arg_4903);
}
pub inline fn glVariantivEXT(arg_4904: GLuint, arg_4905: [*c]const GLint) void {
    return epoxy_glVariantivEXT.?(arg_4904, arg_4905);
}
pub const GL_RASTERIZER_DISCARD_NV = 0x8C89;
pub inline fn glGetPixelTransformParameterivEXT(arg_4906: GLenum, arg_4907: GLenum, arg_4908: [*c]GLint) void {
    return epoxy_glGetPixelTransformParameterivEXT.?(arg_4906, arg_4907, arg_4908);
}
pub const GL_DEBUG_CATEGORY_WINDOW_SYSTEM_AMD = 0x914A;
pub const GL_TEXTURE_MAX_CLAMP_T_SGIX = 0x836A;
pub const GL_OES_texture_view = 1;
pub inline fn glFinish() void {
    return epoxy_glFinish.?();
}
pub const GL_FRAGMENT_SHADER_INVOCATIONS_ARB = 0x82F4;
pub const GL_FRAMEBUFFER_COMPLETE_OES = 0x8CD5;
pub const GL_FRAMEBUFFER_ATTACHMENT_DEPTH_SIZE = 0x8216;
pub const GL_RGB_SCALE_EXT = 0x8573;
pub const GL_TESS_CONTROL_OUTPUT_VERTICES = 0x8E75;
pub inline fn glTexCoord3hvNV(arg_4909: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord3hvNV.?(arg_4909);
}
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG = 0x93F1;
pub const GL_EXT_read_format_bgra = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_GREEN_SIZE = 0x8213;
pub const GL_EVAL_VERTEX_ATTRIB12_NV = 0x86D2;
pub const __INT_LEAST16_MAX__ = 32767;
pub const GL_UNSIGNED_INT_5_9_9_9_REV_EXT = 0x8C3E;
pub inline fn glViewportSwizzleNV(arg_4910: GLuint, arg_4911: GLenum, arg_4912: GLenum, arg_4913: GLenum, arg_4914: GLenum) void {
    return epoxy_glViewportSwizzleNV.?(arg_4910, arg_4911, arg_4912, arg_4913, arg_4914);
}
pub const GL_VIRTUAL_PAGE_SIZE_X_AMD = 0x9195;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_NV = 0x8C80;
pub const GL_ARB_transform_feedback2 = 1;
pub const GL_NV_bindless_multi_draw_indirect = 1;
pub const GL_STREAM_COPY_ARB = 0x88E2;
pub const GL_INT_IMAGE_2D = 0x9058;
pub const GL_IMG_texture_filter_cubic = 1;
pub inline fn glUniform2f(arg_4915: GLint, arg_4916: GLfloat, arg_4917: GLfloat) void {
    return epoxy_glUniform2f.?(arg_4915, arg_4916, arg_4917);
}
pub const GL_MATRIX_PALETTE_ARB = 0x8840;
pub inline fn glUniform3f(arg_4918: GLint, arg_4919: GLfloat, arg_4920: GLfloat, arg_4921: GLfloat) void {
    return epoxy_glUniform3f.?(arg_4918, arg_4919, arg_4920, arg_4921);
}
pub const __FLT_HAS_INFINITY__ = 1;
pub const GL_MESA_program_binary_formats = 1;
pub const GL_SAMPLE_PATTERN_SGIS = 0x80AC;
pub const GL_HISTOGRAM_SINK_EXT = 0x802D;
pub inline fn glMatrixMult3x3fNV(arg_4922: GLenum, arg_4923: [*c]const GLfloat) void {
    return epoxy_glMatrixMult3x3fNV.?(arg_4922, arg_4923);
}
pub const GL_MULTISAMPLE_BIT_3DFX = 0x20000000;
pub inline fn glDeleteNamesAMD(arg_4924: GLenum, arg_4925: GLuint, arg_4926: [*c]const GLuint) void {
    return epoxy_glDeleteNamesAMD.?(arg_4924, arg_4925, arg_4926);
}
pub const UINT_FAST8_MAX = 255;
pub const GL_PATH_COMPUTED_LENGTH_NV = 0x90A0;
pub const GL_PERTURB_EXT = 0x85AE;
pub const GL_MESA_ycbcr_texture = 1;
pub inline fn glTexCoord1d(arg_4927: GLdouble) void {
    return epoxy_glTexCoord1d.?(arg_4927);
}
pub inline fn glTexCoord4fColor4fNormal3fVertex4fvSUN(arg_4928: [*c]const GLfloat, arg_4929: [*c]const GLfloat, arg_4930: [*c]const GLfloat, arg_4931: [*c]const GLfloat) void {
    return epoxy_glTexCoord4fColor4fNormal3fVertex4fvSUN.?(arg_4928, arg_4929, arg_4930, arg_4931);
}
pub const GL_INVERT_OVG_NV = 0x92B4;
pub const GL_MAX_DEBUG_GROUP_STACK_DEPTH_KHR = 0x826C;
pub const GL_MODELVIEW11_ARB = 0x872B;
pub const GL_DEPTH_STENCIL_TO_RGBA_NV = 0x886E;
pub const GL_LINE_WIDTH = 0x0B21;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V = 0x9551;
pub const GL_TRIANGLES_ADJACENCY = 0x000C;
pub inline fn glCompressedMultiTexSubImage1DEXT(arg_4932: GLenum, arg_4933: GLenum, arg_4934: GLint, arg_4935: GLint, arg_4936: GLsizei, arg_4937: GLenum, arg_4938: GLsizei, arg_4939: ?*const c_void) void {
    return epoxy_glCompressedMultiTexSubImage1DEXT.?(arg_4932, arg_4933, arg_4934, arg_4935, arg_4936, arg_4937, arg_4938, arg_4939);
}
pub const __SEG_FS = 1;
pub const GL_EXT_blend_func_extended = 1;
pub inline fn glFogCoordhvNV(arg_4940: [*c]const GLhalfNV) void {
    return epoxy_glFogCoordhvNV.?(arg_4940);
}
pub const GL_ALPHA_MAX_SGIX = 0x8321;
pub const GL_VERTEX_WEIGHTING_EXT = 0x8509;
pub inline fn glGetProgramLocalParameterIivNV(arg_4941: GLenum, arg_4942: GLuint, arg_4943: [*c]GLint) void {
    return epoxy_glGetProgramLocalParameterIivNV.?(arg_4941, arg_4942, arg_4943);
}
pub inline fn glBindRenderbufferEXT(arg_4944: GLenum, arg_4945: GLuint) void {
    return epoxy_glBindRenderbufferEXT.?(arg_4944, arg_4945);
}
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_EXT = 0x8E80;
pub const GL_OES_shader_image_atomic = 1;
pub const GL_STEREO = 0x0C33;
pub inline fn glVertexStream1fATI(arg_4946: GLenum, arg_4947: GLfloat) void {
    return epoxy_glVertexStream1fATI.?(arg_4946, arg_4947);
}
pub const GL_BLEND_ADVANCED_COHERENT_NV = 0x9285;
pub const GL_PRIMITIVE_BOUNDING_BOX_ARB = 0x92BE;
pub const GL_OBJECT_INFO_LOG_LENGTH_ARB = 0x8B84;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_VERTEX_SHADER = 0x8A44;
pub inline fn glFramebufferFetchBarrierEXT() void {
    return epoxy_glFramebufferFetchBarrierEXT.?();
}
pub const GL_FOG_FUNC_POINTS_SGIS = 0x812B;
pub const __INT_LEAST16_TYPE__ = c_short;
pub const GL_UNKNOWN_CONTEXT_RESET_KHR = 0x8255;
pub inline fn glTextureSubImage2D(arg_4948: GLuint, arg_4949: GLint, arg_4950: GLint, arg_4951: GLint, arg_4952: GLsizei, arg_4953: GLsizei, arg_4954: GLenum, arg_4955: GLenum, arg_4956: ?*const c_void) void {
    return epoxy_glTextureSubImage2D.?(arg_4948, arg_4949, arg_4950, arg_4951, arg_4952, arg_4953, arg_4954, arg_4955, arg_4956);
}
pub const GL_TEXTURE_DT_SIZE_NV = 0x871E;
pub const GL_OR = 0x1507;
pub inline fn glUniformMatrix2x3fvNV(arg_4957: GLint, arg_4958: GLsizei, arg_4959: GLboolean, arg_4960: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x3fvNV.?(arg_4957, arg_4958, arg_4959, arg_4960);
}
pub const GL_VERSION_1_1 = 1;
pub const GL_NV_robustness_video_memory_purge = 1;
pub const GL_TEXTURE_IMAGE_FORMAT = 0x828F;
pub const GL_COLOR_ATTACHMENT28 = 0x8CFC;
pub inline fn glGetVertexAttribLui64vNV(arg_4961: GLuint, arg_4962: GLenum, arg_4963: [*c]GLuint64EXT) void {
    return epoxy_glGetVertexAttribLui64vNV.?(arg_4961, arg_4962, arg_4963);
}
pub const GL_CLEAR = 0x1500;
pub const GL_FLOAT_MAT4_ARB = 0x8B5C;
pub inline fn glVertex2iv(arg_4964: [*c]const GLint) void {
    return epoxy_glVertex2iv.?(arg_4964);
}
pub const GL_LUMINANCE4_EXT = 0x803F;
pub const GL_MAX_VERTEX_VARYING_COMPONENTS_EXT = 0x8DDE;
pub inline fn glMatrixMode(arg_4965: GLenum) void {
    return epoxy_glMatrixMode.?(arg_4965);
}
pub inline fn glTexStorageSparseAMD(arg_4966: GLenum, arg_4967: GLenum, arg_4968: GLsizei, arg_4969: GLsizei, arg_4970: GLsizei, arg_4971: GLsizei, arg_4972: GLbitfield) void {
    return epoxy_glTexStorageSparseAMD.?(arg_4966, arg_4967, arg_4968, arg_4969, arg_4970, arg_4971, arg_4972);
}
pub const GL_TRANSPOSE_MODELVIEW_MATRIX = 0x84E3;
pub inline fn glGetVertexAttribPointervNV(arg_4973: GLuint, arg_4974: GLenum, arg_4975: [*c]?*c_void) void {
    return epoxy_glGetVertexAttribPointervNV.?(arg_4973, arg_4974, arg_4975);
}
pub const GL_MOV_ATI = 0x8961;
pub const GL_SPECULAR = 0x1202;
pub const GL_MIRROR_CLAMP_TO_BORDER_EXT = 0x8912;
pub const GL_TEXTURE_INDEX_SIZE_EXT = 0x80ED;
pub const GL_IMAGE_SCALE_Y_HP = 0x8156;
pub const GL_INDEX_ARRAY = 0x8077;
pub const GL_Z6Y10Z6CB10Z6A10Z6Y10Z6CR10Z6A10_4224_NV = 0x9034;
pub inline fn glWindowPos2sARB(arg_4976: GLshort, arg_4977: GLshort) void {
    return epoxy_glWindowPos2sARB.?(arg_4976, arg_4977);
}
pub const GL_VIBRANCE_BIAS_NV = 0x8719;
pub const GL_POLYGON = 0x0009;
pub const GL_DEBUG_LOGGED_MESSAGES = 0x9145;
pub const GL_INVALID_ENUM = 0x0500;
pub const GL_NV_conditional_render = 1;
pub const GL_NORMAL_ARRAY_LIST_STRIDE_IBM = 103081;
pub inline fn glLoadTransposeMatrixfARB(arg_4978: [*c]const GLfloat) void {
    return epoxy_glLoadTransposeMatrixfARB.?(arg_4978);
}
pub const GL_POST_TEXTURE_FILTER_BIAS_SGIX = 0x8179;
pub const GL_STENCIL_INDEX1_OES = 0x8D46;
pub const __UINTMAX_WIDTH__ = 64;
pub const GL_PIXEL_TEX_GEN_Q_FLOOR_SGIX = 0x8186;
pub inline fn glTexEnvxOES(arg_4979: GLenum, arg_4980: GLenum, arg_4981: GLfixed) void {
    return epoxy_glTexEnvxOES.?(arg_4979, arg_4980, arg_4981);
}
pub inline fn glTransformFeedbackBufferBase(arg_4982: GLuint, arg_4983: GLuint, arg_4984: GLuint) void {
    return epoxy_glTransformFeedbackBufferBase.?(arg_4982, arg_4983, arg_4984);
}
pub inline fn glCreateProgressFenceNVX() GLuint {
    return epoxy_glCreateProgressFenceNVX.?();
}
pub const GL_CURRENT_PALETTE_MATRIX_OES = 0x8843;
pub const GL_CONFORMANT_NV = 0x9374;
pub const GL_ETC1_RGB8_OES = 0x8D64;
pub inline fn glGenQueriesARB(arg_4985: GLsizei, arg_4986: [*c]GLuint) void {
    return epoxy_glGenQueriesARB.?(arg_4985, arg_4986);
}
pub const GL_DRAW_PIXELS_APPLE = 0x8A0A;
pub const GL_ONE_MINUS_CONSTANT_COLOR_EXT = 0x8002;
pub const GL_STORAGE_CLIENT_APPLE = 0x85B4;
pub const GL_BUFFER_ACCESS_ARB = 0x88BB;
pub inline fn glProgramEnvParameter4fvARB(arg_4987: GLenum, arg_4988: GLuint, arg_4989: [*c]const GLfloat) void {
    return epoxy_glProgramEnvParameter4fvARB.?(arg_4987, arg_4988, arg_4989);
}
pub inline fn glUniform2ui64vARB(arg_4990: GLint, arg_4991: GLsizei, arg_4992: [*c]const GLuint64) void {
    return epoxy_glUniform2ui64vARB.?(arg_4990, arg_4991, arg_4992);
}
pub const GL_SRGB = 0x8C40;
pub const GL_COLOR_ARRAY = 0x8076;
pub const GL_YCRCB_444_SGIX = 0x81BC;
pub const GL_COLOR_ATTACHMENT29 = 0x8CFD;
pub inline fn glVertexArrayNormalOffsetEXT(arg_4993: GLuint, arg_4994: GLuint, arg_4995: GLenum, arg_4996: GLsizei, arg_4997: GLintptr) void {
    return epoxy_glVertexArrayNormalOffsetEXT.?(arg_4993, arg_4994, arg_4995, arg_4996, arg_4997);
}
pub const GL_NV_gpu_program5_mem_extended = 1;
pub inline fn glTexParameterxv(arg_4998: GLenum, arg_4999: GLenum, arg_5000: [*c]const GLfixed) void {
    return epoxy_glTexParameterxv.?(arg_4998, arg_4999, arg_5000);
}
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_OES = 0x8E86;
pub inline fn glGetFramebufferParameterfvAMD(arg_5001: GLenum, arg_5002: GLenum, arg_5003: GLuint, arg_5004: GLuint, arg_5005: GLsizei, arg_5006: [*c]GLfloat) void {
    return epoxy_glGetFramebufferParameterfvAMD.?(arg_5001, arg_5002, arg_5003, arg_5004, arg_5005, arg_5006);
}
pub inline fn glVertexAttribI1uiEXT(arg_5007: GLuint, arg_5008: GLuint) void {
    return epoxy_glVertexAttribI1uiEXT.?(arg_5007, arg_5008);
}
pub const GL_PIXEL_TEX_GEN_ALPHA_NO_REPLACE_SGIX = 0x8188;
pub const GL_ALPHA8UI_EXT = 0x8D7E;
pub const GL_NORMAL_ARRAY_STRIDE_EXT = 0x807F;
pub inline fn glGetNamedBufferParameteriv(arg_5009: GLuint, arg_5010: GLenum, arg_5011: [*c]GLint) void {
    return epoxy_glGetNamedBufferParameteriv.?(arg_5009, arg_5010, arg_5011);
}
pub const GL_MAP1_GRID_DOMAIN = 0x0DD0;
pub const GL_FUNC_REVERSE_SUBTRACT_OES = 0x800B;
pub const GL_DEDICATED_MEMORY_OBJECT_EXT = 0x9581;
pub const GL_T2F_IUI_N3F_V2F_EXT = 0x81B3;
pub const GL_UNSIGNED_INT_IMAGE_CUBE = 0x9066;
pub inline fn glTexCoord3hNV(arg_5012: GLhalfNV, arg_5013: GLhalfNV, arg_5014: GLhalfNV) void {
    return epoxy_glTexCoord3hNV.?(arg_5012, arg_5013, arg_5014);
}
pub inline fn glSetLocalConstantEXT(arg_5015: GLuint, arg_5016: GLenum, arg_5017: ?*const c_void) void {
    return epoxy_glSetLocalConstantEXT.?(arg_5015, arg_5016, arg_5017);
}
pub inline fn glTexGenfv(arg_5018: GLenum, arg_5019: GLenum, arg_5020: [*c]const GLfloat) void {
    return epoxy_glTexGenfv.?(arg_5018, arg_5019, arg_5020);
}
pub const GL_APPLE_texture_range = 1;
pub const __GCC_ATOMIC_SHORT_LOCK_FREE = 2;
pub const GL_EXT_depth_bounds_test = 1;
pub const GL_MESH_PRIMITIVES_OUT_NV = 0x957A;
pub const GL_INTERNALFORMAT_ALPHA_TYPE = 0x827B;
pub const GL_EXT_post_depth_coverage = 1;
pub const __seg_gs = __attribute__(address_space(256));
pub const GL_NUM_LOOPBACK_COMPONENTS_ATI = 0x8974;
pub const __UINT_FAST16_FMTx__ = "hx";
pub inline fn glTexCoord2fColor4ubVertex3fSUN(arg_5021: GLfloat, arg_5022: GLfloat, arg_5023: GLubyte, arg_5024: GLubyte, arg_5025: GLubyte, arg_5026: GLubyte, arg_5027: GLfloat, arg_5028: GLfloat, arg_5029: GLfloat) void {
    return epoxy_glTexCoord2fColor4ubVertex3fSUN.?(arg_5021, arg_5022, arg_5023, arg_5024, arg_5025, arg_5026, arg_5027, arg_5028, arg_5029);
}
pub const GL_NV_point_sprite = 1;
pub inline fn glDeleteFramebuffersEXT(arg_5030: GLsizei, arg_5031: [*c]const GLuint) void {
    return epoxy_glDeleteFramebuffersEXT.?(arg_5030, arg_5031);
}
pub const GL_RASTER_SAMPLES_EXT = 0x9328;
pub const GL_TEXCOORD3_BIT_PGI = 0x40000000;
pub const GL_TEXTURE_SWIZZLE_B = 0x8E44;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_TABLE_SIZE_ARB = 0x9340;
pub inline fn glVertexAttrib4fARB(arg_5032: GLuint, arg_5033: GLfloat, arg_5034: GLfloat, arg_5035: GLfloat, arg_5036: GLfloat) void {
    return epoxy_glVertexAttrib4fARB.?(arg_5032, arg_5033, arg_5034, arg_5035, arg_5036);
}
pub const GL_LINES = 0x0001;
pub const GL_OVR_multiview_multisampled_render_to_texture = 1;
pub const GL_FEEDBACK = 0x1C01;
pub const GL_SAMPLE_MASK_SGIS = 0x80A0;
pub const GL_SAMPLE_LOCATION_SUBPIXEL_BITS_ARB = 0x933D;
pub inline fn glCopyTextureSubImage3DEXT(arg_5037: GLuint, arg_5038: GLenum, arg_5039: GLint, arg_5040: GLint, arg_5041: GLint, arg_5042: GLint, arg_5043: GLint, arg_5044: GLint, arg_5045: GLsizei, arg_5046: GLsizei) void {
    return epoxy_glCopyTextureSubImage3DEXT.?(arg_5037, arg_5038, arg_5039, arg_5040, arg_5041, arg_5042, arg_5043, arg_5044, arg_5045, arg_5046);
}
pub const GL_COVERAGE_EDGE_FRAGMENTS_NV = 0x8ED6;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER = 0x88FD;
pub const GL_LUID_SIZE_EXT = 8;
pub const GL_TESS_GEN_SPACING_OES = 0x8E77;
pub inline fn glVertexAttribP2uiv(arg_5047: GLuint, arg_5048: GLenum, arg_5049: GLboolean, arg_5050: [*c]const GLuint) void {
    return epoxy_glVertexAttribP2uiv.?(arg_5047, arg_5048, arg_5049, arg_5050);
}
pub const GL_READ_PIXELS = 0x828C;
pub inline fn glGetFramebufferAttachmentParameteriv(arg_5051: GLenum, arg_5052: GLenum, arg_5053: GLenum, arg_5054: [*c]GLint) void {
    return epoxy_glGetFramebufferAttachmentParameteriv.?(arg_5051, arg_5052, arg_5053, arg_5054);
}
pub inline fn glVertexStream3ivATI(arg_5055: GLenum, arg_5056: [*c]const GLint) void {
    return epoxy_glVertexStream3ivATI.?(arg_5055, arg_5056);
}
pub inline fn glVertexStream1svATI(arg_5057: GLenum, arg_5058: [*c]const GLshort) void {
    return epoxy_glVertexStream1svATI.?(arg_5057, arg_5058);
}
pub inline fn glUniform1i(arg_5059: GLint, arg_5060: GLint) void {
    return epoxy_glUniform1i.?(arg_5059, arg_5060);
}
pub inline fn glLinkProgramARB(arg_5061: GLhandleARB) void {
    return epoxy_glLinkProgramARB.?(arg_5061);
}
pub const GL_SHADING_LANGUAGE_VERSION_ARB = 0x8B8C;
pub const GL_MAX_CLIENT_ATTRIB_STACK_DEPTH = 0x0D3B;
pub inline fn glDeleteNamedStringARB(arg_5062: GLint, arg_5063: [*c]const GLchar) void {
    return epoxy_glDeleteNamedStringARB.?(arg_5062, arg_5063);
}
pub const GL_INT16_NV = 0x8FE4;
pub const GL_COLOR_ATTACHMENT4_NV = 0x8CE4;
pub const GL_MAX_SERVER_WAIT_TIMEOUT = 0x9111;
pub const GL_TRACE_ARRAYS_BIT_MESA = 0x0004;
pub inline fn glTextureViewEXT(arg_5064: GLuint, arg_5065: GLenum, arg_5066: GLuint, arg_5067: GLenum, arg_5068: GLuint, arg_5069: GLuint, arg_5070: GLuint, arg_5071: GLuint) void {
    return epoxy_glTextureViewEXT.?(arg_5064, arg_5065, arg_5066, arg_5067, arg_5068, arg_5069, arg_5070, arg_5071);
}
pub inline fn glFeedbackBuffer(arg_5072: GLsizei, arg_5073: GLenum, arg_5074: [*c]GLfloat) void {
    return epoxy_glFeedbackBuffer.?(arg_5072, arg_5073, arg_5074);
}
pub const GL_INTERNALFORMAT_STENCIL_TYPE = 0x827D;
pub const GL_COMPRESSED_RGBA_ASTC_5x4x4_OES = 0x93C4;
pub const GL_SECONDARY_COLOR_ARRAY = 0x845E;
pub inline fn glGetPixelTransformParameterfvEXT(arg_5075: GLenum, arg_5076: GLenum, arg_5077: [*c]GLfloat) void {
    return epoxy_glGetPixelTransformParameterfvEXT.?(arg_5075, arg_5076, arg_5077);
}
pub const GL_BLEND_SRC = 0x0BE1;
pub const GL_SHADOW_ATTENUATION_EXT = 0x834E;
pub const GL_EVAL_VERTEX_ATTRIB6_NV = 0x86CC;
pub const GL_COLORBURN = 0x929A;
pub const GL_COMMAND_BARRIER_BIT = 0x00000040;
pub const GL_PACK_IMAGE_DEPTH_SGIS = 0x8131;
pub const __INT64_FMTi__ = "li";
pub const GL_TEXTURE_DEPTH_EXT = 0x8071;
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS_OES = 0x90CD;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6 = 0x93D9;
pub inline fn glVertexAttribs4ubvNV(arg_5078: GLuint, arg_5079: GLsizei, arg_5080: [*c]const GLubyte) void {
    return epoxy_glVertexAttribs4ubvNV.?(arg_5078, arg_5079, arg_5080);
}
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X = 0x8515;
pub const GL_CLIP_DEPTH_MODE_EXT = 0x935D;
pub const GL_RGB8UI_EXT = 0x8D7D;
pub inline fn glDisableiOES(arg_5081: GLenum, arg_5082: GLuint) void {
    return epoxy_glDisableiOES.?(arg_5081, arg_5082);
}
pub const GL_COVERAGE_MODULATION_TABLE_SIZE_NV = 0x9333;
pub const GL_FRAGMENT_SHADER_ATI = 0x8920;
pub inline fn glPixelTransferf(arg_5083: GLenum, arg_5084: GLfloat) void {
    return epoxy_glPixelTransferf.?(arg_5083, arg_5084);
}
pub const GL_EVAL_VERTEX_ATTRIB14_NV = 0x86D4;
pub const GL_POINT_SIZE_MIN_ARB = 0x8126;
pub inline fn glGetArrayObjectivATI(arg_5085: GLenum, arg_5086: GLenum, arg_5087: [*c]GLint) void {
    return epoxy_glGetArrayObjectivATI.?(arg_5085, arg_5086, arg_5087);
}
pub const GL_ELEMENT_ARRAY_TYPE_ATI = 0x8769;
pub const GL_REG_18_ATI = 0x8933;
pub inline fn glTranslatex(arg_5088: GLfixed, arg_5089: GLfixed, arg_5090: GLfixed) void {
    return epoxy_glTranslatex.?(arg_5088, arg_5089, arg_5090);
}
pub const GL_SCALAR_EXT = 0x87BE;
pub const GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB = 0x8B4A;
pub inline fn glVertexAttribI3uiv(arg_5091: GLuint, arg_5092: [*c]const GLuint) void {
    return epoxy_glVertexAttribI3uiv.?(arg_5091, arg_5092);
}
pub inline fn glGetTextureParameterfvEXT(arg_5093: GLuint, arg_5094: GLenum, arg_5095: GLenum, arg_5096: [*c]GLfloat) void {
    return epoxy_glGetTextureParameterfvEXT.?(arg_5093, arg_5094, arg_5095, arg_5096);
}
pub inline fn glSyncTextureINTEL(arg_5097: GLuint) void {
    return epoxy_glSyncTextureINTEL.?(arg_5097);
}
pub const GL_INDEX_ARRAY_POINTER_EXT = 0x8091;
pub const GL_RECLAIM_MEMORY_HINT_PGI = 0x1A1FE;
pub inline fn glPixelMapx(arg_5098: GLenum, arg_5099: GLint, arg_5100: [*c]const GLfixed) void {
    return epoxy_glPixelMapx.?(arg_5098, arg_5099, arg_5100);
}
pub const GL_ARB_shading_language_100 = 1;
pub inline fn glStencilMaskSeparate(arg_5101: GLenum, arg_5102: GLuint) void {
    return epoxy_glStencilMaskSeparate.?(arg_5101, arg_5102);
}
pub const GL_LUMINANCE4 = 0x803F;
pub const GL_EXT_pixel_buffer_object = 1;
pub inline fn glVertexAttrib4Nbv(arg_5103: GLuint, arg_5104: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4Nbv.?(arg_5103, arg_5104);
}
pub const GL_MAP2_VERTEX_ATTRIB0_4_NV = 0x8670;
pub const GL_MAX_DRAW_MESH_TASKS_COUNT_NV = 0x953D;
pub inline fn glVertexAttrib4Nub(arg_5105: GLuint, arg_5106: GLubyte, arg_5107: GLubyte, arg_5108: GLubyte, arg_5109: GLubyte) void {
    return epoxy_glVertexAttrib4Nub.?(arg_5105, arg_5106, arg_5107, arg_5108, arg_5109);
}
pub inline fn glVertexAttrib2dv(arg_5110: GLuint, arg_5111: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib2dv.?(arg_5110, arg_5111);
}
pub const GL_RED_BIAS = 0x0D15;
pub const GL_NV_transform_feedback2 = 1;
pub inline fn glDisableClientStateIndexedEXT(arg_5112: GLenum, arg_5113: GLuint) void {
    return epoxy_glDisableClientStateIndexedEXT.?(arg_5112, arg_5113);
}
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS_OES = 0x8E5D;
pub inline fn glMultiTexCoord4iv(arg_5114: GLenum, arg_5115: [*c]const GLint) void {
    return epoxy_glMultiTexCoord4iv.?(arg_5114, arg_5115);
}
pub const GL_MULTISAMPLE_LINE_WIDTH_GRANULARITY_ARB = 0x9382;
pub inline fn glPassThrough(arg_5116: GLfloat) void {
    return epoxy_glPassThrough.?(arg_5116);
}
pub const GL_ARB_occlusion_query = 1;
pub const GL_CON_19_ATI = 0x8954;
pub inline fn glCommandListSegmentsNV(arg_5117: GLuint, arg_5118: GLuint) void {
    return epoxy_glCommandListSegmentsNV.?(arg_5117, arg_5118);
}
pub inline fn glMultiTexCoord3hvNV(arg_5119: GLenum, arg_5120: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord3hvNV.?(arg_5119, arg_5120);
}
pub inline fn glPopName() void {
    return epoxy_glPopName.?();
}
pub const GL_HARDLIGHT_KHR = 0x929B;
pub const GL_SHADING_RATE_16_INVOCATIONS_PER_PIXEL_NV = 0x956F;
pub const __INT_FAST32_MAX__ = 2147483647;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_AMD = 0x9143;
pub inline fn glSecondaryColor3iv(arg_5121: [*c]const GLint) void {
    return epoxy_glSecondaryColor3iv.?(arg_5121);
}
pub const GL_FRAGMENT_SHADER_DISCARDS_SAMPLES_EXT = 0x8A52;
pub const GL_ATTRIB_ARRAY_SIZE_NV = 0x8623;
pub const GL_RGB32I = 0x8D83;
pub inline fn glGetLightxvOES(arg_5122: GLenum, arg_5123: GLenum, arg_5124: [*c]GLfixed) void {
    return epoxy_glGetLightxvOES.?(arg_5122, arg_5123, arg_5124);
}
pub const GL_STENCIL_BACK_FAIL_ATI = 0x8801;
pub inline fn glReadnPixelsKHR(arg_5125: GLint, arg_5126: GLint, arg_5127: GLsizei, arg_5128: GLsizei, arg_5129: GLenum, arg_5130: GLenum, arg_5131: GLsizei, arg_5132: ?*c_void) void {
    return epoxy_glReadnPixelsKHR.?(arg_5125, arg_5126, arg_5127, arg_5128, arg_5129, arg_5130, arg_5131, arg_5132);
}
pub const GL_BUMP_NUM_TEX_UNITS_ATI = 0x8777;
pub const GL_CUBIC_HP = 0x815F;
pub inline fn glWindowPos2fv(arg_5133: [*c]const GLfloat) void {
    return epoxy_glWindowPos2fv.?(arg_5133);
}
pub const GL_DEPTH_PASS_INSTRUMENT_SGIX = 0x8310;
pub inline fn glMultiTexCoord4hvNV(arg_5134: GLenum, arg_5135: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord4hvNV.?(arg_5134, arg_5135);
}
pub inline fn glGetFramebufferAttachmentParameterivOES(arg_5136: GLenum, arg_5137: GLenum, arg_5138: GLenum, arg_5139: [*c]GLint) void {
    return epoxy_glGetFramebufferAttachmentParameterivOES.?(arg_5136, arg_5137, arg_5138, arg_5139);
}
pub inline fn glUseShaderProgramEXT(arg_5140: GLenum, arg_5141: GLuint) void {
    return epoxy_glUseShaderProgramEXT.?(arg_5140, arg_5141);
}
pub const GL_TRANSPOSE_TEXTURE_MATRIX = 0x84E5;
pub const GL_OES_read_format = 1;
pub const GL_MAX_COLOR_ATTACHMENTS_NV = 0x8CDF;
pub const GL_OES_tessellation_shader = 1;
pub const GL_FRAGMENT_TEXTURE = 0x829F;
pub const GL_COLOR_BUFFER_BIT6_QCOM = 0x00000040;
pub const GL_RGB_SCALE_ARB = 0x8573;
pub const GL_CLIP_DISTANCE0_APPLE = 0x3000;
pub inline fn glGenTextures(arg_5142: GLsizei, arg_5143: [*c]GLuint) void {
    return epoxy_glGenTextures.?(arg_5142, arg_5143);
}
pub const __THROWNL = __attribute__(__nothrow__);
pub const GL_8X_BIT_ATI = 0x00000004;
pub inline fn glVertexAttribs2dvNV(arg_5144: GLuint, arg_5145: GLsizei, arg_5146: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs2dvNV.?(arg_5144, arg_5145, arg_5146);
}
pub inline fn glMultiTexImage3DEXT(arg_5147: GLenum, arg_5148: GLenum, arg_5149: GLint, arg_5150: GLint, arg_5151: GLsizei, arg_5152: GLsizei, arg_5153: GLsizei, arg_5154: GLint, arg_5155: GLenum, arg_5156: GLenum, arg_5157: ?*const c_void) void {
    return epoxy_glMultiTexImage3DEXT.?(arg_5147, arg_5148, arg_5149, arg_5150, arg_5151, arg_5152, arg_5153, arg_5154, arg_5155, arg_5156, arg_5157);
}
pub const GL_PROGRAM_RESULT_COMPONENTS_NV = 0x8907;
pub inline fn glProgramUniform4fvEXT(arg_5158: GLuint, arg_5159: GLint, arg_5160: GLsizei, arg_5161: [*c]const GLfloat) void {
    return epoxy_glProgramUniform4fvEXT.?(arg_5158, arg_5159, arg_5160, arg_5161);
}
pub inline fn glGetVertexArrayIntegeri_vEXT(arg_5162: GLuint, arg_5163: GLuint, arg_5164: GLenum, arg_5165: [*c]GLint) void {
    return epoxy_glGetVertexArrayIntegeri_vEXT.?(arg_5162, arg_5163, arg_5164, arg_5165);
}
pub const GL_QCOM_shader_framebuffer_fetch_noncoherent = 1;
pub const GL_IMAGE_TEXEL_SIZE = 0x82A7;
pub inline fn glGetBufferSubDataARB(arg_5166: GLenum, arg_5167: GLintptrARB, arg_5168: GLsizeiptrARB, arg_5169: ?*c_void) void {
    return epoxy_glGetBufferSubDataARB.?(arg_5166, arg_5167, arg_5168, arg_5169);
}
pub const GL_REFERENCE_PLANE_SGIX = 0x817D;
pub inline fn glVertexStream4fATI(arg_5170: GLenum, arg_5171: GLfloat, arg_5172: GLfloat, arg_5173: GLfloat, arg_5174: GLfloat) void {
    return epoxy_glVertexStream4fATI.?(arg_5170, arg_5171, arg_5172, arg_5173, arg_5174);
}
pub const __SIZE_FMTo__ = "lo";
pub const GL_NEAREST_CLIPMAP_NEAREST_SGIX = 0x844D;
pub inline fn glMap1xOES(arg_5175: GLenum, arg_5176: GLfixed, arg_5177: GLfixed, arg_5178: GLint, arg_5179: GLint, arg_5180: GLfixed) void {
    return epoxy_glMap1xOES.?(arg_5175, arg_5176, arg_5177, arg_5178, arg_5179, arg_5180);
}
pub inline fn glVertexAttribI2i(arg_5181: GLuint, arg_5182: GLint, arg_5183: GLint) void {
    return epoxy_glVertexAttribI2i.?(arg_5181, arg_5182, arg_5183);
}
pub inline fn glUseProgram(arg_5184: GLuint) void {
    return epoxy_glUseProgram.?(arg_5184);
}
pub inline fn glDebugMessageInsertKHR(arg_5185: GLenum, arg_5186: GLenum, arg_5187: GLuint, arg_5188: GLenum, arg_5189: GLsizei, arg_5190: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsertKHR.?(arg_5185, arg_5186, arg_5187, arg_5188, arg_5189, arg_5190);
}
pub inline fn glVertexAttrib2fNV(arg_5191: GLuint, arg_5192: GLfloat, arg_5193: GLfloat) void {
    return epoxy_glVertexAttrib2fNV.?(arg_5191, arg_5192, arg_5193);
}
pub const GL_FRAGMENT_LIGHT_MODEL_TWO_SIDE_SGIX = 0x8409;
pub const GL_MATRIX_EXT = 0x87C0;
pub const GL_DRAW_BUFFER15 = 0x8834;
pub inline fn glMultiTexCoord1f(arg_5194: GLenum, arg_5195: GLfloat) void {
    return epoxy_glMultiTexCoord1f.?(arg_5194, arg_5195);
}
pub const __SEG_GS = 1;
pub const GL_ALL_COMPLETED_NV = 0x84F2;
pub const __INT_FAST8_MAX__ = 127;
pub const GL_DEFORMATIONS_MASK_SGIX = 0x8196;
pub const GL_NATIVE_GRAPHICS_HANDLE_PGI = 0x1A202;
pub inline fn glWindowPos3iARB(arg_5196: GLint, arg_5197: GLint, arg_5198: GLint) void {
    return epoxy_glWindowPos3iARB.?(arg_5196, arg_5197, arg_5198);
}
pub const GL_TEXTURE_ENV = 0x2300;
pub const GL_DISPATCH_INDIRECT_BUFFER_BINDING = 0x90EF;
pub const GL_PIXEL_PACK_BUFFER_NV = 0x88EB;
pub const GL_2PASS_1_EXT = 0x80A3;
pub inline fn glValidateProgramPipelineEXT(arg_5199: GLuint) void {
    return epoxy_glValidateProgramPipelineEXT.?(arg_5199);
}
pub const GL_4_BYTES = 0x1409;
pub const GL_EXT_blend_logic_op = 1;
pub const GL_MAX_INTEGER_SAMPLES = 0x9110;
pub const GL_LIGHT_MODEL_TWO_SIDE = 0x0B52;
pub const GL_ACTIVE_RESOURCES = 0x92F5;
pub inline fn glTexCoord3bOES(arg_5200: GLbyte, arg_5201: GLbyte, arg_5202: GLbyte) void {
    return epoxy_glTexCoord3bOES.?(arg_5200, arg_5201, arg_5202);
}
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT_EXT = 0x8DD5;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_8 = 1;
pub const GL_EMBOSS_LIGHT_NV = 0x855D;
pub const GL_FRAGMENTS_INSTRUMENT_COUNTERS_SGIX = 0x8314;
pub const GL_ASYNC_READ_PIXELS_SGIX = 0x835E;
pub const GL_PROGRAM_ERROR_STRING_NV = 0x8874;
pub const SCNdLEAST16 = "hd";
pub inline fn glVertexAttrib4hNV(arg_5203: GLuint, arg_5204: GLhalfNV, arg_5205: GLhalfNV, arg_5206: GLhalfNV, arg_5207: GLhalfNV) void {
    return epoxy_glVertexAttrib4hNV.?(arg_5203, arg_5204, arg_5205, arg_5206, arg_5207);
}
pub inline fn glCreateRenderbuffers(arg_5208: GLsizei, arg_5209: [*c]GLuint) void {
    return epoxy_glCreateRenderbuffers.?(arg_5208, arg_5209);
}
pub const __attribute_pure__ = __attribute__(__pure__);
pub inline fn glGetConvolutionParameterxvOES(arg_5210: GLenum, arg_5211: GLenum, arg_5212: [*c]GLfixed) void {
    return epoxy_glGetConvolutionParameterxvOES.?(arg_5210, arg_5211, arg_5212);
}
pub const GL_VIEWPORT_COMMAND_NV = 0x0010;
pub const GL_COMBINE_ARB = 0x8570;
pub const GL_COMPRESSED_RGBA_FXT1_3DFX = 0x86B1;
pub const GL_FRAGMENT_LIGHT7_SGIX = 0x8413;
pub const GL_DEPTH24_STENCIL8 = 0x88F0;
pub const GL_SLUMINANCE_EXT = 0x8C46;
pub const GL_HSL_HUE_KHR = 0x92AD;
pub inline fn glCombinerParameterfNV(arg_5213: GLenum, arg_5214: GLfloat) void {
    return epoxy_glCombinerParameterfNV.?(arg_5213, arg_5214);
}
pub const GL_EVAL_VERTEX_ATTRIB5_NV = 0x86CB;
pub const GL_MATRIX3_ARB = 0x88C3;
pub inline fn glConvolutionParameterfEXT(arg_5215: GLenum, arg_5216: GLenum, arg_5217: GLfloat) void {
    return epoxy_glConvolutionParameterfEXT.?(arg_5215, arg_5216, arg_5217);
}
pub const GL_BGRA8_EXT = 0x93A1;
pub const GL_COMPRESSED_RG_RGTC2 = 0x8DBD;
pub const GL_MAX_MODELVIEW_STACK_DEPTH = 0x0D36;
pub inline fn glSamplerParameterf(arg_5218: GLuint, arg_5219: GLenum, arg_5220: GLfloat) void {
    return epoxy_glSamplerParameterf.?(arg_5218, arg_5219, arg_5220);
}
pub const GL_EXT_packed_depth_stencil = 1;
pub inline fn glGetVertexAttribLdv(arg_5221: GLuint, arg_5222: GLenum, arg_5223: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribLdv.?(arg_5221, arg_5222, arg_5223);
}
pub inline fn glUniformMatrix4fvARB(arg_5224: GLint, arg_5225: GLsizei, arg_5226: GLboolean, arg_5227: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4fvARB.?(arg_5224, arg_5225, arg_5226, arg_5227);
}
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY_EXT = 0x8DD6;
pub const GL_VIEW_CLASS_48_BITS = 0x82C7;
pub inline fn glVertexAttribs1hvNV(arg_5228: GLuint, arg_5229: GLsizei, arg_5230: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs1hvNV.?(arg_5228, arg_5229, arg_5230);
}
pub inline fn glVertexAttribIPointerEXT(arg_5231: GLuint, arg_5232: GLint, arg_5233: GLenum, arg_5234: GLsizei, arg_5235: ?*const c_void) void {
    return epoxy_glVertexAttribIPointerEXT.?(arg_5231, arg_5232, arg_5233, arg_5234, arg_5235);
}
pub const GL_TEXTURE_ENV_COLOR = 0x2201;
pub const GL_QUERY_COUNTER_BITS = 0x8864;
pub const GL_PACK_SKIP_VOLUMES_SGIS = 0x8130;
pub const GL_RENDERBUFFER_BLUE_SIZE_EXT = 0x8D52;
pub const GL_READ_FRAMEBUFFER_ANGLE = 0x8CA8;
pub const GL_FLOAT16_MAT2x3_AMD = 0x91C8;
pub const GL_GENERATE_MIPMAP_HINT = 0x8192;
pub inline fn glNamedFramebufferRenderbufferEXT(arg_5236: GLuint, arg_5237: GLenum, arg_5238: GLenum, arg_5239: GLuint) void {
    return epoxy_glNamedFramebufferRenderbufferEXT.?(arg_5236, arg_5237, arg_5238, arg_5239);
}
pub inline fn glMultiTexCoord2xOES(arg_5240: GLenum, arg_5241: GLfixed, arg_5242: GLfixed) void {
    return epoxy_glMultiTexCoord2xOES.?(arg_5240, arg_5241, arg_5242);
}
pub const GL_BUFFER_OBJECT_EXT = 0x9151;
pub inline fn glTexCoord4hvNV(arg_5243: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord4hvNV.?(arg_5243);
}
pub const GL_NUM_VIDEO_CAPTURE_STREAMS_NV = 0x9024;
pub inline fn glSamplerParameterIivEXT(arg_5244: GLuint, arg_5245: GLenum, arg_5246: [*c]const GLint) void {
    return epoxy_glSamplerParameterIivEXT.?(arg_5244, arg_5245, arg_5246);
}
pub const GL_TEXTURE_ENV_MODE = 0x2200;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_OES = 0x8C2B;
pub const SCNi16 = "hi";
pub const GL_FRAGMENT_ALPHA_MODULATE_IMG = 0x8C08;
pub const GL_D3D12_FENCE_VALUE_EXT = 0x9595;
pub const GL_PERFQUERY_COUNTER_DATA_DOUBLE_INTEL = 0x94FB;
pub inline fn glBindVideoCaptureStreamBufferNV(arg_5247: GLuint, arg_5248: GLuint, arg_5249: GLenum, arg_5250: GLintptrARB) void {
    return epoxy_glBindVideoCaptureStreamBufferNV.?(arg_5247, arg_5248, arg_5249, arg_5250);
}
pub const GL_RGB8I = 0x8D8F;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_NV = 0x8642;
pub inline fn glVertexAttrib2hNV(arg_5251: GLuint, arg_5252: GLhalfNV, arg_5253: GLhalfNV) void {
    return epoxy_glVertexAttrib2hNV.?(arg_5251, arg_5252, arg_5253);
}
pub const GL_READ_FRAMEBUFFER_BINDING = 0x8CAA;
pub inline fn glGetBooleanIndexedvEXT(arg_5254: GLenum, arg_5255: GLuint, arg_5256: [*c]GLboolean) void {
    return epoxy_glGetBooleanIndexedvEXT.?(arg_5254, arg_5255, arg_5256);
}
pub const GL_NATIVE_GRAPHICS_BEGIN_HINT_PGI = 0x1A203;
pub const GL_AMD_sparse_texture = 1;
pub const GL_TEXTURE_BINDING_CUBE_MAP = 0x8514;
pub const SCNi32 = "i";
pub const GL_REG_10_ATI = 0x892B;
pub inline fn glGlobalAlphaFactorfSUN(arg_5257: GLfloat) void {
    return epoxy_glGlobalAlphaFactorfSUN.?(arg_5257);
}
pub const GL_ACCUM_BUFFER_BIT = 0x00000200;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT = 0x00000004;
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910D;
pub inline fn glGenPathsNV(arg_5258: GLsizei) GLuint {
    return epoxy_glGenPathsNV.?(arg_5258);
}
pub const GL_COMPRESSED_SLUMINANCE = 0x8C4A;
pub inline fn glGetPerfQueryDataINTEL(arg_5259: GLuint, arg_5260: GLuint, arg_5261: GLsizei, arg_5262: ?*c_void, arg_5263: [*c]GLuint) void {
    return epoxy_glGetPerfQueryDataINTEL.?(arg_5259, arg_5260, arg_5261, arg_5262, arg_5263);
}
pub const GL_EXT_bindable_uniform = 1;
pub inline fn glFenceSyncAPPLE(arg_5264: GLenum, arg_5265: GLbitfield) GLsync {
    return epoxy_glFenceSyncAPPLE.?(arg_5264, arg_5265);
}
pub inline fn glClientWaitSemaphoreui64NVX(arg_5266: GLsizei, arg_5267: [*c]const GLuint, arg_5268: [*c]const GLuint64) void {
    return epoxy_glClientWaitSemaphoreui64NVX.?(arg_5266, arg_5267, arg_5268);
}
pub const GL_ARB_texture_multisample = 1;
pub const __clang__ = 1;
pub const GL_ALPHA_BITS = 0x0D55;
pub const GL_HIGH_INT = 0x8DF5;
pub const GL_INVALID_FRAMEBUFFER_OPERATION = 0x0506;
pub const GL_STENCIL_BACK_OP_VALUE_AMD = 0x874D;
pub const GL_INTENSITY16_EXT = 0x804D;
pub const GL_POINT_SIZE = 0x0B11;
pub const GL_FLOAT16_MAT4_AMD = 0x91C7;
pub const GL_RESAMPLE_REPLICATE_SGIX = 0x8433;
pub inline fn glDrawArraysInstancedARB(arg_5269: GLenum, arg_5270: GLint, arg_5271: GLsizei, arg_5272: GLsizei) void {
    return epoxy_glDrawArraysInstancedARB.?(arg_5269, arg_5270, arg_5271, arg_5272);
}
pub const GL_MAX_SHADER_COMPILER_THREADS_ARB = 0x91B0;
pub inline fn glUniform2i64vARB(arg_5273: GLint, arg_5274: GLsizei, arg_5275: [*c]const GLint64) void {
    return epoxy_glUniform2i64vARB.?(arg_5273, arg_5274, arg_5275);
}
pub const GL_LINE_STRIP = 0x0003;
pub const GL_DEPTH_COMPONENT16_OES = 0x81A5;
pub inline fn glUniform2ui64ARB(arg_5276: GLint, arg_5277: GLuint64, arg_5278: GLuint64) void {
    return epoxy_glUniform2ui64ARB.?(arg_5276, arg_5277, arg_5278);
}
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS = 0x8E85;
pub inline fn glGetVertexArrayIntegervEXT(arg_5279: GLuint, arg_5280: GLenum, arg_5281: [*c]GLint) void {
    return epoxy_glGetVertexArrayIntegervEXT.?(arg_5279, arg_5280, arg_5281);
}
pub const GL_TEXTURE_BINDING_BUFFER = 0x8C2C;
pub const GL_SGIX_depth_pass_instrument = 1;
pub const GL_R32I = 0x8235;
pub inline fn glGetShaderInfoLog(arg_5282: GLuint, arg_5283: GLsizei, arg_5284: [*c]GLsizei, arg_5285: [*c]GLchar) void {
    return epoxy_glGetShaderInfoLog.?(arg_5282, arg_5283, arg_5284, arg_5285);
}
pub inline fn glSpriteParameterivSGIX(arg_5286: GLenum, arg_5287: [*c]const GLint) void {
    return epoxy_glSpriteParameterivSGIX.?(arg_5286, arg_5287);
}
pub const GL_PACK_SKIP_PIXELS = 0x0D04;
pub const GL_MULTISAMPLE_RASTERIZATION_ALLOWED_EXT = 0x932B;
pub inline fn glCopyMultiTexImage2DEXT(arg_5288: GLenum, arg_5289: GLenum, arg_5290: GLint, arg_5291: GLenum, arg_5292: GLint, arg_5293: GLint, arg_5294: GLsizei, arg_5295: GLsizei, arg_5296: GLint) void {
    return epoxy_glCopyMultiTexImage2DEXT.?(arg_5288, arg_5289, arg_5290, arg_5291, arg_5292, arg_5293, arg_5294, arg_5295, arg_5296);
}
pub inline fn glTexGenf(arg_5297: GLenum, arg_5298: GLenum, arg_5299: GLfloat) void {
    return epoxy_glTexGenf.?(arg_5297, arg_5298, arg_5299);
}
pub const GL_INT_IMAGE_1D = 0x9057;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900F;
pub const GL_OFFSET_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8852;
pub inline fn glIndexMask(arg_5300: GLuint) void {
    return epoxy_glIndexMask.?(arg_5300);
}
pub const GL_ANGLE_texture_usage = 1;
pub inline fn glUniformMatrix2x4dv(arg_5301: GLint, arg_5302: GLsizei, arg_5303: GLboolean, arg_5304: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix2x4dv.?(arg_5301, arg_5302, arg_5303, arg_5304);
}
pub const GL_UNIFORM_TYPE = 0x8A37;
pub const GL_PATH_STENCIL_DEPTH_OFFSET_UNITS_NV = 0x90BE;
pub inline fn glElementPointerAPPLE(arg_5305: GLenum, arg_5306: ?*const c_void) void {
    return epoxy_glElementPointerAPPLE.?(arg_5305, arg_5306);
}
pub const __WINT_WIDTH__ = 32;
pub const GL_DUAL_INTENSITY12_SGIS = 0x811A;
pub const GL_MAX_MULTIVIEW_BUFFERS_EXT = 0x90F2;
pub const GL_TRANSFORM_FEEDBACK_OVERFLOW_ARB = 0x82EC;
pub const GL_COMPRESSED_RGBA_ASTC_8x6_KHR = 0x93B6;
pub inline fn glSecondaryColor3ubEXT(arg_5307: GLubyte, arg_5308: GLubyte, arg_5309: GLubyte) void {
    return epoxy_glSecondaryColor3ubEXT.?(arg_5307, arg_5308, arg_5309);
}
pub inline fn glTextureImage1DEXT(arg_5310: GLuint, arg_5311: GLenum, arg_5312: GLint, arg_5313: GLint, arg_5314: GLsizei, arg_5315: GLint, arg_5316: GLenum, arg_5317: GLenum, arg_5318: ?*const c_void) void {
    return epoxy_glTextureImage1DEXT.?(arg_5310, arg_5311, arg_5312, arg_5313, arg_5314, arg_5315, arg_5316, arg_5317, arg_5318);
}
pub inline fn glTextureStorageMem2DMultisampleEXT(arg_5319: GLuint, arg_5320: GLsizei, arg_5321: GLenum, arg_5322: GLsizei, arg_5323: GLsizei, arg_5324: GLboolean, arg_5325: GLuint, arg_5326: GLuint64) void {
    return epoxy_glTextureStorageMem2DMultisampleEXT.?(arg_5319, arg_5320, arg_5321, arg_5322, arg_5323, arg_5324, arg_5325, arg_5326);
}
pub const GL_MAX_COLOR_TEXTURE_SAMPLES = 0x910E;
pub inline fn glClearNamedBufferSubDataEXT(arg_5327: GLuint, arg_5328: GLenum, arg_5329: GLsizeiptr, arg_5330: GLsizeiptr, arg_5331: GLenum, arg_5332: GLenum, arg_5333: ?*const c_void) void {
    return epoxy_glClearNamedBufferSubDataEXT.?(arg_5327, arg_5328, arg_5329, arg_5330, arg_5331, arg_5332, arg_5333);
}
pub const GL_GPU_MEMORY_INFO_EVICTED_MEMORY_NVX = 0x904B;
pub const PTRDIFF_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const GL_REG_7_ATI = 0x8928;
pub inline fn glMultiTexSubImage2DEXT(arg_5334: GLenum, arg_5335: GLenum, arg_5336: GLint, arg_5337: GLint, arg_5338: GLint, arg_5339: GLsizei, arg_5340: GLsizei, arg_5341: GLenum, arg_5342: GLenum, arg_5343: ?*const c_void) void {
    return epoxy_glMultiTexSubImage2DEXT.?(arg_5334, arg_5335, arg_5336, arg_5337, arg_5338, arg_5339, arg_5340, arg_5341, arg_5342, arg_5343);
}
pub const GL_NV_command_list = 1;
pub const GL_COLOR_ATTACHMENT17 = 0x8CF1;
pub const GL_CW = 0x0900;
pub const GL_PROXY_TEXTURE_RECTANGLE_ARB = 0x84F7;
pub inline fn glGetNamedRenderbufferParameterivEXT(arg_5344: GLuint, arg_5345: GLenum, arg_5346: [*c]GLint) void {
    return epoxy_glGetNamedRenderbufferParameterivEXT.?(arg_5344, arg_5345, arg_5346);
}
pub const GL_SCISSOR_TEST = 0x0C11;
pub const GL_DUP_FIRST_CUBIC_CURVE_TO_NV = 0xF2;
pub inline fn glTexEnvfv(arg_5347: GLenum, arg_5348: GLenum, arg_5349: [*c]const GLfloat) void {
    return epoxy_glTexEnvfv.?(arg_5347, arg_5348, arg_5349);
}
pub const GL_VERTEX_ATTRIB_ARRAY0_NV = 0x8650;
pub const GL_IMAGE_2D = 0x904D;
pub inline fn glEndQueryEXT(arg_5350: GLenum) void {
    return epoxy_glEndQueryEXT.?(arg_5350);
}
pub inline fn glTexCoord2f(arg_5351: GLfloat, arg_5352: GLfloat) void {
    return epoxy_glTexCoord2f.?(arg_5351, arg_5352);
}
pub inline fn glExtIsProgramBinaryQCOM(arg_5353: GLuint) GLboolean {
    return epoxy_glExtIsProgramBinaryQCOM.?(arg_5353);
}
pub inline fn glGetFloati_v(arg_5354: GLenum, arg_5355: GLuint, arg_5356: [*c]GLfloat) void {
    return epoxy_glGetFloati_v.?(arg_5354, arg_5355, arg_5356);
}
pub inline fn glGetColorTableParameterivEXT(arg_5357: GLenum, arg_5358: GLenum, arg_5359: [*c]GLint) void {
    return epoxy_glGetColorTableParameterivEXT.?(arg_5357, arg_5358, arg_5359);
}
pub const GL_SGIX_fragment_lighting = 1;
pub const GL_OES_element_index_uint = 1;
pub const GL_OUTPUT_TEXTURE_COORD1_EXT = 0x879E;
pub inline fn glGetFloati_vOES(arg_5360: GLenum, arg_5361: GLuint, arg_5362: [*c]GLfloat) void {
    return epoxy_glGetFloati_vOES.?(arg_5360, arg_5361, arg_5362);
}
pub const __INT_LEAST8_FMTd__ = "hhd";
pub const GL_FLOAT16_NV = 0x8FF8;
pub inline fn glGetDriverControlsQCOM(arg_5363: [*c]GLint, arg_5364: GLsizei, arg_5365: [*c]GLuint) void {
    return epoxy_glGetDriverControlsQCOM.?(arg_5363, arg_5364, arg_5365);
}
pub inline fn glTextureParameterivEXT(arg_5366: GLuint, arg_5367: GLenum, arg_5368: GLenum, arg_5369: [*c]const GLint) void {
    return epoxy_glTextureParameterivEXT.?(arg_5366, arg_5367, arg_5368, arg_5369);
}
pub const GL_SMAPHS_PROGRAM_BINARY_DMP = 0x9252;
pub inline fn glUniformMatrix4dv(arg_5370: GLint, arg_5371: GLsizei, arg_5372: GLboolean, arg_5373: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix4dv.?(arg_5370, arg_5371, arg_5372, arg_5373);
}
pub inline fn glPopDebugGroup() void {
    return epoxy_glPopDebugGroup.?();
}
pub inline fn glBlendFuncSeparateiARB(arg_5374: GLuint, arg_5375: GLenum, arg_5376: GLenum, arg_5377: GLenum, arg_5378: GLenum) void {
    return epoxy_glBlendFuncSeparateiARB.?(arg_5374, arg_5375, arg_5376, arg_5377, arg_5378);
}
pub inline fn glNamedProgramLocalParameters4fvEXT(arg_5379: GLuint, arg_5380: GLenum, arg_5381: GLuint, arg_5382: GLsizei, arg_5383: [*c]const GLfloat) void {
    return epoxy_glNamedProgramLocalParameters4fvEXT.?(arg_5379, arg_5380, arg_5381, arg_5382, arg_5383);
}
pub const GL_DRAW_INDIRECT_BUFFER_BINDING = 0x8F43;
pub inline fn glStartInstrumentsSGIX() void {
    return epoxy_glStartInstrumentsSGIX.?();
}
pub inline fn glProgramLocalParameterI4ivNV(arg_5384: GLenum, arg_5385: GLuint, arg_5386: [*c]const GLint) void {
    return epoxy_glProgramLocalParameterI4ivNV.?(arg_5384, arg_5385, arg_5386);
}
pub const GL_COORD_REPLACE_OES = 0x8862;
pub const GL_MAX_FRAGMENT_PROGRAM_LOCAL_PARAMETERS_NV = 0x8868;
pub inline fn glProgramUniform4uiv(arg_5387: GLuint, arg_5388: GLint, arg_5389: GLsizei, arg_5390: [*c]const GLuint) void {
    return epoxy_glProgramUniform4uiv.?(arg_5387, arg_5388, arg_5389, arg_5390);
}
pub const GL_UNSIGNED_SHORT_8_8_REV_MESA = 0x85BB;
pub const GL_EXT_misc_attribute = 1;
pub inline fn glDeleteSync(arg_5391: GLsync) void {
    return epoxy_glDeleteSync.?(arg_5391);
}
pub inline fn glCopyTexImage1D(arg_5392: GLenum, arg_5393: GLint, arg_5394: GLenum, arg_5395: GLint, arg_5396: GLint, arg_5397: GLsizei, arg_5398: GLint) void {
    return epoxy_glCopyTexImage1D.?(arg_5392, arg_5393, arg_5394, arg_5395, arg_5396, arg_5397, arg_5398);
}
pub const GL_EXT_protected_textures = 1;
pub const GL_X_EXT = 0x87D5;
pub inline fn glCopyPathNV(arg_5399: GLuint, arg_5400: GLuint) void {
    return epoxy_glCopyPathNV.?(arg_5399, arg_5400);
}
pub inline fn glWindowPos3d(arg_5401: GLdouble, arg_5402: GLdouble, arg_5403: GLdouble) void {
    return epoxy_glWindowPos3d.?(arg_5401, arg_5402, arg_5403);
}
pub const GL_TEXTURE_CLIPMAP_DEPTH_SGIX = 0x8176;
pub inline fn glGetQueryObjectiv(arg_5404: GLuint, arg_5405: GLenum, arg_5406: [*c]GLint) void {
    return epoxy_glGetQueryObjectiv.?(arg_5404, arg_5405, arg_5406);
}
pub const GL_RGB10_A2 = 0x8059;
pub const GL_EVAL_VERTEX_ATTRIB7_NV = 0x86CD;
pub const GL_CONTEXT_COMPATIBILITY_PROFILE_BIT = 0x00000002;
pub const GL_TERMINATE_SEQUENCE_COMMAND_NV = 0x0000;
pub inline fn glFragmentMaterialiSGIX(arg_5407: GLenum, arg_5408: GLenum, arg_5409: GLint) void {
    return epoxy_glFragmentMaterialiSGIX.?(arg_5407, arg_5408, arg_5409);
}
pub inline fn glVertexAttrib4NubvARB(arg_5410: GLuint, arg_5411: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4NubvARB.?(arg_5410, arg_5411);
}
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910B;
pub const GL_FOG_OFFSET_SGIX = 0x8198;
pub const GL_COLOR_LOGIC_OP = 0x0BF2;
pub const PRIiLEAST32 = "i";
pub const GL_NV_copy_image = 1;
pub const GL_TEXTURE_GEN_Q = 0x0C63;
pub const GL_DOT_PRODUCT_DEPTH_REPLACE_NV = 0x86ED;
pub const GL_NV_vdpau_interop = 1;
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_ARB = 0x8848;
pub const GL_ARB_derivative_control = 1;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5F;
pub const GL_POINT_SIZE_MIN_EXT = 0x8126;
pub const GL_COMPRESSED_RGBA_ASTC_10x5 = 0x93B8;
pub inline fn glIsTextureEXT(arg_5412: GLuint) GLboolean {
    return epoxy_glIsTextureEXT.?(arg_5412);
}
pub inline fn glGetClipPlanexOES(arg_5413: GLenum, arg_5414: [*c]GLfixed) void {
    return epoxy_glGetClipPlanexOES.?(arg_5413, arg_5414);
}
pub const GL_Z400_BINARY_AMD = 0x8740;
pub const GL_READ_BUFFER = 0x0C02;
pub const GL_MUL_ATI = 0x8964;
pub const GL_INTENSITY_SNORM = 0x9013;
pub const GL_NV_shader_atomic_int64 = 1;
pub const __CLOCK_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const GL_MINMAX_SINK = 0x8030;
pub const GL_ARM_shader_framebuffer_fetch_depth_stencil = 1;
pub const GL_CLIP_DISTANCE4_EXT = 0x3004;
pub inline fn glProgramUniform2i64ARB(arg_5415: GLuint, arg_5416: GLint, arg_5417: GLint64, arg_5418: GLint64) void {
    return epoxy_glProgramUniform2i64ARB.?(arg_5415, arg_5416, arg_5417, arg_5418);
}
pub const GL_ELEMENT_ADDRESS_COMMAND_NV = 0x0008;
pub const GL_CLIP_DISTANCE6_EXT = 0x3006;
pub inline fn glGetNamedBufferSubDataEXT(arg_5419: GLuint, arg_5420: GLintptr, arg_5421: GLsizeiptr, arg_5422: ?*c_void) void {
    return epoxy_glGetNamedBufferSubDataEXT.?(arg_5419, arg_5420, arg_5421, arg_5422);
}
pub const GL_BUMP_ROT_MATRIX_SIZE_ATI = 0x8776;
pub inline fn glTexPageCommitmentARB(arg_5423: GLenum, arg_5424: GLint, arg_5425: GLint, arg_5426: GLint, arg_5427: GLint, arg_5428: GLsizei, arg_5429: GLsizei, arg_5430: GLsizei, arg_5431: GLboolean) void {
    return epoxy_glTexPageCommitmentARB.?(arg_5423, arg_5424, arg_5425, arg_5426, arg_5427, arg_5428, arg_5429, arg_5430, arg_5431);
}
pub const __SIZEOF_PTRDIFF_T__ = 8;
pub const GL_LAST_VIDEO_CAPTURE_STATUS_NV = 0x9027;
pub const GL_SOURCE0_RGB_EXT = 0x8580;
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS = 0x8C80;
pub inline fn glPolygonOffset(arg_5432: GLfloat, arg_5433: GLfloat) void {
    return epoxy_glPolygonOffset.?(arg_5432, arg_5433);
}
pub inline fn glDeleteProgramsARB(arg_5434: GLsizei, arg_5435: [*c]const GLuint) void {
    return epoxy_glDeleteProgramsARB.?(arg_5434, arg_5435);
}
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_EXT = 0x8916;
pub inline fn glVertexStream3sATI(arg_5436: GLenum, arg_5437: GLshort, arg_5438: GLshort, arg_5439: GLshort) void {
    return epoxy_glVertexStream3sATI.?(arg_5436, arg_5437, arg_5438, arg_5439);
}
pub const SCNuLEAST32 = "u";
pub const GL_DRAW_FRAMEBUFFER_NV = 0x8CA9;
pub const GL_FRAMEBUFFER_DEFAULT_SAMPLES = 0x9313;
pub inline fn glBlendFunci(arg_5440: GLuint, arg_5441: GLenum, arg_5442: GLenum) void {
    return epoxy_glBlendFunci.?(arg_5440, arg_5441, arg_5442);
}
pub const GL_TEXTURE9_ARB = 0x84C9;
pub const GL_QUERY_OBJECT_AMD = 0x9153;
pub inline fn glVertexAttrib1fARB(arg_5443: GLuint, arg_5444: GLfloat) void {
    return epoxy_glVertexAttrib1fARB.?(arg_5443, arg_5444);
}
pub const GL_REPLICATE_BORDER_HP = 0x8153;
pub const GL_NV_tessellation_program5 = 1;
pub const GL_QUERY_RESULT_NO_WAIT_AMD = 0x9194;
pub const GL_PIXEL_MAP_I_TO_R = 0x0C72;
pub const GL_TEXTURE_COORD_ARRAY_POINTER = 0x8092;
pub const __UINT_FAST64_FMTo__ = "lo";
pub const GL_VIEW_CLASS_S3TC_DXT5_RGBA = 0x82CF;
pub const GL_VIEWPORT_SUBPIXEL_BITS_NV = 0x825C;
pub const GL_SAMPLE_MASK_NV = 0x8E51;
pub const GL_ARB_internalformat_query2 = 1;
pub inline fn glProgramLocalParameterI4uiNV(arg_5445: GLenum, arg_5446: GLuint, arg_5447: GLuint, arg_5448: GLuint, arg_5449: GLuint, arg_5450: GLuint) void {
    return epoxy_glProgramLocalParameterI4uiNV.?(arg_5445, arg_5446, arg_5447, arg_5448, arg_5449, arg_5450);
}
pub const __OPENCL_MEMORY_SCOPE_ALL_SVM_DEVICES = 3;
pub inline fn glProgramUniformMatrix4x2dv(arg_5451: GLuint, arg_5452: GLint, arg_5453: GLsizei, arg_5454: GLboolean, arg_5455: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x2dv.?(arg_5451, arg_5452, arg_5453, arg_5454, arg_5455);
}
pub inline fn glBeginQueryEXT(arg_5456: GLenum, arg_5457: GLuint) void {
    return epoxy_glBeginQueryEXT.?(arg_5456, arg_5457);
}
pub const GL_NV_image_formats = 1;
pub const GL_ARB_sync = 1;
pub inline fn glSemaphoreParameterui64vEXT(arg_5458: GLuint, arg_5459: GLenum, arg_5460: [*c]const GLuint64) void {
    return epoxy_glSemaphoreParameterui64vEXT.?(arg_5458, arg_5459, arg_5460);
}
pub const GL_LINE_STIPPLE = 0x0B24;
pub const GL_CONVOLUTION_BORDER_COLOR_HP = 0x8154;
pub const GL_MAX_GEOMETRY_BINDABLE_UNIFORMS_EXT = 0x8DE4;
pub const GL_TEXTURE_COMPARE_OPERATOR_SGIX = 0x819B;
pub const GL_DSDT_MAG_NV = 0x86F6;
pub const __UINT16_FMTo__ = "ho";
pub inline fn glMultiTexCoord2dv(arg_5461: GLenum, arg_5462: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord2dv.?(arg_5461, arg_5462);
}
pub const GL_COMPRESSED_RED_RGTC1_EXT = 0x8DBB;
pub const GL_IR_INSTRUMENT1_SGIX = 0x817F;
pub const GL_FIRST_VERTEX_CONVENTION = 0x8E4D;
pub inline fn glNamedProgramLocalParameter4fEXT(arg_5463: GLuint, arg_5464: GLenum, arg_5465: GLuint, arg_5466: GLfloat, arg_5467: GLfloat, arg_5468: GLfloat, arg_5469: GLfloat) void {
    return epoxy_glNamedProgramLocalParameter4fEXT.?(arg_5463, arg_5464, arg_5465, arg_5466, arg_5467, arg_5468, arg_5469);
}
pub const GL_NV_texture_shader3 = 1;
pub const GL_COLOR_ATTACHMENT_EXT = 0x90F0;
pub const GL_INT_SAMPLER_2D_ARRAY_EXT = 0x8DCF;
pub const GL_SRGB8_EXT = 0x8C41;
pub const GL_FLOAT16_VEC4_NV = 0x8FFB;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_EXT = 0x90D7;
pub const GL_UNSIGNED_INT_8_8_8_8_EXT = 0x8035;
pub inline fn glGetTexParameterIuiv(arg_5470: GLenum, arg_5471: GLenum, arg_5472: [*c]GLuint) void {
    return epoxy_glGetTexParameterIuiv.?(arg_5470, arg_5471, arg_5472);
}
pub const __PRIPTR_PREFIX = "l";
pub const GL_COMPILE_STATUS = 0x8B81;
pub const GL_MAP2_VERTEX_ATTRIB2_4_NV = 0x8672;
pub const GL_NUM_FILL_STREAMS_NV = 0x8E29;
pub inline fn glMultTransposeMatrixxOES(arg_5473: [*c]const GLfixed) void {
    return epoxy_glMultTransposeMatrixxOES.?(arg_5473);
}
pub inline fn glUniform3d(arg_5474: GLint, arg_5475: GLdouble, arg_5476: GLdouble, arg_5477: GLdouble) void {
    return epoxy_glUniform3d.?(arg_5474, arg_5475, arg_5476, arg_5477);
}
pub const GL_INT_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910C;
pub const PRIXLEAST32 = "X";
pub const GL_RG16I = 0x8239;
pub const GL_MAD_ATI = 0x8968;
pub inline fn glMapBufferRangeEXT(arg_5478: GLenum, arg_5479: GLintptr, arg_5480: GLsizeiptr, arg_5481: GLbitfield) ?*c_void {
    return epoxy_glMapBufferRangeEXT.?(arg_5478, arg_5479, arg_5480, arg_5481);
}
pub const __GCC_ASM_FLAG_OUTPUTS__ = 1;
pub const GL_MATRIX1_NV = 0x8631;
pub inline fn glUniform2fvARB(arg_5482: GLint, arg_5483: GLsizei, arg_5484: [*c]const GLfloat) void {
    return epoxy_glUniform2fvARB.?(arg_5482, arg_5483, arg_5484);
}
pub const GL_LUMINANCE16I_EXT = 0x8D8C;
pub const GL_ATI_draw_buffers = 1;
pub const GL_COLOR_ATTACHMENT0 = 0x8CE0;
pub const GL_PIXEL_TRANSFORM_2D_EXT = 0x8330;
pub inline fn glGetPixelMapuiv(arg_5485: GLenum, arg_5486: [*c]GLuint) void {
    return epoxy_glGetPixelMapuiv.?(arg_5485, arg_5486);
}
pub const GL_USE_MISSING_GLYPH_NV = 0x90AA;
pub inline fn glDeleteMemoryObjectsEXT(arg_5487: GLsizei, arg_5488: [*c]const GLuint) void {
    return epoxy_glDeleteMemoryObjectsEXT.?(arg_5487, arg_5488);
}
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER = 0x8DD8;
pub const GL_TEXTURE_IMMUTABLE_FORMAT = 0x912F;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_EXT = 0x8E89;
pub inline fn glVertexAttrib1s(arg_5489: GLuint, arg_5490: GLshort) void {
    return epoxy_glVertexAttrib1s.?(arg_5489, arg_5490);
}
pub const GL_SPRITE_MODE_SGIX = 0x8149;
pub const GL_SAMPLE_PATTERN_EXT = 0x80AC;
pub inline fn glExtGetBuffersQCOM(arg_5491: [*c]GLuint, arg_5492: GLint, arg_5493: [*c]GLint) void {
    return epoxy_glExtGetBuffersQCOM.?(arg_5491, arg_5492, arg_5493);
}
pub const __USE_ISOC99 = 1;
pub const GL_CURRENT_RASTER_INDEX = 0x0B05;
pub const GL_PARAMETER_BUFFER_ARB = 0x80EE;
pub inline fn glVertexAttribI1uiv(arg_5494: GLuint, arg_5495: [*c]const GLuint) void {
    return epoxy_glVertexAttribI1uiv.?(arg_5494, arg_5495);
}
pub const GL_MAX_COMPUTE_VARIABLE_GROUP_INVOCATIONS_ARB = 0x9344;
pub inline fn glNamedBufferPageCommitmentEXT(arg_5496: GLuint, arg_5497: GLintptr, arg_5498: GLsizeiptr, arg_5499: GLboolean) void {
    return epoxy_glNamedBufferPageCommitmentEXT.?(arg_5496, arg_5497, arg_5498, arg_5499);
}
pub const GL_MAP2_BINORMAL_EXT = 0x8447;
pub inline fn glRenderbufferStorageMultisample(arg_5500: GLenum, arg_5501: GLsizei, arg_5502: GLenum, arg_5503: GLsizei, arg_5504: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisample.?(arg_5500, arg_5501, arg_5502, arg_5503, arg_5504);
}
pub inline fn glMemoryBarrierEXT(arg_5505: GLbitfield) void {
    return epoxy_glMemoryBarrierEXT.?(arg_5505);
}
pub inline fn glRenderbufferStorageMultisampleAdvancedAMD(arg_5506: GLenum, arg_5507: GLsizei, arg_5508: GLsizei, arg_5509: GLenum, arg_5510: GLsizei, arg_5511: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleAdvancedAMD.?(arg_5506, arg_5507, arg_5508, arg_5509, arg_5510, arg_5511);
}
pub const GL_EQUAL = 0x0202;
pub const GL_POINT_SPRITE_OES = 0x8861;
pub const GL_ARRAY_ELEMENT_LOCK_FIRST_EXT = 0x81A8;
pub inline fn glDrawElementsInstancedEXT(arg_5512: GLenum, arg_5513: GLsizei, arg_5514: GLenum, arg_5515: ?*const c_void, arg_5516: GLsizei) void {
    return epoxy_glDrawElementsInstancedEXT.?(arg_5512, arg_5513, arg_5514, arg_5515, arg_5516);
}
pub const GL_COUNTER_RANGE_AMD = 0x8BC1;
pub inline fn glBlendBarrierKHR() void {
    return epoxy_glBlendBarrierKHR.?();
}
pub const __RDSEED__ = 1;
pub const GL_VERTEX_ATTRIB_ARRAY15_NV = 0x865F;
pub const GL_CURRENT_VERTEX_ATTRIB_ARB = 0x8626;
pub inline fn glIsSyncAPPLE(arg_5517: GLsync) GLboolean {
    return epoxy_glIsSyncAPPLE.?(arg_5517);
}
pub inline fn glWindowPos2iv(arg_5518: [*c]const GLint) void {
    return epoxy_glWindowPos2iv.?(arg_5518);
}
pub inline fn glDisableVertexArrayAttrib(arg_5519: GLuint, arg_5520: GLuint) void {
    return epoxy_glDisableVertexArrayAttrib.?(arg_5519, arg_5520);
}
pub const GL_NOP_COMMAND_NV = 0x0001;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_EXT = 0x8A2C;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC_OES = 0x9279;
pub const GL_EXPAND_NEGATE_NV = 0x8539;
pub const GL_OP_EXP_BASE_2_EXT = 0x8791;
pub const GL_PATH_JOIN_STYLE_NV = 0x9079;
pub inline fn glGetError() GLenum {
    return epoxy_glGetError.?();
}
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY_OES = 0x9102;
pub const SCNiLEAST64 = __PRI64_PREFIX ++ "i";
pub const GL_DOUBLE_MAT2x3_EXT = 0x8F49;
pub inline fn glTexImage3DMultisample(arg_5521: GLenum, arg_5522: GLsizei, arg_5523: GLenum, arg_5524: GLsizei, arg_5525: GLsizei, arg_5526: GLsizei, arg_5527: GLboolean) void {
    return epoxy_glTexImage3DMultisample.?(arg_5521, arg_5522, arg_5523, arg_5524, arg_5525, arg_5526, arg_5527);
}
pub const GL_VARIABLE_A_NV = 0x8523;
pub inline fn glVertex2hvNV(arg_5528: [*c]const GLhalfNV) void {
    return epoxy_glVertex2hvNV.?(arg_5528);
}
pub const GL_NEGATIVE_ONE_EXT = 0x87DF;
pub const GL_OUTPUT_TEXTURE_COORD15_EXT = 0x87AC;
pub const GL_FORMAT_SUBSAMPLE_244_244_OML = 0x8983;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_OES = 0x8517;
pub const GL_ADJACENT_PAIRS_NV = 0x90AE;
pub const GL_OFFSET_TEXTURE_2D_BIAS_NV = 0x86E3;
pub const GL_DEBUG_SEVERITY_HIGH_KHR = 0x9146;
pub const GL_RGBA_SNORM = 0x8F93;
pub const GL_APPLE_object_purgeable = 1;
pub const __INT_LEAST8_MAX__ = 127;
pub inline fn glMatrixPushEXT(arg_5529: GLenum) void {
    return epoxy_glMatrixPushEXT.?(arg_5529);
}
pub const __UINTMAX_FMTo__ = "lo";
pub inline fn glDrawCommandsStatesAddressNV(arg_5530: [*c]const GLuint64, arg_5531: [*c]const GLsizei, arg_5532: [*c]const GLuint, arg_5533: [*c]const GLuint, arg_5534: GLuint) void {
    return epoxy_glDrawCommandsStatesAddressNV.?(arg_5530, arg_5531, arg_5532, arg_5533, arg_5534);
}
pub const GL_RENDERBUFFER_WIDTH_EXT = 0x8D42;
pub const GL_DUAL_LUMINANCE_ALPHA8_SGIS = 0x811D;
pub inline fn glAlphaToCoverageDitherControlNV(arg_5535: GLenum) void {
    return epoxy_glAlphaToCoverageDitherControlNV.?(arg_5535);
}
pub const GL_COLOR_ATTACHMENT22 = 0x8CF6;
pub const GL_TEXTURE_2D = 0x0DE1;
pub const GL_TEXT_FRAGMENT_SHADER_ATI = 0x8200;
pub const GL_ROBUST_GPU_TIMEOUT_MS_KHR = 0x82FD;
pub const GL_UNSIGNED_INT_24_8 = 0x84FA;
pub const GL_POLYGON_OFFSET_FACTOR_EXT = 0x8038;
pub const GL_SUBGROUP_QUAD_ALL_STAGES_KHR = 0x9535;
pub inline fn glGetConvolutionParameterivEXT(arg_5536: GLenum, arg_5537: GLenum, arg_5538: [*c]GLint) void {
    return epoxy_glGetConvolutionParameterivEXT.?(arg_5536, arg_5537, arg_5538);
}
pub const GL_IMAGE_MIN_FILTER_HP = 0x815D;
pub const GL_SOFTLIGHT_NV = 0x929C;
pub inline fn glVertex3hNV(arg_5539: GLhalfNV, arg_5540: GLhalfNV, arg_5541: GLhalfNV) void {
    return epoxy_glVertex3hNV.?(arg_5539, arg_5540, arg_5541);
}
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS_EXT = 0x92D3;
pub const GL_IMG_framebuffer_downsample = 1;
pub const GL_GLOBAL_ALPHA_FACTOR_SUN = 0x81DA;
pub inline fn glGetTexParameterPointervAPPLE(arg_5542: GLenum, arg_5543: GLenum, arg_5544: [*c]?*c_void) void {
    return epoxy_glGetTexParameterPointervAPPLE.?(arg_5542, arg_5543, arg_5544);
}
pub const GL_COMPRESSED_RGB8_ETC2_OES = 0x9274;
pub inline fn glProgramUniformMatrix4x2fv(arg_5545: GLuint, arg_5546: GLint, arg_5547: GLsizei, arg_5548: GLboolean, arg_5549: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x2fv.?(arg_5545, arg_5546, arg_5547, arg_5548, arg_5549);
}
pub const GL_MAX_NUM_COMPATIBLE_SUBROUTINES = 0x92F8;
pub const GL_EDGE_FLAG_ARRAY = 0x8079;
pub const GL_QUADRATIC_ATTENUATION = 0x1209;
pub const GL_FRAGMENT_PROGRAM_NV = 0x8870;
pub const GL_MATRIX6_ARB = 0x88C6;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_EXT = 0x8DD4;
pub const GL_INTERLACE_OML = 0x8980;
pub const GL_VERTEX_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB6;
pub const GL_IMAGE_TRANSLATE_Y_HP = 0x8158;
pub const __INT_LEAST32_MAX__ = 2147483647;
pub const __INT_FAST16_FMTd__ = "hd";
pub const GL_EVAL_BIT = 0x00010000;
pub const GL_SLUMINANCE8_ALPHA8 = 0x8C45;
pub const GL_ALPHA16UI_EXT = 0x8D78;
pub inline fn glNamedStringARB(arg_5550: GLenum, arg_5551: GLint, arg_5552: [*c]const GLchar, arg_5553: GLint, arg_5554: [*c]const GLchar) void {
    return epoxy_glNamedStringARB.?(arg_5550, arg_5551, arg_5552, arg_5553, arg_5554);
}
pub inline fn glVDPAUMapSurfacesNV(arg_5555: GLsizei, arg_5556: [*c]const GLvdpauSurfaceNV) void {
    return epoxy_glVDPAUMapSurfacesNV.?(arg_5555, arg_5556);
}
pub inline fn glVertexAttribI1uivEXT(arg_5557: GLuint, arg_5558: [*c]const GLuint) void {
    return epoxy_glVertexAttribI1uivEXT.?(arg_5557, arg_5558);
}
pub const GL_TEXTURE_SHADER_NV = 0x86DE;
pub const GL_MAX_PIXEL_MAP_TABLE = 0x0D34;
pub inline fn glVertexAttrib1hNV(arg_5559: GLuint, arg_5560: GLhalfNV) void {
    return epoxy_glVertexAttrib1hNV.?(arg_5559, arg_5560);
}
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_NV = 0x933E;
pub const GL_INT_SAMPLER_BUFFER_AMD = 0x9002;
pub inline fn glMultiTexCoord3iARB(arg_5561: GLenum, arg_5562: GLint, arg_5563: GLint, arg_5564: GLint) void {
    return epoxy_glMultiTexCoord3iARB.?(arg_5561, arg_5562, arg_5563, arg_5564);
}
pub const GL_AMD_vertex_shader_layer = 1;
pub const GL_GENERATE_MIPMAP_HINT_SGIS = 0x8192;
pub const GL_SYNC_FLUSH_COMMANDS_BIT_APPLE = 0x00000001;
pub const GL_PACK_SKIP_IMAGES_EXT = 0x806B;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x906C;
pub const __DBL_HAS_DENORM__ = 1;
pub const GL_STANDARD_FONT_NAME_NV = 0x9072;
pub inline fn glProgramUniformMatrix2x4fvEXT(arg_5565: GLuint, arg_5566: GLint, arg_5567: GLsizei, arg_5568: GLboolean, arg_5569: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x4fvEXT.?(arg_5565, arg_5566, arg_5567, arg_5568, arg_5569);
}
pub inline fn glWindowPos2fvMESA(arg_5570: [*c]const GLfloat) void {
    return epoxy_glWindowPos2fvMESA.?(arg_5570);
}
pub inline fn glSecondaryColor3usv(arg_5571: [*c]const GLushort) void {
    return epoxy_glSecondaryColor3usv.?(arg_5571);
}
pub inline fn glDrawTexsOES(arg_5572: GLshort, arg_5573: GLshort, arg_5574: GLshort, arg_5575: GLshort, arg_5576: GLshort) void {
    return epoxy_glDrawTexsOES.?(arg_5572, arg_5573, arg_5574, arg_5575, arg_5576);
}
pub const __UINT_FAST16_FMTu__ = "hu";
pub inline fn glVertexAttribI4ui(arg_5577: GLuint, arg_5578: GLuint, arg_5579: GLuint, arg_5580: GLuint, arg_5581: GLuint) void {
    return epoxy_glVertexAttribI4ui.?(arg_5577, arg_5578, arg_5579, arg_5580, arg_5581);
}
pub const GL_PROGRAM_NATIVE_INSTRUCTIONS_ARB = 0x88A2;
pub const GL_REG_21_ATI = 0x8936;
pub const GL_IBM_static_data = 1;
pub inline fn glGenProgramsNV(arg_5582: GLsizei, arg_5583: [*c]GLuint) void {
    return epoxy_glGenProgramsNV.?(arg_5582, arg_5583);
}
pub const GL_INT_SAMPLER_2D_EXT = 0x8DCA;
pub const GL_SOFTLIGHT = 0x929C;
pub inline fn glGetVertexAttribIiv(arg_5584: GLuint, arg_5585: GLenum, arg_5586: [*c]GLint) void {
    return epoxy_glGetVertexAttribIiv.?(arg_5584, arg_5585, arg_5586);
}
pub const GL_PATH_MODELVIEW_STACK_DEPTH_NV = 0x0BA3;
pub const GL_MATRIX_INDEX_ARRAY_TYPE_ARB = 0x8847;
pub const GL_KHR_debug = 1;
pub const GL_MAX_CLIP_PLANES_IMG = 0x0D32;
pub const GL_POLYGON_OFFSET_EXT = 0x8037;
pub const GL_VARIABLE_B_NV = 0x8524;
pub inline fn glGenerateMultiTexMipmapEXT(arg_5587: GLenum, arg_5588: GLenum) void {
    return epoxy_glGenerateMultiTexMipmapEXT.?(arg_5587, arg_5588);
}
pub const GL_ELEMENT_ARRAY_BARRIER_BIT = 0x00000002;
pub const __UINTMAX_C_SUFFIX__ = UL;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_EXT = 0x8DA9;
pub const __VERSION__ = "Clang 10.0.0 ";
pub const __DBL_HAS_INFINITY__ = 1;
pub const GL_EXT_polygon_offset = 1;
pub inline fn glMapGrid2f(arg_5589: GLint, arg_5590: GLfloat, arg_5591: GLfloat, arg_5592: GLint, arg_5593: GLfloat, arg_5594: GLfloat) void {
    return epoxy_glMapGrid2f.?(arg_5589, arg_5590, arg_5591, arg_5592, arg_5593, arg_5594);
}
pub const GL_PER_GPU_STORAGE_BIT_NV = 0x0800;
pub inline fn glVertexAttrib1sARB(arg_5595: GLuint, arg_5596: GLshort) void {
    return epoxy_glVertexAttrib1sARB.?(arg_5595, arg_5596);
}
pub const GL_SELECT = 0x1C02;
pub inline fn glMatrixTranslatedEXT(arg_5597: GLenum, arg_5598: GLdouble, arg_5599: GLdouble, arg_5600: GLdouble) void {
    return epoxy_glMatrixTranslatedEXT.?(arg_5597, arg_5598, arg_5599, arg_5600);
}
pub const GL_ATTRIB_ARRAY_TYPE_NV = 0x8625;
pub const GL_CLIP_NEAR_HINT_PGI = 0x1A220;
pub const GL_SUN_global_alpha = 1;
pub inline fn glWindowPos3fv(arg_5601: [*c]const GLfloat) void {
    return epoxy_glWindowPos3fv.?(arg_5601);
}
pub const GL_SGIX_resample = 1;
pub const GL_NUM_ACTIVE_VARIABLES = 0x9304;
pub inline fn glPixelTransformParameterivEXT(arg_5602: GLenum, arg_5603: GLenum, arg_5604: [*c]const GLint) void {
    return epoxy_glPixelTransformParameterivEXT.?(arg_5602, arg_5603, arg_5604);
}
pub inline fn glVertexArrayVertexAttribOffsetEXT(arg_5605: GLuint, arg_5606: GLuint, arg_5607: GLuint, arg_5608: GLint, arg_5609: GLenum, arg_5610: GLboolean, arg_5611: GLsizei, arg_5612: GLintptr) void {
    return epoxy_glVertexArrayVertexAttribOffsetEXT.?(arg_5605, arg_5606, arg_5607, arg_5608, arg_5609, arg_5610, arg_5611, arg_5612);
}
pub const GL_SOURCE0_ALPHA_EXT = 0x8588;
pub inline fn glTexCoord2fColor4fNormal3fVertex3fSUN(arg_5613: GLfloat, arg_5614: GLfloat, arg_5615: GLfloat, arg_5616: GLfloat, arg_5617: GLfloat, arg_5618: GLfloat, arg_5619: GLfloat, arg_5620: GLfloat, arg_5621: GLfloat, arg_5622: GLfloat, arg_5623: GLfloat, arg_5624: GLfloat) void {
    return epoxy_glTexCoord2fColor4fNormal3fVertex3fSUN.?(arg_5613, arg_5614, arg_5615, arg_5616, arg_5617, arg_5618, arg_5619, arg_5620, arg_5621, arg_5622, arg_5623, arg_5624);
}
pub const GL_CND_ATI = 0x896A;
pub const GL_COMPUTE_TEXTURE = 0x82A0;
pub inline fn glGetMapAttribParameterivNV(arg_5625: GLenum, arg_5626: GLuint, arg_5627: GLenum, arg_5628: [*c]GLint) void {
    return epoxy_glGetMapAttribParameterivNV.?(arg_5625, arg_5626, arg_5627, arg_5628);
}
pub const GL_TEXTURE2 = 0x84C2;
pub const GL_MAX_FRAGMENT_IMAGE_UNIFORMS = 0x90CE;
pub const GL_RESET_NOTIFICATION_STRATEGY_ARB = 0x8256;
pub inline fn glWeightubvARB(arg_5629: GLint, arg_5630: [*c]const GLubyte) void {
    return epoxy_glWeightubvARB.?(arg_5629, arg_5630);
}
pub const SCNx64 = __PRI64_PREFIX ++ "x";
pub inline fn glIsFenceNV(arg_5631: GLuint) GLboolean {
    return epoxy_glIsFenceNV.?(arg_5631);
}
pub const GL_IMAGE_CLASS_2_X_16 = 0x82BD;
pub const GL_ARB_depth_clamp = 1;
pub inline fn glDepthRangeArrayfvNV(arg_5632: GLuint, arg_5633: GLsizei, arg_5634: [*c]const GLfloat) void {
    return epoxy_glDepthRangeArrayfvNV.?(arg_5632, arg_5633, arg_5634);
}
pub inline fn glClipPlanefIMG(arg_5635: GLenum, arg_5636: [*c]const GLfloat) void {
    return epoxy_glClipPlanefIMG.?(arg_5635, arg_5636);
}
pub inline fn glRenderMode(arg_5637: GLenum) GLint {
    return epoxy_glRenderMode.?(arg_5637);
}
pub const GL_RGB8I_EXT = 0x8D8F;
pub const GL_COMPRESSED_RGBA_ASTC_10x10_KHR = 0x93BB;
pub const GL_IMAGE_BUFFER = 0x9051;
pub const GL_COMPRESSED_RG11_EAC = 0x9272;
pub inline fn glReplacementCodeuiColor3fVertex3fvSUN(arg_5638: [*c]const GLuint, arg_5639: [*c]const GLfloat, arg_5640: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiColor3fVertex3fvSUN.?(arg_5638, arg_5639, arg_5640);
}
pub inline fn glClearIndex(arg_5641: GLfloat) void {
    return epoxy_glClearIndex.?(arg_5641);
}
pub inline fn glSetFenceAPPLE(arg_5642: GLuint) void {
    return epoxy_glSetFenceAPPLE.?(arg_5642);
}
pub inline fn glWindowPos2dvMESA(arg_5643: [*c]const GLdouble) void {
    return epoxy_glWindowPos2dvMESA.?(arg_5643);
}
pub inline fn glDeleteRenderbuffersEXT(arg_5644: GLsizei, arg_5645: [*c]const GLuint) void {
    return epoxy_glDeleteRenderbuffersEXT.?(arg_5644, arg_5645);
}
pub const GL_SIGNED_RGB8_NV = 0x86FF;
pub const GL_SC_VERSION_2_0 = 1;
pub inline fn glPointParameterx(arg_5646: GLenum, arg_5647: GLfixed) void {
    return epoxy_glPointParameterx.?(arg_5646, arg_5647);
}
pub inline fn glMultiTexCoord2s(arg_5648: GLenum, arg_5649: GLshort, arg_5650: GLshort) void {
    return epoxy_glMultiTexCoord2s.?(arg_5648, arg_5649, arg_5650);
}
pub inline fn glNamedFramebufferSamplePositionsfvAMD(arg_5651: GLuint, arg_5652: GLuint, arg_5653: GLuint, arg_5654: [*c]const GLfloat) void {
    return epoxy_glNamedFramebufferSamplePositionsfvAMD.?(arg_5651, arg_5652, arg_5653, arg_5654);
}
pub inline fn glMultiTexSubImage1DEXT(arg_5655: GLenum, arg_5656: GLenum, arg_5657: GLint, arg_5658: GLint, arg_5659: GLsizei, arg_5660: GLenum, arg_5661: GLenum, arg_5662: ?*const c_void) void {
    return epoxy_glMultiTexSubImage1DEXT.?(arg_5655, arg_5656, arg_5657, arg_5658, arg_5659, arg_5660, arg_5661, arg_5662);
}
pub const GL_LUMINANCE12 = 0x8041;
pub const __UINT16_FMTX__ = "hX";
pub inline fn glWindowPos4sMESA(arg_5663: GLshort, arg_5664: GLshort, arg_5665: GLshort, arg_5666: GLshort) void {
    return epoxy_glWindowPos4sMESA.?(arg_5663, arg_5664, arg_5665, arg_5666);
}
pub const __STDC_ISO_10646__ = @as(c_long, 201706);
pub inline fn glBufferSubDataARB(arg_5667: GLenum, arg_5668: GLintptrARB, arg_5669: GLsizeiptrARB, arg_5670: ?*const c_void) void {
    return epoxy_glBufferSubDataARB.?(arg_5667, arg_5668, arg_5669, arg_5670);
}
pub inline fn glClearDepth(arg_5671: GLdouble) void {
    return epoxy_glClearDepth.?(arg_5671);
}
pub const GL_FRAGMENT_LIGHT4_SGIX = 0x8410;
pub const GL_PIXEL_PACK_BUFFER_BINDING = 0x88ED;
pub const GL_UNSIGNED_INT64_NV = 0x140F;
pub const GL_SRC1_ALPHA = 0x8589;
pub const GL_DOT_PRODUCT_TEXTURE_3D_NV = 0x86EF;
pub const SCNuFAST64 = __PRI64_PREFIX ++ "u";
pub const GL_INT_VEC2 = 0x8B53;
pub const GL_PRIMITIVES_GENERATED = 0x8C87;
pub const GL_PIXEL_PACK_BUFFER_ARB = 0x88EB;
pub inline fn glTextureStorageMem3DMultisampleEXT(arg_5672: GLuint, arg_5673: GLsizei, arg_5674: GLenum, arg_5675: GLsizei, arg_5676: GLsizei, arg_5677: GLsizei, arg_5678: GLboolean, arg_5679: GLuint, arg_5680: GLuint64) void {
    return epoxy_glTextureStorageMem3DMultisampleEXT.?(arg_5672, arg_5673, arg_5674, arg_5675, arg_5676, arg_5677, arg_5678, arg_5679, arg_5680);
}
pub const GL_TEXTURE_COORD_ARRAY_TYPE = 0x8089;
pub const GL_INTERNALFORMAT_BLUE_TYPE = 0x827A;
pub inline fn glDeleteProgram(arg_5681: GLuint) void {
    return epoxy_glDeleteProgram.?(arg_5681);
}
pub const __SSE2__ = 1;
pub const GL_MAP1_TEXTURE_COORD_2 = 0x0D94;
pub const GL_RENDERBUFFER_BLUE_SIZE_OES = 0x8D52;
pub inline fn glTexCoord4sv(arg_5682: [*c]const GLshort) void {
    return epoxy_glTexCoord4sv.?(arg_5682);
}
pub inline fn glVertexAttrib4dARB(arg_5683: GLuint, arg_5684: GLdouble, arg_5685: GLdouble, arg_5686: GLdouble, arg_5687: GLdouble) void {
    return epoxy_glVertexAttrib4dARB.?(arg_5683, arg_5684, arg_5685, arg_5686, arg_5687);
}
pub inline fn glVertexAttribI4uivEXT(arg_5688: GLuint, arg_5689: [*c]const GLuint) void {
    return epoxy_glVertexAttribI4uivEXT.?(arg_5688, arg_5689);
}
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS = 0x82F2;
pub const GL_DRAW_ARRAYS_STRIP_COMMAND_NV = 0x0005;
pub const GL_T4F_V4F = 0x2A28;
pub const GL_TEXTURE24_ARB = 0x84D8;
pub inline fn glVertex3iv(arg_5690: [*c]const GLint) void {
    return epoxy_glVertex3iv.?(arg_5690);
}
pub const GL_RELATIVE_LARGE_CCW_ARC_TO_NV = 0x17;
pub const GL_PATH_TRANSPOSE_MODELVIEW_MATRIX_NV = 0x84E3;
pub inline fn glMultiDrawElements(arg_5691: GLenum, arg_5692: [*c]const GLsizei, arg_5693: GLenum, arg_5694: [*c]const ?*const c_void, arg_5695: GLsizei) void {
    return epoxy_glMultiDrawElements.?(arg_5691, arg_5692, arg_5693, arg_5694, arg_5695);
}
pub const GL_FLAT = 0x1D00;
pub inline fn glClearBufferuiv(arg_5696: GLenum, arg_5697: GLint, arg_5698: [*c]const GLuint) void {
    return epoxy_glClearBufferuiv.?(arg_5696, arg_5697, arg_5698);
}
pub const GL_NV_fragment_program2 = 1;
pub inline fn glSecondaryColor3ub(arg_5699: GLubyte, arg_5700: GLubyte, arg_5701: GLubyte) void {
    return epoxy_glSecondaryColor3ub.?(arg_5699, arg_5700, arg_5701);
}
pub const GL_DOUBLE_MAT4x2_EXT = 0x8F4D;
pub inline fn glBindVideoCaptureStreamTextureNV(arg_5702: GLuint, arg_5703: GLuint, arg_5704: GLenum, arg_5705: GLenum, arg_5706: GLuint) void {
    return epoxy_glBindVideoCaptureStreamTextureNV.?(arg_5702, arg_5703, arg_5704, arg_5705, arg_5706);
}
pub inline fn glNormal3bv(arg_5707: [*c]const GLbyte) void {
    return epoxy_glNormal3bv.?(arg_5707);
}
pub const GL_EXT_multi_draw_indirect = 1;
pub const GL_ONE_MINUS_CONSTANT_ALPHA = 0x8004;
pub const GL_SECONDARY_COLOR_ARRAY_BUFFER_BINDING_ARB = 0x889C;
pub const GL_FONT_TARGET_UNAVAILABLE_NV = 0x9369;
pub const GL_MODELVIEW14_ARB = 0x872E;
pub const GL_NVX_linked_gpu_multicast = 1;
pub const GL_LUMINANCE_ALPHA8UI_EXT = 0x8D81;
pub inline fn glAreTexturesResident(arg_5708: GLsizei, arg_5709: [*c]const GLuint, arg_5710: [*c]GLboolean) GLboolean {
    return epoxy_glAreTexturesResident.?(arg_5708, arg_5709, arg_5710);
}
pub inline fn glColor3fVertex3fSUN(arg_5711: GLfloat, arg_5712: GLfloat, arg_5713: GLfloat, arg_5714: GLfloat, arg_5715: GLfloat, arg_5716: GLfloat) void {
    return epoxy_glColor3fVertex3fSUN.?(arg_5711, arg_5712, arg_5713, arg_5714, arg_5715, arg_5716);
}
pub const GL_COMBINER2_NV = 0x8552;
pub const GL_INTENSITY8_SNORM = 0x9017;
pub const GL_INTENSITY_FLOAT32_APPLE = 0x8817;
pub const __WCHAR_TYPE__ = c_int;
pub const GL_MAX_COMPUTE_TEXTURE_IMAGE_UNITS = 0x91BC;
pub const GL_CONSERVATIVE_RASTERIZATION_NV = 0x9346;
pub const GL_ARB_texture_env_combine = 1;
pub const GL_OPERAND2_ALPHA_EXT = 0x859A;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_EXT = 0x9067;
pub const GL_MAX_VIEWPORTS_NV = 0x825B;
pub const GL_MAX_UNIFORM_LOCATIONS = 0x826E;
pub const GL_SLUMINANCE8_NV = 0x8C47;
pub const GL_AMD_conservative_depth = 1;
pub const GL_MAX_3D_TEXTURE_SIZE_OES = 0x8073;
pub const GL_CLAMP_TO_EDGE = 0x812F;
pub inline fn glCompileCommandListNV(arg_5717: GLuint) void {
    return epoxy_glCompileCommandListNV.?(arg_5717);
}
pub const GL_INT = 0x1404;
pub const GL_OBJECT_SUBTYPE_ARB = 0x8B4F;
pub const GL_COLOR_ATTACHMENT7_EXT = 0x8CE7;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900E;
pub const GL_T2F_V3F = 0x2A27;
pub const GL_INDEX_BITS = 0x0D51;
pub inline fn glGetAttribLocation(arg_5718: GLuint, arg_5719: [*c]const GLchar) GLint {
    return epoxy_glGetAttribLocation.?(arg_5718, arg_5719);
}
pub const GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB = 0x8B87;
pub inline fn glGetProgramResourcefvNV(arg_5720: GLuint, arg_5721: GLenum, arg_5722: GLuint, arg_5723: GLsizei, arg_5724: [*c]const GLenum, arg_5725: GLsizei, arg_5726: [*c]GLsizei, arg_5727: [*c]GLfloat) void {
    return epoxy_glGetProgramResourcefvNV.?(arg_5720, arg_5721, arg_5722, arg_5723, arg_5724, arg_5725, arg_5726, arg_5727);
}
pub const GL_ARB_shader_ballot = 1;
pub inline fn glFramebufferTexture2DEXT(arg_5728: GLenum, arg_5729: GLenum, arg_5730: GLenum, arg_5731: GLuint, arg_5732: GLint) void {
    return epoxy_glFramebufferTexture2DEXT.?(arg_5728, arg_5729, arg_5730, arg_5731, arg_5732);
}
pub inline fn glActiveStencilFaceEXT(arg_5733: GLenum) void {
    return epoxy_glActiveStencilFaceEXT.?(arg_5733);
}
pub const __USE_EXTERN_INLINES = 1;
pub const __INT64_C_SUFFIX__ = L;
pub const __CLANG_ATOMIC_INT_LOCK_FREE = 2;
pub const GL_CON_24_ATI = 0x8959;
pub inline fn glGetProgramLocalParameterfvARB(arg_5734: GLenum, arg_5735: GLuint, arg_5736: [*c]GLfloat) void {
    return epoxy_glGetProgramLocalParameterfvARB.?(arg_5734, arg_5735, arg_5736);
}
pub inline fn glWindowPos2svARB(arg_5737: [*c]const GLshort) void {
    return epoxy_glWindowPos2svARB.?(arg_5737);
}
pub const PRIX8 = "X";
pub inline fn glProgramUniform4ui64vARB(arg_5738: GLuint, arg_5739: GLint, arg_5740: GLsizei, arg_5741: [*c]const GLuint64) void {
    return epoxy_glProgramUniform4ui64vARB.?(arg_5738, arg_5739, arg_5740, arg_5741);
}
pub inline fn glVertex2hNV(arg_5742: GLhalfNV, arg_5743: GLhalfNV) void {
    return epoxy_glVertex2hNV.?(arg_5742, arg_5743);
}
pub const GL_DEPENDENT_GB_TEXTURE_2D_NV = 0x86EA;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT = 0x8D44;
pub const GL_SAMPLE_MASK_EXT = 0x80A0;
pub const GL_TRACE_NAME_MESA = 0x8756;
pub inline fn glProgramUniformMatrix3x4dvEXT(arg_5744: GLuint, arg_5745: GLint, arg_5746: GLsizei, arg_5747: GLboolean, arg_5748: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x4dvEXT.?(arg_5744, arg_5745, arg_5746, arg_5747, arg_5748);
}
pub const GL_OBJECT_DISTANCE_TO_POINT_SGIS = 0x81F1;
pub const GL_MAT_EMISSION_BIT_PGI = 0x00800000;
pub const GL_ATOMIC_COUNTER_BUFFER_DATA_SIZE = 0x92C4;
pub inline fn glGenProgramPipelinesEXT(arg_5749: GLsizei, arg_5750: [*c]GLuint) void {
    return epoxy_glGenProgramPipelinesEXT.?(arg_5749, arg_5750);
}
pub const GL_AUX_DEPTH_STENCIL_APPLE = 0x8A14;
pub const GL_BLEND_EQUATION_ALPHA_EXT = 0x883D;
pub inline fn glGetVertexAttribPointerv(arg_5751: GLuint, arg_5752: GLenum, arg_5753: [*c]?*c_void) void {
    return epoxy_glGetVertexAttribPointerv.?(arg_5751, arg_5752, arg_5753);
}
pub inline fn glCopyTextureLevelsAPPLE(arg_5754: GLuint, arg_5755: GLuint, arg_5756: GLint, arg_5757: GLsizei) void {
    return epoxy_glCopyTextureLevelsAPPLE.?(arg_5754, arg_5755, arg_5756, arg_5757);
}
pub const GL_TEXTURE_VIEW_MIN_LAYER_OES = 0x82DD;
pub const GL_BACK_PRIMARY_COLOR_NV = 0x8C77;
pub const GL_ARB_texture_rgb10_a2ui = 1;
pub const GL_SGIX_framezoom = 1;
pub const GL_HISTOGRAM = 0x8024;
pub const GL_COLOR_INDEX4_EXT = 0x80E4;
pub const GL_SHADER_COMPILER = 0x8DFA;
pub const __DBL_DIG__ = 15;
pub inline fn glUniform2ivARB(arg_5758: GLint, arg_5759: GLsizei, arg_5760: [*c]const GLint) void {
    return epoxy_glUniform2ivARB.?(arg_5758, arg_5759, arg_5760);
}
pub const GL_ARB_shader_bit_encoding = 1;
pub const GL_SGIX_texture_add_env = 1;
pub const PRIxLEAST8 = "x";
pub inline fn glCompileShader(arg_5761: GLuint) void {
    return epoxy_glCompileShader.?(arg_5761);
}
pub const GL_AMD_sample_positions = 1;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_EXT = 0x825F;
pub inline fn __bos(ptr: var) @TypeOf(__builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1)) {
    return __builtin_object_size(ptr, __USE_FORTIFY_LEVEL > 1);
}
pub inline fn glDeleteFramebuffersOES(arg_5762: GLsizei, arg_5763: [*c]const GLuint) void {
    return epoxy_glDeleteFramebuffersOES.?(arg_5762, arg_5763);
}
pub const GL_SHADING_RATE_SAMPLE_ORDER_SAMPLE_MAJOR_NV = 0x95B0;
pub inline fn glGetPixelTexGenParameterfvSGIS(arg_5764: GLenum, arg_5765: [*c]GLfloat) void {
    return epoxy_glGetPixelTexGenParameterfvSGIS.?(arg_5764, arg_5765);
}
pub const GL_CURRENT_VERTEX_EXT = 0x87E2;
pub const GL_PROGRAM_SEPARABLE = 0x8258;
pub const GL_ATI_map_object_buffer = 1;
pub const GL_LUMINANCE16 = 0x8042;
pub const GL_EXT_clip_control = 1;
pub const GL_OES_packed_depth_stencil = 1;
pub inline fn glProgramUniform2iv(arg_5766: GLuint, arg_5767: GLint, arg_5768: GLsizei, arg_5769: [*c]const GLint) void {
    return epoxy_glProgramUniform2iv.?(arg_5766, arg_5767, arg_5768, arg_5769);
}
pub const GL_CONVOLUTION_FORMAT_EXT = 0x8017;
pub inline fn glEnableVertexAttribArray(arg_5770: GLuint) void {
    return epoxy_glEnableVertexAttribArray.?(arg_5770);
}
pub const GL_INT_IMAGE_2D_RECT_EXT = 0x905A;
pub const __INT32_TYPE__ = c_int;
pub const GL_RG8_SNORM = 0x8F95;
pub const GL_INT_SAMPLER_BUFFER = 0x8DD0;
pub const GL_NV_vertex_program4 = 1;
pub inline fn glGenFramebuffersOES(arg_5771: GLsizei, arg_5772: [*c]GLuint) void {
    return epoxy_glGenFramebuffersOES.?(arg_5771, arg_5772);
}
pub const GL_BLEND_COLOR = 0x8005;
pub const GL_INTENSITY32UI_EXT = 0x8D73;
pub const GL_TEXTURE_SWIZZLE_B_EXT = 0x8E44;
pub const GL_UNSIGNED_INT_SAMPLER_2D_RECT = 0x8DD5;
pub const GL_QUADRATIC_CURVE_TO_NV = 0x0A;
pub inline fn glVariantusvEXT(arg_5773: GLuint, arg_5774: [*c]const GLushort) void {
    return epoxy_glVariantusvEXT.?(arg_5773, arg_5774);
}
pub const GL_MAX_MESH_ATOMIC_COUNTER_BUFFERS_NV = 0x8E64;
pub const GL_EXT_coordinate_frame = 1;
pub const GL_DEPTH32F_STENCIL8_NV = 0x8DAC;
pub const GL_MAX_TEXTURE_COORDS = 0x8871;
pub const GL_MATRIX29_ARB = 0x88DD;
pub const GL_NV_fragment_program = 1;
pub inline fn glUniform1ui64vNV(arg_5775: GLint, arg_5776: GLsizei, arg_5777: [*c]const GLuint64EXT) void {
    return epoxy_glUniform1ui64vNV.?(arg_5775, arg_5776, arg_5777);
}
pub const GL_SAMPLER_EXTERNAL_OES = 0x8D66;
pub inline fn glVertexAttrib4uiv(arg_5778: GLuint, arg_5779: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4uiv.?(arg_5778, arg_5779);
}
pub const GL_TEXTURE_SWIZZLE_G_EXT = 0x8E43;
pub const GL_R16F_EXT = 0x822D;
pub const GL_FONT_UNDERLINE_THICKNESS_BIT_NV = 0x08000000;
pub const GL_WRAP_BORDER_SUN = 0x81D4;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_ANGLE = 0x8D56;
pub const GL_AMD_shader_trinary_minmax = 1;
pub const GL_VIEW_CLASS_EAC_R11 = 0x9383;
pub const __SSE_MATH__ = 1;
pub const GL_EXT_memory_object_fd = 1;
pub const GL_SLUMINANCE8_ALPHA8_EXT = 0x8C45;
pub inline fn glPixelTransferxOES(arg_5780: GLenum, arg_5781: GLfixed) void {
    return epoxy_glPixelTransferxOES.?(arg_5780, arg_5781);
}
pub const GL_LUMINANCE_INTEGER_EXT = 0x8D9C;
pub const GL_FRAGMENT_COLOR_MATERIAL_PARAMETER_SGIX = 0x8403;
pub const GL_COLOR3_BIT_PGI = 0x00010000;
pub const GL_FOG_FUNC_SGIS = 0x812A;
pub const GL_LIGHT_MODEL_COLOR_CONTROL = 0x81F8;
pub inline fn glFramebufferTextureLayerARB(arg_5782: GLenum, arg_5783: GLenum, arg_5784: GLuint, arg_5785: GLint, arg_5786: GLint) void {
    return epoxy_glFramebufferTextureLayerARB.?(arg_5782, arg_5783, arg_5784, arg_5785, arg_5786);
}
pub const GL_PATH_MITER_LIMIT_NV = 0x907A;
pub const GL_NO_RESET_NOTIFICATION = 0x8261;
pub const GL_SAMPLE_COVERAGE = 0x80A0;
pub const GL_NV_texture_shader = 1;
pub const __WCHAR_MIN = -__WCHAR_MAX - 1;
pub inline fn glMulticastBarrierNV() void {
    return epoxy_glMulticastBarrierNV.?();
}
pub const GL_RGB_FLOAT16_APPLE = 0x881B;
pub const GL_LIGHTEN_KHR = 0x9298;
pub inline fn glRenderbufferStorageMultisampleANGLE(arg_5787: GLenum, arg_5788: GLsizei, arg_5789: GLenum, arg_5790: GLsizei, arg_5791: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleANGLE.?(arg_5787, arg_5788, arg_5789, arg_5790, arg_5791);
}
pub const GL_LOCAL_CONSTANT_VALUE_EXT = 0x87EC;
pub inline fn glTexBufferEXT(arg_5792: GLenum, arg_5793: GLenum, arg_5794: GLuint) void {
    return epoxy_glTexBufferEXT.?(arg_5792, arg_5793, arg_5794);
}
pub const __UINTPTR_FMTo__ = "lo";
pub const __INT32_MAX__ = 2147483647;
pub const GL_CONIC_CURVE_TO_NV = 0x1A;
pub const GL_LAYER_PROVOKING_VERTEX_OES = 0x825E;
pub const GL_EXT_texture_border_clamp = 1;
pub const GL_MAX_ASYNC_READ_PIXELS_SGIX = 0x8361;
pub const GL_NORMAL_ARRAY_BUFFER_BINDING = 0x8897;
pub const __USE_ISOC11 = 1;
pub const GL_OES_compressed_ETC1_RGB8_texture = 1;
pub const GL_OUTPUT_TEXTURE_COORD27_EXT = 0x87B8;
pub const GL_TEXTURE_LOD_BIAS_S_SGIX = 0x818E;
pub inline fn glGetSamplerParameterIuivEXT(arg_5795: GLuint, arg_5796: GLenum, arg_5797: [*c]GLuint) void {
    return epoxy_glGetSamplerParameterIuivEXT.?(arg_5795, arg_5796, arg_5797);
}
pub inline fn glCoverStrokePathInstancedNV(arg_5798: GLsizei, arg_5799: GLenum, arg_5800: ?*const c_void, arg_5801: GLuint, arg_5802: GLenum, arg_5803: GLenum, arg_5804: [*c]const GLfloat) void {
    return epoxy_glCoverStrokePathInstancedNV.?(arg_5798, arg_5799, arg_5800, arg_5801, arg_5802, arg_5803, arg_5804);
}
pub const GL_TEXTURE_ALPHA_TYPE = 0x8C13;
pub inline fn glVertexAttribs3svNV(arg_5805: GLuint, arg_5806: GLsizei, arg_5807: [*c]const GLshort) void {
    return epoxy_glVertexAttribs3svNV.?(arg_5805, arg_5806, arg_5807);
}
pub inline fn __ASMNAME2(prefix: var, cname: var) @TypeOf(__STRING(prefix) ++ cname) {
    return __STRING(prefix) ++ cname;
}
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_COUNT_ARB = 0x8DA9;
pub const __PTRDIFF_FMTd__ = "ld";
pub const GL_DISPATCH_INDIRECT_BUFFER = 0x90EE;
pub inline fn glPointParameteriNV(arg_5808: GLenum, arg_5809: GLint) void {
    return epoxy_glPointParameteriNV.?(arg_5808, arg_5809);
}
pub const GL_CLIP_DISTANCE6 = 0x3006;
pub inline fn glGenRenderbuffersEXT(arg_5810: GLsizei, arg_5811: [*c]GLuint) void {
    return epoxy_glGenRenderbuffersEXT.?(arg_5810, arg_5811);
}
pub inline fn glProgramUniform2i64NV(arg_5812: GLuint, arg_5813: GLint, arg_5814: GLint64EXT, arg_5815: GLint64EXT) void {
    return epoxy_glProgramUniform2i64NV.?(arg_5812, arg_5813, arg_5814, arg_5815);
}
pub const GL_UNSIGNED_INT8_VEC2_NV = 0x8FED;
pub const GL_UNSIGNED_NORMALIZED_ARB = 0x8C17;
pub inline fn glCreateShaderProgramEXT(arg_5816: GLenum, arg_5817: [*c]const GLchar) GLuint {
    return epoxy_glCreateShaderProgramEXT.?(arg_5816, arg_5817);
}
pub const GL_PACK_CMYK_HINT_EXT = 0x800E;
pub inline fn glConvolutionParameterfv(arg_5818: GLenum, arg_5819: GLenum, arg_5820: [*c]const GLfloat) void {
    return epoxy_glConvolutionParameterfv.?(arg_5818, arg_5819, arg_5820);
}
pub inline fn glGetTextureParameteriv(arg_5821: GLuint, arg_5822: GLenum, arg_5823: [*c]GLint) void {
    return epoxy_glGetTextureParameteriv.?(arg_5821, arg_5822, arg_5823);
}
pub inline fn glDeleteSyncAPPLE(arg_5824: GLsync) void {
    return epoxy_glDeleteSyncAPPLE.?(arg_5824);
}
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS_NV = 0x8C8B;
pub const GL_MATRIX28_ARB = 0x88DC;
pub const GL_SGIX_async = 1;
pub const GL_TESS_CONTROL_PROGRAM_NV = 0x891E;
pub const GL_FRAGMENT_SHADER_ARB = 0x8B30;
pub const GL_ARB_draw_instanced = 1;
pub const __SIZEOF_DOUBLE__ = 8;
pub const GL_CON_16_ATI = 0x8951;
pub const GL_POLYGON_BIT = 0x00000008;
pub const GL_SAMPLER_1D_ARRAY_SHADOW_EXT = 0x8DC3;
pub inline fn glGetVideoi64vNV(arg_5825: GLuint, arg_5826: GLenum, arg_5827: [*c]GLint64EXT) void {
    return epoxy_glGetVideoi64vNV.?(arg_5825, arg_5826, arg_5827);
}
pub const GL_SGIX_convolution_accuracy = 1;
pub const GL_NORMAL_ARRAY_LENGTH_NV = 0x8F2C;
pub const GL_MAX_GEOMETRY_PROGRAM_INVOCATIONS_NV = 0x8E5A;
pub const GL_NV_multisample_coverage = 1;
pub const GL_MATRIX_INDEX_ARRAY_OES = 0x8844;
pub const GL_PACK_MAX_COMPRESSED_SIZE_SGIX = 0x831B;
pub const GL_FLOAT16_MAT4x3_AMD = 0x91CD;
pub const GL_DRAW_BUFFER15_EXT = 0x8834;
pub inline fn glColor3fv(arg_5828: [*c]const GLfloat) void {
    return epoxy_glColor3fv.?(arg_5828);
}
pub const GL_OPERAND2_RGB_EXT = 0x8592;
pub const GL_VIEW_CLASS_ASTC_12x10_RGBA = 0x9394;
pub const GL_IMAGE_CLASS_2_X_8 = 0x82C0;
pub inline fn glGetObjectLabelEXT(arg_5829: GLenum, arg_5830: GLuint, arg_5831: GLsizei, arg_5832: [*c]GLsizei, arg_5833: [*c]GLchar) void {
    return epoxy_glGetObjectLabelEXT.?(arg_5829, arg_5830, arg_5831, arg_5832, arg_5833);
}
pub inline fn glCopyTexImage2DEXT(arg_5834: GLenum, arg_5835: GLint, arg_5836: GLenum, arg_5837: GLint, arg_5838: GLint, arg_5839: GLsizei, arg_5840: GLsizei, arg_5841: GLint) void {
    return epoxy_glCopyTexImage2DEXT.?(arg_5834, arg_5835, arg_5836, arg_5837, arg_5838, arg_5839, arg_5840, arg_5841);
}
pub const GL_VERTEX_ARRAY_LIST_STRIDE_IBM = 103080;
pub const _FEATURES_H = 1;
pub const GL_PROXY_TEXTURE_1D_ARRAY = 0x8C19;
pub inline fn glGenFramebuffers(arg_5842: GLsizei, arg_5843: [*c]GLuint) void {
    return epoxy_glGenFramebuffers.?(arg_5842, arg_5843);
}
pub inline fn glGetInternalformativ(arg_5844: GLenum, arg_5845: GLenum, arg_5846: GLenum, arg_5847: GLsizei, arg_5848: [*c]GLint) void {
    return epoxy_glGetInternalformativ.?(arg_5844, arg_5845, arg_5846, arg_5847, arg_5848);
}
pub inline fn glShaderOp3EXT(arg_5849: GLenum, arg_5850: GLuint, arg_5851: GLuint, arg_5852: GLuint, arg_5853: GLuint) void {
    return epoxy_glShaderOp3EXT.?(arg_5849, arg_5850, arg_5851, arg_5852, arg_5853);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT = 0x8CD3;
pub const GL_GEOMETRY_VERTICES_OUT_ARB = 0x8DDA;
pub const GL_LINEAR = 0x2601;
pub const GL_UNDEFINED_VERTEX_OES = 0x8260;
pub const GL_DUDV_ATI = 0x8779;
pub const GL_PHONG_HINT_WIN = 0x80EB;
pub const GL_PROGRAM_PIPELINE_BINDING_EXT = 0x825A;
pub inline fn __bos0(ptr: var) @TypeOf(__builtin_object_size(ptr, 0)) {
    return __builtin_object_size(ptr, 0);
}
pub const GL_MAX_COMPUTE_UNIFORM_COMPONENTS = 0x8263;
pub const GL_EXT_texture_sRGB_decode = 1;
pub inline fn glNamedProgramLocalParametersI4uivEXT(arg_5854: GLuint, arg_5855: GLenum, arg_5856: GLuint, arg_5857: GLsizei, arg_5858: [*c]const GLuint) void {
    return epoxy_glNamedProgramLocalParametersI4uivEXT.?(arg_5854, arg_5855, arg_5856, arg_5857, arg_5858);
}
pub const GL_DEBUG_CALLBACK_FUNCTION_ARB = 0x8244;
pub inline fn glFlushMappedBufferRangeEXT(arg_5859: GLenum, arg_5860: GLintptr, arg_5861: GLsizeiptr) void {
    return epoxy_glFlushMappedBufferRangeEXT.?(arg_5859, arg_5860, arg_5861);
}
pub const __PTRDIFF_FMTi__ = "li";
pub inline fn glGetVideoivNV(arg_5862: GLuint, arg_5863: GLenum, arg_5864: [*c]GLint) void {
    return epoxy_glGetVideoivNV.?(arg_5862, arg_5863, arg_5864);
}
pub const GL_REG_22_ATI = 0x8937;
pub const GL_SAMPLER_2D_ARRAY_EXT = 0x8DC1;
pub inline fn glSecondaryColor3sv(arg_5865: [*c]const GLshort) void {
    return epoxy_glSecondaryColor3sv.?(arg_5865);
}
pub inline fn glDrawArraysInstancedEXT(arg_5866: GLenum, arg_5867: GLint, arg_5868: GLsizei, arg_5869: GLsizei) void {
    return epoxy_glDrawArraysInstancedEXT.?(arg_5866, arg_5867, arg_5868, arg_5869);
}
pub const GL_STENCIL_INDEX8 = 0x8D48;
pub const GL_AFFINE_2D_NV = 0x9092;
pub const GL_COLOR_BUFFER_BIT1_QCOM = 0x00000002;
pub inline fn glProgramUniform4ui64ARB(arg_5870: GLuint, arg_5871: GLint, arg_5872: GLuint64, arg_5873: GLuint64, arg_5874: GLuint64, arg_5875: GLuint64) void {
    return epoxy_glProgramUniform4ui64ARB.?(arg_5870, arg_5871, arg_5872, arg_5873, arg_5874, arg_5875);
}
pub inline fn glMatrixPopEXT(arg_5876: GLenum) void {
    return epoxy_glMatrixPopEXT.?(arg_5876);
}
pub inline fn glMultiTexRenderbufferEXT(arg_5877: GLenum, arg_5878: GLenum, arg_5879: GLuint) void {
    return epoxy_glMultiTexRenderbufferEXT.?(arg_5877, arg_5878, arg_5879);
}
pub const SCNdFAST16 = __PRIPTR_PREFIX ++ "d";
pub const GL_NUM_SHADER_BINARY_FORMATS = 0x8DF9;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS_EXT = 0x8F39;
pub const GL_MAX_TRACK_MATRIX_STACK_DEPTH_NV = 0x862E;
pub inline fn glGetFixedv(arg_5880: GLenum, arg_5881: [*c]GLfixed) void {
    return epoxy_glGetFixedv.?(arg_5880, arg_5881);
}
pub inline fn glFogCoordPointerEXT(arg_5882: GLenum, arg_5883: GLsizei, arg_5884: ?*const c_void) void {
    return epoxy_glFogCoordPointerEXT.?(arg_5882, arg_5883, arg_5884);
}
pub inline fn glGetTexGenxvOES(arg_5885: GLenum, arg_5886: GLenum, arg_5887: [*c]GLfixed) void {
    return epoxy_glGetTexGenxvOES.?(arg_5885, arg_5886, arg_5887);
}
pub const GL_FAILURE_NV = 0x9030;
pub const GL_GEOMETRY_SHADER_INVOCATIONS = 0x887F;
pub inline fn glPrimitiveRestartIndexNV(arg_5888: GLuint) void {
    return epoxy_glPrimitiveRestartIndexNV.?(arg_5888);
}
pub const GL_MODELVIEW17_ARB = 0x8731;
pub inline fn glUniform3ui64NV(arg_5889: GLint, arg_5890: GLuint64EXT, arg_5891: GLuint64EXT, arg_5892: GLuint64EXT) void {
    return epoxy_glUniform3ui64NV.?(arg_5889, arg_5890, arg_5891, arg_5892);
}
pub const GL_COLOR_BUFFER_BIT2_QCOM = 0x00000004;
pub const GL_INT64_VEC2_ARB = 0x8FE9;
pub const GL_MAX_CONVOLUTION_HEIGHT = 0x801B;
pub inline fn glWaitVkSemaphoreNV(arg_5893: GLuint64) void {
    return epoxy_glWaitVkSemaphoreNV.?(arg_5893);
}
pub const UINT_FAST64_MAX = __UINT64_C(18446744073709551615);
pub inline fn glSampleCoveragex(arg_5894: GLclampx, arg_5895: GLboolean) void {
    return epoxy_glSampleCoveragex.?(arg_5894, arg_5895);
}
pub inline fn glSampleMaskSGIS(arg_5896: GLclampf, arg_5897: GLboolean) void {
    return epoxy_glSampleMaskSGIS.?(arg_5896, arg_5897);
}
pub const GL_EXCLUSION_KHR = 0x92A0;
pub inline fn glPathGlyphIndexArrayNV(arg_5898: GLuint, arg_5899: GLenum, arg_5900: ?*const c_void, arg_5901: GLbitfield, arg_5902: GLuint, arg_5903: GLsizei, arg_5904: GLuint, arg_5905: GLfloat) GLenum {
    return epoxy_glPathGlyphIndexArrayNV.?(arg_5898, arg_5899, arg_5900, arg_5901, arg_5902, arg_5903, arg_5904, arg_5905);
}
pub const GL_DOT3_RGBA_ARB = 0x86AF;
pub const GL_TEXTURE28 = 0x84DC;
pub const GL_TEXTURE_GATHER = 0x82A2;
pub const GL_OES_shader_io_blocks = 1;
pub const GL_RGBA_DXT5_S3TC = 0x83A4;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE_SGI = 0x80B5;
pub const GL_DEBUG_SEVERITY_LOW = 0x9148;
pub const GL_CONSTANT_NV = 0x8576;
pub const GL_GLYPH_HORIZONTAL_BEARING_X_BIT_NV = 0x04;
pub const GL_DELETE_STATUS = 0x8B80;
pub const GL_NEGATIVE_ONE_TO_ONE_EXT = 0x935E;
pub const GL_EXT_texture_compression_latc = 1;
pub const SCNoLEAST64 = __PRI64_PREFIX ++ "o";
pub const GL_TRANSPOSE_COLOR_MATRIX_ARB = 0x84E6;
pub inline fn glColor3s(arg_5906: GLshort, arg_5907: GLshort, arg_5908: GLshort) void {
    return epoxy_glColor3s.?(arg_5906, arg_5907, arg_5908);
}
pub const GL_MULTISAMPLE_BUFFER_BIT0_QCOM = 0x01000000;
pub const GL_ARB_internalformat_query = 1;
pub const GL_MODELVIEW28_ARB = 0x873C;
pub const __UINT_LEAST64_FMTx__ = "lx";
pub const GL_IMAGE_TRANSLATE_X_HP = 0x8157;
pub const GL_EXT_multi_draw_arrays = 1;
pub const _BITS_STDINT_INTN_H = 1;
pub const GL_HI_BIAS_NV = 0x8714;
pub const GL_TEXTURE_PRIORITY = 0x8066;
pub inline fn glPixelStoref(arg_5909: GLenum, arg_5910: GLfloat) void {
    return epoxy_glPixelStoref.?(arg_5909, arg_5910);
}
pub const GL_DECR_WRAP = 0x8508;
pub inline fn glTexCoordP3ui(arg_5911: GLenum, arg_5912: GLuint) void {
    return epoxy_glTexCoordP3ui.?(arg_5911, arg_5912);
}
pub const GL_APPLE_vertex_program_evaluators = 1;
pub inline fn glUniform4ui64NV(arg_5913: GLint, arg_5914: GLuint64EXT, arg_5915: GLuint64EXT, arg_5916: GLuint64EXT, arg_5917: GLuint64EXT) void {
    return epoxy_glUniform4ui64NV.?(arg_5913, arg_5914, arg_5915, arg_5916, arg_5917);
}
pub inline fn glUniformMatrix3fvARB(arg_5918: GLint, arg_5919: GLsizei, arg_5920: GLboolean, arg_5921: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3fvARB.?(arg_5918, arg_5919, arg_5920, arg_5921);
}
pub const GL_FOG_INDEX = 0x0B61;
pub inline fn glFragmentLightModelfvSGIX(arg_5922: GLenum, arg_5923: [*c]const GLfloat) void {
    return epoxy_glFragmentLightModelfvSGIX.?(arg_5922, arg_5923);
}
pub const GL_ATOMIC_COUNTER_BUFFER_BINDING = 0x92C1;
pub const GL_BLUE_INTEGER_EXT = 0x8D96;
pub inline fn glVertexArrayEdgeFlagOffsetEXT(arg_5924: GLuint, arg_5925: GLuint, arg_5926: GLsizei, arg_5927: GLintptr) void {
    return epoxy_glVertexArrayEdgeFlagOffsetEXT.?(arg_5924, arg_5925, arg_5926, arg_5927);
}
pub const GL_YCBCR_422_APPLE = 0x85B9;
pub inline fn glColor3ub(arg_5928: GLubyte, arg_5929: GLubyte, arg_5930: GLubyte) void {
    return epoxy_glColor3ub.?(arg_5928, arg_5929, arg_5930);
}
pub const GL_TRACE_ERRORS_BIT_MESA = 0x0020;
pub const GL_DRAW_BUFFER4_NV = 0x8829;
pub const __SIZE_FMTu__ = "lu";
pub const GL_TRANSFORM_BIT = 0x00001000;
pub const GL_SM_COUNT_NV = 0x933B;
pub inline fn glRasterSamplesEXT(arg_5931: GLuint, arg_5932: GLboolean) void {
    return epoxy_glRasterSamplesEXT.?(arg_5931, arg_5932);
}
pub const GL_AMD_shader_stencil_export = 1;
pub const GL_Z4Y12Z4CB12Z4CR12_444_NV = 0x9037;
pub const GL_BUFFER = 0x82E0;
pub const GL_BLUE_BIT_ATI = 0x00000004;
pub inline fn glClampColorARB(arg_5933: GLenum, arg_5934: GLenum) void {
    return epoxy_glClampColorARB.?(arg_5933, arg_5934);
}
pub inline fn glConvolutionParameterfvEXT(arg_5935: GLenum, arg_5936: GLenum, arg_5937: [*c]const GLfloat) void {
    return epoxy_glConvolutionParameterfvEXT.?(arg_5935, arg_5936, arg_5937);
}
pub const GL_TEXTURE_VIEW_MIN_LEVEL = 0x82DB;
pub inline fn glTexCoordPointerListIBM(arg_5938: GLint, arg_5939: GLenum, arg_5940: GLint, arg_5941: [*c]?*const c_void, arg_5942: GLint) void {
    return epoxy_glTexCoordPointerListIBM.?(arg_5938, arg_5939, arg_5940, arg_5941, arg_5942);
}
pub inline fn glTangent3fvEXT(arg_5943: [*c]const GLfloat) void {
    return epoxy_glTangent3fvEXT.?(arg_5943);
}
pub inline fn glProgramEnvParameterI4uiNV(arg_5944: GLenum, arg_5945: GLuint, arg_5946: GLuint, arg_5947: GLuint, arg_5948: GLuint, arg_5949: GLuint) void {
    return epoxy_glProgramEnvParameterI4uiNV.?(arg_5944, arg_5945, arg_5946, arg_5947, arg_5948, arg_5949);
}
pub const GL_MAX_VARYING_COMPONENTS_EXT = 0x8B4B;
pub const GL_ARB_point_sprite = 1;
pub const GL_CUBIC_CURVE_TO_NV = 0x0C;
pub inline fn glResetHistogramEXT(arg_5950: GLenum) void {
    return epoxy_glResetHistogramEXT.?(arg_5950);
}
pub const GL_VIRTUAL_PAGE_SIZE_Y_ARB = 0x9196;
pub inline fn glVertexAttrib4Nubv(arg_5951: GLuint, arg_5952: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4Nubv.?(arg_5951, arg_5952);
}
pub const GL_VIEW_CLASS_S3TC_DXT1_RGBA = 0x82CD;
pub const GL_HP_image_transform = 1;
pub inline fn glTextureStorage2DMultisampleEXT(arg_5953: GLuint, arg_5954: GLenum, arg_5955: GLsizei, arg_5956: GLenum, arg_5957: GLsizei, arg_5958: GLsizei, arg_5959: GLboolean) void {
    return epoxy_glTextureStorage2DMultisampleEXT.?(arg_5953, arg_5954, arg_5955, arg_5956, arg_5957, arg_5958, arg_5959);
}
pub const GL_OPERAND2_ALPHA_ARB = 0x859A;
pub const GL_MAX_COMBINED_SHADER_OUTPUT_RESOURCES = 0x8F39;
pub const INTMAX_MIN = -__INT64_C(9223372036854775807) - 1;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 0x8C03;
pub inline fn glClearBufferiv(arg_5960: GLenum, arg_5961: GLint, arg_5962: [*c]const GLint) void {
    return epoxy_glClearBufferiv.?(arg_5960, arg_5961, arg_5962);
}
pub inline fn glMultiTexCoord3dvARB(arg_5963: GLenum, arg_5964: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord3dvARB.?(arg_5963, arg_5964);
}
pub const GL_R16_SNORM_EXT = 0x8F98;
pub inline fn glProgramUniformMatrix2x4dv(arg_5965: GLuint, arg_5966: GLint, arg_5967: GLsizei, arg_5968: GLboolean, arg_5969: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x4dv.?(arg_5965, arg_5966, arg_5967, arg_5968, arg_5969);
}
pub const GL_LEFT = 0x0406;
pub inline fn glGetVertexAttribdv(arg_5970: GLuint, arg_5971: GLenum, arg_5972: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribdv.?(arg_5970, arg_5971, arg_5972);
}
pub inline fn glScissorExclusiveArrayvNV(arg_5973: GLuint, arg_5974: GLsizei, arg_5975: [*c]const GLint) void {
    return epoxy_glScissorExclusiveArrayvNV.?(arg_5973, arg_5974, arg_5975);
}
pub const GL_SAMPLER = 0x82E6;
pub const GL_PIXEL_MAP_I_TO_I_SIZE = 0x0CB0;
pub const GL_QCOM_extended_get = 1;
pub const GL_RENDER = 0x1C00;
pub const GL_ATI_vertex_streams = 1;
pub const GL_DEPTH_BUFFER_BIT = 0x00000100;
pub const GL_SGI_texture_color_table = 1;
pub const GL_TRIANGLE_STRIP_ADJACENCY_EXT = 0x000D;
pub const GL_EXT_point_parameters = 1;
pub inline fn glBindTextureEXT(arg_5976: GLenum, arg_5977: GLuint) void {
    return epoxy_glBindTextureEXT.?(arg_5976, arg_5977);
}
pub const __UINT64_C_SUFFIX__ = UL;
pub const GL_FONT_MAX_ADVANCE_HEIGHT_BIT_NV = 0x02000000;
pub inline fn glPopAttrib() void {
    return epoxy_glPopAttrib.?();
}
pub inline fn glDeleteOcclusionQueriesNV(arg_5978: GLsizei, arg_5979: [*c]const GLuint) void {
    return epoxy_glDeleteOcclusionQueriesNV.?(arg_5978, arg_5979);
}
pub const GL_SATURATE_BIT_ATI = 0x00000040;
pub const __FSBLKCNT64_T_TYPE = __UQUAD_TYPE;
pub inline fn glNormalPointervINTEL(arg_5980: GLenum, arg_5981: [*c]?*const c_void) void {
    return epoxy_glNormalPointervINTEL.?(arg_5980, arg_5981);
}
pub const GL_4PASS_1_EXT = 0x80A5;
pub const GL_OUTPUT_FOG_EXT = 0x87BD;
pub inline fn glGetShaderiv(arg_5982: GLuint, arg_5983: GLenum, arg_5984: [*c]GLint) void {
    return epoxy_glGetShaderiv.?(arg_5982, arg_5983, arg_5984);
}
pub const GL_ELEMENT_ARRAY_BUFFER = 0x8893;
pub inline fn glGetFloatv(arg_5985: GLenum, arg_5986: [*c]GLfloat) void {
    return epoxy_glGetFloatv.?(arg_5985, arg_5986);
}
pub inline fn glUnlockArraysEXT() void {
    return epoxy_glUnlockArraysEXT.?();
}
pub const GL_NV_clip_space_w_scaling = 1;
pub const GL_MAP1_VERTEX_ATTRIB14_4_NV = 0x866E;
pub const GL_OP_MAX_EXT = 0x878A;
pub inline fn glProgramUniform1i64vNV(arg_5987: GLuint, arg_5988: GLint, arg_5989: GLsizei, arg_5990: [*c]const GLint64EXT) void {
    return epoxy_glProgramUniform1i64vNV.?(arg_5987, arg_5988, arg_5989, arg_5990);
}
pub inline fn glVertexAttrib1dARB(arg_5991: GLuint, arg_5992: GLdouble) void {
    return epoxy_glVertexAttrib1dARB.?(arg_5991, arg_5992);
}
pub inline fn glTexCoord3fv(arg_5993: [*c]const GLfloat) void {
    return epoxy_glTexCoord3fv.?(arg_5993);
}
pub const SCNoLEAST8 = "hho";
pub const GL_OUTPUT_TEXTURE_COORD18_EXT = 0x87AF;
pub inline fn glAccumxOES(arg_5994: GLenum, arg_5995: GLfixed) void {
    return epoxy_glAccumxOES.?(arg_5994, arg_5995);
}
pub const GL_SLICE_ACCUM_SUN = 0x85CC;
pub const GL_HARDLIGHT = 0x929B;
pub const GL_C3F_V3F = 0x2A24;
pub const GL_COMBINER1_NV = 0x8551;
pub inline fn glGetNamedProgramStringEXT(arg_5996: GLuint, arg_5997: GLenum, arg_5998: GLenum, arg_5999: ?*c_void) void {
    return epoxy_glGetNamedProgramStringEXT.?(arg_5996, arg_5997, arg_5998, arg_5999);
}
pub inline fn glMultiTexCoord3dARB(arg_6000: GLenum, arg_6001: GLdouble, arg_6002: GLdouble, arg_6003: GLdouble) void {
    return epoxy_glMultiTexCoord3dARB.?(arg_6000, arg_6001, arg_6002, arg_6003);
}
pub const GL_SYNC_OBJECT_APPLE = 0x8A53;
pub inline fn glVertexAttribP1uiv(arg_6004: GLuint, arg_6005: GLenum, arg_6006: GLboolean, arg_6007: [*c]const GLuint) void {
    return epoxy_glVertexAttribP1uiv.?(arg_6004, arg_6005, arg_6006, arg_6007);
}
pub const GL_MAX_SAMPLES_APPLE = 0x8D57;
pub const GL_UNSIGNED_INT_SAMPLER_1D_EXT = 0x8DD1;
pub inline fn glTexturePageCommitmentEXT(arg_6008: GLuint, arg_6009: GLint, arg_6010: GLint, arg_6011: GLint, arg_6012: GLint, arg_6013: GLsizei, arg_6014: GLsizei, arg_6015: GLsizei, arg_6016: GLboolean) void {
    return epoxy_glTexturePageCommitmentEXT.?(arg_6008, arg_6009, arg_6010, arg_6011, arg_6012, arg_6013, arg_6014, arg_6015, arg_6016);
}
pub const GL_ARB_point_parameters = 1;
pub const GL_LUMINANCE_ALPHA32F_ARB = 0x8819;
pub const GL_FENCE_APPLE = 0x8A0B;
pub inline fn glProgramUniformMatrix4x3dvEXT(arg_6017: GLuint, arg_6018: GLint, arg_6019: GLsizei, arg_6020: GLboolean, arg_6021: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x3dvEXT.?(arg_6017, arg_6018, arg_6019, arg_6020, arg_6021);
}
pub const GL_MATRIX5_ARB = 0x88C5;
pub inline fn glDepthBoundsdNV(arg_6022: GLdouble, arg_6023: GLdouble) void {
    return epoxy_glDepthBoundsdNV.?(arg_6022, arg_6023);
}
pub const GL_PROXY_TEXTURE_2D_STACK_MESAX = 0x875C;
pub const GL_VIEW_CLASS_ETC2_RGBA = 0x9386;
pub const GL_LUMINANCE_ALPHA16F_EXT = 0x881F;
pub inline fn glVertexAttribI1ui(arg_6024: GLuint, arg_6025: GLuint) void {
    return epoxy_glVertexAttribI1ui.?(arg_6024, arg_6025);
}
pub const GL_XOR_NV = 0x1506;
pub inline fn glGetProgramInterfaceiv(arg_6026: GLuint, arg_6027: GLenum, arg_6028: GLenum, arg_6029: [*c]GLint) void {
    return epoxy_glGetProgramInterfaceiv.?(arg_6026, arg_6027, arg_6028, arg_6029);
}
pub const GL_MAX_PROGRAM_LOOP_COUNT_NV = 0x88F8;
pub const GL_CLIP_PLANE3 = 0x3003;
pub const GL_NV_explicit_attrib_location = 1;
pub const GL_POINT_SIZE_MIN = 0x8126;
pub const GL_CON_23_ATI = 0x8958;
pub inline fn glGetNamedBufferParameteri64v(arg_6030: GLuint, arg_6031: GLenum, arg_6032: [*c]GLint64) void {
    return epoxy_glGetNamedBufferParameteri64v.?(arg_6030, arg_6031, arg_6032);
}
pub const SCNoPTR = __PRIPTR_PREFIX ++ "o";
pub const GL_NV_texture_expand_normal = 1;
pub const GL_READ_FRAMEBUFFER_BINDING_EXT = 0x8CAA;
pub inline fn glClientActiveTexture(arg_6033: GLenum) void {
    return epoxy_glClientActiveTexture.?(arg_6033);
}
pub inline fn glClearBufferfv(arg_6034: GLenum, arg_6035: GLint, arg_6036: [*c]const GLfloat) void {
    return epoxy_glClearBufferfv.?(arg_6034, arg_6035, arg_6036);
}
pub inline fn glUniformMatrix4x3fvNV(arg_6037: GLint, arg_6038: GLsizei, arg_6039: GLboolean, arg_6040: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x3fvNV.?(arg_6037, arg_6038, arg_6039, arg_6040);
}
pub inline fn glTextureLightEXT(arg_6041: GLenum) void {
    return epoxy_glTextureLightEXT.?(arg_6041);
}
pub const GL_EXT_shader_integer_mix = 1;
pub const GL_TEXTURE_SPARSE_ARB = 0x91A6;
pub const GL_NUM_SUPPORTED_MULTISAMPLE_MODES_AMD = 0x91B6;
pub const GL_DRAW_BUFFER1 = 0x8826;
pub inline fn glVertexAttribI4bvEXT(arg_6042: GLuint, arg_6043: [*c]const GLbyte) void {
    return epoxy_glVertexAttribI4bvEXT.?(arg_6042, arg_6043);
}
pub inline fn glCopyMultiTexSubImage1DEXT(arg_6044: GLenum, arg_6045: GLenum, arg_6046: GLint, arg_6047: GLint, arg_6048: GLint, arg_6049: GLint, arg_6050: GLsizei) void {
    return epoxy_glCopyMultiTexSubImage1DEXT.?(arg_6044, arg_6045, arg_6046, arg_6047, arg_6048, arg_6049, arg_6050);
}
pub inline fn glBeginOcclusionQueryNV(arg_6051: GLuint) void {
    return epoxy_glBeginOcclusionQueryNV.?(arg_6051);
}
pub const PRIiFAST8 = "i";
pub inline fn glGetnPixelMapuiv(arg_6052: GLenum, arg_6053: GLsizei, arg_6054: [*c]GLuint) void {
    return epoxy_glGetnPixelMapuiv.?(arg_6052, arg_6053, arg_6054);
}
pub const GL_EXT_shader_io_blocks = 1;
pub inline fn glUniform4uiv(arg_6055: GLint, arg_6056: GLsizei, arg_6057: [*c]const GLuint) void {
    return epoxy_glUniform4uiv.?(arg_6055, arg_6056, arg_6057);
}
pub const GL_EXT_draw_instanced = 1;
pub const GL_OES_blend_func_separate = 1;
pub const GL_ATI_texture_env_combine3 = 1;
pub const GL_UNSIGNED_INT_IMAGE_2D_ARRAY_EXT = 0x9069;
pub const GL_IMAGE_BINDING_FORMAT = 0x906E;
pub inline fn glWindowPos4fMESA(arg_6058: GLfloat, arg_6059: GLfloat, arg_6060: GLfloat, arg_6061: GLfloat) void {
    return epoxy_glWindowPos4fMESA.?(arg_6058, arg_6059, arg_6060, arg_6061);
}
pub const PRIoFAST32 = __PRIPTR_PREFIX ++ "o";
pub inline fn glProvokingVertex(arg_6062: GLenum) void {
    return epoxy_glProvokingVertex.?(arg_6062);
}
pub const GL_INTENSITY32I_EXT = 0x8D85;
pub const GL_OES_depth_texture = 1;
pub const GL_AMD_shader_ballot = 1;
pub const GL_DUAL_INTENSITY4_SGIS = 0x8118;
pub const GL_MAX_VERTEX_IMAGE_UNIFORMS = 0x90CA;
pub const __UINTMAX_MAX__ = @as(c_ulong, 18446744073709551615);
pub const GL_VIDEO_CAPTURE_TO_422_SUPPORTED_NV = 0x9026;
pub const GL_SAMPLE_ALPHA_TO_COVERAGE = 0x809E;
pub inline fn glUniform3dv(arg_6063: GLint, arg_6064: GLsizei, arg_6065: [*c]const GLdouble) void {
    return epoxy_glUniform3dv.?(arg_6063, arg_6064, arg_6065);
}
pub const GL_DRAW_BUFFER11_EXT = 0x8830;
pub const GL_ALIASED_LINE_WIDTH_RANGE = 0x846E;
pub inline fn glRectsv(arg_6066: [*c]const GLshort, arg_6067: [*c]const GLshort) void {
    return epoxy_glRectsv.?(arg_6066, arg_6067);
}
pub inline fn glBindAttribLocation(arg_6068: GLuint, arg_6069: GLuint, arg_6070: [*c]const GLchar) void {
    return epoxy_glBindAttribLocation.?(arg_6068, arg_6069, arg_6070);
}
pub const GL_FLOAT_RGB_NV = 0x8882;
pub const GL_BLEND_COLOR_COMMAND_NV = 0x000B;
pub inline fn glFramebufferTexture1DEXT(arg_6071: GLenum, arg_6072: GLenum, arg_6073: GLenum, arg_6074: GLuint, arg_6075: GLint) void {
    return epoxy_glFramebufferTexture1DEXT.?(arg_6071, arg_6072, arg_6073, arg_6074, arg_6075);
}
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_EXT = 0x851A;
pub const GL_FRAGMENT_NORMAL_EXT = 0x834A;
pub const GL_SOURCE2_ALPHA_EXT = 0x858A;
pub inline fn glBindSampler(arg_6076: GLuint, arg_6077: GLuint) void {
    return epoxy_glBindSampler.?(arg_6076, arg_6077);
}
pub inline fn glGetPathSpacingNV(arg_6078: GLenum, arg_6079: GLsizei, arg_6080: GLenum, arg_6081: ?*const c_void, arg_6082: GLuint, arg_6083: GLfloat, arg_6084: GLfloat, arg_6085: GLenum, arg_6086: [*c]GLfloat) void {
    return epoxy_glGetPathSpacingNV.?(arg_6078, arg_6079, arg_6080, arg_6081, arg_6082, arg_6083, arg_6084, arg_6085, arg_6086);
}
pub const GL_OCCLUSION_TEST_HP = 0x8165;
pub const GL_MATRIX7_NV = 0x8637;
pub inline fn glBufferAddressRangeNV(arg_6087: GLenum, arg_6088: GLuint, arg_6089: GLuint64EXT, arg_6090: GLsizeiptr) void {
    return epoxy_glBufferAddressRangeNV.?(arg_6087, arg_6088, arg_6089, arg_6090);
}
pub inline fn glVertexStream4ivATI(arg_6091: GLenum, arg_6092: [*c]const GLint) void {
    return epoxy_glVertexStream4ivATI.?(arg_6091, arg_6092);
}
pub const GL_INNOCENT_CONTEXT_RESET_KHR = 0x8254;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_EXT = 0x8E8A;
pub inline fn glEndQueryARB(arg_6093: GLenum) void {
    return epoxy_glEndQueryARB.?(arg_6093);
}
pub const GL_COLOR_INDEX1_EXT = 0x80E2;
pub inline fn glReadInstrumentsSGIX(arg_6094: GLint) void {
    return epoxy_glReadInstrumentsSGIX.?(arg_6094);
}
pub const INTMAX_MAX = __INT64_C(9223372036854775807);
pub const GL_ISOLINES_EXT = 0x8E7A;
pub const INT_LEAST16_MIN = -32767 - 1;
pub inline fn glBlendFuncSeparateIndexedAMD(arg_6095: GLuint, arg_6096: GLenum, arg_6097: GLenum, arg_6098: GLenum, arg_6099: GLenum) void {
    return epoxy_glBlendFuncSeparateIndexedAMD.?(arg_6095, arg_6096, arg_6097, arg_6098, arg_6099);
}
pub const GL_MAX_PROGRAM_INSTRUCTIONS_ARB = 0x88A1;
pub const GL_AMD_seamless_cubemap_per_texture = 1;
pub inline fn glPrioritizeTexturesxOES(arg_6100: GLsizei, arg_6101: [*c]const GLuint, arg_6102: [*c]const GLfixed) void {
    return epoxy_glPrioritizeTexturesxOES.?(arg_6100, arg_6101, arg_6102);
}
pub inline fn glTexCoordP4ui(arg_6103: GLenum, arg_6104: GLuint) void {
    return epoxy_glTexCoordP4ui.?(arg_6103, arg_6104);
}
pub const GL_EXT_shared_texture_palette = 1;
pub inline fn glFogCoordPointerListIBM(arg_6105: GLenum, arg_6106: GLint, arg_6107: [*c]?*const c_void, arg_6108: GLint) void {
    return epoxy_glFogCoordPointerListIBM.?(arg_6105, arg_6106, arg_6107, arg_6108);
}
pub const GL_SOURCE3_RGB_NV = 0x8583;
pub inline fn glApplyTextureEXT(arg_6109: GLenum) void {
    return epoxy_glApplyTextureEXT.?(arg_6109);
}
pub inline fn glFogCoordFormatNV(arg_6110: GLenum, arg_6111: GLsizei) void {
    return epoxy_glFogCoordFormatNV.?(arg_6110, arg_6111);
}
pub inline fn glFramebufferSampleLocationsfvARB(arg_6112: GLenum, arg_6113: GLuint, arg_6114: GLsizei, arg_6115: [*c]const GLfloat) void {
    return epoxy_glFramebufferSampleLocationsfvARB.?(arg_6112, arg_6113, arg_6114, arg_6115);
}
pub const GL_TEXTURE_MAG_SIZE_NV = 0x871F;
pub const GL_RED_SCALE = 0x0D14;
pub const GL_ARB_enhanced_layouts = 1;
pub const GL_UNPACK_ROW_BYTES_APPLE = 0x8A16;
pub const GL_COORD_REPLACE_NV = 0x8862;
pub const GL_LINE_QUALITY_HINT_SGIX = 0x835B;
pub const GL_CON_18_ATI = 0x8953;
pub const GL_OES_rgb8_rgba8 = 1;
pub inline fn glProgramUniform3fEXT(arg_6116: GLuint, arg_6117: GLint, arg_6118: GLfloat, arg_6119: GLfloat, arg_6120: GLfloat) void {
    return epoxy_glProgramUniform3fEXT.?(arg_6116, arg_6117, arg_6118, arg_6119, arg_6120);
}
pub inline fn glProgramUniform4fv(arg_6121: GLuint, arg_6122: GLint, arg_6123: GLsizei, arg_6124: [*c]const GLfloat) void {
    return epoxy_glProgramUniform4fv.?(arg_6121, arg_6122, arg_6123, arg_6124);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE = 0x8C85;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTERS_EXT = 0x92D4;
pub const GL_MAP_PERSISTENT_BIT = 0x0040;
pub inline fn glColorFragmentOp2ATI(arg_6125: GLenum, arg_6126: GLuint, arg_6127: GLuint, arg_6128: GLuint, arg_6129: GLuint, arg_6130: GLuint, arg_6131: GLuint, arg_6132: GLuint, arg_6133: GLuint, arg_6134: GLuint) void {
    return epoxy_glColorFragmentOp2ATI.?(arg_6125, arg_6126, arg_6127, arg_6128, arg_6129, arg_6130, arg_6131, arg_6132, arg_6133, arg_6134);
}
pub inline fn glTexCoord1dv(arg_6135: [*c]const GLdouble) void {
    return epoxy_glTexCoord1dv.?(arg_6135);
}
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_TRIANGLES_NV = 0x954F;
pub const GL_LUMINANCE_FLOAT32_APPLE = 0x8818;
pub const GL_RASTERIZER_DISCARD = 0x8C89;
pub const GL_CONVOLUTION_BORDER_MODE_EXT = 0x8013;
pub inline fn glSecondaryColor3usEXT(arg_6136: GLushort, arg_6137: GLushort, arg_6138: GLushort) void {
    return epoxy_glSecondaryColor3usEXT.?(arg_6136, arg_6137, arg_6138);
}
pub const GL_MAX_SAMPLE_MASK_WORDS = 0x8E59;
pub inline fn glProgramStringARB(arg_6139: GLenum, arg_6140: GLenum, arg_6141: GLsizei, arg_6142: ?*const c_void) void {
    return epoxy_glProgramStringARB.?(arg_6139, arg_6140, arg_6141, arg_6142);
}
pub inline fn glMultiTexGendvEXT(arg_6143: GLenum, arg_6144: GLenum, arg_6145: GLenum, arg_6146: [*c]const GLdouble) void {
    return epoxy_glMultiTexGendvEXT.?(arg_6143, arg_6144, arg_6145, arg_6146);
}
pub inline fn glBindMaterialParameterEXT(arg_6147: GLenum, arg_6148: GLenum) GLuint {
    return epoxy_glBindMaterialParameterEXT.?(arg_6147, arg_6148);
}
pub const GL_UNDEFINED_VERTEX = 0x8260;
pub const GL_NORMAL_ARRAY = 0x8075;
pub inline fn glClear(arg_6149: GLbitfield) void {
    return epoxy_glClear.?(arg_6149);
}
pub inline fn glPathCoverDepthFuncNV(arg_6150: GLenum) void {
    return epoxy_glPathCoverDepthFuncNV.?(arg_6150);
}
pub const GL_MESA_framebuffer_flip_y = 1;
pub const GL_DIFFERENCE_KHR = 0x929E;
pub inline fn glVertexAttribI4svEXT(arg_6151: GLuint, arg_6152: [*c]const GLshort) void {
    return epoxy_glVertexAttribI4svEXT.?(arg_6151, arg_6152);
}
pub const GL_CULL_VERTEX_EXT = 0x81AA;
pub const GL_FLOAT16_MAT3_AMD = 0x91C6;
pub const GL_CON_29_ATI = 0x895E;
pub const GL_TEXTURE_SHADOW = 0x82A1;
pub const SCNuLEAST16 = "hu";
pub const GL_QUERY_RESOURCE_RENDERBUFFER_NV = 0x9546;
pub inline fn glFogi(arg_6153: GLenum, arg_6154: GLint) void {
    return epoxy_glFogi.?(arg_6153, arg_6154);
}
pub const GL_CON_15_ATI = 0x8950;
pub inline fn glUseProgramStages(arg_6155: GLuint, arg_6156: GLbitfield, arg_6157: GLuint) void {
    return epoxy_glUseProgramStages.?(arg_6155, arg_6156, arg_6157);
}
pub const GL_VIEWPORT_SWIZZLE_POSITIVE_Y_NV = 0x9352;
pub const GL_EXT_draw_transform_feedback = 1;
pub const GL_STENCIL_BUFFER_BIT = 0x00000400;
pub inline fn glAcquireKeyedMutexWin32EXT(arg_6158: GLuint, arg_6159: GLuint64, arg_6160: GLuint) GLboolean {
    return epoxy_glAcquireKeyedMutexWin32EXT.?(arg_6158, arg_6159, arg_6160);
}
pub const GL_LUMINANCE_ALPHA32UI_EXT = 0x8D75;
pub const GL_MIRROR_CLAMP_TO_EDGE_EXT = 0x8743;
pub const GL_MAX_FRAGMENT_SHADER_STORAGE_BLOCKS = 0x90DA;
pub const GL_TESS_EVALUATION_SUBROUTINE_UNIFORM = 0x92F0;
pub const GL_DRAW_BUFFER0_NV = 0x8825;
pub const GL_COMPRESSED_RGBA_ASTC_3x3x3_OES = 0x93C0;
pub const GL_PROGRAM_NATIVE_PARAMETERS_ARB = 0x88AA;
pub inline fn glMultiDrawElementsIndirectBindlessNV(arg_6161: GLenum, arg_6162: GLenum, arg_6163: ?*const c_void, arg_6164: GLsizei, arg_6165: GLsizei, arg_6166: GLint) void {
    return epoxy_glMultiDrawElementsIndirectBindlessNV.?(arg_6161, arg_6162, arg_6163, arg_6164, arg_6165, arg_6166);
}
pub inline fn UINT16_C(c: var) @TypeOf(c) {
    return c;
}
pub const GL_MAX_TASK_ATOMIC_COUNTERS_NV = 0x8E6D;
pub const GL_BLEND_DST_ALPHA_EXT = 0x80CA;
pub const GL_BGRA = 0x80E1;
pub inline fn glVertexAttrib2hvNV(arg_6167: GLuint, arg_6168: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib2hvNV.?(arg_6167, arg_6168);
}
pub const GL_PROXY_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D4;
pub const GL_UNIFORM_BUFFER_BINDING = 0x8A28;
pub inline fn glColor4ub(arg_6169: GLubyte, arg_6170: GLubyte, arg_6171: GLubyte, arg_6172: GLubyte) void {
    return epoxy_glColor4ub.?(arg_6169, arg_6170, arg_6171, arg_6172);
}
pub inline fn glExtGetProgramBinarySourceQCOM(arg_6173: GLuint, arg_6174: GLenum, arg_6175: [*c]GLchar, arg_6176: [*c]GLint) void {
    return epoxy_glExtGetProgramBinarySourceQCOM.?(arg_6173, arg_6174, arg_6175, arg_6176);
}
pub const GL_CURRENT_VERTEX_ATTRIB = 0x8626;
pub const GL_MVP_MATRIX_EXT = 0x87E3;
pub inline fn glGetProgramResourceIndex(arg_6177: GLuint, arg_6178: GLenum, arg_6179: [*c]const GLchar) GLuint {
    return epoxy_glGetProgramResourceIndex.?(arg_6177, arg_6178, arg_6179);
}
pub inline fn glIsTextureHandleResidentNV(arg_6180: GLuint64) GLboolean {
    return epoxy_glIsTextureHandleResidentNV.?(arg_6180);
}
pub const GL_TESS_CONTROL_SHADER_EXT = 0x8E88;
pub inline fn glResizeBuffersMESA() void {
    return epoxy_glResizeBuffersMESA.?();
}
pub inline fn glScissorExclusiveNV(arg_6181: GLint, arg_6182: GLint, arg_6183: GLsizei, arg_6184: GLsizei) void {
    return epoxy_glScissorExclusiveNV.?(arg_6181, arg_6182, arg_6183, arg_6184);
}
pub const GL_GREEN_SCALE = 0x0D18;
pub const GL_INVARIANT_DATATYPE_EXT = 0x87EB;
pub const GL_FLOAT_MAT4x3 = 0x8B6A;
pub const __UINT_FAST8_MAX__ = 255;
pub inline fn glColor3usv(arg_6185: [*c]const GLushort) void {
    return epoxy_glColor3usv.?(arg_6185);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4x4_OES = 0x93E3;
pub inline fn glCopyTextureSubImage2DEXT(arg_6186: GLuint, arg_6187: GLenum, arg_6188: GLint, arg_6189: GLint, arg_6190: GLint, arg_6191: GLint, arg_6192: GLint, arg_6193: GLsizei, arg_6194: GLsizei) void {
    return epoxy_glCopyTextureSubImage2DEXT.?(arg_6186, arg_6187, arg_6188, arg_6189, arg_6190, arg_6191, arg_6192, arg_6193, arg_6194);
}
pub const GL_FLOAT_MAT2x3_NV = 0x8B65;
pub inline fn glIndexsv(arg_6195: [*c]const GLshort) void {
    return epoxy_glIndexsv.?(arg_6195);
}
pub const GL_FRAMEBUFFER_BARRIER_BIT_EXT = 0x00000400;
pub inline fn glFragmentLightiSGIX(arg_6196: GLenum, arg_6197: GLenum, arg_6198: GLint) void {
    return epoxy_glFragmentLightiSGIX.?(arg_6196, arg_6197, arg_6198);
}
pub const __TIMESIZE = __WORDSIZE;
pub const GL_HSL_COLOR_NV = 0x92AF;
pub inline fn glMultiTexCoord4fvARB(arg_6199: GLenum, arg_6200: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord4fvARB.?(arg_6199, arg_6200);
}
pub const GL_TEXTURE_BUFFER_FORMAT_ARB = 0x8C2E;
pub inline fn glUniformHandleui64ARB(arg_6201: GLint, arg_6202: GLuint64) void {
    return epoxy_glUniformHandleui64ARB.?(arg_6201, arg_6202);
}
pub const GL_S3_s3tc = 1;
pub const GL_EIGHTH_BIT_ATI = 0x00000020;
pub inline fn glTexCoord1fv(arg_6203: [*c]const GLfloat) void {
    return epoxy_glTexCoord1fv.?(arg_6203);
}
pub inline fn glGetInteger64i_v(arg_6204: GLenum, arg_6205: GLuint, arg_6206: [*c]GLint64) void {
    return epoxy_glGetInteger64i_v.?(arg_6204, arg_6205, arg_6206);
}
pub const GL_UNPACK_SUBSAMPLE_RATE_SGIX = 0x85A1;
pub const GL_MAX_MESH_TOTAL_MEMORY_SIZE_NV = 0x9536;
pub const GL_NV_fence = 1;
pub const GL_OBJECT_LINK_STATUS_ARB = 0x8B82;
pub const GL_VERTEX_PROGRAM_TWO_SIDE = 0x8643;
pub const GL_SGIX_subsample = 1;
pub inline fn glGetMultiTexParameterivEXT(arg_6207: GLenum, arg_6208: GLenum, arg_6209: GLenum, arg_6210: [*c]GLint) void {
    return epoxy_glGetMultiTexParameterivEXT.?(arg_6207, arg_6208, arg_6209, arg_6210);
}
pub const GL_WAIT_FAILED = 0x911D;
pub const GL_TEXTURE29 = 0x84DD;
pub const GL_MAX_PROGRAM_SUBROUTINE_NUM_NV = 0x8F45;
pub const GL_MODELVIEW9_ARB = 0x8729;
pub inline fn glGetLocalConstantFloatvEXT(arg_6211: GLuint, arg_6212: GLenum, arg_6213: [*c]GLfloat) void {
    return epoxy_glGetLocalConstantFloatvEXT.?(arg_6211, arg_6212, arg_6213);
}
pub const GL_DEPTH24_STENCIL8_OES = 0x88F0;
pub inline fn glCreateSyncFromCLeventARB(arg_6214: ?*struct__cl_context, arg_6215: ?*struct__cl_event, arg_6216: GLbitfield) GLsync {
    return epoxy_glCreateSyncFromCLeventARB.?(arg_6214, arg_6215, arg_6216);
}
pub const GL_FEEDBACK_BUFFER_TYPE = 0x0DF2;
pub inline fn glVertexArrayIndexOffsetEXT(arg_6217: GLuint, arg_6218: GLuint, arg_6219: GLenum, arg_6220: GLsizei, arg_6221: GLintptr) void {
    return epoxy_glVertexArrayIndexOffsetEXT.?(arg_6217, arg_6218, arg_6219, arg_6220, arg_6221);
}
pub const GL_ARB_shader_clock = 1;
pub const GL_CURRENT_SECONDARY_COLOR = 0x8459;
pub inline fn glGetPathColorGenivNV(arg_6222: GLenum, arg_6223: GLenum, arg_6224: [*c]GLint) void {
    return epoxy_glGetPathColorGenivNV.?(arg_6222, arg_6223, arg_6224);
}
pub const GL_UNPACK_COMPRESSED_BLOCK_SIZE = 0x912A;
pub const GL_NAME_STACK_DEPTH = 0x0D70;
pub const GL_PIXEL_BUFFER_BARRIER_BIT_EXT = 0x00000080;
pub const GL_MAX_CONVOLUTION_WIDTH = 0x801A;
pub inline fn glFogx(arg_6225: GLenum, arg_6226: GLfixed) void {
    return epoxy_glFogx.?(arg_6225, arg_6226);
}
pub inline fn glColor4ubv(arg_6227: [*c]const GLubyte) void {
    return epoxy_glColor4ubv.?(arg_6227);
}
pub const GL_DRAW_ARRAYS_INSTANCED_COMMAND_NV = 0x0007;
pub const GL_NVX_progress_fence = 1;
pub const GL_NV_fragment_shader_interlock = 1;
pub const GL_QUERY_BUFFER_AMD = 0x9192;
pub const GL_DEPTH_BUFFER_BIT3_QCOM = 0x00000800;
pub const GL_MULTISAMPLE_LINE_WIDTH_RANGE = 0x9381;
pub const GL_RGB5_A1 = 0x8057;
pub const GL_SUBGROUP_FEATURE_CLUSTERED_BIT_KHR = 0x00000040;
pub inline fn glRasterPos2s(arg_6228: GLshort, arg_6229: GLshort) void {
    return epoxy_glRasterPos2s.?(arg_6228, arg_6229);
}
pub const GL_MAX_COMPUTE_SHADER_STORAGE_BLOCKS = 0x90DB;
pub const GL_Z4Y12Z4CB12Z4Y12Z4CR12_422_NV = 0x9035;
pub const GL_CURRENT_COLOR = 0x0B00;
pub const GL_AMD_compressed_3DC_texture = 1;
pub const GL_KEEP = 0x1E00;
pub const GL_SAMPLE_BUFFERS = 0x80A8;
pub const GL_OFFSET = 0x92FC;
pub const GL_VERTEX_BINDING_STRIDE = 0x82D8;
pub inline fn glGetQueryObjectivARB(arg_6230: GLuint, arg_6231: GLenum, arg_6232: [*c]GLint) void {
    return epoxy_glGetQueryObjectivARB.?(arg_6230, arg_6231, arg_6232);
}
pub const GL_DARKEN_KHR = 0x9297;
pub const GL_CUBIC_IMG = 0x9139;
pub const GL_IGNORE_BORDER_HP = 0x8150;
pub inline fn glMap2f(arg_6233: GLenum, arg_6234: GLfloat, arg_6235: GLfloat, arg_6236: GLint, arg_6237: GLint, arg_6238: GLfloat, arg_6239: GLfloat, arg_6240: GLint, arg_6241: GLint, arg_6242: [*c]const GLfloat) void {
    return epoxy_glMap2f.?(arg_6233, arg_6234, arg_6235, arg_6236, arg_6237, arg_6238, arg_6239, arg_6240, arg_6241, arg_6242);
}
pub const GL_FRAGMENT_PROGRAM_CALLBACK_DATA_MESA = 0x8BB3;
pub const GL_TEXTURE_4DSIZE_SGIS = 0x8136;
pub inline fn glGetVariantPointervEXT(arg_6243: GLuint, arg_6244: GLenum, arg_6245: [*c]?*c_void) void {
    return epoxy_glGetVariantPointervEXT.?(arg_6243, arg_6244, arg_6245);
}
pub inline fn glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(arg_6246: [*c]const GLuint, arg_6247: [*c]const GLfloat, arg_6248: [*c]const GLfloat, arg_6249: [*c]const GLfloat, arg_6250: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN.?(arg_6246, arg_6247, arg_6248, arg_6249, arg_6250);
}
pub const GL_FRAGMENT_SHADER_FRAMEBUFFER_FETCH_MRT_ARM = 0x8F66;
pub const GL_INT_IMAGE_CUBE_EXT = 0x905B;
pub const GL_MAX_FRAMEBUFFER_LAYERS_OES = 0x9317;
pub inline fn glBlendBarrierNV() void {
    return epoxy_glBlendBarrierNV.?();
}
pub inline fn glPixelTransferi(arg_6251: GLenum, arg_6252: GLint) void {
    return epoxy_glPixelTransferi.?(arg_6251, arg_6252);
}
pub const GL_CONTEXT_FLAG_PROTECTED_CONTENT_BIT_EXT = 0x00000010;
pub inline fn glTexCoord3xOES(arg_6253: GLfixed, arg_6254: GLfixed, arg_6255: GLfixed) void {
    return epoxy_glTexCoord3xOES.?(arg_6253, arg_6254, arg_6255);
}
pub const GL_TEXTURE_FOVEATED_MIN_PIXEL_DENSITY_QCOM = 0x8BFC;
pub const GL_OES_sample_shading = 1;
pub const GL_MAX_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8337;
pub const GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG = 0x9137;
pub const GL_CONST_EYE_NV = 0x86E5;
pub const GL_PERFQUERY_COUNTER_DATA_UINT32_INTEL = 0x94F8;
pub const GL_INCR = 0x1E02;
pub const PRIi16 = "i";
pub const GL_SRGB_EXT = 0x8C40;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_SIZE_EXT = 0x8F67;
pub const GL_RGBA16I = 0x8D88;
pub const GL_GLYPH_HORIZONTAL_BEARING_ADVANCE_BIT_NV = 0x10;
pub const GL_FRAMEBUFFER_COMPLETE_EXT = 0x8CD5;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR = 0x93DB;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_4 = 1;
pub const GL_CON_12_ATI = 0x894D;
pub const GL_DOUBLE_MAT2_EXT = 0x8F46;
pub const GL_LUMINANCE_ALPHA8I_EXT = 0x8D93;
pub const GL_TEXTURE_COORD_ARRAY_POINTER_EXT = 0x8092;
pub const GL_COLORBURN_KHR = 0x929A;
pub const GL_ARB_texture_float = 1;
pub inline fn glGetCompressedMultiTexImageEXT(arg_6256: GLenum, arg_6257: GLenum, arg_6258: GLint, arg_6259: ?*c_void) void {
    return epoxy_glGetCompressedMultiTexImageEXT.?(arg_6256, arg_6257, arg_6258, arg_6259);
}
pub const GL_DRAW_ARRAYS_COMMAND_NV = 0x0003;
pub inline fn glTexGendv(arg_6260: GLenum, arg_6261: GLenum, arg_6262: [*c]const GLdouble) void {
    return epoxy_glTexGendv.?(arg_6260, arg_6261, arg_6262);
}
pub const GL_DOT_PRODUCT_REFLECT_CUBE_MAP_NV = 0x86F2;
pub const GL_CIRCULAR_TANGENT_ARC_TO_NV = 0xFC;
pub inline fn glGetnMapivARB(arg_6263: GLenum, arg_6264: GLenum, arg_6265: GLsizei, arg_6266: [*c]GLint) void {
    return epoxy_glGetnMapivARB.?(arg_6263, arg_6264, arg_6265, arg_6266);
}
pub const GL_DST_COLOR = 0x0306;
pub const GL_TEXTURE_ALPHA_TYPE_ARB = 0x8C13;
pub const GL_EVAL_VERTEX_ATTRIB3_NV = 0x86C9;
pub inline fn glVertexFormatNV(arg_6267: GLint, arg_6268: GLenum, arg_6269: GLsizei) void {
    return epoxy_glVertexFormatNV.?(arg_6267, arg_6268, arg_6269);
}
pub inline fn glVDPAUInitNV(arg_6270: ?*const c_void, arg_6271: ?*const c_void) void {
    return epoxy_glVDPAUInitNV.?(arg_6270, arg_6271);
}
pub inline fn glMultiTexCoord3iv(arg_6272: GLenum, arg_6273: [*c]const GLint) void {
    return epoxy_glMultiTexCoord3iv.?(arg_6272, arg_6273);
}
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_MESH_SHADER_NV = 0x959C;
pub const GL_SGIX_pixel_tiles = 1;
pub const GL_TEXTURE_MAX_LOD_SGIS = 0x813B;
pub inline fn glNamedFramebufferTextureEXT(arg_6274: GLuint, arg_6275: GLenum, arg_6276: GLuint, arg_6277: GLint) void {
    return epoxy_glNamedFramebufferTextureEXT.?(arg_6274, arg_6275, arg_6276, arg_6277);
}
pub const GL_SHADER_KHR = 0x82E1;
pub const GL_ARB_multi_draw_indirect = 1;
pub const GL_VERTEX_ARRAY_RANGE_VALID_NV = 0x851F;
pub const GL_DEPTH_ATTACHMENT = 0x8D00;
pub const GL_KHR_blend_equation_advanced = 1;
pub const GL_COLOR_ATTACHMENT8 = 0x8CE8;
pub const GL_LIST_INDEX = 0x0B33;
pub inline fn glProgramPathFragmentInputGenNV(arg_6278: GLuint, arg_6279: GLint, arg_6280: GLenum, arg_6281: GLint, arg_6282: [*c]const GLfloat) void {
    return epoxy_glProgramPathFragmentInputGenNV.?(arg_6278, arg_6279, arg_6280, arg_6281, arg_6282);
}
pub const GL_RENDERBUFFER_WIDTH = 0x8D42;
pub const GL_MAP1_VERTEX_ATTRIB3_4_NV = 0x8663;
pub const SCNuPTR = __PRIPTR_PREFIX ++ "u";
pub const unix = 1;
pub const GL_PREVIOUS = 0x8578;
pub const GL_BLEND_EQUATION = 0x8009;
pub inline fn glNamedProgramLocalParameter4fvEXT(arg_6283: GLuint, arg_6284: GLenum, arg_6285: GLuint, arg_6286: [*c]const GLfloat) void {
    return epoxy_glNamedProgramLocalParameter4fvEXT.?(arg_6283, arg_6284, arg_6285, arg_6286);
}
pub const GL_SAMPLE_MASK = 0x8E51;
pub const GL_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x8806;
pub inline fn glEvalPoint1(arg_6287: GLint) void {
    return epoxy_glEvalPoint1.?(arg_6287);
}
pub inline fn glCurrentPaletteMatrixOES(arg_6288: GLuint) void {
    return epoxy_glCurrentPaletteMatrixOES.?(arg_6288);
}
pub inline fn glColor4hNV(arg_6289: GLhalfNV, arg_6290: GLhalfNV, arg_6291: GLhalfNV, arg_6292: GLhalfNV) void {
    return epoxy_glColor4hNV.?(arg_6289, arg_6290, arg_6291, arg_6292);
}
pub const GL_TEXTURE_RED_TYPE = 0x8C10;
pub const GL_OUTPUT_TEXTURE_COORD5_EXT = 0x87A2;
pub const GL_CONTEXT_LOST_KHR = 0x0507;
pub const GL_SOURCE1_RGB_EXT = 0x8581;
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB = 0x8B4C;
pub const PRIiLEAST16 = "i";
pub inline fn glIndexMaterialEXT(arg_6293: GLenum, arg_6294: GLenum) void {
    return epoxy_glIndexMaterialEXT.?(arg_6293, arg_6294);
}
pub const GL_SECONDARY_COLOR_ARRAY_LIST_IBM = 103077;
pub const GL_STATIC_READ_ARB = 0x88E5;
pub const GL_TANGENT_ARRAY_STRIDE_EXT = 0x843F;
pub const GL_PIXEL_MAP_I_TO_B = 0x0C74;
pub const GL_EXT_texture_cube_map = 1;
pub const GL_OP_RECIP_EXT = 0x8794;
pub inline fn glVertexAttribL4d(arg_6295: GLuint, arg_6296: GLdouble, arg_6297: GLdouble, arg_6298: GLdouble, arg_6299: GLdouble) void {
    return epoxy_glVertexAttribL4d.?(arg_6295, arg_6296, arg_6297, arg_6298, arg_6299);
}
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_EXT = 0x8DE0;
pub inline fn glSecondaryColor3sEXT(arg_6300: GLshort, arg_6301: GLshort, arg_6302: GLshort) void {
    return epoxy_glSecondaryColor3sEXT.?(arg_6300, arg_6301, arg_6302);
}
pub const GL_COMPRESSED_RED_RGTC1 = 0x8DBB;
pub inline fn glMultiTexCoord2hNV(arg_6303: GLenum, arg_6304: GLhalfNV, arg_6305: GLhalfNV) void {
    return epoxy_glMultiTexCoord2hNV.?(arg_6303, arg_6304, arg_6305);
}
pub inline fn glGetTextureHandleIMG(arg_6306: GLuint) GLuint64 {
    return epoxy_glGetTextureHandleIMG.?(arg_6306);
}
pub inline fn glMap1f(arg_6307: GLenum, arg_6308: GLfloat, arg_6309: GLfloat, arg_6310: GLint, arg_6311: GLint, arg_6312: [*c]const GLfloat) void {
    return epoxy_glMap1f.?(arg_6307, arg_6308, arg_6309, arg_6310, arg_6311, arg_6312);
}
pub inline fn glRasterPos4xOES(arg_6313: GLfixed, arg_6314: GLfixed, arg_6315: GLfixed, arg_6316: GLfixed) void {
    return epoxy_glRasterPos4xOES.?(arg_6313, arg_6314, arg_6315, arg_6316);
}
pub const GL_NV_present_video = 1;
pub const __x86_64 = 1;
pub const GL_UNPACK_SWAP_BYTES = 0x0CF0;
pub inline fn glGetUniformLocationARB(arg_6317: GLhandleARB, arg_6318: [*c]const GLcharARB) GLint {
    return epoxy_glGetUniformLocationARB.?(arg_6317, arg_6318);
}
pub inline fn glMatrixRotatedEXT(arg_6319: GLenum, arg_6320: GLdouble, arg_6321: GLdouble, arg_6322: GLdouble, arg_6323: GLdouble) void {
    return epoxy_glMatrixRotatedEXT.?(arg_6319, arg_6320, arg_6321, arg_6322, arg_6323);
}
pub const GL_COMPATIBLE_SUBROUTINES = 0x8E4B;
pub const GL_NV_vdpau_interop2 = 1;
pub inline fn glMultiTexCoord2bvOES(arg_6324: GLenum, arg_6325: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord2bvOES.?(arg_6324, arg_6325);
}
pub inline fn glGetQueryIndexediv(arg_6326: GLenum, arg_6327: GLuint, arg_6328: GLenum, arg_6329: [*c]GLint) void {
    return epoxy_glGetQueryIndexediv.?(arg_6326, arg_6327, arg_6328, arg_6329);
}
pub inline fn glWindowPos2i(arg_6330: GLint, arg_6331: GLint) void {
    return epoxy_glWindowPos2i.?(arg_6330, arg_6331);
}
pub inline fn glRenderbufferStorage(arg_6332: GLenum, arg_6333: GLenum, arg_6334: GLsizei, arg_6335: GLsizei) void {
    return epoxy_glRenderbufferStorage.?(arg_6332, arg_6333, arg_6334, arg_6335);
}
pub inline fn glWindowPos2dMESA(arg_6336: GLdouble, arg_6337: GLdouble) void {
    return epoxy_glWindowPos2dMESA.?(arg_6336, arg_6337);
}
pub inline fn glVertexAttrib4s(arg_6338: GLuint, arg_6339: GLshort, arg_6340: GLshort, arg_6341: GLshort, arg_6342: GLshort) void {
    return epoxy_glVertexAttrib4s.?(arg_6338, arg_6339, arg_6340, arg_6341, arg_6342);
}
pub inline fn glVertex4bOES(arg_6343: GLbyte, arg_6344: GLbyte, arg_6345: GLbyte, arg_6346: GLbyte) void {
    return epoxy_glVertex4bOES.?(arg_6343, arg_6344, arg_6345, arg_6346);
}
pub inline fn glVDPAURegisterVideoSurfaceNV(arg_6347: ?*const c_void, arg_6348: GLenum, arg_6349: GLsizei, arg_6350: [*c]const GLuint) GLvdpauSurfaceNV {
    return epoxy_glVDPAURegisterVideoSurfaceNV.?(arg_6347, arg_6348, arg_6349, arg_6350);
}
pub const GL_PROGRAM_BINARY_FORMAT_MESA = 0x875F;
pub inline fn glDepthRangefOES(arg_6351: GLclampf, arg_6352: GLclampf) void {
    return epoxy_glDepthRangefOES.?(arg_6351, arg_6352);
}
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTERS = 0x92D5;
pub const GL_DST_NV = 0x9287;
pub const GL_TEXTURE_BUFFER_OFFSET = 0x919D;
pub const GL_REG_15_ATI = 0x8930;
pub const GL_NAME_LENGTH = 0x92F9;
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS_OES = 0x92CE;
pub const GL_SRGB_READ = 0x8297;
pub const GL_TEXTURE_BUFFER_BINDING_OES = 0x8C2A;
pub const GL_CLEAR_BUFFER = 0x82B4;
pub const GL_UNSIGNED_INT_IMAGE_1D_EXT = 0x9062;
pub const GL_IMAGE_CUBE_MAP_ARRAY = 0x9054;
pub inline fn glIsEnabledi(arg_6353: GLenum, arg_6354: GLuint) GLboolean {
    return epoxy_glIsEnabledi.?(arg_6353, arg_6354);
}
pub const GL_VERTEX_BLEND_ARB = 0x86A7;
pub inline fn glColorMaski(arg_6355: GLuint, arg_6356: GLboolean, arg_6357: GLboolean, arg_6358: GLboolean, arg_6359: GLboolean) void {
    return epoxy_glColorMaski.?(arg_6355, arg_6356, arg_6357, arg_6358, arg_6359);
}
pub const GL_DRAW_BUFFER3 = 0x8828;
pub const GL_TEXTURE4_ARB = 0x84C4;
pub inline fn glTextureParameterIuivEXT(arg_6360: GLuint, arg_6361: GLenum, arg_6362: GLenum, arg_6363: [*c]const GLuint) void {
    return epoxy_glTextureParameterIuivEXT.?(arg_6360, arg_6361, arg_6362, arg_6363);
}
pub const GL_LAYOUT_TRANSFER_SRC_EXT = 0x9592;
pub inline fn glConservativeRasterParameterfNV(arg_6364: GLenum, arg_6365: GLfloat) void {
    return epoxy_glConservativeRasterParameterfNV.?(arg_6364, arg_6365);
}
pub const GL_VIEWPORT_POSITION_W_SCALE_Y_COEFF_NV = 0x937E;
pub const GL_MAX_CLIP_DISTANCES_APPLE = 0x0D32;
pub const GL_PACK_SKIP_IMAGES = 0x806B;
pub inline fn glIsNamedStringARB(arg_6366: GLint, arg_6367: [*c]const GLchar) GLboolean {
    return epoxy_glIsNamedStringARB.?(arg_6366, arg_6367);
}
pub const GL_TEXTURE_INTENSITY_SIZE = 0x8061;
pub const GL_TEXTURE_IMMUTABLE_LEVELS = 0x82DF;
pub const GL_MAX_CLIPMAP_DEPTH_SGIX = 0x8177;
pub inline fn glTexParameterx(arg_6368: GLenum, arg_6369: GLenum, arg_6370: GLfixed) void {
    return epoxy_glTexParameterx.?(arg_6368, arg_6369, arg_6370);
}
pub inline fn glGetTransformFeedbacki64_v(arg_6371: GLuint, arg_6372: GLenum, arg_6373: GLuint, arg_6374: [*c]GLint64) void {
    return epoxy_glGetTransformFeedbacki64_v.?(arg_6371, arg_6372, arg_6373, arg_6374);
}
pub const GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS = 0x8B4C;
pub const GL_MAX_VIEWPORTS = 0x825B;
pub inline fn glProgramUniformMatrix3x2dv(arg_6375: GLuint, arg_6376: GLint, arg_6377: GLsizei, arg_6378: GLboolean, arg_6379: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x2dv.?(arg_6375, arg_6376, arg_6377, arg_6378, arg_6379);
}
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_NV = 0x851E;
pub const GL_REG_25_ATI = 0x893A;
pub inline fn glPollInstrumentsSGIX(arg_6380: [*c]GLint) GLint {
    return epoxy_glPollInstrumentsSGIX.?(arg_6380);
}
pub const GL_FOG_COORD = 0x8451;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR = 0x93DD;
pub inline fn glUniformMatrix4x3fv(arg_6381: GLint, arg_6382: GLsizei, arg_6383: GLboolean, arg_6384: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x3fv.?(arg_6381, arg_6382, arg_6383, arg_6384);
}
pub const GL_SUBGROUP_FEATURE_VOTE_BIT_KHR = 0x00000002;
pub inline fn glIsNameAMD(arg_6385: GLenum, arg_6386: GLuint) GLboolean {
    return epoxy_glIsNameAMD.?(arg_6385, arg_6386);
}
pub const GL_TEXTURE_1D_ARRAY = 0x8C18;
pub inline fn glVertexAttribI1iv(arg_6387: GLuint, arg_6388: [*c]const GLint) void {
    return epoxy_glVertexAttribI1iv.?(arg_6387, arg_6388);
}
pub const GL_POLYGON_TOKEN = 0x0703;
pub const __GLIBC_USE_DEPRECATED_SCANF = 0;
pub const GL_ARB_vertex_type_2_10_10_10_rev = 1;
pub const GL_DYNAMIC_COPY = 0x88EA;
pub const __FSFILCNT64_T_TYPE = __UQUAD_TYPE;
pub inline fn glOrtho(arg_6389: GLdouble, arg_6390: GLdouble, arg_6391: GLdouble, arg_6392: GLdouble, arg_6393: GLdouble, arg_6394: GLdouble) void {
    return epoxy_glOrtho.?(arg_6389, arg_6390, arg_6391, arg_6392, arg_6393, arg_6394);
}
pub const GL_OES_EGL_image_external = 1;
pub const GL_EXT_texture_shared_exponent = 1;
pub inline fn glGetVertexArrayiv(arg_6395: GLuint, arg_6396: GLenum, arg_6397: [*c]GLint) void {
    return epoxy_glGetVertexArrayiv.?(arg_6395, arg_6396, arg_6397);
}
pub const INT_LEAST8_MIN = -128;
pub const GL_PREVIOUS_TEXTURE_INPUT_NV = 0x86E4;
pub const GL_MATRIX_INDEX_ARRAY_BUFFER_BINDING_OES = 0x8B9E;
pub const GL_TEXTURE13 = 0x84CD;
pub inline fn glVertexAttribs2svNV(arg_6398: GLuint, arg_6399: GLsizei, arg_6400: [*c]const GLshort) void {
    return epoxy_glVertexAttribs2svNV.?(arg_6398, arg_6399, arg_6400);
}
pub inline fn glGetVertexArrayPointervEXT(arg_6401: GLuint, arg_6402: GLenum, arg_6403: [*c]?*c_void) void {
    return epoxy_glGetVertexArrayPointervEXT.?(arg_6401, arg_6402, arg_6403);
}
pub const GL_QUERY_RESULT_AVAILABLE = 0x8867;
pub const GL_SMOOTH = 0x1D01;
pub const GL_MAP2_VERTEX_ATTRIB4_4_NV = 0x8674;
pub inline fn glBufferParameteriAPPLE(arg_6404: GLenum, arg_6405: GLenum, arg_6406: GLint) void {
    return epoxy_glBufferParameteriAPPLE.?(arg_6404, arg_6405, arg_6406);
}
pub inline fn glWeightbvARB(arg_6407: GLint, arg_6408: [*c]const GLbyte) void {
    return epoxy_glWeightbvARB.?(arg_6407, arg_6408);
}
pub const GL_MATRIX31_ARB = 0x88DF;
pub const GL_INT_IMAGE_2D_EXT = 0x9058;
pub const GL_MESH_VERTICES_OUT_NV = 0x9579;
pub const __GID_T_TYPE = __U32_TYPE;
pub const GL_LOW_INT = 0x8DF3;
pub inline fn glMultiTexCoord3i(arg_6409: GLenum, arg_6410: GLint, arg_6411: GLint, arg_6412: GLint) void {
    return epoxy_glMultiTexCoord3i.?(arg_6409, arg_6410, arg_6411, arg_6412);
}
pub const GL_DRAW_ELEMENTS_COMMAND_NV = 0x0002;
pub const GL_QUERY_RESOURCE_SYS_RESERVED_NV = 0x9544;
pub inline fn glColor4bv(arg_6413: [*c]const GLbyte) void {
    return epoxy_glColor4bv.?(arg_6413);
}
pub const GL_PATH_STENCIL_DEPTH_OFFSET_FACTOR_NV = 0x90BD;
pub inline fn glDrawArraysInstancedBaseInstance(arg_6414: GLenum, arg_6415: GLint, arg_6416: GLsizei, arg_6417: GLsizei, arg_6418: GLuint) void {
    return epoxy_glDrawArraysInstancedBaseInstance.?(arg_6414, arg_6415, arg_6416, arg_6417, arg_6418);
}
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 0x8C4D;
pub const GL_DEBUG_SEVERITY_LOW_KHR = 0x9148;
pub const GL_ZOOM_Y = 0x0D17;
pub const GL_COLOR_ARRAY_POINTER = 0x8090;
pub inline fn glDrawTexxOES(arg_6419: GLfixed, arg_6420: GLfixed, arg_6421: GLfixed, arg_6422: GLfixed, arg_6423: GLfixed) void {
    return epoxy_glDrawTexxOES.?(arg_6419, arg_6420, arg_6421, arg_6422, arg_6423);
}
pub inline fn glDrawBuffers(arg_6424: GLsizei, arg_6425: [*c]const GLenum) void {
    return epoxy_glDrawBuffers.?(arg_6424, arg_6425);
}
pub const PRIx8 = "x";
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE = 0x8B9A;
pub const GL_SHADER_BINARY_VIV = 0x8FC4;
pub const GL_ELEMENT_ARRAY_TYPE_APPLE = 0x8A0D;
pub const GL_EXT_window_rectangles = 1;
pub inline fn glCoverageMaskNV(arg_6426: GLboolean) void {
    return epoxy_glCoverageMaskNV.?(arg_6426);
}
pub const GL_UNIFORM_ATOMIC_COUNTER_BUFFER_INDEX = 0x92DA;
pub const GL_VIDEO_COLOR_CONVERSION_OFFSET_NV = 0x902C;
pub const GL_OFFSET_TEXTURE_RECTANGLE_NV = 0x864C;
pub inline fn glStencilMask(arg_6427: GLuint) void {
    return epoxy_glStencilMask.?(arg_6427);
}
pub const GL_MODELVIEW4_ARB = 0x8724;
pub inline fn glGetBooleanv(arg_6428: GLenum, arg_6429: [*c]GLboolean) void {
    return epoxy_glGetBooleanv.?(arg_6428, arg_6429);
}
pub inline fn glColor3bv(arg_6430: [*c]const GLbyte) void {
    return epoxy_glColor3bv.?(arg_6430);
}
pub inline fn glMultiTexCoord4xvOES(arg_6431: GLenum, arg_6432: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord4xvOES.?(arg_6431, arg_6432);
}
pub const GL_ARB_texture_compression = 1;
pub const GL_COUNTER_TYPE_AMD = 0x8BC0;
pub inline fn glTexCoord4fColor4fNormal3fVertex4fSUN(arg_6433: GLfloat, arg_6434: GLfloat, arg_6435: GLfloat, arg_6436: GLfloat, arg_6437: GLfloat, arg_6438: GLfloat, arg_6439: GLfloat, arg_6440: GLfloat, arg_6441: GLfloat, arg_6442: GLfloat, arg_6443: GLfloat, arg_6444: GLfloat, arg_6445: GLfloat, arg_6446: GLfloat, arg_6447: GLfloat) void {
    return epoxy_glTexCoord4fColor4fNormal3fVertex4fSUN.?(arg_6433, arg_6434, arg_6435, arg_6436, arg_6437, arg_6438, arg_6439, arg_6440, arg_6441, arg_6442, arg_6443, arg_6444, arg_6445, arg_6446, arg_6447);
}
pub inline fn glWindowPos2fARB(arg_6448: GLfloat, arg_6449: GLfloat) void {
    return epoxy_glWindowPos2fARB.?(arg_6448, arg_6449);
}
pub const GL_UNIFORM_BLOCK_BINDING = 0x8A3F;
pub inline fn glLightx(arg_6450: GLenum, arg_6451: GLenum, arg_6452: GLfixed) void {
    return epoxy_glLightx.?(arg_6450, arg_6451, arg_6452);
}
pub const __LDBL_HAS_INFINITY__ = 1;
pub const GL_MATRIX22_ARB = 0x88D6;
pub inline fn __nonnull(params: var) @TypeOf(__attribute__(__nonnull__ ++ params)) {
    return __attribute__(__nonnull__ ++ params);
}
pub const GL_TESS_GEN_VERTEX_ORDER_OES = 0x8E78;
pub const __DBL_EPSILON__ = 2.2204460492503131e-16;
pub const GL_EXT_rescale_normal = 1;
pub const GL_RELATIVE_SMALL_CW_ARC_TO_NV = 0x15;
pub const __CLANG_ATOMIC_CHAR_LOCK_FREE = 2;
pub const GL_DRAW_BUFFER12_NV = 0x8831;
pub inline fn glGenRenderbuffersOES(arg_6453: GLsizei, arg_6454: [*c]GLuint) void {
    return epoxy_glGenRenderbuffersOES.?(arg_6453, arg_6454);
}
pub inline fn glVertexAttrib4NubARB(arg_6455: GLuint, arg_6456: GLubyte, arg_6457: GLubyte, arg_6458: GLubyte, arg_6459: GLubyte) void {
    return epoxy_glVertexAttrib4NubARB.?(arg_6455, arg_6456, arg_6457, arg_6458, arg_6459);
}
pub inline fn glFogCoorddv(arg_6460: [*c]const GLdouble) void {
    return epoxy_glFogCoorddv.?(arg_6460);
}
pub const GL_MAX_SHININESS_NV = 0x8504;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE = 0x906B;
pub const GL_TEXTURE_RECTANGLE = 0x84F5;
pub inline fn glVertexAttribL1ui64vARB(arg_6461: GLuint, arg_6462: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64vARB.?(arg_6461, arg_6462);
}
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900F;
pub const __AES__ = 1;
pub const PRIuFAST16 = __PRIPTR_PREFIX ++ "u";
pub const __FLT_RADIX__ = 2;
pub const GL_UNIFORM_NAME_LENGTH = 0x8A39;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR = 0x93D9;
pub const GL_INT64_VEC4_NV = 0x8FEB;
pub inline fn glGetPathCommandsNV(arg_6463: GLuint, arg_6464: [*c]GLubyte) void {
    return epoxy_glGetPathCommandsNV.?(arg_6463, arg_6464);
}
pub const GL_INT_SAMPLER_3D_EXT = 0x8DCB;
pub inline fn glSecondaryColor3usvEXT(arg_6465: [*c]const GLushort) void {
    return epoxy_glSecondaryColor3usvEXT.?(arg_6465);
}
pub const GL_UNPACK_RESAMPLE_SGIX = 0x842F;
pub inline fn glGetMapControlPointsNV(arg_6466: GLenum, arg_6467: GLuint, arg_6468: GLenum, arg_6469: GLsizei, arg_6470: GLsizei, arg_6471: GLboolean, arg_6472: ?*c_void) void {
    return epoxy_glGetMapControlPointsNV.?(arg_6466, arg_6467, arg_6468, arg_6469, arg_6470, arg_6471, arg_6472);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_FOVEATION_QCOM = 0x8BFF;
pub inline fn glCheckFramebufferStatusOES(arg_6473: GLenum) GLenum {
    return epoxy_glCheckFramebufferStatusOES.?(arg_6473);
}
pub const GL_COMPRESSED_RGBA_ASTC_8x8 = 0x93B7;
pub const GL_TEXTURE3_ARB = 0x84C3;
pub inline fn glGetHistogramParameterfv(arg_6474: GLenum, arg_6475: GLenum, arg_6476: [*c]GLfloat) void {
    return epoxy_glGetHistogramParameterfv.?(arg_6474, arg_6475, arg_6476);
}
pub inline fn glSecondaryColor3f(arg_6477: GLfloat, arg_6478: GLfloat, arg_6479: GLfloat) void {
    return epoxy_glSecondaryColor3f.?(arg_6477, arg_6478, arg_6479);
}
pub const GL_SOURCE1_ALPHA = 0x8589;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY_EXT = 0x8DD7;
pub const GL_FRAGMENT_LIGHT_MODEL_NORMAL_INTERPOLATION_SGIX = 0x840B;
pub const GL_PROGRAM_STRING_NV = 0x8628;
pub const GL_WEIGHT_ARRAY_OES = 0x86AD;
pub const GL_NV_evaluators = 1;
pub const __CLANG_ATOMIC_LLONG_LOCK_FREE = 2;
pub const GL_NUM_TILING_TYPES_EXT = 0x9582;
pub const GL_DRAW_FRAMEBUFFER_EXT = 0x8CA9;
pub const GL_EXT_shadow_funcs = 1;
pub inline fn glMultiTexCoord1i(arg_6480: GLenum, arg_6481: GLint) void {
    return epoxy_glMultiTexCoord1i.?(arg_6480, arg_6481);
}
pub const GL_TOP_LEVEL_ARRAY_SIZE = 0x930C;
pub inline fn glCreateProgram() GLuint {
    return epoxy_glCreateProgram.?();
}
pub const GL_QUERY_OBJECT_EXT = 0x9153;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS_OES = 0x8A2C;
pub const GL_NV_gpu_multicast = 1;
pub inline fn glIsOcclusionQueryNV(arg_6482: GLuint) GLboolean {
    return epoxy_glIsOcclusionQueryNV.?(arg_6482);
}
pub const GL_SHARED_EDGE_NV = 0xC0;
pub const GL_DRAW_BUFFER8 = 0x882D;
pub const GL_VERTEX_ATTRIB_ARRAY_SIZE = 0x8623;
pub const GL_UNPACK_ROW_LENGTH_EXT = 0x0CF2;
pub const __FLT_MANT_DIG__ = 24;
pub const GL_DOT_PRODUCT_TEXTURE_2D_NV = 0x86EE;
pub const GL_4D_COLOR_TEXTURE = 0x0604;
pub const GL_ARB_texture_env_dot3 = 1;
pub const GL_PATH_DASH_OFFSET_RESET_NV = 0x90B4;
pub const GL_SYSTEM_FONT_NAME_NV = 0x9073;
pub const GL_SKIP_MISSING_GLYPH_NV = 0x90A9;
pub const GL_ATI_pn_triangles = 1;
pub const GL_MODELVIEW1_MATRIX_EXT = 0x8506;
pub const GL_NUM_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A2;
pub inline fn glBlendEquationEXT(arg_6483: GLenum) void {
    return epoxy_glBlendEquationEXT.?(arg_6483);
}
pub const GL_INT64_ARB = 0x140E;
pub const GL_BGRA_IMG = 0x80E1;
pub const GL_SLUMINANCE_NV = 0x8C46;
pub const GL_RGB16I_EXT = 0x8D89;
pub const GL_COLOR_ATTACHMENT12 = 0x8CEC;
pub inline fn glPNTrianglesiATI(arg_6484: GLenum, arg_6485: GLint) void {
    return epoxy_glPNTrianglesiATI.?(arg_6484, arg_6485);
}
pub const GL_MAX_DEBUG_LOGGED_MESSAGES = 0x9144;
pub inline fn glTexCoord2fColor4fNormal3fVertex3fvSUN(arg_6486: [*c]const GLfloat, arg_6487: [*c]const GLfloat, arg_6488: [*c]const GLfloat, arg_6489: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fColor4fNormal3fVertex3fvSUN.?(arg_6486, arg_6487, arg_6488, arg_6489);
}
pub const GL_MODULATE_ADD_ATI = 0x8744;
pub const GL_SLUMINANCE_ALPHA_EXT = 0x8C44;
pub inline fn glFinishObjectAPPLE(arg_6490: GLenum, arg_6491: GLint) void {
    return epoxy_glFinishObjectAPPLE.?(arg_6490, arg_6491);
}
pub const GL_TEXTURE_ALPHA_SIZE = 0x805F;
pub inline fn glDebugMessageInsertARB(arg_6492: GLenum, arg_6493: GLenum, arg_6494: GLuint, arg_6495: GLenum, arg_6496: GLsizei, arg_6497: [*c]const GLchar) void {
    return epoxy_glDebugMessageInsertARB.?(arg_6492, arg_6493, arg_6494, arg_6495, arg_6496, arg_6497);
}
pub inline fn glUnmapNamedBufferEXT(arg_6498: GLuint) GLboolean {
    return epoxy_glUnmapNamedBufferEXT.?(arg_6498);
}
pub inline fn glReplacementCodeuiVertex3fvSUN(arg_6499: [*c]const GLuint, arg_6500: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiVertex3fvSUN.?(arg_6499, arg_6500);
}
pub const GL_COMPARE_REF_TO_TEXTURE_EXT = 0x884E;
pub inline fn glRenderbufferStorageMultisampleAPPLE(arg_6501: GLenum, arg_6502: GLsizei, arg_6503: GLenum, arg_6504: GLsizei, arg_6505: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleAPPLE.?(arg_6501, arg_6502, arg_6503, arg_6504, arg_6505);
}
pub const GL_EDGE_FLAG_ARRAY_COUNT_EXT = 0x808D;
pub const GL_EXT_render_snorm = 1;
pub const GL_VIEW_CLASS_ASTC_5x5_RGBA = 0x938A;
pub inline fn glPixelTexGenParameterivSGIS(arg_6506: GLenum, arg_6507: [*c]const GLint) void {
    return epoxy_glPixelTexGenParameterivSGIS.?(arg_6506, arg_6507);
}
pub const PRIiLEAST8 = "i";
pub const GL_FRAMEBUFFER_RENDERABLE_LAYERED = 0x828A;
pub const GL_PATCH_DEFAULT_INNER_LEVEL_EXT = 0x8E73;
pub const GL_POST_TEXTURE_FILTER_BIAS_RANGE_SGIX = 0x817B;
pub inline fn glGetTexEnvxvOES(arg_6508: GLenum, arg_6509: GLenum, arg_6510: [*c]GLfixed) void {
    return epoxy_glGetTexEnvxvOES.?(arg_6508, arg_6509, arg_6510);
}
pub inline fn glShaderBinary(arg_6511: GLsizei, arg_6512: [*c]const GLuint, arg_6513: GLenum, arg_6514: ?*const c_void, arg_6515: GLsizei) void {
    return epoxy_glShaderBinary.?(arg_6511, arg_6512, arg_6513, arg_6514, arg_6515);
}
pub const GL_UNPACK_IMAGE_HEIGHT_EXT = 0x806E;
pub const GL_TEXTURE_BUFFER = 0x8C2A;
pub const GL_DIFFERENCE_NV = 0x929E;
pub const GL_COMPARE_REF_DEPTH_TO_TEXTURE_EXT = 0x884E;
pub const GL_DUAL_INTENSITY8_SGIS = 0x8119;
pub inline fn glCompressedTexSubImage2D(arg_6516: GLenum, arg_6517: GLint, arg_6518: GLint, arg_6519: GLint, arg_6520: GLsizei, arg_6521: GLsizei, arg_6522: GLenum, arg_6523: GLsizei, arg_6524: ?*const c_void) void {
    return epoxy_glCompressedTexSubImage2D.?(arg_6516, arg_6517, arg_6518, arg_6519, arg_6520, arg_6521, arg_6522, arg_6523, arg_6524);
}
pub const GL_TRANSFORM_FEEDBACK_STREAM_OVERFLOW = 0x82ED;
pub const GL_EXT_texture_compression_s3tc = 1;
pub const GL_ALPHA_TO_COVERAGE_DITHER_MODE_NV = 0x92BF;
pub const GL_VERSION = 0x1F02;
pub const GL_R8I = 0x8231;
pub inline fn glVertexStream3svATI(arg_6525: GLenum, arg_6526: [*c]const GLshort) void {
    return epoxy_glVertexStream3svATI.?(arg_6525, arg_6526);
}
pub const GL_SGIX_reference_plane = 1;
pub inline fn glVertexAttrib4NsvARB(arg_6527: GLuint, arg_6528: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4NsvARB.?(arg_6527, arg_6528);
}
pub const __FLT_MIN_EXP__ = -125;
pub const GL_ARB_color_buffer_float = 1;
pub const GL_ARB_framebuffer_sRGB = 1;
pub const GL_MAP2_VERTEX_ATTRIB3_4_NV = 0x8673;
pub inline fn glConvolutionParameteriEXT(arg_6529: GLenum, arg_6530: GLenum, arg_6531: GLint) void {
    return epoxy_glConvolutionParameteriEXT.?(arg_6529, arg_6530, arg_6531);
}
pub inline fn glVertexAttribI4iv(arg_6532: GLuint, arg_6533: [*c]const GLint) void {
    return epoxy_glVertexAttribI4iv.?(arg_6532, arg_6533);
}
pub const _LP64 = 1;
pub inline fn glVertexArrayAttribBinding(arg_6534: GLuint, arg_6535: GLuint, arg_6536: GLuint) void {
    return epoxy_glVertexArrayAttribBinding.?(arg_6534, arg_6535, arg_6536);
}
pub const __WINT_UNSIGNED__ = 1;
pub const GL_INNOCENT_CONTEXT_RESET = 0x8254;
pub const GL_INT8_NV = 0x8FE0;
pub inline fn glRecti(arg_6537: GLint, arg_6538: GLint, arg_6539: GLint, arg_6540: GLint) void {
    return epoxy_glRecti.?(arg_6537, arg_6538, arg_6539, arg_6540);
}
pub inline fn glUniform1dv(arg_6541: GLint, arg_6542: GLsizei, arg_6543: [*c]const GLdouble) void {
    return epoxy_glUniform1dv.?(arg_6541, arg_6542, arg_6543);
}
pub const GL_PROXY_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9103;
pub const __FLT_MAX__ = @as(f32, 3.40282347e+38);
pub inline fn glSecondaryColor3bEXT(arg_6544: GLbyte, arg_6545: GLbyte, arg_6546: GLbyte) void {
    return epoxy_glSecondaryColor3bEXT.?(arg_6544, arg_6545, arg_6546);
}
pub const GL_EVAL_VERTEX_ATTRIB15_NV = 0x86D5;
pub const GL_CURRENT_MATRIX_INDEX_ARB = 0x8845;
pub inline fn glWindowPos3dMESA(arg_6547: GLdouble, arg_6548: GLdouble, arg_6549: GLdouble) void {
    return epoxy_glWindowPos3dMESA.?(arg_6547, arg_6548, arg_6549);
}
pub inline fn glDrawCommandsNV(arg_6550: GLenum, arg_6551: GLuint, arg_6552: [*c]const GLintptr, arg_6553: [*c]const GLsizei, arg_6554: GLuint) void {
    return epoxy_glDrawCommandsNV.?(arg_6550, arg_6551, arg_6552, arg_6553, arg_6554);
}
pub inline fn glMultiTexCoord1d(arg_6555: GLenum, arg_6556: GLdouble) void {
    return epoxy_glMultiTexCoord1d.?(arg_6555, arg_6556);
}
pub inline fn glResetMinmaxEXT(arg_6557: GLenum) void {
    return epoxy_glResetMinmaxEXT.?(arg_6557);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_OES = 0x8CDC;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X = 0x8516;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_EXT = 0x9307;
pub inline fn glMultiTexCoord4hNV(arg_6558: GLenum, arg_6559: GLhalfNV, arg_6560: GLhalfNV, arg_6561: GLhalfNV, arg_6562: GLhalfNV) void {
    return epoxy_glMultiTexCoord4hNV.?(arg_6558, arg_6559, arg_6560, arg_6561, arg_6562);
}
pub const GL_INT_VEC2_ARB = 0x8B53;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_RECTANGLE_NV = 0x8857;
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 0x8CD1;
pub inline fn glGetCompressedTextureSubImage(arg_6563: GLuint, arg_6564: GLint, arg_6565: GLint, arg_6566: GLint, arg_6567: GLint, arg_6568: GLsizei, arg_6569: GLsizei, arg_6570: GLsizei, arg_6571: GLsizei, arg_6572: ?*c_void) void {
    return epoxy_glGetCompressedTextureSubImage.?(arg_6563, arg_6564, arg_6565, arg_6566, arg_6567, arg_6568, arg_6569, arg_6570, arg_6571, arg_6572);
}
pub const GL_R32F_EXT = 0x822E;
pub const GL_MODELVIEW0_MATRIX_EXT = 0x0BA6;
pub inline fn glIndexxOES(arg_6573: GLfixed) void {
    return epoxy_glIndexxOES.?(arg_6573);
}
pub const GL_VIEW_CLASS_ASTC_8x5_RGBA = 0x938D;
pub const __FLT_DENORM_MIN__ = @as(f32, 1.40129846e-45);
pub const GL_PIXEL_PACK_BUFFER_BINDING_ARB = 0x88ED;
pub const GL_VERSION_ES_CL_1_1 = 1;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX = 0x825F;
pub const GL_DYNAMIC_READ = 0x88E9;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS = 0x8C8A;
pub const GL_VERTEX_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA2;
pub inline fn glDeleteFramebuffers(arg_6574: GLsizei, arg_6575: [*c]const GLuint) void {
    return epoxy_glDeleteFramebuffers.?(arg_6574, arg_6575);
}
pub const GL_SRC1_COLOR = 0x88F9;
pub inline fn glTangent3dvEXT(arg_6576: [*c]const GLdouble) void {
    return epoxy_glTangent3dvEXT.?(arg_6576);
}
pub inline fn glVertexAttribI4usv(arg_6577: GLuint, arg_6578: [*c]const GLushort) void {
    return epoxy_glVertexAttribI4usv.?(arg_6577, arg_6578);
}
pub const GL_DEBUG_SOURCE_SHADER_COMPILER_ARB = 0x8248;
pub inline fn glSecondaryColorPointerEXT(arg_6579: GLint, arg_6580: GLenum, arg_6581: GLsizei, arg_6582: ?*const c_void) void {
    return epoxy_glSecondaryColorPointerEXT.?(arg_6579, arg_6580, arg_6581, arg_6582);
}
pub const GL_MAX_TEXTURE_UNITS = 0x84E2;
pub const PRIuLEAST8 = "u";
pub inline fn glMultiTexCoord4svARB(arg_6583: GLenum, arg_6584: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord4svARB.?(arg_6583, arg_6584);
}
pub inline fn glCreateCommandListsNV(arg_6585: GLsizei, arg_6586: [*c]GLuint) void {
    return epoxy_glCreateCommandListsNV.?(arg_6585, arg_6586);
}
pub const GL_ZERO_TO_ONE_EXT = 0x935F;
pub inline fn glIndexFuncEXT(arg_6587: GLenum, arg_6588: GLclampf) void {
    return epoxy_glIndexFuncEXT.?(arg_6587, arg_6588);
}
pub const GL_COMMAND_BARRIER_BIT_EXT = 0x00000040;
pub const GL_RGB32F_ARB = 0x8815;
pub inline fn glCompressedTexImage3D(arg_6589: GLenum, arg_6590: GLint, arg_6591: GLenum, arg_6592: GLsizei, arg_6593: GLsizei, arg_6594: GLsizei, arg_6595: GLint, arg_6596: GLsizei, arg_6597: ?*const c_void) void {
    return epoxy_glCompressedTexImage3D.?(arg_6589, arg_6590, arg_6591, arg_6592, arg_6593, arg_6594, arg_6595, arg_6596, arg_6597);
}
pub const GL_VERTEX_ATTRIB_ARRAY_DIVISOR_ARB = 0x88FE;
pub const GL_RGB_RAW_422_APPLE = 0x8A51;
pub const GL_ELEMENT_ARRAY_APPLE = 0x8A0C;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6 = 0x93D4;
pub const GL_FOG_HINT = 0x0C54;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_OES = 0x92CF;
pub const GL_UNPACK_SKIP_PIXELS_EXT = 0x0CF4;
pub const GL_FLOAT_MAT4x2_NV = 0x8B69;
pub const GL_ALPHA_MIN_SGIX = 0x8320;
pub const GL_R16_SNORM = 0x8F98;
pub const GL_TEXTURE_ALPHA_MODULATE_IMG = 0x8C06;
pub const GL_VERTEX_ELEMENT_SWIZZLE_AMD = 0x91A4;
pub const __FSFILCNT_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const GL_LUMINANCE_ALPHA_INTEGER_EXT = 0x8D9D;
pub const GL_SHADING_RATE_8_INVOCATIONS_PER_PIXEL_NV = 0x956E;
pub const GL_RGB8UI = 0x8D7D;
pub const GL_OFFSET_HILO_TEXTURE_2D_NV = 0x8854;
pub const GL_SKIP_COMPONENTS2_NV = -5;
pub const GL_REDUCE = 0x8016;
pub inline fn glMapObjectBufferATI(arg_6598: GLuint) ?*c_void {
    return epoxy_glMapObjectBufferATI.?(arg_6598);
}
pub inline fn glFramebufferTextureFaceEXT(arg_6599: GLenum, arg_6600: GLenum, arg_6601: GLuint, arg_6602: GLint, arg_6603: GLenum) void {
    return epoxy_glFramebufferTextureFaceEXT.?(arg_6599, arg_6600, arg_6601, arg_6602, arg_6603);
}
pub inline fn glLogicOp(arg_6604: GLenum) void {
    return epoxy_glLogicOp.?(arg_6604);
}
pub inline fn glIsBufferARB(arg_6605: GLuint) GLboolean {
    return epoxy_glIsBufferARB.?(arg_6605);
}
pub const GL_OUTPUT_TEXTURE_COORD25_EXT = 0x87B6;
pub const GL_GEOMETRY_DEFORMATION_BIT_SGIX = 0x00000002;
pub inline fn glPointParameterfARB(arg_6606: GLenum, arg_6607: GLfloat) void {
    return epoxy_glPointParameterfARB.?(arg_6606, arg_6607);
}
pub inline fn glProgramUniformMatrix2dvEXT(arg_6608: GLuint, arg_6609: GLint, arg_6610: GLsizei, arg_6611: GLboolean, arg_6612: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2dvEXT.?(arg_6608, arg_6609, arg_6610, arg_6611, arg_6612);
}
pub const GL_PROGRAM_BINARY_RETRIEVABLE_HINT = 0x8257;
pub inline fn glGetnUniformdv(arg_6613: GLuint, arg_6614: GLint, arg_6615: GLsizei, arg_6616: [*c]GLdouble) void {
    return epoxy_glGetnUniformdv.?(arg_6613, arg_6614, arg_6615, arg_6616);
}
pub const GL_TEXTURE_DEFORMATION_SGIX = 0x8195;
pub const GL_INTEL_map_texture = 1;
pub inline fn glVertexAttribL2dvEXT(arg_6617: GLuint, arg_6618: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL2dvEXT.?(arg_6617, arg_6618);
}
pub const __gnu_linux__ = 1;
pub const GL_INT8_VEC4_NV = 0x8FE3;
pub const GL_REPLACEMENT_CODE_ARRAY_TYPE_SUN = 0x85C1;
pub const GL_MEDIUM_FLOAT = 0x8DF1;
pub const GL_DEPTH_COMPONENT24_OES = 0x81A6;
pub const GL_SMALL_CCW_ARC_TO_NV = 0x12;
pub const SCNd8 = "hhd";
pub const GL_UNKNOWN_CONTEXT_RESET_EXT = 0x8255;
pub const GL_DEPTH_CLAMP_FAR_AMD = 0x901F;
pub inline fn glMaterialf(arg_6619: GLenum, arg_6620: GLenum, arg_6621: GLfloat) void {
    return epoxy_glMaterialf.?(arg_6619, arg_6620, arg_6621);
}
pub const __SYSCALL_ULONG_TYPE = __ULONGWORD_TYPE;
pub inline fn glGenerateTextureMipmap(arg_6622: GLuint) void {
    return epoxy_glGenerateTextureMipmap.?(arg_6622);
}
pub const GL_SOURCE1_RGB = 0x8581;
pub inline fn glVariantPointerEXT(arg_6623: GLuint, arg_6624: GLenum, arg_6625: GLuint, arg_6626: ?*const c_void) void {
    return epoxy_glVariantPointerEXT.?(arg_6623, arg_6624, arg_6625, arg_6626);
}
pub const GL_MIXED_STENCIL_SAMPLES_SUPPORTED_NV = 0x9330;
pub const GL_COMPRESSED_SIGNED_RG_RGTC2 = 0x8DBE;
pub const GL_COLOR_ATTACHMENT0_NV = 0x8CE0;
pub inline fn glBindBufferRange(arg_6627: GLenum, arg_6628: GLuint, arg_6629: GLuint, arg_6630: GLintptr, arg_6631: GLsizeiptr) void {
    return epoxy_glBindBufferRange.?(arg_6627, arg_6628, arg_6629, arg_6630, arg_6631);
}
pub const __GCC_ATOMIC_CHAR_LOCK_FREE = 2;
pub const GL_CONSERVATIVE_RASTER_DILATE_NV = 0x9379;
pub const GL_DRAW_BUFFER0 = 0x8825;
pub inline fn glTextureStorageMem3DEXT(arg_6632: GLuint, arg_6633: GLsizei, arg_6634: GLenum, arg_6635: GLsizei, arg_6636: GLsizei, arg_6637: GLsizei, arg_6638: GLuint, arg_6639: GLuint64) void {
    return epoxy_glTextureStorageMem3DEXT.?(arg_6632, arg_6633, arg_6634, arg_6635, arg_6636, arg_6637, arg_6638, arg_6639);
}
pub inline fn glGetHistogramEXT(arg_6640: GLenum, arg_6641: GLboolean, arg_6642: GLenum, arg_6643: GLenum, arg_6644: ?*c_void) void {
    return epoxy_glGetHistogramEXT.?(arg_6640, arg_6641, arg_6642, arg_6643, arg_6644);
}
pub const GL_TESS_CONTROL_TEXTURE = 0x829C;
pub const GL_RIGHT = 0x0407;
pub inline fn glMatrixFrustumEXT(arg_6645: GLenum, arg_6646: GLdouble, arg_6647: GLdouble, arg_6648: GLdouble, arg_6649: GLdouble, arg_6650: GLdouble, arg_6651: GLdouble) void {
    return epoxy_glMatrixFrustumEXT.?(arg_6645, arg_6646, arg_6647, arg_6648, arg_6649, arg_6650, arg_6651);
}
pub inline fn glVertex2sv(arg_6652: [*c]const GLshort) void {
    return epoxy_glVertex2sv.?(arg_6652);
}
pub inline fn glReplacementCodeubvSUN(arg_6653: [*c]const GLubyte) void {
    return epoxy_glReplacementCodeubvSUN.?(arg_6653);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT = 0x8CDA;
pub const GL_PURGED_CONTEXT_RESET_NV = 0x92BB;
pub inline fn glVertexAttribL1i64NV(arg_6654: GLuint, arg_6655: GLint64EXT) void {
    return epoxy_glVertexAttribL1i64NV.?(arg_6654, arg_6655);
}
pub const GL_QUERY_KHR = 0x82E3;
pub const GL_GS_SHADER_BINARY_MTK = 0x9640;
pub inline fn glPathMemoryGlyphIndexArrayNV(arg_6656: GLuint, arg_6657: GLenum, arg_6658: GLsizeiptr, arg_6659: ?*const c_void, arg_6660: GLsizei, arg_6661: GLuint, arg_6662: GLsizei, arg_6663: GLuint, arg_6664: GLfloat) GLenum {
    return epoxy_glPathMemoryGlyphIndexArrayNV.?(arg_6656, arg_6657, arg_6658, arg_6659, arg_6660, arg_6661, arg_6662, arg_6663, arg_6664);
}
pub const GL_EXT_texture_query_lod = 1;
pub const GL_MULTISAMPLE_BUFFER_BIT6_QCOM = 0x40000000;
pub const GL_VERTEX_PROGRAM_POINT_SIZE_ARB = 0x8642;
pub inline fn glGetBufferParameterivARB(arg_6665: GLenum, arg_6666: GLenum, arg_6667: [*c]GLint) void {
    return epoxy_glGetBufferParameterivARB.?(arg_6665, arg_6666, arg_6667);
}
pub const GL_SRC_COLOR = 0x0300;
pub const GL_SHADER_BINARY_FORMAT_SPIR_V_ARB = 0x9551;
pub const GL_NV_vertex_attrib_integer_64bit = 1;
pub inline fn glArrayElementEXT(arg_6668: GLint) void {
    return epoxy_glArrayElementEXT.?(arg_6668);
}
pub const GL_EQUIV = 0x1509;
pub inline fn glBinormal3bvEXT(arg_6669: [*c]const GLbyte) void {
    return epoxy_glBinormal3bvEXT.?(arg_6669);
}
pub inline fn glSamplerParameteriv(arg_6670: GLuint, arg_6671: GLenum, arg_6672: [*c]const GLint) void {
    return epoxy_glSamplerParameteriv.?(arg_6670, arg_6671, arg_6672);
}
pub const GL_TEXTURE_1D_BINDING_EXT = 0x8068;
pub inline fn glGetUniformSubroutineuiv(arg_6673: GLenum, arg_6674: GLint, arg_6675: [*c]GLuint) void {
    return epoxy_glGetUniformSubroutineuiv.?(arg_6673, arg_6674, arg_6675);
}
pub const GL_RESET_NOTIFICATION_STRATEGY_EXT = 0x8256;
pub inline fn glProvokingVertexEXT(arg_6676: GLenum) void {
    return epoxy_glProvokingVertexEXT.?(arg_6676);
}
pub inline fn glIndexi(arg_6677: GLint) void {
    return epoxy_glIndexi.?(arg_6677);
}
pub const GL_FOG_COORDINATE_ARRAY_STRIDE = 0x8455;
pub const GL_OES_vertex_half_float = 1;
pub const GL_COMPILE = 0x1300;
pub const GL_LAYER_PROVOKING_VERTEX_EXT = 0x825E;
pub const GL_PROXY_TEXTURE_2D_EXT = 0x8064;
pub const GL_QUERY_RESULT_AVAILABLE_EXT = 0x8867;
pub inline fn glVertexAttribL3dEXT(arg_6678: GLuint, arg_6679: GLdouble, arg_6680: GLdouble, arg_6681: GLdouble) void {
    return epoxy_glVertexAttribL3dEXT.?(arg_6678, arg_6679, arg_6680, arg_6681);
}
pub const GL_KHR_texture_compression_astc_hdr = 1;
pub const GL_OUTPUT_VERTEX_EXT = 0x879A;
pub inline fn glTextureParameterf(arg_6682: GLuint, arg_6683: GLenum, arg_6684: GLfloat) void {
    return epoxy_glTextureParameterf.?(arg_6682, arg_6683, arg_6684);
}
pub const GL_ALPHA4_EXT = 0x803B;
pub const GL_PIXEL_FRAGMENT_RGB_SOURCE_SGIS = 0x8354;
pub const __seg_fs = __attribute__(address_space(257));
pub inline fn glColor4xvOES(arg_6685: [*c]const GLfixed) void {
    return epoxy_glColor4xvOES.?(arg_6685);
}
pub const GL_MAX_PROGRAM_GENERIC_RESULTS_NV = 0x8DA6;
pub inline fn glGetNamedBufferParameterivEXT(arg_6686: GLuint, arg_6687: GLenum, arg_6688: [*c]GLint) void {
    return epoxy_glGetNamedBufferParameterivEXT.?(arg_6686, arg_6687, arg_6688);
}
pub inline fn glGetArrayObjectfvATI(arg_6689: GLenum, arg_6690: GLenum, arg_6691: [*c]GLfloat) void {
    return epoxy_glGetArrayObjectfvATI.?(arg_6689, arg_6690, arg_6691);
}
pub const GL_TEXTURE_FLOAT_COMPONENTS_NV = 0x888C;
pub const GL_CLIPPING_OUTPUT_PRIMITIVES = 0x82F7;
pub const GL_GEOMETRY_SHADER_BIT_EXT = 0x00000004;
pub inline fn glTexCoord2fColor3fVertex3fSUN(arg_6692: GLfloat, arg_6693: GLfloat, arg_6694: GLfloat, arg_6695: GLfloat, arg_6696: GLfloat, arg_6697: GLfloat, arg_6698: GLfloat, arg_6699: GLfloat) void {
    return epoxy_glTexCoord2fColor3fVertex3fSUN.?(arg_6692, arg_6693, arg_6694, arg_6695, arg_6696, arg_6697, arg_6698, arg_6699);
}
pub const GL_MAX_SAMPLES_IMG = 0x9135;
pub const GL_NV_conservative_raster_pre_snap = 1;
pub const GL_BUFFER_SERIALIZED_MODIFY_APPLE = 0x8A12;
pub const GL_DUP_LAST_CUBIC_CURVE_TO_NV = 0xF4;
pub inline fn glUniform4iv(arg_6700: GLint, arg_6701: GLsizei, arg_6702: [*c]const GLint) void {
    return epoxy_glUniform4iv.?(arg_6700, arg_6701, arg_6702);
}
pub const GL_LUMINANCE_ALPHA_SNORM = 0x9012;
pub inline fn __LDBL_REDIR1(name: var, proto: var, alias: var) @TypeOf(name ++ proto) {
    return name ++ proto;
}
pub const GL_ARB_bindless_texture = 1;
pub const GL_VERTEX_SHADER_ARB = 0x8B31;
pub const GL_COLOR_MATERIAL = 0x0B57;
pub const GL_LUMINANCE8_ALPHA8_EXT = 0x8045;
pub const GL_N3F_V3F = 0x2A25;
pub const GL_RG8UI = 0x8238;
pub const GL_INT_IMAGE_CUBE = 0x905B;
pub const __FXSR__ = 1;
pub inline fn glMatrixIndexPointerOES(arg_6703: GLint, arg_6704: GLenum, arg_6705: GLsizei, arg_6706: ?*const c_void) void {
    return epoxy_glMatrixIndexPointerOES.?(arg_6703, arg_6704, arg_6705, arg_6706);
}
pub inline fn glMultiDrawElementsIndirect(arg_6707: GLenum, arg_6708: GLenum, arg_6709: ?*const c_void, arg_6710: GLsizei, arg_6711: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirect.?(arg_6707, arg_6708, arg_6709, arg_6710, arg_6711);
}
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_SCALE_NV = 0x8851;
pub const GL_ARB_gpu_shader5 = 1;
pub const GL_NV_vertex_array_range2 = 1;
pub const GL_NV_path_rendering_shared_edge = 1;
pub const GL_MAX_VARYING_FLOATS_ARB = 0x8B4B;
pub const GL_MAX_ELEMENTS_INDICES = 0x80E9;
pub const GL_OBJECT_ACTIVE_UNIFORMS_ARB = 0x8B86;
pub inline fn glWindowPos4svMESA(arg_6712: [*c]const GLshort) void {
    return epoxy_glWindowPos4svMESA.?(arg_6712);
}
pub const GL_TRIANGLE_STRIP = 0x0005;
pub const GL_HP_convolution_border_modes = 1;
pub const GL_STENCIL_ATTACHMENT_EXT = 0x8D20;
pub inline fn glGetBufferParameteriv(arg_6713: GLenum, arg_6714: GLenum, arg_6715: [*c]GLint) void {
    return epoxy_glGetBufferParameteriv.?(arg_6713, arg_6714, arg_6715);
}
pub const GL_3D_COLOR_TEXTURE = 0x0603;
pub const GL_FRAMEBUFFER_EXT = 0x8D40;
pub const GL_VERTEX_ATTRIB_ARRAY_NORMALIZED_ARB = 0x886A;
pub inline fn glIndexfv(arg_6716: [*c]const GLfloat) void {
    return epoxy_glIndexfv.?(arg_6716);
}
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x906B;
pub const GL_SAMPLER_CUBE = 0x8B60;
pub const GL_WRITE_ONLY_ARB = 0x88B9;
pub const GL_UNSIGNED_INT64_VEC2_ARB = 0x8FF5;
pub const GL_R16F = 0x822D;
pub inline fn glVertex4hvNV(arg_6717: [*c]const GLhalfNV) void {
    return epoxy_glVertex4hvNV.?(arg_6717);
}
pub const GL_UNSIGNED_INT64_VEC4_ARB = 0x8FF7;
pub const GL_REG_19_ATI = 0x8934;
pub const GL_MAX_UNIFORM_BLOCK_SIZE = 0x8A30;
pub inline fn glMultiTexCoord4bvOES(arg_6718: GLenum, arg_6719: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord4bvOES.?(arg_6718, arg_6719);
}
pub inline fn glBindTransformFeedbackNV(arg_6720: GLenum, arg_6721: GLuint) void {
    return epoxy_glBindTransformFeedbackNV.?(arg_6720, arg_6721);
}
pub inline fn glIndexd(arg_6722: GLdouble) void {
    return epoxy_glIndexd.?(arg_6722);
}
pub const __GXX_ABI_VERSION = 1002;
pub const GL_MAT_SHININESS_BIT_PGI = 0x02000000;
pub const GL_MAX_TESS_GEN_LEVEL_OES = 0x8E7E;
pub const GL_EDGEFLAG_BIT_PGI = 0x00040000;
pub const GL_CONVOLUTION_FILTER_BIAS_EXT = 0x8015;
pub const GL_BUFFER_MAPPED = 0x88BC;
pub const GL_EXT_shader_framebuffer_fetch_non_coherent = 1;
pub const GL_UNSIGNED_INVERT_NV = 0x8537;
pub const GL_FOG_COORDINATE_ARRAY_STRIDE_EXT = 0x8455;
pub const GL_OPERAND1_ALPHA_ARB = 0x8599;
pub const GL_RGBA8_EXT = 0x8058;
pub const GL_ARB_get_texture_sub_image = 1;
pub const GL_RGBA_FLOAT_MODE_ARB = 0x8820;
pub const GL_QUAD_INTENSITY4_SGIS = 0x8122;
pub const GL_RGB9_E5_APPLE = 0x8C3D;
pub const GL_MAX_PROGRAM_SUBROUTINE_PARAMETERS_NV = 0x8F44;
pub inline fn glProgramUniform2dEXT(arg_6723: GLuint, arg_6724: GLint, arg_6725: GLdouble, arg_6726: GLdouble) void {
    return epoxy_glProgramUniform2dEXT.?(arg_6723, arg_6724, arg_6725, arg_6726);
}
pub const GL_LINES_ADJACENCY_ARB = 0x000A;
pub const GL_STORAGE_SHARED_APPLE = 0x85BF;
pub const GL_DRAW_BUFFER3_ATI = 0x8828;
pub inline fn glRasterPos4s(arg_6727: GLshort, arg_6728: GLshort, arg_6729: GLshort, arg_6730: GLshort) void {
    return epoxy_glRasterPos4s.?(arg_6727, arg_6728, arg_6729, arg_6730);
}
pub const GL_LINE_TO_NV = 0x04;
pub const GL_PERFQUERY_COUNTER_EVENT_INTEL = 0x94F0;
pub inline fn glBinormal3dvEXT(arg_6731: [*c]const GLdouble) void {
    return epoxy_glBinormal3dvEXT.?(arg_6731);
}
pub const GL_MAX_MATRIX_PALETTE_STACK_DEPTH_ARB = 0x8841;
pub const GL_SIGNED_HILO8_NV = 0x885F;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_NV = 0x8C84;
pub const GL_COMBINE_RGB_EXT = 0x8571;
pub const GL_POLYGON_OFFSET_UNITS = 0x2A00;
pub inline fn glDisableVertexAttribArrayARB(arg_6732: GLuint) void {
    return epoxy_glDisableVertexAttribArrayARB.?(arg_6732);
}
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_ARB = 0x8515;
pub const GL_AMD_pinned_memory = 1;
pub const GL_ATC_RGBA_EXPLICIT_ALPHA_AMD = 0x8C93;
pub const GL_TEXTURE_COMPARE_SGIX = 0x819A;
pub inline fn glBeginTransformFeedbackNV(arg_6733: GLenum) void {
    return epoxy_glBeginTransformFeedbackNV.?(arg_6733);
}
pub const GL_OES_geometry_point_size = 1;
pub const GL_ALPHA_MAX_CLAMP_INGR = 0x8567;
pub const GL_MAX_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E11;
pub inline fn glUniform2uiEXT(arg_6734: GLint, arg_6735: GLuint, arg_6736: GLuint) void {
    return epoxy_glUniform2uiEXT.?(arg_6734, arg_6735, arg_6736);
}
pub const GL_DISTANCE_ATTENUATION_EXT = 0x8129;
pub const GL_FLOAT_VEC4 = 0x8B52;
pub inline fn glBeginFragmentShaderATI() void {
    return epoxy_glBeginFragmentShaderATI.?();
}
pub const GL_TEXTURE_CUBE_MAP = 0x8513;
pub inline fn glColorTableParameterfv(arg_6737: GLenum, arg_6738: GLenum, arg_6739: [*c]const GLfloat) void {
    return epoxy_glColorTableParameterfv.?(arg_6737, arg_6738, arg_6739);
}
pub inline fn glVertexAttribI3uivEXT(arg_6740: GLuint, arg_6741: [*c]const GLuint) void {
    return epoxy_glVertexAttribI3uivEXT.?(arg_6740, arg_6741);
}
pub const GL_DSDT_NV = 0x86F5;
pub const GL_MAP1_VERTEX_ATTRIB2_4_NV = 0x8662;
pub const GL_INT16_VEC2_NV = 0x8FE5;
pub inline fn glTexGenfvOES(arg_6742: GLenum, arg_6743: GLenum, arg_6744: [*c]const GLfloat) void {
    return epoxy_glTexGenfvOES.?(arg_6742, arg_6743, arg_6744);
}
pub const GL_CLAMP_TO_BORDER_EXT = 0x812D;
pub const GL_DEPTH_RANGE = 0x0B70;
pub inline fn glEndQueryIndexed(arg_6745: GLenum, arg_6746: GLuint) void {
    return epoxy_glEndQueryIndexed.?(arg_6745, arg_6746);
}
pub const GL_LIGHT4 = 0x4004;
pub inline fn glVertexStream2sATI(arg_6747: GLenum, arg_6748: GLshort, arg_6749: GLshort) void {
    return epoxy_glVertexStream2sATI.?(arg_6747, arg_6748, arg_6749);
}
pub const GL_FILTER = 0x829A;
pub const GL_IMAGE_2D_EXT = 0x904D;
pub const GL_VIEWPORT_POSITION_W_SCALE_NV = 0x937C;
pub inline fn glGetPathTexGenfvNV(arg_6750: GLenum, arg_6751: GLenum, arg_6752: [*c]GLfloat) void {
    return epoxy_glGetPathTexGenfvNV.?(arg_6750, arg_6751, arg_6752);
}
pub const GL_SHADER_SOURCE_LENGTH = 0x8B88;
pub inline fn glMatrixMultdEXT(arg_6753: GLenum, arg_6754: [*c]const GLdouble) void {
    return epoxy_glMatrixMultdEXT.?(arg_6753, arg_6754);
}
pub inline fn glUniformMatrix2x3fv(arg_6755: GLint, arg_6756: GLsizei, arg_6757: GLboolean, arg_6758: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix2x3fv.?(arg_6755, arg_6756, arg_6757, arg_6758);
}
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_ARB = 0x8516;
pub inline fn glVertexAttrib3dvNV(arg_6759: GLuint, arg_6760: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib3dvNV.?(arg_6759, arg_6760);
}
pub const __XSAVE__ = 1;
pub const GL_MIN_SPARSE_LEVEL_AMD = 0x919B;
pub inline fn glTexSubImage3DEXT(arg_6761: GLenum, arg_6762: GLint, arg_6763: GLint, arg_6764: GLint, arg_6765: GLint, arg_6766: GLsizei, arg_6767: GLsizei, arg_6768: GLsizei, arg_6769: GLenum, arg_6770: GLenum, arg_6771: ?*const c_void) void {
    return epoxy_glTexSubImage3DEXT.?(arg_6761, arg_6762, arg_6763, arg_6764, arg_6765, arg_6766, arg_6767, arg_6768, arg_6769, arg_6770, arg_6771);
}
pub inline fn glArrayElement(arg_6772: GLint) void {
    return epoxy_glArrayElement.?(arg_6772);
}
pub const GL_LUMINANCE8_ALPHA8 = 0x8045;
pub const GL_SGIX_flush_raster = 1;
pub const GL_VIEW_CLASS_128_BITS = 0x82C4;
pub const GL_SELECTION_BUFFER_POINTER = 0x0DF3;
pub const GL_COLOR_BUFFER_BIT0_QCOM = 0x00000001;
pub const GL_SCALED_RESOLVE_NICEST_EXT = 0x90BB;
pub const GL_TEXTURE14 = 0x84CE;
pub const GL_FRAGMENT_DEPTH = 0x8452;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_ARB = 0x8640;
pub const GL_OFFSET_HILO_TEXTURE_RECTANGLE_NV = 0x8855;
pub const GL_SGIS_texture_lod = 1;
pub const GL_UNSIGNED_INT_SAMPLER_2D_ARRAY = 0x8DD7;
pub const GL_TEXTURE_UPDATE_BARRIER_BIT = 0x00000100;
pub const GL_STENCIL_VALUE_MASK = 0x0B93;
pub const GL_GLYPH_VERTICAL_BEARING_ADVANCE_BIT_NV = 0x80;
pub const __LONG_LONG_MAX__ = @as(c_longlong, 9223372036854775807);
pub const GL_WRITE_ONLY = 0x88B9;
pub const GL_SAMPLER_2D_MULTISAMPLE = 0x9108;
pub const GL_POINT_SPRITE_NV = 0x8861;
pub const GL_DEBUG_OUTPUT = 0x92E0;
pub const GL_NV_fragment_program4 = 1;
pub inline fn glCopyTexSubImage2DEXT(arg_6773: GLenum, arg_6774: GLint, arg_6775: GLint, arg_6776: GLint, arg_6777: GLint, arg_6778: GLint, arg_6779: GLsizei, arg_6780: GLsizei) void {
    return epoxy_glCopyTexSubImage2DEXT.?(arg_6773, arg_6774, arg_6775, arg_6776, arg_6777, arg_6778, arg_6779, arg_6780);
}
pub const GL_MAX_FRAGMENT_BINDABLE_UNIFORMS_EXT = 0x8DE3;
pub const GL_STENCIL_BACK_WRITEMASK = 0x8CA5;
pub const GL_RGB5_EXT = 0x8050;
pub inline fn glNormalP3uiv(arg_6781: GLenum, arg_6782: [*c]const GLuint) void {
    return epoxy_glNormalP3uiv.?(arg_6781, arg_6782);
}
pub const GL_SMOOTH_LINE_WIDTH_RANGE = 0x0B22;
pub const GL_OES_point_size_array = 1;
pub inline fn glGetQueryObjectui64vEXT(arg_6783: GLuint, arg_6784: GLenum, arg_6785: [*c]GLuint64) void {
    return epoxy_glGetQueryObjectui64vEXT.?(arg_6783, arg_6784, arg_6785);
}
pub inline fn glMultiTexCoord4dv(arg_6786: GLenum, arg_6787: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord4dv.?(arg_6786, arg_6787);
}
pub const GL_4_BYTES_NV = 0x1409;
pub const GL_TEXTURE_COORD_ARRAY_EXT = 0x8078;
pub const GL_DUAL_LUMINANCE12_SGIS = 0x8116;
pub const GL_RGBA8_SNORM = 0x8F97;
pub const GL_TABLE_TOO_LARGE = 0x8031;
pub const GL_INVALID_INDEX = 0xFFFFFFFF;
pub inline fn glSampleMapATI(arg_6788: GLuint, arg_6789: GLuint, arg_6790: GLenum) void {
    return epoxy_glSampleMapATI.?(arg_6788, arg_6789, arg_6790);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE_EXT = 0x8C7F;
pub const GL_DRAW_INDIRECT_UNIFIED_NV = 0x8F40;
pub inline fn glTexCoord4i(arg_6791: GLint, arg_6792: GLint, arg_6793: GLint, arg_6794: GLint) void {
    return epoxy_glTexCoord4i.?(arg_6791, arg_6792, arg_6793, arg_6794);
}
pub const GL_AMD_vertex_shader_tessellator = 1;
pub const GL_SGIX_async_histogram = 1;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT_EXT = 0x919F;
pub inline fn glVertex2xvOES(arg_6795: [*c]const GLfixed) void {
    return epoxy_glVertex2xvOES.?(arg_6795);
}
pub inline fn glVertexAttrib2sv(arg_6796: GLuint, arg_6797: [*c]const GLshort) void {
    return epoxy_glVertexAttrib2sv.?(arg_6796, arg_6797);
}
pub inline fn glCompressedTexImage1D(arg_6798: GLenum, arg_6799: GLint, arg_6800: GLenum, arg_6801: GLsizei, arg_6802: GLint, arg_6803: GLsizei, arg_6804: ?*const c_void) void {
    return epoxy_glCompressedTexImage1D.?(arg_6798, arg_6799, arg_6800, arg_6801, arg_6802, arg_6803, arg_6804);
}
pub const GL_OES_draw_elements_base_vertex = 1;
pub inline fn glVertexAttrib3fARB(arg_6805: GLuint, arg_6806: GLfloat, arg_6807: GLfloat, arg_6808: GLfloat) void {
    return epoxy_glVertexAttrib3fARB.?(arg_6805, arg_6806, arg_6807, arg_6808);
}
pub inline fn glGetInteger64vAPPLE(arg_6809: GLenum, arg_6810: [*c]GLint64) void {
    return epoxy_glGetInteger64vAPPLE.?(arg_6809, arg_6810);
}
pub inline fn glVertexAttrib2sNV(arg_6811: GLuint, arg_6812: GLshort, arg_6813: GLshort) void {
    return epoxy_glVertexAttrib2sNV.?(arg_6811, arg_6812, arg_6813);
}
pub inline fn glVertex3xOES(arg_6814: GLfixed, arg_6815: GLfixed) void {
    return epoxy_glVertex3xOES.?(arg_6814, arg_6815);
}
pub const GL_HISTOGRAM_LUMINANCE_SIZE = 0x802C;
pub const GL_CLIP_DISTANCE2 = 0x3002;
pub const GL_PROGRAM_BINARY_LENGTH_OES = 0x8741;
pub const GL_BLEND_EQUATION_EXT = 0x8009;
pub const GL_DEPENDENT_AR_TEXTURE_2D_NV = 0x86E9;
pub const GL_SIGNED_ALPHA8_NV = 0x8706;
pub const GL_TASK_SHADER_BIT_NV = 0x00000080;
pub inline fn glFlushPixelDataRangeNV(arg_6816: GLenum) void {
    return epoxy_glFlushPixelDataRangeNV.?(arg_6816);
}
pub const __UINT_FAST32_FMTo__ = "o";
pub const GL_ALPHA8I_EXT = 0x8D90;
pub inline fn glClipPlanef(arg_6817: GLenum, arg_6818: [*c]const GLfloat) void {
    return epoxy_glClipPlanef.?(arg_6817, arg_6818);
}
pub const GL_STORAGE_PRIVATE_APPLE = 0x85BD;
pub const GL_EXT_shader_pixel_local_storage = 1;
pub inline fn glTexParameterfv(arg_6819: GLenum, arg_6820: GLenum, arg_6821: [*c]const GLfloat) void {
    return epoxy_glTexParameterfv.?(arg_6819, arg_6820, arg_6821);
}
pub const GL_PROXY_COLOR_TABLE = 0x80D3;
pub const GL_IS_ROW_MAJOR = 0x9300;
pub const GL_NEAREST = 0x2600;
pub const GL_2PASS_0_EXT = 0x80A2;
pub inline fn glGetQueryObjectivEXT(arg_6822: GLuint, arg_6823: GLenum, arg_6824: [*c]GLint) void {
    return epoxy_glGetQueryObjectivEXT.?(arg_6822, arg_6823, arg_6824);
}
pub const GL_TRANSPOSE_MODELVIEW_MATRIX_ARB = 0x84E3;
pub const __UINT8_FMTu__ = "hhu";
pub const GL_NORMAL_MAP = 0x8511;
pub const GL_4PASS_0_SGIS = 0x80A4;
pub const GL_UNPACK_COLORSPACE_CONVERSION_WEBGL = 0x9243;
pub const GL_DRAW_BUFFER12_ATI = 0x8831;
pub const GL_UNPACK_CLIENT_STORAGE_APPLE = 0x85B2;
pub const GL_COLOR_TABLE_WIDTH_SGI = 0x80D9;
pub const GL_REG_9_ATI = 0x892A;
pub const GL_TEXTURE_COORD_NV = 0x8C79;
pub const GL_TEXTURE_FETCH_BARRIER_BIT = 0x00000008;
pub inline fn glMapVertexAttrib2fAPPLE(arg_6825: GLuint, arg_6826: GLuint, arg_6827: GLfloat, arg_6828: GLfloat, arg_6829: GLint, arg_6830: GLint, arg_6831: GLfloat, arg_6832: GLfloat, arg_6833: GLint, arg_6834: GLint, arg_6835: [*c]const GLfloat) void {
    return epoxy_glMapVertexAttrib2fAPPLE.?(arg_6825, arg_6826, arg_6827, arg_6828, arg_6829, arg_6830, arg_6831, arg_6832, arg_6833, arg_6834, arg_6835);
}
pub inline fn glProgramUniform1iEXT(arg_6836: GLuint, arg_6837: GLint, arg_6838: GLint) void {
    return epoxy_glProgramUniform1iEXT.?(arg_6836, arg_6837, arg_6838);
}
pub const GL_DEBUG_SOURCE_OTHER_ARB = 0x824B;
pub const GL_MINMAX_SINK_EXT = 0x8030;
pub const GL_FONT_GLYPHS_AVAILABLE_NV = 0x9368;
pub const GL_DT_BIAS_NV = 0x8717;
pub const GL_COMBINER_CD_OUTPUT_NV = 0x854B;
pub const GL_CONSERVATIVE_RASTER_DILATE_GRANULARITY_NV = 0x937B;
pub inline fn glSetMultisamplefvAMD(arg_6839: GLenum, arg_6840: GLuint, arg_6841: [*c]const GLfloat) void {
    return epoxy_glSetMultisamplefvAMD.?(arg_6839, arg_6840, arg_6841);
}
pub const __SSSE3__ = 1;
pub inline fn glVertexStream3fvATI(arg_6842: GLenum, arg_6843: [*c]const GLfloat) void {
    return epoxy_glVertexStream3fvATI.?(arg_6842, arg_6843);
}
pub const GL_ZERO = 0;
pub inline fn glShadingRateImageBarrierNV(arg_6844: GLboolean) void {
    return epoxy_glShadingRateImageBarrierNV.?(arg_6844);
}
pub inline fn glGetSubroutineIndex(arg_6845: GLuint, arg_6846: GLenum, arg_6847: [*c]const GLchar) GLuint {
    return epoxy_glGetSubroutineIndex.?(arg_6845, arg_6846, arg_6847);
}
pub const GL_DRAW_BUFFER13 = 0x8832;
pub inline fn glUniform3i64NV(arg_6848: GLint, arg_6849: GLint64EXT, arg_6850: GLint64EXT, arg_6851: GLint64EXT) void {
    return epoxy_glUniform3i64NV.?(arg_6848, arg_6849, arg_6850, arg_6851);
}
pub inline fn glReplacementCodeusvSUN(arg_6852: [*c]const GLushort) void {
    return epoxy_glReplacementCodeusvSUN.?(arg_6852);
}
pub inline fn glDeleteRenderbuffers(arg_6853: GLsizei, arg_6854: [*c]const GLuint) void {
    return epoxy_glDeleteRenderbuffers.?(arg_6853, arg_6854);
}
pub inline fn glTextureParameterfvEXT(arg_6855: GLuint, arg_6856: GLenum, arg_6857: GLenum, arg_6858: [*c]const GLfloat) void {
    return epoxy_glTextureParameterfvEXT.?(arg_6855, arg_6856, arg_6857, arg_6858);
}
pub const GL_TESS_EVALUATION_SHADER_EXT = 0x8E87;
pub const GL_MAX_ELEMENTS_VERTICES_EXT = 0x80E8;
pub const GL_PATCH_VERTICES = 0x8E72;
pub inline fn glDeleteQueryResourceTagNV(arg_6859: GLsizei, arg_6860: [*c]const GLint) void {
    return epoxy_glDeleteQueryResourceTagNV.?(arg_6859, arg_6860);
}
pub inline fn glProgramParameter4fNV(arg_6861: GLenum, arg_6862: GLuint, arg_6863: GLfloat, arg_6864: GLfloat, arg_6865: GLfloat, arg_6866: GLfloat) void {
    return epoxy_glProgramParameter4fNV.?(arg_6861, arg_6862, arg_6863, arg_6864, arg_6865, arg_6866);
}
pub const INT_FAST32_MIN = -@as(c_long, 9223372036854775807) - 1;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8DE1;
pub inline fn glVertexAttribIFormatNV(arg_6867: GLuint, arg_6868: GLint, arg_6869: GLenum, arg_6870: GLsizei) void {
    return epoxy_glVertexAttribIFormatNV.?(arg_6867, arg_6868, arg_6869, arg_6870);
}
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x905F;
pub inline fn glPatchParameterfv(arg_6871: GLenum, arg_6872: [*c]const GLfloat) void {
    return epoxy_glPatchParameterfv.?(arg_6871, arg_6872);
}
pub inline fn glUniformHandleui64vIMG(arg_6873: GLint, arg_6874: GLsizei, arg_6875: [*c]const GLuint64) void {
    return epoxy_glUniformHandleui64vIMG.?(arg_6873, arg_6874, arg_6875);
}
pub const GL_DRAW_BUFFER6_NV = 0x882B;
pub const GL_DRAW_BUFFER9 = 0x882E;
pub const GL_TEXTURE_CROP_RECT_OES = 0x8B9D;
pub const GL_UNSIGNED_INT8_VEC4_NV = 0x8FEF;
pub const GL_FIELDS_NV = 0x8E27;
pub inline fn glPointParameterxOES(arg_6876: GLenum, arg_6877: GLfixed) void {
    return epoxy_glPointParameterxOES.?(arg_6876, arg_6877);
}
pub const GL_LINES_ADJACENCY = 0x000A;
pub const GL_NV_shader_atomic_float = 1;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS = 0x8E89;
pub inline fn glProgramUniform2fvEXT(arg_6878: GLuint, arg_6879: GLint, arg_6880: GLsizei, arg_6881: [*c]const GLfloat) void {
    return epoxy_glProgramUniform2fvEXT.?(arg_6878, arg_6879, arg_6880, arg_6881);
}
pub const GL_PIXEL_TILE_GRID_HEIGHT_SGIX = 0x8143;
pub const GL_VERTEX_ATTRIB_MAP1_ORDER_APPLE = 0x8A04;
pub const GL_BUFFER_KHR = 0x82E0;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_EXT = 0x8E82;
pub const GL_APPLE_texture_format_BGRA8888 = 1;
pub const GL_COMPRESSED_RGBA_ASTC_6x6x6_OES = 0x93C9;
pub inline fn glEvalPoint2(arg_6882: GLint, arg_6883: GLint) void {
    return epoxy_glEvalPoint2.?(arg_6882, arg_6883);
}
pub inline fn glWeightfvARB(arg_6884: GLint, arg_6885: [*c]const GLfloat) void {
    return epoxy_glWeightfvARB.?(arg_6884, arg_6885);
}
pub const GL_OP_SET_LT_EXT = 0x878D;
pub const GL_OFFSET_TEXTURE_RECTANGLE_SCALE_NV = 0x864D;
pub const GL_STENCIL_BUFFER_BIT2_QCOM = 0x00040000;
pub const GL_INT_10_10_10_2_OES = 0x8DF7;
pub inline fn glDisablei(arg_6886: GLenum, arg_6887: GLuint) void {
    return epoxy_glDisablei.?(arg_6886, arg_6887);
}
pub const GL_COMPRESSED_RED = 0x8225;
pub const GL_DRAW_BUFFER4_EXT = 0x8829;
pub const GL_MAX_FRAMEBUFFER_LAYERS = 0x9317;
pub inline fn glGetTexLevelParameterxvOES(arg_6888: GLenum, arg_6889: GLint, arg_6890: GLenum, arg_6891: [*c]GLfixed) void {
    return epoxy_glGetTexLevelParameterxvOES.?(arg_6888, arg_6889, arg_6890, arg_6891);
}
pub const GL_IMAGE_COMPATIBILITY_CLASS = 0x82A8;
pub const GL_SHADER_BINARY_DMP = 0x9250;
pub const GL_UNIFORM_BARRIER_BIT_EXT = 0x00000004;
pub const GL_FILE_NAME_NV = 0x9074;
pub inline fn glMinSampleShadingOES(arg_6892: GLfloat) void {
    return epoxy_glMinSampleShadingOES.?(arg_6892);
}
pub inline fn glGetnPixelMapuivARB(arg_6893: GLenum, arg_6894: GLsizei, arg_6895: [*c]GLuint) void {
    return epoxy_glGetnPixelMapuivARB.?(arg_6893, arg_6894, arg_6895);
}
pub const GL_TEXTURE_MAX_CLAMP_S_SGIX = 0x8369;
pub const GL_POINT_SPRITE_COORD_ORIGIN = 0x8CA0;
pub const GL_CONSTANT_BORDER_HP = 0x8151;
pub const GL_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8162;
pub inline fn glProgramParameter4dNV(arg_6896: GLenum, arg_6897: GLuint, arg_6898: GLdouble, arg_6899: GLdouble, arg_6900: GLdouble, arg_6901: GLdouble) void {
    return epoxy_glProgramParameter4dNV.?(arg_6896, arg_6897, arg_6898, arg_6899, arg_6900, arg_6901);
}
pub inline fn glColor4usv(arg_6902: [*c]const GLushort) void {
    return epoxy_glColor4usv.?(arg_6902);
}
pub const GL_VERTEX_SHADER_BIT = 0x00000001;
pub const GL_ACTIVE_TEXTURE_ARB = 0x84E0;
pub const GL_VIEWPORT = 0x0BA2;
pub const GL_MODELVIEW1_EXT = 0x850A;
pub const GL_TEXTURE_INTENSITY_TYPE = 0x8C15;
pub const GL_TEXTURE_DEPTH_TYPE = 0x8C16;
pub inline fn glVertexAttribFormat(arg_6903: GLuint, arg_6904: GLint, arg_6905: GLenum, arg_6906: GLboolean, arg_6907: GLuint) void {
    return epoxy_glVertexAttribFormat.?(arg_6903, arg_6904, arg_6905, arg_6906, arg_6907);
}
pub inline fn glGetIntegerIndexedvEXT(arg_6908: GLenum, arg_6909: GLuint, arg_6910: [*c]GLint) void {
    return epoxy_glGetIntegerIndexedvEXT.?(arg_6908, arg_6909, arg_6910);
}
pub const GL_SEPARATE_ATTRIBS = 0x8C8D;
pub const GL_PATH_COVER_DEPTH_FUNC_NV = 0x90BF;
pub const GL_FRAMEBUFFER_RENDERABLE = 0x8289;
pub const GL_TEXTURE_REDUCTION_MODE_EXT = 0x9366;
pub inline fn glEndConditionalRenderNV() void {
    return epoxy_glEndConditionalRenderNV.?();
}
pub const GL_TEXTURE22 = 0x84D6;
pub const GL_COLOR_TABLE_FORMAT = 0x80D8;
pub inline fn glVertexArrayVertexAttribBindingEXT(arg_6911: GLuint, arg_6912: GLuint, arg_6913: GLuint) void {
    return epoxy_glVertexArrayVertexAttribBindingEXT.?(arg_6911, arg_6912, arg_6913);
}
pub const GL_ARB_matrix_palette = 1;
pub inline fn glProgramUniform3i64vARB(arg_6914: GLuint, arg_6915: GLint, arg_6916: GLsizei, arg_6917: [*c]const GLint64) void {
    return epoxy_glProgramUniform3i64vARB.?(arg_6914, arg_6915, arg_6916, arg_6917);
}
pub const GL_ARB_texture_swizzle = 1;
pub const GL_LUMINANCE32F_EXT = 0x8818;
pub const GL_STREAM_DRAW = 0x88E0;
pub inline fn glMulticastGetQueryObjectui64vNV(arg_6918: GLuint, arg_6919: GLuint, arg_6920: GLenum, arg_6921: [*c]GLuint64) void {
    return epoxy_glMulticastGetQueryObjectui64vNV.?(arg_6918, arg_6919, arg_6920, arg_6921);
}
pub inline fn glEndFragmentShaderATI() void {
    return epoxy_glEndFragmentShaderATI.?();
}
pub inline fn glSecondaryColor3hNV(arg_6922: GLhalfNV, arg_6923: GLhalfNV, arg_6924: GLhalfNV) void {
    return epoxy_glSecondaryColor3hNV.?(arg_6922, arg_6923, arg_6924);
}
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TASK_SHADER_NV = 0x959D;
pub inline fn glVertexArrayAttribIFormat(arg_6925: GLuint, arg_6926: GLuint, arg_6927: GLint, arg_6928: GLenum, arg_6929: GLuint) void {
    return epoxy_glVertexArrayAttribIFormat.?(arg_6925, arg_6926, arg_6927, arg_6928, arg_6929);
}
pub inline fn glGetnUniformdvARB(arg_6930: GLuint, arg_6931: GLint, arg_6932: GLsizei, arg_6933: [*c]GLdouble) void {
    return epoxy_glGetnUniformdvARB.?(arg_6930, arg_6931, arg_6932, arg_6933);
}
pub const GL_ARRAY_SIZE = 0x92FB;
pub const GL_TEXTURE_ENV_BIAS_SGIX = 0x80BE;
pub const GL_SLUMINANCE8_ALPHA8_NV = 0x8C45;
pub inline fn glGetFloati_vEXT(arg_6934: GLenum, arg_6935: GLuint, arg_6936: [*c]GLfloat) void {
    return epoxy_glGetFloati_vEXT.?(arg_6934, arg_6935, arg_6936);
}
pub const GL_T2F_IUI_V2F_EXT = 0x81B1;
pub const GL_MAX_TESS_CONTROL_UNIFORM_BLOCKS_OES = 0x8E89;
pub const GL_BUFFER_MAP_POINTER = 0x88BD;
pub const GL_INDEX_SHIFT = 0x0D12;
pub inline fn glEndTransformFeedbackNV() void {
    return epoxy_glEndTransformFeedbackNV.?();
}
pub const GL_MAX_IMAGE_SAMPLES = 0x906D;
pub inline fn glTextureSubImage1D(arg_6937: GLuint, arg_6938: GLint, arg_6939: GLint, arg_6940: GLsizei, arg_6941: GLenum, arg_6942: GLenum, arg_6943: ?*const c_void) void {
    return epoxy_glTextureSubImage1D.?(arg_6937, arg_6938, arg_6939, arg_6940, arg_6941, arg_6942, arg_6943);
}
pub inline fn glProgramUniformMatrix4x3dv(arg_6944: GLuint, arg_6945: GLint, arg_6946: GLsizei, arg_6947: GLboolean, arg_6948: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4x3dv.?(arg_6944, arg_6945, arg_6946, arg_6947, arg_6948);
}
pub const GL_GLYPH_VERTICAL_BEARING_Y_BIT_NV = 0x40;
pub const GL_AMD_draw_buffers_blend = 1;
pub const GL_ARRAY_STRIDE = 0x92FE;
pub const GL_EYE_PLANE_ABSOLUTE_NV = 0x855C;
pub const GL_CON_21_ATI = 0x8956;
pub const GL_4X_BIT_ATI = 0x00000002;
pub const GL_MAX_TESS_CONTROL_TEXTURE_IMAGE_UNITS_OES = 0x8E81;
pub const GL_SGIS_texture_border_clamp = 1;
pub const GL_QUERY_RESOURCE_MEMTYPE_VIDMEM_NV = 0x9542;
pub const GL_COMPUTE_SHADER_INVOCATIONS_ARB = 0x82F5;
pub inline fn glGetDebugMessageLogKHR(arg_6949: GLuint, arg_6950: GLsizei, arg_6951: [*c]GLenum, arg_6952: [*c]GLenum, arg_6953: [*c]GLuint, arg_6954: [*c]GLenum, arg_6955: [*c]GLsizei, arg_6956: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLogKHR.?(arg_6949, arg_6950, arg_6951, arg_6952, arg_6953, arg_6954, arg_6955, arg_6956);
}
pub const GL_INVARIANT_VALUE_EXT = 0x87EA;
pub const GL_EXT_memory_object_win32 = 1;
pub inline fn glGetSamplerParameterIiv(arg_6957: GLuint, arg_6958: GLenum, arg_6959: [*c]GLint) void {
    return epoxy_glGetSamplerParameterIiv.?(arg_6957, arg_6958, arg_6959);
}
pub inline fn glIsRenderbuffer(arg_6960: GLuint) GLboolean {
    return epoxy_glIsRenderbuffer.?(arg_6960);
}
pub const GL_EVAL_VERTEX_ATTRIB4_NV = 0x86CA;
pub const GL_VERTEX_ARRAY_LENGTH_NV = 0x8F2B;
pub const GL_PRIMITIVE_BOUNDING_BOX = 0x92BE;
pub const GL_NV_compute_program5 = 1;
pub const GL_DEBUG_CATEGORY_DEPRECATION_AMD = 0x914B;
pub const GL_EXT_texture_rg = 1;
pub const GL_VIEWPORT_SWIZZLE_W_NV = 0x935B;
pub const GL_COMPARE_REF_TO_TEXTURE = 0x884E;
pub inline fn glPixelTransformParameterfEXT(arg_6961: GLenum, arg_6962: GLenum, arg_6963: GLfloat) void {
    return epoxy_glPixelTransformParameterfEXT.?(arg_6961, arg_6962, arg_6963);
}
pub inline fn glFogCoordf(arg_6964: GLfloat) void {
    return epoxy_glFogCoordf.?(arg_6964);
}
pub inline fn glOrthoxOES(arg_6965: GLfixed, arg_6966: GLfixed, arg_6967: GLfixed, arg_6968: GLfixed, arg_6969: GLfixed, arg_6970: GLfixed) void {
    return epoxy_glOrthoxOES.?(arg_6965, arg_6966, arg_6967, arg_6968, arg_6969, arg_6970);
}
pub const GL_SUBGROUP_FEATURE_BASIC_BIT_KHR = 0x00000001;
pub const GL_LUMINANCE4_ALPHA4_EXT = 0x8043;
pub const GL_MAX_VARYING_FLOATS = 0x8B4B;
pub const GL_COLOR_ATTACHMENT10_EXT = 0x8CEA;
pub inline fn glTexStorage1D(arg_6971: GLenum, arg_6972: GLsizei, arg_6973: GLenum, arg_6974: GLsizei) void {
    return epoxy_glTexStorage1D.?(arg_6971, arg_6972, arg_6973, arg_6974);
}
pub const GL_RGBA32F_ARB = 0x8814;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS = 0x8E5A;
pub const GL_NV_vertex_program = 1;
pub inline fn glGetTexParameterIuivEXT(arg_6975: GLenum, arg_6976: GLenum, arg_6977: [*c]GLuint) void {
    return epoxy_glGetTexParameterIuivEXT.?(arg_6975, arg_6976, arg_6977);
}
pub inline fn glEvalMapsNV(arg_6978: GLenum, arg_6979: GLenum) void {
    return epoxy_glEvalMapsNV.?(arg_6978, arg_6979);
}
pub inline fn glCopyNamedBufferSubData(arg_6980: GLuint, arg_6981: GLuint, arg_6982: GLintptr, arg_6983: GLintptr, arg_6984: GLsizeiptr) void {
    return epoxy_glCopyNamedBufferSubData.?(arg_6980, arg_6981, arg_6982, arg_6983, arg_6984);
}
pub inline fn glCopyTextureSubImage2D(arg_6985: GLuint, arg_6986: GLint, arg_6987: GLint, arg_6988: GLint, arg_6989: GLint, arg_6990: GLint, arg_6991: GLsizei, arg_6992: GLsizei) void {
    return epoxy_glCopyTextureSubImage2D.?(arg_6985, arg_6986, arg_6987, arg_6988, arg_6989, arg_6990, arg_6991, arg_6992);
}
pub const GL_FOG_COORD_ARRAY_STRIDE = 0x8455;
pub inline fn glTranslated(arg_6993: GLdouble, arg_6994: GLdouble, arg_6995: GLdouble) void {
    return epoxy_glTranslated.?(arg_6993, arg_6994, arg_6995);
}
pub inline fn glExtGetFramebuffersQCOM(arg_6996: [*c]GLuint, arg_6997: GLint, arg_6998: [*c]GLint) void {
    return epoxy_glExtGetFramebuffersQCOM.?(arg_6996, arg_6997, arg_6998);
}
pub inline fn glRenderbufferStorageMultisampleIMG(arg_6999: GLenum, arg_7000: GLsizei, arg_7001: GLenum, arg_7002: GLsizei, arg_7003: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleIMG.?(arg_6999, arg_7000, arg_7001, arg_7002, arg_7003);
}
pub const GL_UNSIGNED_SHORT = 0x1403;
pub inline fn glGlobalAlphaFactorsSUN(arg_7004: GLshort) void {
    return epoxy_glGlobalAlphaFactorsSUN.?(arg_7004);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER = 0x8CDB;
pub inline fn glEvalCoord1xOES(arg_7005: GLfixed) void {
    return epoxy_glEvalCoord1xOES.?(arg_7005);
}
pub const GL_COLOR_MATRIX_STACK_DEPTH = 0x80B2;
pub const GL_SCALEBIAS_HINT_SGIX = 0x8322;
pub const GL_INGR_blend_func_separate = 1;
pub const GL_NV_read_buffer_front = 1;
pub const GL_MAX_DEPTH_STENCIL_FRAMEBUFFER_SAMPLES_AMD = 0x91B5;
pub const GL_EXT_gpu_shader4 = 1;
pub const GL_TEXTURE_BINDING_BUFFER_EXT = 0x8C2C;
pub const GL_GEOMETRY_PROGRAM_NV = 0x8C26;
pub const GL_ARB_texture_buffer_range = 1;
pub const GL_COLOR_INDEX12_EXT = 0x80E6;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_OES = 0x8516;
pub const GL_OP_DOT3_EXT = 0x8784;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LAYER_EXT = 0x8CD4;
pub inline fn glTexCoord2fNormal3fVertex3fvSUN(arg_7006: [*c]const GLfloat, arg_7007: [*c]const GLfloat, arg_7008: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fNormal3fVertex3fvSUN.?(arg_7006, arg_7007, arg_7008);
}
pub const GL_DEPTH_BUFFER_BIT5_QCOM = 0x00002000;
pub const GL_TEXTURE_SWIZZLE_RGBA = 0x8E46;
pub const GL_EYE_DISTANCE_TO_POINT_SGIS = 0x81F0;
pub const GL_FLOAT_32_UNSIGNED_INT_24_8_REV_NV = 0x8DAD;
pub const GL_EXT_index_material = 1;
pub inline fn glGetVkProcAddrNV(arg_7009: [*c]const GLchar) GLVULKANPROCNV {
    return epoxy_glGetVkProcAddrNV.?(arg_7009);
}
pub const GL_VIVIDLIGHT_NV = 0x92A6;
pub const GL_LOWER_LEFT_EXT = 0x8CA1;
pub const GL_STACK_OVERFLOW = 0x0503;
pub const GL_MAX_SAMPLES = 0x8D57;
pub const GL_QUERY_BUFFER_BINDING_AMD = 0x9193;
pub const GL_SPRITE_EYE_ALIGNED_SGIX = 0x814E;
pub inline fn glFrameZoomSGIX(arg_7010: GLint) void {
    return epoxy_glFrameZoomSGIX.?(arg_7010);
}
pub const GL_AMD_stencil_operation_extended = 1;
pub const GL_TEXTURE_VIEW_NUM_LAYERS_EXT = 0x82DE;
pub inline fn glCopyTextureSubImage3D(arg_7011: GLuint, arg_7012: GLint, arg_7013: GLint, arg_7014: GLint, arg_7015: GLint, arg_7016: GLint, arg_7017: GLint, arg_7018: GLsizei, arg_7019: GLsizei) void {
    return epoxy_glCopyTextureSubImage3D.?(arg_7011, arg_7012, arg_7013, arg_7014, arg_7015, arg_7016, arg_7017, arg_7018, arg_7019);
}
pub inline fn glDrawArraysEXT(arg_7020: GLenum, arg_7021: GLint, arg_7022: GLsizei) void {
    return epoxy_glDrawArraysEXT.?(arg_7020, arg_7021, arg_7022);
}
pub const GL_SGIS_texture4D = 1;
pub const GL_RENDERBUFFER_GREEN_SIZE = 0x8D51;
pub const GL_MODELVIEW24_ARB = 0x8738;
pub const GL_FENCE_CONDITION_NV = 0x84F4;
pub const GL_UNSIGNED_NORMALIZED = 0x8C17;
pub inline fn glMapBufferRange(arg_7023: GLenum, arg_7024: GLintptr, arg_7025: GLsizeiptr, arg_7026: GLbitfield) ?*c_void {
    return epoxy_glMapBufferRange.?(arg_7023, arg_7024, arg_7025, arg_7026);
}
pub const GL_OML_resample = 1;
pub const GL_TRANSPOSE_AFFINE_3D_NV = 0x9098;
pub const GL_RASTER_FIXED_SAMPLE_LOCATIONS_EXT = 0x932A;
pub inline fn glHistogram(arg_7027: GLenum, arg_7028: GLsizei, arg_7029: GLenum, arg_7030: GLboolean) void {
    return epoxy_glHistogram.?(arg_7027, arg_7028, arg_7029, arg_7030);
}
pub const GL_RGBA2 = 0x8055;
pub const GL_OFFSET_HILO_PROJECTIVE_TEXTURE_2D_NV = 0x8856;
pub inline fn glVertexAttribP4ui(arg_7031: GLuint, arg_7032: GLenum, arg_7033: GLboolean, arg_7034: GLuint) void {
    return epoxy_glVertexAttribP4ui.?(arg_7031, arg_7032, arg_7033, arg_7034);
}
pub inline fn glGetSamplerParameterIuiv(arg_7035: GLuint, arg_7036: GLenum, arg_7037: [*c]GLuint) void {
    return epoxy_glGetSamplerParameterIuiv.?(arg_7035, arg_7036, arg_7037);
}
pub const __DBL_MIN_EXP__ = -1021;
pub inline fn glTexCoordFormatNV(arg_7038: GLint, arg_7039: GLenum, arg_7040: GLsizei) void {
    return epoxy_glTexCoordFormatNV.?(arg_7038, arg_7039, arg_7040);
}
pub const GL_OUTPUT_COLOR0_EXT = 0x879B;
pub const GL_STENCIL_ATTACHMENT = 0x8D20;
pub const GL_SET_AMD = 0x874A;
pub const GL_NV_uniform_buffer_unified_memory = 1;
pub const GL_POLYGON_OFFSET_BIAS_EXT = 0x8039;
pub inline fn glVertexAttribL1dv(arg_7041: GLuint, arg_7042: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL1dv.?(arg_7041, arg_7042);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR = 0x93D1;
pub const GL_OP_ROUND_EXT = 0x8790;
pub const GL_EXT_transform_feedback = 1;
pub inline fn glGetVertexAttribLui64vARB(arg_7043: GLuint, arg_7044: GLenum, arg_7045: [*c]GLuint64EXT) void {
    return epoxy_glGetVertexAttribLui64vARB.?(arg_7043, arg_7044, arg_7045);
}
pub const GL_MIN_SAMPLE_SHADING_VALUE = 0x8C37;
pub const GL_TEXTURE_RANGE_POINTER_APPLE = 0x85B8;
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_NV = 0x8C8A;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE = 0x8DD4;
pub const GL_OP_CROSS_PRODUCT_EXT = 0x8797;
pub inline fn glNormalStream3ivATI(arg_7046: GLenum, arg_7047: [*c]const GLint) void {
    return epoxy_glNormalStream3ivATI.?(arg_7046, arg_7047);
}
pub inline fn glVertexArrayVertexBuffer(arg_7048: GLuint, arg_7049: GLuint, arg_7050: GLuint, arg_7051: GLintptr, arg_7052: GLsizei) void {
    return epoxy_glVertexArrayVertexBuffer.?(arg_7048, arg_7049, arg_7050, arg_7051, arg_7052);
}
pub inline fn glBitmapxOES(arg_7053: GLsizei, arg_7054: GLsizei, arg_7055: GLfixed, arg_7056: GLfixed, arg_7057: GLfixed, arg_7058: GLfixed, arg_7059: [*c]const GLubyte) void {
    return epoxy_glBitmapxOES.?(arg_7053, arg_7054, arg_7055, arg_7056, arg_7057, arg_7058, arg_7059);
}
pub const GL_GEOMETRY_SHADER = 0x8DD9;
pub inline fn glGetFinalCombinerInputParameterfvNV(arg_7060: GLenum, arg_7061: GLenum, arg_7062: [*c]GLfloat) void {
    return epoxy_glGetFinalCombinerInputParameterfvNV.?(arg_7060, arg_7061, arg_7062);
}
pub inline fn glDrawCommandsStatesNV(arg_7063: GLuint, arg_7064: [*c]const GLintptr, arg_7065: [*c]const GLsizei, arg_7066: [*c]const GLuint, arg_7067: [*c]const GLuint, arg_7068: GLuint) void {
    return epoxy_glDrawCommandsStatesNV.?(arg_7063, arg_7064, arg_7065, arg_7066, arg_7067, arg_7068);
}
pub const SIG_ATOMIC_MAX = 2147483647;
pub const GL_EXT_vertex_attrib_64bit = 1;
pub inline fn glGetTextureHandleNV(arg_7069: GLuint) GLuint64 {
    return epoxy_glGetTextureHandleNV.?(arg_7069);
}
pub inline fn glMapVertexAttrib1fAPPLE(arg_7070: GLuint, arg_7071: GLuint, arg_7072: GLfloat, arg_7073: GLfloat, arg_7074: GLint, arg_7075: GLint, arg_7076: [*c]const GLfloat) void {
    return epoxy_glMapVertexAttrib1fAPPLE.?(arg_7070, arg_7071, arg_7072, arg_7073, arg_7074, arg_7075, arg_7076);
}
pub const GL_UNSIGNED_INT_SAMPLER_3D = 0x8DD3;
pub inline fn glMatrixLoadTransposefEXT(arg_7077: GLenum, arg_7078: [*c]const GLfloat) void {
    return epoxy_glMatrixLoadTransposefEXT.?(arg_7077, arg_7078);
}
pub const GL_TEXTURE_COORD_ARRAY_SIZE_EXT = 0x8088;
pub inline fn glShaderSource(arg_7079: GLuint, arg_7080: GLsizei, arg_7081: [*c]const [*c]const GLchar, arg_7082: [*c]const GLint) void {
    return epoxy_glShaderSource.?(arg_7079, arg_7080, arg_7081, arg_7082);
}
pub const GL_PHONG_WIN = 0x80EA;
pub inline fn glDrawRangeElementsBaseVertexOES(arg_7083: GLenum, arg_7084: GLuint, arg_7085: GLuint, arg_7086: GLsizei, arg_7087: GLenum, arg_7088: ?*const c_void, arg_7089: GLint) void {
    return epoxy_glDrawRangeElementsBaseVertexOES.?(arg_7083, arg_7084, arg_7085, arg_7086, arg_7087, arg_7088, arg_7089);
}
pub inline fn glVertexAttribDivisorANGLE(arg_7090: GLuint, arg_7091: GLuint) void {
    return epoxy_glVertexAttribDivisorANGLE.?(arg_7090, arg_7091);
}
pub const GL_MAX_PROGRAM_ATTRIBS_ARB = 0x88AD;
pub const GL_STACK_UNDERFLOW_KHR = 0x0504;
pub const GL_TEXTURE_RECTANGLE_ARB = 0x84F5;
pub const GL_TEXTURE_BASE_LEVEL = 0x813C;
pub const GL_INDEX_MATERIAL_FACE_EXT = 0x81BA;
pub inline fn glMultiTexCoord2i(arg_7092: GLenum, arg_7093: GLint, arg_7094: GLint) void {
    return epoxy_glMultiTexCoord2i.?(arg_7092, arg_7093, arg_7094);
}
pub const GL_REDUCE_EXT = 0x8016;
pub inline fn glVertexStream3dATI(arg_7095: GLenum, arg_7096: GLdouble, arg_7097: GLdouble, arg_7098: GLdouble) void {
    return epoxy_glVertexStream3dATI.?(arg_7095, arg_7096, arg_7097, arg_7098);
}
pub const GL_BLEND_SRC_ALPHA_OES = 0x80CB;
pub inline fn glVertexAttribs1dvNV(arg_7099: GLuint, arg_7100: GLsizei, arg_7101: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs1dvNV.?(arg_7099, arg_7100, arg_7101);
}
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE = 0x80B6;
pub inline fn glLightfv(arg_7102: GLenum, arg_7103: GLenum, arg_7104: [*c]const GLfloat) void {
    return epoxy_glLightfv.?(arg_7102, arg_7103, arg_7104);
}
pub const GL_DEBUG_SOURCE_APPLICATION = 0x824A;
pub const GL_PIXEL_MAP_I_TO_B_SIZE = 0x0CB4;
pub const GL_VERTEX_ARRAY_OBJECT_AMD = 0x9154;
pub const GL_DOT_PRODUCT_TEXTURE_RECTANGLE_NV = 0x864E;
pub const SIG_ATOMIC_MIN = -2147483647 - 1;
pub const GL_HSL_LUMINOSITY_NV = 0x92B0;
pub inline fn glBeginQueryARB(arg_7105: GLenum, arg_7106: GLuint) void {
    return epoxy_glBeginQueryARB.?(arg_7105, arg_7106);
}
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_OES = 0x8DE0;
pub const GL_MAX_DRAW_BUFFERS = 0x8824;
pub const GL_OP_FRAC_EXT = 0x8789;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT = 0x8E8F;
pub const GL_POST_COLOR_MATRIX_GREEN_SCALE = 0x80B5;
pub const GL_SYNC_FLAGS = 0x9115;
pub inline fn glCurrentPaletteMatrixARB(arg_7107: GLint) void {
    return epoxy_glCurrentPaletteMatrixARB.?(arg_7107);
}
pub inline fn glGetPolygonStipple(arg_7108: [*c]GLubyte) void {
    return epoxy_glGetPolygonStipple.?(arg_7108);
}
pub const GL_COMBINE_ALPHA = 0x8572;
pub const GL_KHR_shader_subgroup = 1;
pub const GL_PACK_LSB_FIRST = 0x0D01;
pub inline fn glObjectPurgeableAPPLE(arg_7109: GLenum, arg_7110: GLuint, arg_7111: GLenum) GLenum {
    return epoxy_glObjectPurgeableAPPLE.?(arg_7109, arg_7110, arg_7111);
}
pub const GL_QUERY_RESULT_ARB = 0x8866;
pub const GL_DETAIL_TEXTURE_FUNC_POINTS_SGIS = 0x809C;
pub const GL_HALF_BIAS_NEGATE_NV = 0x853B;
pub inline fn glFinishAsyncSGIX(arg_7112: [*c]GLuint) GLint {
    return epoxy_glFinishAsyncSGIX.?(arg_7112);
}
pub const GL_ATOMIC_COUNTER_BUFFER_INDEX = 0x9301;
pub inline fn glAccum(arg_7113: GLenum, arg_7114: GLfloat) void {
    return epoxy_glAccum.?(arg_7113, arg_7114);
}
pub const GL_EXT_color_subtable = 1;
pub const GL_3D = 0x0601;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER_OES = 0x9067;
pub inline fn glGetActiveAttribARB(arg_7115: GLhandleARB, arg_7116: GLuint, arg_7117: GLsizei, arg_7118: [*c]GLsizei, arg_7119: [*c]GLint, arg_7120: [*c]GLenum, arg_7121: [*c]GLcharARB) void {
    return epoxy_glGetActiveAttribARB.?(arg_7115, arg_7116, arg_7117, arg_7118, arg_7119, arg_7120, arg_7121);
}
pub const GL_MODELVIEW12_ARB = 0x872C;
pub const GL_NV_vertex_buffer_unified_memory = 1;
pub const GL_W_EXT = 0x87D8;
pub const GL_MAX_PROGRAM_NATIVE_TEX_INDIRECTIONS_ARB = 0x8810;
pub const GL_DEBUG_SOURCE_THIRD_PARTY = 0x8249;
pub const GL_NV_vertex_program1_1 = 1;
pub const GL_PROGRAM_PIPELINE_OBJECT_EXT = 0x8A4F;
pub inline fn glTangent3svEXT(arg_7122: [*c]const GLshort) void {
    return epoxy_glTangent3svEXT.?(arg_7122);
}
pub inline fn glUniformMatrix3x4fv(arg_7123: GLint, arg_7124: GLsizei, arg_7125: GLboolean, arg_7126: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix3x4fv.?(arg_7123, arg_7124, arg_7125, arg_7126);
}
pub const GL_VERTEX_BINDING_BUFFER = 0x8F4F;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 0x8CD7;
pub const GL_POINT_SIZE_GRANULARITY = 0x0B13;
pub const GL_ARB_sparse_texture2 = 1;
pub const GL_IMAGE_SCALE_X_HP = 0x8155;
pub inline fn glVertexAttrib4Nuiv(arg_7127: GLuint, arg_7128: [*c]const GLuint) void {
    return epoxy_glVertexAttrib4Nuiv.?(arg_7127, arg_7128);
}
pub inline fn glMapGrid1xOES(arg_7129: GLint, arg_7130: GLfixed, arg_7131: GLfixed) void {
    return epoxy_glMapGrid1xOES.?(arg_7129, arg_7130, arg_7131);
}
pub inline fn glSecondaryColorP3ui(arg_7132: GLenum, arg_7133: GLuint) void {
    return epoxy_glSecondaryColorP3ui.?(arg_7132, arg_7133);
}
pub const GL_FOG_OFFSET_VALUE_SGIX = 0x8199;
pub const GL_COLOR_TABLE_RED_SIZE_SGI = 0x80DA;
pub inline fn glValidateProgramARB(arg_7134: GLhandleARB) void {
    return epoxy_glValidateProgramARB.?(arg_7134);
}
pub const GL_TEXTURE16_ARB = 0x84D0;
pub inline fn glStencilFuncSeparate(arg_7135: GLenum, arg_7136: GLenum, arg_7137: GLint, arg_7138: GLuint) void {
    return epoxy_glStencilFuncSeparate.?(arg_7135, arg_7136, arg_7137, arg_7138);
}
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING_ARB = 0x889A;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_EXT = 0x9060;
pub const GL_FRAMEBUFFER_UNDEFINED = 0x8219;
pub const GL_ROUNDED_RECT8_NV = 0xEE;
pub const GL_NOTEQUAL = 0x0205;
pub inline fn glDrawTransformFeedbackInstancedEXT(arg_7139: GLenum, arg_7140: GLuint, arg_7141: GLsizei) void {
    return epoxy_glDrawTransformFeedbackInstancedEXT.?(arg_7139, arg_7140, arg_7141);
}
pub const GL_PIXEL_TILE_BEST_ALIGNMENT_SGIX = 0x813E;
pub const GL_ANY_SAMPLES_PASSED = 0x8C2F;
pub const GL_UNPACK_CMYK_HINT_EXT = 0x800F;
pub const GL_MAX_COMPUTE_ATOMIC_COUNTERS = 0x8265;
pub inline fn glBindTextureUnit(arg_7142: GLuint, arg_7143: GLuint) void {
    return epoxy_glBindTextureUnit.?(arg_7142, arg_7143);
}
pub const GL_MAX_TEXTURE_SIZE = 0x0D33;
pub inline fn glGetUniformiv(arg_7144: GLuint, arg_7145: GLint, arg_7146: [*c]GLint) void {
    return epoxy_glGetUniformiv.?(arg_7144, arg_7145, arg_7146);
}
pub const GL_REGISTER_COMBINERS_NV = 0x8522;
pub const GL_BUMP_TEX_UNITS_ATI = 0x8778;
pub const GL_INTENSITY_FLOAT32_ATI = 0x8817;
pub const GL_INT_SAMPLER_1D_ARRAY = 0x8DCE;
pub const GL_MALI_PROGRAM_BINARY_ARM = 0x8F61;
pub const GL_CLIP_DISTANCE5_APPLE = 0x3005;
pub const GL_CURRENT_MATRIX_STACK_DEPTH_NV = 0x8640;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS = 0x9312;
pub const GL_OES_byte_coordinates = 1;
pub inline fn glViewportIndexedfOES(arg_7147: GLuint, arg_7148: GLfloat, arg_7149: GLfloat, arg_7150: GLfloat, arg_7151: GLfloat) void {
    return epoxy_glViewportIndexedfOES.?(arg_7147, arg_7148, arg_7149, arg_7150, arg_7151);
}
pub const PRIoLEAST8 = "o";
pub const SCNuFAST32 = __PRIPTR_PREFIX ++ "u";
pub inline fn glUniform3uivEXT(arg_7152: GLint, arg_7153: GLsizei, arg_7154: [*c]const GLuint) void {
    return epoxy_glUniform3uivEXT.?(arg_7152, arg_7153, arg_7154);
}
pub const GL_ADD_SIGNED = 0x8574;
pub const __UINT_FAST8_FMTX__ = "hhX";
pub const GL_MAX_PROGRAM_NATIVE_TEMPORARIES_ARB = 0x88A7;
pub const GL_DRAW_BUFFER7_ATI = 0x882C;
pub inline fn glDrawElementArrayATI(arg_7155: GLenum, arg_7156: GLsizei) void {
    return epoxy_glDrawElementArrayATI.?(arg_7155, arg_7156);
}
pub inline fn glNormal3sv(arg_7157: [*c]const GLshort) void {
    return epoxy_glNormal3sv.?(arg_7157);
}
pub const GL_NORMAL_MAP_ARB = 0x8511;
pub inline fn glTexPageCommitmentEXT(arg_7158: GLenum, arg_7159: GLint, arg_7160: GLint, arg_7161: GLint, arg_7162: GLint, arg_7163: GLsizei, arg_7164: GLsizei, arg_7165: GLsizei, arg_7166: GLboolean) void {
    return epoxy_glTexPageCommitmentEXT.?(arg_7158, arg_7159, arg_7160, arg_7161, arg_7162, arg_7163, arg_7164, arg_7165, arg_7166);
}
pub const GL_MESAX_texture_stack = 1;
pub const GL_ARB_fragment_shader_interlock = 1;
pub inline fn glMulticastCopyBufferSubDataNV(arg_7167: GLuint, arg_7168: GLbitfield, arg_7169: GLuint, arg_7170: GLuint, arg_7171: GLintptr, arg_7172: GLintptr, arg_7173: GLsizeiptr) void {
    return epoxy_glMulticastCopyBufferSubDataNV.?(arg_7167, arg_7168, arg_7169, arg_7170, arg_7171, arg_7172, arg_7173);
}
pub inline fn glVertexAttrib2fvNV(arg_7174: GLuint, arg_7175: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib2fvNV.?(arg_7174, arg_7175);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_ACTIVE_NV = 0x8E24;
pub inline fn glTextureMaterialEXT(arg_7176: GLenum, arg_7177: GLenum) void {
    return epoxy_glTextureMaterialEXT.?(arg_7176, arg_7177);
}
pub const GL_NEGATIVE_X_EXT = 0x87D9;
pub inline fn glMultiTexCoord1fv(arg_7178: GLenum, arg_7179: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord1fv.?(arg_7178, arg_7179);
}
pub const GL_LIGHT_MODEL_AMBIENT = 0x0B53;
pub inline fn glGetActiveAtomicCounterBufferiv(arg_7180: GLuint, arg_7181: GLuint, arg_7182: GLenum, arg_7183: [*c]GLint) void {
    return epoxy_glGetActiveAtomicCounterBufferiv.?(arg_7180, arg_7181, arg_7182, arg_7183);
}
pub inline fn glGetTextureHandleARB(arg_7184: GLuint) GLuint64 {
    return epoxy_glGetTextureHandleARB.?(arg_7184);
}
pub inline fn glPointParameteri(arg_7185: GLenum, arg_7186: GLint) void {
    return epoxy_glPointParameteri.?(arg_7185, arg_7186);
}
pub const GL_MATRIX30_ARB = 0x88DE;
pub inline fn glMultiTexCoordP1ui(arg_7187: GLenum, arg_7188: GLenum, arg_7189: GLuint) void {
    return epoxy_glMultiTexCoordP1ui.?(arg_7187, arg_7188, arg_7189);
}
pub const GL_TEXTURE_SWIZZLE_G = 0x8E43;
pub const GL_ACTIVE_SUBROUTINE_UNIFORM_LOCATIONS = 0x8E47;
pub const GL_TEXTURE_BORDER_COLOR_OES = 0x1004;
pub const GL_TRANSFORM_FEEDBACK_VARYINGS_NV = 0x8C83;
pub const GL_NV_shader_buffer_store = 1;
pub inline fn glMultiTexCoord1iv(arg_7190: GLenum, arg_7191: [*c]const GLint) void {
    return epoxy_glMultiTexCoord1iv.?(arg_7190, arg_7191);
}
pub const GL_RESTART_SUN = 0x0001;
pub const GL_VERTEX_ATTRIB_ARRAY11_NV = 0x865B;
pub inline fn glGetPathDashArrayNV(arg_7192: GLuint, arg_7193: [*c]GLfloat) void {
    return epoxy_glGetPathDashArrayNV.?(arg_7192, arg_7193);
}
pub inline fn glUniformMatrix3x2dv(arg_7194: GLint, arg_7195: GLsizei, arg_7196: GLboolean, arg_7197: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix3x2dv.?(arg_7194, arg_7195, arg_7196, arg_7197);
}
pub const GL_DOUBLE_VEC4 = 0x8FFE;
pub const GL_ARB_vertex_attrib_binding = 1;
pub inline fn glNamedFramebufferDrawBuffer(arg_7198: GLuint, arg_7199: GLenum) void {
    return epoxy_glNamedFramebufferDrawBuffer.?(arg_7198, arg_7199);
}
pub const GL_PIXEL_TRANSFORM_2D_MATRIX_EXT = 0x8338;
pub const GL_DRAW_BUFFER9_NV = 0x882E;
pub inline fn glBindFragDataLocation(arg_7200: GLuint, arg_7201: GLuint, arg_7202: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocation.?(arg_7200, arg_7201, arg_7202);
}
pub const GL_FLOAT16_MAT3x2_AMD = 0x91CA;
pub inline fn glTexCoordP1uiv(arg_7203: GLenum, arg_7204: [*c]const GLuint) void {
    return epoxy_glTexCoordP1uiv.?(arg_7203, arg_7204);
}
pub const GL_PIXEL_MAP_I_TO_A_SIZE = 0x0CB5;
pub const GL_EVAL_FRACTIONAL_TESSELLATION_NV = 0x86C5;
pub const __UINT_LEAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const GL_FRAMEBUFFER_ATTACHMENT_LAYERED_EXT = 0x8DA7;
pub const GL_DRAW_BUFFER11_NV = 0x8830;
pub inline fn glUnmapBufferOES(arg_7205: GLenum) GLboolean {
    return epoxy_glUnmapBufferOES.?(arg_7205);
}
pub inline fn glSecondaryColor3ubvEXT(arg_7206: [*c]const GLubyte) void {
    return epoxy_glSecondaryColor3ubvEXT.?(arg_7206);
}
pub const GL_BGRA_INTEGER_EXT = 0x8D9B;
pub inline fn glProgramUniformMatrix3x2fv(arg_7207: GLuint, arg_7208: GLint, arg_7209: GLsizei, arg_7210: GLboolean, arg_7211: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix3x2fv.?(arg_7207, arg_7208, arg_7209, arg_7210, arg_7211);
}
pub inline fn glGetShaderSourceARB(arg_7212: GLhandleARB, arg_7213: GLsizei, arg_7214: [*c]GLsizei, arg_7215: [*c]GLcharARB) void {
    return epoxy_glGetShaderSourceARB.?(arg_7212, arg_7213, arg_7214, arg_7215);
}
pub inline fn glGetActiveUniformsiv(arg_7216: GLuint, arg_7217: GLsizei, arg_7218: [*c]const GLuint, arg_7219: GLenum, arg_7220: [*c]GLint) void {
    return epoxy_glGetActiveUniformsiv.?(arg_7216, arg_7217, arg_7218, arg_7219, arg_7220);
}
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH_SGI = 0x80B3;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 0x8CD9;
pub const GL_SLUMINANCE8 = 0x8C47;
pub const GL_READ_FRAMEBUFFER_BINDING_NV = 0x8CAA;
pub const GL_MAX_VERTEX_ATOMIC_COUNTER_BUFFERS = 0x92CC;
pub inline fn glVDPAURegisterOutputSurfaceNV(arg_7221: ?*const c_void, arg_7222: GLenum, arg_7223: GLsizei, arg_7224: [*c]const GLuint) GLvdpauSurfaceNV {
    return epoxy_glVDPAURegisterOutputSurfaceNV.?(arg_7221, arg_7222, arg_7223, arg_7224);
}
pub const GL_ONE_MINUS_DST_COLOR = 0x0307;
pub const GL_NORMAL_ARRAY_TYPE = 0x807E;
pub inline fn glUniform2iARB(arg_7225: GLint, arg_7226: GLint, arg_7227: GLint) void {
    return epoxy_glUniform2iARB.?(arg_7225, arg_7226, arg_7227);
}
pub const GL_COLOR_TABLE_INTENSITY_SIZE = 0x80DF;
pub const GL_STENCIL_BUFFER_BIT5_QCOM = 0x00200000;
pub inline fn glColorMaskiEXT(arg_7228: GLuint, arg_7229: GLboolean, arg_7230: GLboolean, arg_7231: GLboolean, arg_7232: GLboolean) void {
    return epoxy_glColorMaskiEXT.?(arg_7228, arg_7229, arg_7230, arg_7231, arg_7232);
}
pub const GL_LINE_STRIP_ADJACENCY_OES = 0x000B;
pub inline fn glGetProgramStageiv(arg_7233: GLuint, arg_7234: GLenum, arg_7235: GLenum, arg_7236: [*c]GLint) void {
    return epoxy_glGetProgramStageiv.?(arg_7233, arg_7234, arg_7235, arg_7236);
}
pub const GL_BROWSER_DEFAULT_WEBGL = 0x9244;
pub inline fn glVertexAttribs1fvNV(arg_7237: GLuint, arg_7238: GLsizei, arg_7239: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs1fvNV.?(arg_7237, arg_7238, arg_7239);
}
pub const GL_EXT_texture_sRGB = 1;
pub inline fn glMultiTexCoord3bvOES(arg_7240: GLenum, arg_7241: [*c]const GLbyte) void {
    return epoxy_glMultiTexCoord3bvOES.?(arg_7240, arg_7241);
}
pub inline fn glCopyImageSubData(arg_7242: GLuint, arg_7243: GLenum, arg_7244: GLint, arg_7245: GLint, arg_7246: GLint, arg_7247: GLint, arg_7248: GLuint, arg_7249: GLenum, arg_7250: GLint, arg_7251: GLint, arg_7252: GLint, arg_7253: GLint, arg_7254: GLsizei, arg_7255: GLsizei, arg_7256: GLsizei) void {
    return epoxy_glCopyImageSubData.?(arg_7242, arg_7243, arg_7244, arg_7245, arg_7246, arg_7247, arg_7248, arg_7249, arg_7250, arg_7251, arg_7252, arg_7253, arg_7254, arg_7255, arg_7256);
}
pub const GL_DRAW_BUFFER6_ARB = 0x882B;
pub const GL_COMPRESSED_RGBA_ASTC_8x6 = 0x93B6;
pub const INT32_MIN = -2147483647 - 1;
pub const GL_STENCIL_TAG_BITS_EXT = 0x88F2;
pub const GL_BLACKHOLE_RENDER_INTEL = 0x83FC;
pub inline fn glVertexAttrib4fv(arg_7257: GLuint, arg_7258: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib4fv.?(arg_7257, arg_7258);
}
pub const GL_EXT_color_buffer_half_float = 1;
pub const GL_DEBUG_SOURCE_APPLICATION_ARB = 0x824A;
pub inline fn glDeleteTexturesEXT(arg_7259: GLsizei, arg_7260: [*c]const GLuint) void {
    return epoxy_glDeleteTexturesEXT.?(arg_7259, arg_7260);
}
pub const GL_UNSIGNED_SHORT_5_5_5_1 = 0x8034;
pub const __GCC_ATOMIC_LONG_LOCK_FREE = 2;
pub const GL_COMPRESSED_LUMINANCE_ALPHA = 0x84EB;
pub const GL_RG8 = 0x822B;
pub const GL_BLUE_NV = 0x1905;
pub const GL_SAMPLER_1D_SHADOW = 0x8B61;
pub const GL_SHADER_STORAGE_BUFFER_OFFSET_ALIGNMENT = 0x90DF;
pub inline fn glGetOcclusionQueryivNV(arg_7261: GLuint, arg_7262: GLenum, arg_7263: [*c]GLint) void {
    return epoxy_glGetOcclusionQueryivNV.?(arg_7261, arg_7262, arg_7263);
}
pub inline fn glStateCaptureNV(arg_7264: GLuint, arg_7265: GLenum) void {
    return epoxy_glStateCaptureNV.?(arg_7264, arg_7265);
}
pub const GL_BACK_LEFT = 0x0402;
pub const GL_PATH_STENCIL_REF_NV = 0x90B8;
pub const GL_PROGRAM_LENGTH_ARB = 0x8627;
pub const GL_NV_non_square_matrices = 1;
pub inline fn glGetTranslatedShaderSourceANGLE(arg_7266: GLuint, arg_7267: GLsizei, arg_7268: [*c]GLsizei, arg_7269: [*c]GLchar) void {
    return epoxy_glGetTranslatedShaderSourceANGLE.?(arg_7266, arg_7267, arg_7268, arg_7269);
}
pub const GL_COPY_PIXEL_TOKEN = 0x0706;
pub const GL_TEXTURE_BUFFER_BINDING = 0x8C2A;
pub const GL_MAP2_NORMAL = 0x0DB2;
pub const GL_TEXTURE_MIN_LOD = 0x813A;
pub const GL_REFERENCED_BY_GEOMETRY_SHADER = 0x9309;
pub inline fn glInitNames() void {
    return epoxy_glInitNames.?();
}
pub inline fn glMultiDrawArraysEXT(arg_7270: GLenum, arg_7271: [*c]const GLint, arg_7272: [*c]const GLsizei, arg_7273: GLsizei) void {
    return epoxy_glMultiDrawArraysEXT.?(arg_7270, arg_7271, arg_7272, arg_7273);
}
pub const GL_ARB_fragment_coord_conventions = 1;
pub const GL_CONSTANT_COLOR = 0x8001;
pub const GL_TESS_EVALUATION_SHADER_INVOCATIONS_ARB = 0x82F2;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS = 0x8DE1;
pub const GL_BLUE = 0x1905;
pub inline fn glTextureParameterIiv(arg_7274: GLuint, arg_7275: GLenum, arg_7276: [*c]const GLint) void {
    return epoxy_glTextureParameterIiv.?(arg_7274, arg_7275, arg_7276);
}
pub const GL_MAX_PROGRAM_MATRIX_STACK_DEPTH_ARB = 0x862E;
pub const GL_SRC_ATOP_NV = 0x928E;
pub const GL_OES_stencil_wrap = 1;
pub const GL_REFERENCED_BY_VERTEX_SHADER = 0x9306;
pub const GL_POINT_SIZE_MAX_SGIS = 0x8127;
pub const GL_C4UB_V2F = 0x2A22;
pub inline fn glPixelTexGenSGIX(arg_7277: GLenum) void {
    return epoxy_glPixelTexGenSGIX.?(arg_7277);
}
pub const GL_SPARSE_BUFFER_PAGE_SIZE_ARB = 0x82F8;
pub const GL_MAT_AMBIENT_AND_DIFFUSE_BIT_PGI = 0x00200000;
pub inline fn glRenderGpuMaskNV(arg_7278: GLbitfield) void {
    return epoxy_glRenderGpuMaskNV.?(arg_7278);
}
pub const GL_DRAW_BUFFER7_EXT = 0x882C;
pub const GL_TEXTURE10_ARB = 0x84CA;
pub const GL_OES_texture_stencil8 = 1;
pub const GL_MAP1_INDEX = 0x0D91;
pub const GL_RENDERBUFFER_EXT = 0x8D41;
pub inline fn glGetUnsignedBytei_vEXT(arg_7279: GLenum, arg_7280: GLuint, arg_7281: [*c]GLubyte) void {
    return epoxy_glGetUnsignedBytei_vEXT.?(arg_7279, arg_7280, arg_7281);
}
pub const GL_REPEAT = 0x2901;
pub const GL_PACK_INVERT_MESA = 0x8758;
pub const GL_DEPTH_RENDERABLE = 0x8287;
pub const GL_ARB_conditional_render_inverted = 1;
pub const GL_VIDEO_CAPTURE_SURFACE_ORIGIN_NV = 0x903C;
pub inline fn glClientActiveVertexStreamATI(arg_7282: GLenum) void {
    return epoxy_glClientActiveVertexStreamATI.?(arg_7282);
}
pub const GL_READ_FRAMEBUFFER_BINDING_ANGLE = 0x8CAA;
pub const GL_MOVE_TO_RESETS_NV = 0x90B5;
pub inline fn glProgramUniform3dv(arg_7283: GLuint, arg_7284: GLint, arg_7285: GLsizei, arg_7286: [*c]const GLdouble) void {
    return epoxy_glProgramUniform3dv.?(arg_7283, arg_7284, arg_7285, arg_7286);
}
pub inline fn glWindowPos2fMESA(arg_7287: GLfloat, arg_7288: GLfloat) void {
    return epoxy_glWindowPos2fMESA.?(arg_7287, arg_7288);
}
pub inline fn glDrawElementsInstancedBaseInstanceEXT(arg_7289: GLenum, arg_7290: GLsizei, arg_7291: GLenum, arg_7292: ?*const c_void, arg_7293: GLsizei, arg_7294: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseInstanceEXT.?(arg_7289, arg_7290, arg_7291, arg_7292, arg_7293, arg_7294);
}
pub const GL_ARB_map_buffer_range = 1;
pub inline fn glGetQueryObjectuiv(arg_7295: GLuint, arg_7296: GLenum, arg_7297: [*c]GLuint) void {
    return epoxy_glGetQueryObjectuiv.?(arg_7295, arg_7296, arg_7297);
}
pub inline fn glMatrixLoad3x2fNV(arg_7298: GLenum, arg_7299: [*c]const GLfloat) void {
    return epoxy_glMatrixLoad3x2fNV.?(arg_7298, arg_7299);
}
pub const GL_CONVOLUTION_1D_EXT = 0x8010;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_EXT = 0x9198;
pub const PRIiMAX = __PRI64_PREFIX ++ "i";
pub const GL_TEXTURE_BINDING_3D = 0x806A;
pub const GL_SCISSOR_COMMAND_NV = 0x0011;
pub const GL_VERTEX_WEIGHT_ARRAY_TYPE_EXT = 0x850E;
pub const GL_UNPACK_SKIP_ROWS = 0x0CF3;
pub inline fn glViewportArrayvNV(arg_7300: GLuint, arg_7301: GLsizei, arg_7302: [*c]const GLfloat) void {
    return epoxy_glViewportArrayvNV.?(arg_7300, arg_7301, arg_7302);
}
pub const __UINT_LEAST16_FMTo__ = "ho";
pub inline fn glDeformationMap3dSGIX(arg_7303: GLenum, arg_7304: GLdouble, arg_7305: GLdouble, arg_7306: GLint, arg_7307: GLint, arg_7308: GLdouble, arg_7309: GLdouble, arg_7310: GLint, arg_7311: GLint, arg_7312: GLdouble, arg_7313: GLdouble, arg_7314: GLint, arg_7315: GLint, arg_7316: [*c]const GLdouble) void {
    return epoxy_glDeformationMap3dSGIX.?(arg_7303, arg_7304, arg_7305, arg_7306, arg_7307, arg_7308, arg_7309, arg_7310, arg_7311, arg_7312, arg_7313, arg_7314, arg_7315, arg_7316);
}
pub const GL_ARB_vertex_attrib_64bit = 1;
pub const GL_CONTEXT_FLAG_NO_ERROR_BIT = 0x00000008;
pub const GL_INCR_WRAP_EXT = 0x8507;
pub inline fn glNamedBufferData(arg_7317: GLuint, arg_7318: GLsizeiptr, arg_7319: ?*const c_void, arg_7320: GLenum) void {
    return epoxy_glNamedBufferData.?(arg_7317, arg_7318, arg_7319, arg_7320);
}
pub const GL_MAP1_VERTEX_ATTRIB9_4_NV = 0x8669;
pub const GL_DEPTH_ATTACHMENT_OES = 0x8D00;
pub const GL_ADD_SIGNED_ARB = 0x8574;
pub const GL_ATI_vertex_attrib_array_object = 1;
pub const GL_MAP1_VERTEX_ATTRIB6_4_NV = 0x8666;
pub const __POPCNT__ = 1;
pub const SCNuMAX = __PRI64_PREFIX ++ "u";
pub inline fn glSecondaryColor3svEXT(arg_7321: [*c]const GLshort) void {
    return epoxy_glSecondaryColor3svEXT.?(arg_7321);
}
pub const GL_RESAMPLE_ZERO_FILL_SGIX = 0x8434;
pub const GL_VARIANT_ARRAY_STRIDE_EXT = 0x87E6;
pub const GL_UNSIGNED_INT16_VEC2_NV = 0x8FF1;
pub const GL_ARB_clear_buffer_object = 1;
pub const GL_COMBINER_AB_OUTPUT_NV = 0x854A;
pub const GL_TEXTURE_IMAGE_VALID_QCOM = 0x8BD8;
pub const GL_SWIZZLE_STR_DR_ATI = 0x8978;
pub inline fn glVertexAttribI4uiEXT(arg_7322: GLuint, arg_7323: GLuint, arg_7324: GLuint, arg_7325: GLuint, arg_7326: GLuint) void {
    return epoxy_glVertexAttribI4uiEXT.?(arg_7322, arg_7323, arg_7324, arg_7325, arg_7326);
}
pub inline fn glGetInvariantFloatvEXT(arg_7327: GLuint, arg_7328: GLenum, arg_7329: [*c]GLfloat) void {
    return epoxy_glGetInvariantFloatvEXT.?(arg_7327, arg_7328, arg_7329);
}
pub const GL_RG32I = 0x823B;
pub const GL_ONE_MINUS_SRC1_COLOR_EXT = 0x88FA;
pub inline fn glMultMatrixx(arg_7330: [*c]const GLfixed) void {
    return epoxy_glMultMatrixx.?(arg_7330);
}
pub const GL_LUMINANCE8 = 0x8040;
pub const GL_OFFSET_TEXTURE_SCALE_NV = 0x86E2;
pub const GL_MAX_VERTEX_SHADER_VARIANTS_EXT = 0x87C6;
pub inline fn glTexSubImage1DEXT(arg_7331: GLenum, arg_7332: GLint, arg_7333: GLint, arg_7334: GLsizei, arg_7335: GLenum, arg_7336: GLenum, arg_7337: ?*const c_void) void {
    return epoxy_glTexSubImage1DEXT.?(arg_7331, arg_7332, arg_7333, arg_7334, arg_7335, arg_7336, arg_7337);
}
pub const GL_FLOAT_R32_NV = 0x8885;
pub const GL_GEOMETRY_SUBROUTINE_UNIFORM = 0x92F1;
pub inline fn glHistogramEXT(arg_7338: GLenum, arg_7339: GLsizei, arg_7340: GLenum, arg_7341: GLboolean) void {
    return epoxy_glHistogramEXT.?(arg_7338, arg_7339, arg_7340, arg_7341);
}
pub const __UINT32_FMTX__ = "X";
pub inline fn glMakeImageHandleNonResidentARB(arg_7342: GLuint64) void {
    return epoxy_glMakeImageHandleNonResidentARB.?(arg_7342);
}
pub const GL_PIXEL_COUNTER_BITS_NV = 0x8864;
pub const GL_EXT_stencil_clear_tag = 1;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_BLOCKS_OES = 0x8E8A;
pub const GL_ISOLINES_OES = 0x8E7A;
pub inline fn glIsSync(arg_7343: GLsync) GLboolean {
    return epoxy_glIsSync.?(arg_7343);
}
pub const __UINT8_FMTo__ = "hho";
pub const GL_PATCHES_EXT = 0x000E;
pub inline fn glVertex4sv(arg_7344: [*c]const GLshort) void {
    return epoxy_glVertex4sv.?(arg_7344);
}
pub const GL_EXT_secondary_color = 1;
pub inline fn glGetnMinmax(arg_7345: GLenum, arg_7346: GLboolean, arg_7347: GLenum, arg_7348: GLenum, arg_7349: GLsizei, arg_7350: ?*c_void) void {
    return epoxy_glGetnMinmax.?(arg_7345, arg_7346, arg_7347, arg_7348, arg_7349, arg_7350);
}
pub const GL_NICEST = 0x1102;
pub inline fn glGenSymbolsEXT(arg_7351: GLenum, arg_7352: GLenum, arg_7353: GLenum, arg_7354: GLuint) GLuint {
    return epoxy_glGenSymbolsEXT.?(arg_7351, arg_7352, arg_7353, arg_7354);
}
pub const GL_TEXTURE_BORDER_VALUES_NV = 0x871A;
pub const GL_PROXY_TEXTURE_3D_EXT = 0x8070;
pub const GL_RENDERBUFFER_HEIGHT_OES = 0x8D43;
pub inline fn glLineWidthxOES(arg_7355: GLfixed) void {
    return epoxy_glLineWidthxOES.?(arg_7355);
}
pub inline fn glGenerateMipmap(arg_7356: GLenum) void {
    return epoxy_glGenerateMipmap.?(arg_7356);
}
pub const GL_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x9056;
pub inline fn __attribute_format_arg__(x: var) @TypeOf(__attribute__(__format_arg__(x))) {
    return __attribute__(__format_arg__(x));
}
pub const GL_LUMINANCE8UI_EXT = 0x8D80;
pub const GL_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING = 0x8210;
pub const GL_SUBGROUP_FEATURE_BALLOT_BIT_KHR = 0x00000008;
pub inline fn glTexCoord3iv(arg_7357: [*c]const GLint) void {
    return epoxy_glTexCoord3iv.?(arg_7357);
}
pub const GL_INNOCENT_CONTEXT_RESET_ARB = 0x8254;
pub const GL_OES_texture_mirrored_repeat = 1;
pub const GL_SGIX_texture_coordinate_clamp = 1;
pub const GL_ATI_texture_mirror_once = 1;
pub const GL_CLAMP_TO_BORDER_NV = 0x812D;
pub const GL_FRACTIONAL_EVEN = 0x8E7C;
pub const SCNiLEAST32 = "i";
pub const GL_ARB_shadow_ambient = 1;
pub inline fn glVertexAttrib4ubv(arg_7358: GLuint, arg_7359: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4ubv.?(arg_7358, arg_7359);
}
pub inline fn glRasterPos2sv(arg_7360: [*c]const GLshort) void {
    return epoxy_glRasterPos2sv.?(arg_7360);
}
pub const GL_FRACTIONAL_ODD_EXT = 0x8E7B;
pub inline fn glProgramLocalParameter4dARB(arg_7361: GLenum, arg_7362: GLuint, arg_7363: GLdouble, arg_7364: GLdouble, arg_7365: GLdouble, arg_7366: GLdouble) void {
    return epoxy_glProgramLocalParameter4dARB.?(arg_7361, arg_7362, arg_7363, arg_7364, arg_7365, arg_7366);
}
pub const GL_QUERY_BUFFER_BARRIER_BIT = 0x00008000;
pub const GL_MAX_SHADER_BUFFER_ADDRESS_NV = 0x8F35;
pub const GL_MULTICAST_GPUS_NV = 0x92BA;
pub inline fn glGetProgramNamedParameterdvNV(arg_7367: GLuint, arg_7368: GLsizei, arg_7369: [*c]const GLubyte, arg_7370: [*c]GLdouble) void {
    return epoxy_glGetProgramNamedParameterdvNV.?(arg_7367, arg_7368, arg_7369, arg_7370);
}
pub const GL_ARB_vertex_shader = 1;
pub const GL_BLUE_SCALE = 0x0D1A;
pub const GL_RGB_422_APPLE = 0x8A1F;
pub const __WINT_MAX__ = @as(c_uint, 4294967295);
pub const GL_MAX_TESS_EVALUATION_ATOMIC_COUNTER_BUFFERS = 0x92CE;
pub inline fn glCopyBufferSubData(arg_7371: GLenum, arg_7372: GLenum, arg_7373: GLintptr, arg_7374: GLintptr, arg_7375: GLsizeiptr) void {
    return epoxy_glCopyBufferSubData.?(arg_7371, arg_7372, arg_7373, arg_7374, arg_7375);
}
pub const GL_T2F_IUI_N3F_V3F_EXT = 0x81B4;
pub inline fn glVertex3fv(arg_7376: [*c]const GLfloat) void {
    return epoxy_glVertex3fv.?(arg_7376);
}
pub const GL_RGB4_S3TC = 0x83A1;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED_ARB = 0x82F3;
pub const GL_BLEND_SRC_RGB_EXT = 0x80C9;
pub const GL_LGPU_SEPARATE_STORAGE_BIT_NVX = 0x0800;
pub const GL_COMPRESSED_TEXTURE_FORMATS_ARB = 0x86A3;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV_EXT = 0x8366;
pub const GL_REFERENCED_BY_COMPUTE_SHADER = 0x930B;
pub const GL_AMD_framebuffer_multisample_advanced = 1;
pub const GL_MIN_PROGRAM_TEXTURE_GATHER_OFFSET_NV = 0x8E5E;
pub const GL_MAX_GEOMETRY_TOTAL_OUTPUT_COMPONENTS_OES = 0x8DE1;
pub const __UINT_FAST16_FMTo__ = "ho";
pub const GL_CURRENT_RASTER_TEXTURE_COORDS = 0x0B06;
pub const GL_ALPHA16 = 0x803E;
pub inline fn glBlendFunc(arg_7377: GLenum, arg_7378: GLenum) void {
    return epoxy_glBlendFunc.?(arg_7377, arg_7378);
}
pub const GL_VERTEX_ATTRIB_MAP1_SIZE_APPLE = 0x8A02;
pub const GL_SURFACE_MAPPED_NV = 0x8700;
pub const INT_LEAST32_MIN = -2147483647 - 1;
pub const GL_TEXTURE30_ARB = 0x84DE;
pub const GL_NV_sRGB_formats = 1;
pub const GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2 = 0x9276;
pub const GL_TEXTURE_COMPARE_MODE = 0x884C;
pub const GL_FOVEATION_SCALED_BIN_METHOD_BIT_QCOM = 0x00000002;
pub const GL_BLUE_BITS = 0x0D54;
pub const GL_INT_IMAGE_CUBE_MAP_ARRAY_EXT = 0x905F;
pub const GL_HISTOGRAM_ALPHA_SIZE = 0x802B;
pub const GL_HISTOGRAM_ALPHA_SIZE_EXT = 0x802B;
pub const GL_ATI_texture_float = 1;
pub inline fn glUniformMatrix4x3dv(arg_7379: GLint, arg_7380: GLsizei, arg_7381: GLboolean, arg_7382: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix4x3dv.?(arg_7379, arg_7380, arg_7381, arg_7382);
}
pub inline fn glTexParameterIuiv(arg_7383: GLenum, arg_7384: GLenum, arg_7385: [*c]const GLuint) void {
    return epoxy_glTexParameterIuiv.?(arg_7383, arg_7384, arg_7385);
}
pub const GL_NV_fog_distance = 1;
pub inline fn glIsTransformFeedback(arg_7386: GLuint) GLboolean {
    return epoxy_glIsTransformFeedback.?(arg_7386);
}
pub const SCNiLEAST16 = "hi";
pub inline fn glDeleteTextures(arg_7387: GLsizei, arg_7388: [*c]const GLuint) void {
    return epoxy_glDeleteTextures.?(arg_7387, arg_7388);
}
pub const GL_INTERLACE_READ_OML = 0x8981;
pub const GL_DIFFUSE = 0x1201;
pub const PRIx16 = "x";
pub const GL_IMAGE_TRANSFORM_2D_HP = 0x8161;
pub const GL_MAX_FRAGMENT_INTERPOLATION_OFFSET_OES = 0x8E5C;
pub inline fn glUniform1ui(arg_7389: GLint, arg_7390: GLuint) void {
    return epoxy_glUniform1ui.?(arg_7389, arg_7390);
}
pub const GL_MATRIX2_ARB = 0x88C2;
pub inline fn glGetUniformui64vARB(arg_7391: GLuint, arg_7392: GLint, arg_7393: [*c]GLuint64) void {
    return epoxy_glGetUniformui64vARB.?(arg_7391, arg_7392, arg_7393);
}
pub inline fn glVertexAttrib1svNV(arg_7394: GLuint, arg_7395: [*c]const GLshort) void {
    return epoxy_glVertexAttrib1svNV.?(arg_7394, arg_7395);
}
pub inline fn glVertexAttrib3hvNV(arg_7396: GLuint, arg_7397: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib3hvNV.?(arg_7396, arg_7397);
}
pub inline fn glMultiTexCoord2fARB(arg_7398: GLenum, arg_7399: GLfloat, arg_7400: GLfloat) void {
    return epoxy_glMultiTexCoord2fARB.?(arg_7398, arg_7399, arg_7400);
}
pub inline fn glTexBufferRangeOES(arg_7401: GLenum, arg_7402: GLenum, arg_7403: GLuint, arg_7404: GLintptr, arg_7405: GLsizeiptr) void {
    return epoxy_glTexBufferRangeOES.?(arg_7401, arg_7402, arg_7403, arg_7404, arg_7405);
}
pub const __SIZEOF_INT128__ = 16;
pub const __INT64_MAX__ = @as(c_long, 9223372036854775807);
pub const GL_FLOAT_MAT4x2 = 0x8B69;
pub inline fn glPointParameterfv(arg_7406: GLenum, arg_7407: [*c]const GLfloat) void {
    return epoxy_glPointParameterfv.?(arg_7406, arg_7407);
}
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_FRAGMENT_SHADER = 0x92CB;
pub inline fn glGetUniformdv(arg_7408: GLuint, arg_7409: GLint, arg_7410: [*c]GLdouble) void {
    return epoxy_glGetUniformdv.?(arg_7408, arg_7409, arg_7410);
}
pub const GL_BLEND_SRC_RGB = 0x80C9;
pub const GL_ARB_framebuffer_no_attachments = 1;
pub inline fn glGetProgramBinary(arg_7411: GLuint, arg_7412: GLsizei, arg_7413: [*c]GLsizei, arg_7414: [*c]GLenum, arg_7415: ?*c_void) void {
    return epoxy_glGetProgramBinary.?(arg_7411, arg_7412, arg_7413, arg_7414, arg_7415);
}
pub const GL_TEXTURE_CLIPMAP_LOD_OFFSET_SGIX = 0x8175;
pub inline fn glTrackMatrixNV(arg_7416: GLenum, arg_7417: GLuint, arg_7418: GLenum, arg_7419: GLenum) void {
    return epoxy_glTrackMatrixNV.?(arg_7416, arg_7417, arg_7418, arg_7419);
}
pub const GL_NAMED_STRING_TYPE_ARB = 0x8DEA;
pub const GL_TEXTURE_GREEN_SIZE = 0x805D;
pub inline fn glBinormal3fEXT(arg_7420: GLfloat, arg_7421: GLfloat, arg_7422: GLfloat) void {
    return epoxy_glBinormal3fEXT.?(arg_7420, arg_7421, arg_7422);
}
pub const GL_ARB_shader_precision = 1;
pub inline fn glVertexAttribI3ui(arg_7423: GLuint, arg_7424: GLuint, arg_7425: GLuint, arg_7426: GLuint) void {
    return epoxy_glVertexAttribI3ui.?(arg_7423, arg_7424, arg_7425, arg_7426);
}
pub const __CLFLUSHOPT__ = 1;
pub inline fn glIglooInterfaceSGIX(arg_7427: GLenum, arg_7428: ?*const c_void) void {
    return epoxy_glIglooInterfaceSGIX.?(arg_7427, arg_7428);
}
pub const GL_EVAL_VERTEX_ATTRIB11_NV = 0x86D1;
pub const GL_PIXEL_TILE_GRID_DEPTH_SGIX = 0x8144;
pub const GL_LAYOUT_DEPTH_ATTACHMENT_STENCIL_READ_ONLY_EXT = 0x9531;
pub inline fn glDrawArraysIndirect(arg_7429: GLenum, arg_7430: ?*const c_void) void {
    return epoxy_glDrawArraysIndirect.?(arg_7429, arg_7430);
}
pub inline fn glAsyncMarkerSGIX(arg_7431: GLuint) void {
    return epoxy_glAsyncMarkerSGIX.?(arg_7431);
}
pub inline fn glVertexAttribPointer(arg_7432: GLuint, arg_7433: GLint, arg_7434: GLenum, arg_7435: GLboolean, arg_7436: GLsizei, arg_7437: ?*const c_void) void {
    return epoxy_glVertexAttribPointer.?(arg_7432, arg_7433, arg_7434, arg_7435, arg_7436, arg_7437);
}
pub inline fn glProgramUniformHandleui64ARB(arg_7438: GLuint, arg_7439: GLint, arg_7440: GLuint64) void {
    return epoxy_glProgramUniformHandleui64ARB.?(arg_7438, arg_7439, arg_7440);
}
pub inline fn glGetRenderbufferParameterivEXT(arg_7441: GLenum, arg_7442: GLenum, arg_7443: [*c]GLint) void {
    return epoxy_glGetRenderbufferParameterivEXT.?(arg_7441, arg_7442, arg_7443);
}
pub inline fn glClearNamedBufferData(arg_7444: GLuint, arg_7445: GLenum, arg_7446: GLenum, arg_7447: GLenum, arg_7448: ?*const c_void) void {
    return epoxy_glClearNamedBufferData.?(arg_7444, arg_7445, arg_7446, arg_7447, arg_7448);
}
pub inline fn glVertexAttrib2svARB(arg_7449: GLuint, arg_7450: [*c]const GLshort) void {
    return epoxy_glVertexAttrib2svARB.?(arg_7449, arg_7450);
}
pub inline fn glGetTransformFeedbackVaryingEXT(arg_7451: GLuint, arg_7452: GLuint, arg_7453: GLsizei, arg_7454: [*c]GLsizei, arg_7455: [*c]GLsizei, arg_7456: [*c]GLenum, arg_7457: [*c]GLchar) void {
    return epoxy_glGetTransformFeedbackVaryingEXT.?(arg_7451, arg_7452, arg_7453, arg_7454, arg_7455, arg_7456, arg_7457);
}
pub const __UINT_LEAST8_FMTu__ = "hhu";
pub const GL_MATRIX4_ARB = 0x88C4;
pub const GL_WRITEONLY_RENDERING_QCOM = 0x8823;
pub const GL_UNSIGNED_INT_5_9_9_9_REV = 0x8C3E;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x3_OES = 0x93C2;
pub const GL_EXT_packed_float = 1;
pub inline fn glScalef(arg_7458: GLfloat, arg_7459: GLfloat, arg_7460: GLfloat) void {
    return epoxy_glScalef.?(arg_7458, arg_7459, arg_7460);
}
pub inline fn glUniform2ui64NV(arg_7461: GLint, arg_7462: GLuint64EXT, arg_7463: GLuint64EXT) void {
    return epoxy_glUniform2ui64NV.?(arg_7461, arg_7462, arg_7463);
}
pub const GL_MAP2_VERTEX_ATTRIB5_4_NV = 0x8675;
pub inline fn glNamedBufferSubData(arg_7464: GLuint, arg_7465: GLintptr, arg_7466: GLsizeiptr, arg_7467: ?*const c_void) void {
    return epoxy_glNamedBufferSubData.?(arg_7464, arg_7465, arg_7466, arg_7467);
}
pub inline fn glReplacementCodeuiTexCoord2fVertex3fSUN(arg_7468: GLuint, arg_7469: GLfloat, arg_7470: GLfloat, arg_7471: GLfloat, arg_7472: GLfloat, arg_7473: GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fVertex3fSUN.?(arg_7468, arg_7469, arg_7470, arg_7471, arg_7472, arg_7473);
}
pub const GL_CON_22_ATI = 0x8957;
pub const GL_MAX_PROGRAM_TEXEL_OFFSET_EXT = 0x8905;
pub const GL_MESA_shader_integer_functions = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_INTEGER_NV = 0x88FD;
pub const GL_VERTEX_ATTRIB_MAP2_APPLE = 0x8A01;
pub const GL_MAP_INVALIDATE_RANGE_BIT = 0x0004;
pub inline fn glGetPathColorGenfvNV(arg_7474: GLenum, arg_7475: GLenum, arg_7476: [*c]GLfloat) void {
    return epoxy_glGetPathColorGenfvNV.?(arg_7474, arg_7475, arg_7476);
}
pub inline fn glMultiTexCoord4fv(arg_7477: GLenum, arg_7478: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord4fv.?(arg_7477, arg_7478);
}
pub inline fn glColor4fv(arg_7479: [*c]const GLfloat) void {
    return epoxy_glColor4fv.?(arg_7479);
}
pub const GL_POINT_FADE_THRESHOLD_SIZE_SGIS = 0x8128;
pub const GL_ARRAY_ELEMENT_LOCK_COUNT_EXT = 0x81A9;
pub const GL_PROXY_TEXTURE_RECTANGLE_NV = 0x84F7;
pub const GL_SGIX_tag_sample_buffer = 1;
pub const GL_COLOR_ATTACHMENT13 = 0x8CED;
pub const GL_BUFFER_DATA_SIZE = 0x9303;
pub const GL_INTEL_fragment_shader_ordering = 1;
pub const GL_FLOAT = 0x1406;
pub const GL_UNIFORM_BUFFER_UNIFIED_NV = 0x936E;
pub const GL_LIGHT_MODEL_LOCAL_VIEWER = 0x0B51;
pub const GL_APPLE_aux_depth_stencil = 1;
pub const GL_COMPRESSED_RGBA_ASTC_10x5_KHR = 0x93B8;
pub const GL_COPY_INVERTED = 0x150C;
pub inline fn glSamplerParameteri(arg_7480: GLuint, arg_7481: GLenum, arg_7482: GLint) void {
    return epoxy_glSamplerParameteri.?(arg_7480, arg_7481, arg_7482);
}
pub inline fn glDisableiEXT(arg_7483: GLenum, arg_7484: GLuint) void {
    return epoxy_glDisableiEXT.?(arg_7483, arg_7484);
}
pub const GL_DYNAMIC_STORAGE_BIT = 0x0100;
pub const GL_FILL_RECTANGLE_NV = 0x933C;
pub const GL_OES_stencil8 = 1;
pub const GL_MAP1_VERTEX_ATTRIB0_4_NV = 0x8660;
pub const GL_ACCUM_CLEAR_VALUE = 0x0B80;
pub const GL_FRAGMENT_LIGHT0_SGIX = 0x840C;
pub const GL_COMBINER7_NV = 0x8557;
pub inline fn glAttachShader(arg_7485: GLuint, arg_7486: GLuint) void {
    return epoxy_glAttachShader.?(arg_7485, arg_7486);
}
pub const __GNUC_MINOR__ = 2;
pub const GL_DEPENDENT_RGB_TEXTURE_3D_NV = 0x8859;
pub const GL_MAX_MESH_TEXTURE_IMAGE_UNITS_NV = 0x8E61;
pub const GL_OES_extended_matrix_palette = 1;
pub const GL_OFFSET_TEXTURE_MATRIX_NV = 0x86E1;
pub const GL_INTERNALFORMAT_SHARED_SIZE = 0x8277;
pub const GL_EXT_texture_buffer = 1;
pub const GL_TEXTURE_LIGHTING_MODE_HP = 0x8167;
pub inline fn glLightEnviSGIX(arg_7487: GLenum, arg_7488: GLint) void {
    return epoxy_glLightEnviSGIX.?(arg_7487, arg_7488);
}
pub const GL_RGBA_FLOAT32_APPLE = 0x8814;
pub inline fn glVertex3s(arg_7489: GLshort, arg_7490: GLshort, arg_7491: GLshort) void {
    return epoxy_glVertex3s.?(arg_7489, arg_7490, arg_7491);
}
pub const GL_POST_CONVOLUTION_GREEN_SCALE = 0x801D;
pub const GL_WEIGHT_ARRAY_POINTER_OES = 0x86AC;
pub const GL_COMBINER6_NV = 0x8556;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT = 0x00001000;
pub const GL_WRITE_PIXEL_DATA_RANGE_POINTER_NV = 0x887C;
pub const GL_ELEMENT_ARRAY_POINTER_ATI = 0x876A;
pub const GL_COMPRESSED_RGBA_ASTC_10x8 = 0x93BA;
pub const GL_RG16F = 0x822F;
pub const GL_MAX_PATCH_VERTICES_OES = 0x8E7D;
pub inline fn glGetDoubleIndexedvEXT(arg_7492: GLenum, arg_7493: GLuint, arg_7494: [*c]GLdouble) void {
    return epoxy_glGetDoubleIndexedvEXT.?(arg_7492, arg_7493, arg_7494);
}
pub inline fn glProgramLocalParametersI4ivNV(arg_7495: GLenum, arg_7496: GLuint, arg_7497: GLsizei, arg_7498: [*c]const GLint) void {
    return epoxy_glProgramLocalParametersI4ivNV.?(arg_7495, arg_7496, arg_7497, arg_7498);
}
pub inline fn glTexCoord3bvOES(arg_7499: [*c]const GLbyte) void {
    return epoxy_glTexCoord3bvOES.?(arg_7499);
}
pub const GL_OVR_multiview2 = 1;
pub const GL_MAX_TESS_PATCH_COMPONENTS = 0x8E84;
pub const GL_TRANSFORM_FEEDBACK_ATTRIBS_NV = 0x8C7E;
pub inline fn glDrawTexivOES(arg_7500: [*c]const GLint) void {
    return epoxy_glDrawTexivOES.?(arg_7500);
}
pub const GL_POST_COLOR_MATRIX_RED_SCALE_SGI = 0x80B4;
pub const GL_ACTIVE_VARYINGS_NV = 0x8C81;
pub const __INTMAX_FMTd__ = "ld";
pub const GL_SCALE_BY_ONE_HALF_NV = 0x8540;
pub inline fn glFlushVertexArrayRangeAPPLE(arg_7501: GLsizei, arg_7502: ?*c_void) void {
    return epoxy_glFlushVertexArrayRangeAPPLE.?(arg_7501, arg_7502);
}
pub const GL_COLOR_ATTACHMENT4 = 0x8CE4;
pub inline fn glMultiTexCoord2fv(arg_7503: GLenum, arg_7504: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord2fv.?(arg_7503, arg_7504);
}
pub const GL_COMPRESSED_RGBA_ARB = 0x84EE;
pub const GL_MAX_TASK_IMAGE_UNIFORMS_NV = 0x8E6A;
pub const GL_NV_texture_rectangle_compressed = 1;
pub const GL_SECONDARY_COLOR_ARRAY_LENGTH_NV = 0x8F31;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG = 0x93F0;
pub inline fn glBeginQueryIndexed(arg_7505: GLenum, arg_7506: GLuint, arg_7507: GLuint) void {
    return epoxy_glBeginQueryIndexed.?(arg_7505, arg_7506, arg_7507);
}
pub const GL_QUERY_WAIT_NV = 0x8E13;
pub const GL_SUNX_constant_data = 1;
pub inline fn glDeleteQueriesARB(arg_7508: GLsizei, arg_7509: [*c]const GLuint) void {
    return epoxy_glDeleteQueriesARB.?(arg_7508, arg_7509);
}
pub inline fn glVertexP4ui(arg_7510: GLenum, arg_7511: GLuint) void {
    return epoxy_glVertexP4ui.?(arg_7510, arg_7511);
}
pub inline fn glColor3d(arg_7512: GLdouble, arg_7513: GLdouble, arg_7514: GLdouble) void {
    return epoxy_glColor3d.?(arg_7512, arg_7513, arg_7514);
}
pub inline fn glTexParameterIuivEXT(arg_7515: GLenum, arg_7516: GLenum, arg_7517: [*c]const GLuint) void {
    return epoxy_glTexParameterIuivEXT.?(arg_7515, arg_7516, arg_7517);
}
pub const UINT_LEAST8_MAX = 255;
pub const GL_VIEW_CLASS_BPTC_UNORM = 0x82D2;
pub const GL_S = 0x2000;
pub inline fn glProgramUniform1uivEXT(arg_7518: GLuint, arg_7519: GLint, arg_7520: GLsizei, arg_7521: [*c]const GLuint) void {
    return epoxy_glProgramUniform1uivEXT.?(arg_7518, arg_7519, arg_7520, arg_7521);
}
pub inline fn glFramebufferSampleLocationsfvNV(arg_7522: GLenum, arg_7523: GLuint, arg_7524: GLsizei, arg_7525: [*c]const GLfloat) void {
    return epoxy_glFramebufferSampleLocationsfvNV.?(arg_7522, arg_7523, arg_7524, arg_7525);
}
pub const GL_DRAW_BUFFER10_ARB = 0x882F;
pub const GL_TEXTURE_BINDING_CUBE_MAP_ARRAY_ARB = 0x900A;
pub inline fn glColorFragmentOp3ATI(arg_7526: GLenum, arg_7527: GLuint, arg_7528: GLuint, arg_7529: GLuint, arg_7530: GLuint, arg_7531: GLuint, arg_7532: GLuint, arg_7533: GLuint, arg_7534: GLuint, arg_7535: GLuint, arg_7536: GLuint, arg_7537: GLuint, arg_7538: GLuint) void {
    return epoxy_glColorFragmentOp3ATI.?(arg_7526, arg_7527, arg_7528, arg_7529, arg_7530, arg_7531, arg_7532, arg_7533, arg_7534, arg_7535, arg_7536, arg_7537, arg_7538);
}
pub const GL_ALPHA_SNORM = 0x9010;
pub inline fn glSecondaryColor3bvEXT(arg_7539: [*c]const GLbyte) void {
    return epoxy_glSecondaryColor3bvEXT.?(arg_7539);
}
pub inline fn glGetVertexAttribIuivEXT(arg_7540: GLuint, arg_7541: GLenum, arg_7542: [*c]GLuint) void {
    return epoxy_glGetVertexAttribIuivEXT.?(arg_7540, arg_7541, arg_7542);
}
pub const GL_VARIANT_DATATYPE_EXT = 0x87E5;
pub inline fn glGetMaterialxvOES(arg_7543: GLenum, arg_7544: GLenum, arg_7545: [*c]GLfixed) void {
    return epoxy_glGetMaterialxvOES.?(arg_7543, arg_7544, arg_7545);
}
pub const __SSE3__ = 1;
pub const GL_LINEAR_CLIPMAP_LINEAR_SGIX = 0x8170;
pub const GL_ARB_uniform_buffer_object = 1;
pub const GL_DEPTH_COMPONENT16_SGIX = 0x81A5;
pub const GL_ELEMENT_ARRAY_BUFFER_BINDING_ARB = 0x8895;
pub const GL_SEPARATE_SPECULAR_COLOR_EXT = 0x81FA;
pub inline fn glTextureParameteri(arg_7546: GLuint, arg_7547: GLenum, arg_7548: GLint) void {
    return epoxy_glTextureParameteri.?(arg_7546, arg_7547, arg_7548);
}
pub const GL_CONVOLUTION_FILTER_BIAS = 0x8015;
pub const PRIoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const GL_TEXTURE_CUBE_MAP_SEAMLESS = 0x884F;
pub inline fn glMultiDrawElementsIndirectCountARB(arg_7549: GLenum, arg_7550: GLenum, arg_7551: ?*const c_void, arg_7552: GLintptr, arg_7553: GLsizei, arg_7554: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectCountARB.?(arg_7549, arg_7550, arg_7551, arg_7552, arg_7553, arg_7554);
}
pub const GL_MAX_TEXTURE_BUFFER_SIZE = 0x8C2B;
pub inline fn glFenceSync(arg_7555: GLenum, arg_7556: GLbitfield) GLsync {
    return epoxy_glFenceSync.?(arg_7555, arg_7556);
}
pub inline fn glProgramUniform1dEXT(arg_7557: GLuint, arg_7558: GLint, arg_7559: GLdouble) void {
    return epoxy_glProgramUniform1dEXT.?(arg_7557, arg_7558, arg_7559);
}
pub const GL_UNIFORM_OFFSET = 0x8A3B;
pub const GL_INT16_VEC3_NV = 0x8FE6;
pub const PRIiLEAST64 = __PRI64_PREFIX ++ "i";
pub const GL_COLOR_ATTACHMENT19 = 0x8CF3;
pub inline fn glGenAsyncMarkersSGIX(arg_7560: GLsizei) GLuint {
    return epoxy_glGenAsyncMarkersSGIX.?(arg_7560);
}
pub const GL_PACK_SKIP_ROWS = 0x0D03;
pub inline fn glUniform3fv(arg_7561: GLint, arg_7562: GLsizei, arg_7563: [*c]const GLfloat) void {
    return epoxy_glUniform3fv.?(arg_7561, arg_7562, arg_7563);
}
pub const GL_FONT_UNITS_PER_EM_BIT_NV = 0x00100000;
pub inline fn glGetNamedProgramLocalParameterfvEXT(arg_7564: GLuint, arg_7565: GLenum, arg_7566: GLuint, arg_7567: [*c]GLfloat) void {
    return epoxy_glGetNamedProgramLocalParameterfvEXT.?(arg_7564, arg_7565, arg_7566, arg_7567);
}
pub inline fn glMultiDrawMeshTasksIndirectNV(arg_7568: GLintptr, arg_7569: GLsizei, arg_7570: GLsizei) void {
    return epoxy_glMultiDrawMeshTasksIndirectNV.?(arg_7568, arg_7569, arg_7570);
}
pub const GL_VERSION_ES_CM_1_1 = 1;
pub const GL_DRAW_BUFFER8_EXT = 0x882D;
pub const GL_EVAL_VERTEX_ATTRIB0_NV = 0x86C6;
pub const GL_ARB_multisample = 1;
pub inline fn glNamedRenderbufferStorageMultisample(arg_7571: GLuint, arg_7572: GLsizei, arg_7573: GLenum, arg_7574: GLsizei, arg_7575: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisample.?(arg_7571, arg_7572, arg_7573, arg_7574, arg_7575);
}
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_ARB = 0x900E;
pub inline fn glProgramUniform4i64ARB(arg_7576: GLuint, arg_7577: GLint, arg_7578: GLint64, arg_7579: GLint64, arg_7580: GLint64, arg_7581: GLint64) void {
    return epoxy_glProgramUniform4i64ARB.?(arg_7576, arg_7577, arg_7578, arg_7579, arg_7580, arg_7581);
}
pub const GL_DYNAMIC_STORAGE_BIT_EXT = 0x0100;
pub const GL_FOG_COORDINATE_ARRAY_POINTER_EXT = 0x8456;
pub const GL_TEXTURE24 = 0x84D8;
pub const GL_FALSE = 0;
pub const GL_PATH_TRANSPOSE_PROJECTION_MATRIX_NV = 0x84E4;
pub const GL_COMPRESSED_RGBA_ASTC_4x3x3_OES = 0x93C1;
pub const GL_FOG_COORDINATE_ARRAY_LIST_IBM = 103076;
pub inline fn glLightiv(arg_7582: GLenum, arg_7583: GLenum, arg_7584: [*c]const GLint) void {
    return epoxy_glLightiv.?(arg_7582, arg_7583, arg_7584);
}
pub const __INT_FAST64_FMTd__ = "ld";
pub const GL_REPLACEMENT_CODE_ARRAY_STRIDE_SUN = 0x85C2;
pub inline fn glGetBufferSubData(arg_7585: GLenum, arg_7586: GLintptr, arg_7587: GLsizeiptr, arg_7588: ?*c_void) void {
    return epoxy_glGetBufferSubData.?(arg_7585, arg_7586, arg_7587, arg_7588);
}
pub const GL_VALIDATE_SHADER_BINARY_QCOM = 0x96A3;
pub const GL_INT_VEC3_ARB = 0x8B54;
pub const GL_TRIANGULAR_NV = 0x90A5;
pub inline fn glFrustumf(arg_7589: GLfloat, arg_7590: GLfloat, arg_7591: GLfloat, arg_7592: GLfloat, arg_7593: GLfloat, arg_7594: GLfloat) void {
    return epoxy_glFrustumf.?(arg_7589, arg_7590, arg_7591, arg_7592, arg_7593, arg_7594);
}
pub inline fn glPolygonOffsetEXT(arg_7595: GLfloat, arg_7596: GLfloat) void {
    return epoxy_glPolygonOffsetEXT.?(arg_7595, arg_7596);
}
pub inline fn glMulticastBlitFramebufferNV(arg_7597: GLuint, arg_7598: GLuint, arg_7599: GLint, arg_7600: GLint, arg_7601: GLint, arg_7602: GLint, arg_7603: GLint, arg_7604: GLint, arg_7605: GLint, arg_7606: GLint, arg_7607: GLbitfield, arg_7608: GLenum) void {
    return epoxy_glMulticastBlitFramebufferNV.?(arg_7597, arg_7598, arg_7599, arg_7600, arg_7601, arg_7602, arg_7603, arg_7604, arg_7605, arg_7606, arg_7607, arg_7608);
}
pub const GL_RENDERBUFFER_SAMPLES_APPLE = 0x8CAB;
pub const GL_ALPHA16F_EXT = 0x881C;
pub const GL_EXT_gpu_program_parameters = 1;
pub const GL_PROGRAMMABLE_SAMPLE_LOCATION_ARB = 0x9341;
pub inline fn glCopyTextureImage1DEXT(arg_7609: GLuint, arg_7610: GLenum, arg_7611: GLint, arg_7612: GLenum, arg_7613: GLint, arg_7614: GLint, arg_7615: GLsizei, arg_7616: GLint) void {
    return epoxy_glCopyTextureImage1DEXT.?(arg_7609, arg_7610, arg_7611, arg_7612, arg_7613, arg_7614, arg_7615, arg_7616);
}
pub const GL_PIXEL_UNPACK_BUFFER_BINDING_ARB = 0x88EF;
pub const GL_FACTOR_MAX_AMD = 0x901D;
pub inline fn glGetProgramPipelineiv(arg_7617: GLuint, arg_7618: GLenum, arg_7619: [*c]GLint) void {
    return epoxy_glGetProgramPipelineiv.?(arg_7617, arg_7618, arg_7619);
}
pub const GL_OP_RECIP_SQRT_EXT = 0x8795;
pub const GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT = 0x8CDB;
pub const GL_ALLOW_DRAW_OBJ_HINT_PGI = 0x1A20E;
pub inline fn glVertexAttrib4ubNV(arg_7620: GLuint, arg_7621: GLubyte, arg_7622: GLubyte, arg_7623: GLubyte, arg_7624: GLubyte) void {
    return epoxy_glVertexAttrib4ubNV.?(arg_7620, arg_7621, arg_7622, arg_7623, arg_7624);
}
pub inline fn glNormalStream3svATI(arg_7625: GLenum, arg_7626: [*c]const GLshort) void {
    return epoxy_glNormalStream3svATI.?(arg_7625, arg_7626);
}
pub inline fn glUniformMatrix2x3dv(arg_7627: GLint, arg_7628: GLsizei, arg_7629: GLboolean, arg_7630: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix2x3dv.?(arg_7627, arg_7628, arg_7629, arg_7630);
}
pub const GL_SOFTLIGHT_KHR = 0x929C;
pub inline fn glProgramSubroutineParametersuivNV(arg_7631: GLenum, arg_7632: GLsizei, arg_7633: [*c]const GLuint) void {
    return epoxy_glProgramSubroutineParametersuivNV.?(arg_7631, arg_7632, arg_7633);
}
pub inline fn glProgramParameteriARB(arg_7634: GLuint, arg_7635: GLenum, arg_7636: GLint) void {
    return epoxy_glProgramParameteriARB.?(arg_7634, arg_7635, arg_7636);
}
pub const SCNoFAST8 = "hho";
pub inline fn glTexCoord1s(arg_7637: GLshort) void {
    return epoxy_glTexCoord1s.?(arg_7637);
}
pub inline fn glVertexAttribP3ui(arg_7638: GLuint, arg_7639: GLenum, arg_7640: GLboolean, arg_7641: GLuint) void {
    return epoxy_glVertexAttribP3ui.?(arg_7638, arg_7639, arg_7640, arg_7641);
}
pub const GL_COMPRESSED_RGBA8_ETC2_EAC_OES = 0x9278;
pub const GL_TEXTURE_FOVEATED_FEATURE_BITS_QCOM = 0x8BFB;
pub const GL_UNPACK_COMPRESSED_BLOCK_DEPTH = 0x9129;
pub inline fn glGetActiveSubroutineUniformiv(arg_7642: GLuint, arg_7643: GLenum, arg_7644: GLuint, arg_7645: GLenum, arg_7646: [*c]GLint) void {
    return epoxy_glGetActiveSubroutineUniformiv.?(arg_7642, arg_7643, arg_7644, arg_7645, arg_7646);
}
pub const __UINT16_FMTu__ = "hu";
pub const GL_FRAGMENT_LIGHT6_SGIX = 0x8412;
pub const GL_ARC_TO_NV = 0xFE;
pub inline fn glClearColorx(arg_7647: GLfixed, arg_7648: GLfixed, arg_7649: GLfixed, arg_7650: GLfixed) void {
    return epoxy_glClearColorx.?(arg_7647, arg_7648, arg_7649, arg_7650);
}
pub const GL_TEXTURE_SHARED_SIZE = 0x8C3F;
pub inline fn glColorP3ui(arg_7651: GLenum, arg_7652: GLuint) void {
    return epoxy_glColorP3ui.?(arg_7651, arg_7652);
}
pub inline fn glMakeImageHandleNonResidentNV(arg_7653: GLuint64) void {
    return epoxy_glMakeImageHandleNonResidentNV.?(arg_7653);
}
pub const GL_DEPTH_BUFFER_BIT7_QCOM = 0x00008000;
pub inline fn glBlendEquationiARB(arg_7654: GLuint, arg_7655: GLenum) void {
    return epoxy_glBlendEquationiARB.?(arg_7654, arg_7655);
}
pub const GL_VERTEX_ATTRIB_MAP2_DOMAIN_APPLE = 0x8A09;
pub const GL_BUFFER_MAPPED_OES = 0x88BC;
pub const GL_PACK_SUBSAMPLE_RATE_SGIX = 0x85A0;
pub inline fn glFramebufferTexture1D(arg_7656: GLenum, arg_7657: GLenum, arg_7658: GLenum, arg_7659: GLuint, arg_7660: GLint) void {
    return epoxy_glFramebufferTexture1D.?(arg_7656, arg_7657, arg_7658, arg_7659, arg_7660);
}
pub const GL_SIGNED_RGB_UNSIGNED_ALPHA_NV = 0x870C;
pub const GL_ARB_vertex_program = 1;
pub const GL_CLIENT_MAPPED_BUFFER_BARRIER_BIT_EXT = 0x00004000;
pub inline fn glClipControl(arg_7661: GLenum, arg_7662: GLenum) void {
    return epoxy_glClipControl.?(arg_7661, arg_7662);
}
pub inline fn glBegin(arg_7663: GLenum) void {
    return epoxy_glBegin.?(arg_7663);
}
pub const GL_DECODE_EXT = 0x8A49;
pub const GL_VERTEX_PROGRAM_NV = 0x8620;
pub const GL_ADD_SIGNED_EXT = 0x8574;
pub inline fn glProgramUniformMatrix2fv(arg_7664: GLuint, arg_7665: GLint, arg_7666: GLsizei, arg_7667: GLboolean, arg_7668: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2fv.?(arg_7664, arg_7665, arg_7666, arg_7667, arg_7668);
}
pub const GL_COLOR_SUM_CLAMP_NV = 0x854F;
pub const GL_MAX_ASYNC_TEX_IMAGE_SGIX = 0x835F;
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_OES = 0x8CD9;
pub inline fn glVertexStream3dvATI(arg_7669: GLenum, arg_7670: [*c]const GLdouble) void {
    return epoxy_glVertexStream3dvATI.?(arg_7669, arg_7670);
}
pub const GL_TESS_GEN_MODE_EXT = 0x8E76;
pub const GL_TEXTURE27 = 0x84DB;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_APPLE = 0x8C3B;
pub const GL_COMPUTE_SUBROUTINE_UNIFORM = 0x92F3;
pub const __UINTPTR_FMTX__ = "lX";
pub const GL_EDGE_FLAG_ARRAY_STRIDE = 0x808C;
pub const GL_VERTEX_ARRAY_STRIDE = 0x807C;
pub const GL_DRAW_BUFFER0_EXT = 0x8825;
pub const GL_LUMINANCE12_ALPHA4_EXT = 0x8046;
pub const GL_RELATIVE_ROUNDED_RECT4_NV = 0xED;
pub inline fn glGenLists(arg_7671: GLsizei) GLuint {
    return epoxy_glGenLists.?(arg_7671);
}
pub const GL_INT_IMAGE_1D_EXT = 0x9057;
pub const GL_SKIP_COMPONENTS1_NV = -6;
pub const GL_EXT_texture_mirror_clamp = 1;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE_EXT = 0x808A;
pub inline fn glColorTableParameterfvSGI(arg_7672: GLenum, arg_7673: GLenum, arg_7674: [*c]const GLfloat) void {
    return epoxy_glColorTableParameterfvSGI.?(arg_7672, arg_7673, arg_7674);
}
pub const GL_MATRIX_PALETTE_OES = 0x8840;
pub const GL_OES_draw_buffers_indexed = 1;
pub const GL_WINDOW_RECTANGLE_MODE_EXT = 0x8F13;
pub inline fn glDrawElementsBaseVertexOES(arg_7675: GLenum, arg_7676: GLsizei, arg_7677: GLenum, arg_7678: ?*const c_void, arg_7679: GLint) void {
    return epoxy_glDrawElementsBaseVertexOES.?(arg_7675, arg_7676, arg_7677, arg_7678, arg_7679);
}
pub const GL_OES_texture_buffer = 1;
pub const GL_MULTISAMPLE_BUFFER_BIT3_QCOM = 0x08000000;
pub const GL_MAX_VERTEX_STREAMS_ATI = 0x876B;
pub const GL_EXT_multiview_draw_buffers = 1;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS_EXT = 0x88FC;
pub inline fn glDrawTexxvOES(arg_7680: [*c]const GLfixed) void {
    return epoxy_glDrawTexxvOES.?(arg_7680);
}
pub const GL_DONT_CARE = 0x1100;
pub const GL_VIEW_CLASS_ETC2_EAC_RGBA = 0x9387;
pub inline fn glPixelStorei(arg_7681: GLenum, arg_7682: GLint) void {
    return epoxy_glPixelStorei.?(arg_7681, arg_7682);
}
pub inline fn glUniformBlockBinding(arg_7683: GLuint, arg_7684: GLuint, arg_7685: GLuint) void {
    return epoxy_glUniformBlockBinding.?(arg_7683, arg_7684, arg_7685);
}
pub inline fn glTexEnvx(arg_7686: GLenum, arg_7687: GLenum, arg_7688: GLfixed) void {
    return epoxy_glTexEnvx.?(arg_7686, arg_7687, arg_7688);
}
pub const GL_LOCAL_CONSTANT_DATATYPE_EXT = 0x87ED;
pub inline fn glProgramUniform2uiv(arg_7689: GLuint, arg_7690: GLint, arg_7691: GLsizei, arg_7692: [*c]const GLuint) void {
    return epoxy_glProgramUniform2uiv.?(arg_7689, arg_7690, arg_7691, arg_7692);
}
pub const @"false" = 0;
pub const GL_CONTEXT_FLAG_ROBUST_ACCESS_BIT_ARB = 0x00000004;
pub const GL_MINMAX_EXT = 0x802E;
pub const GL_NEXT_VIDEO_CAPTURE_BUFFER_STATUS_NV = 0x9025;
pub const GL_UNSIGNALED = 0x9118;
pub inline fn glLockArraysEXT(arg_7693: GLint, arg_7694: GLsizei) void {
    return epoxy_glLockArraysEXT.?(arg_7693, arg_7694);
}
pub inline fn glEnableClientStateiEXT(arg_7695: GLenum, arg_7696: GLuint) void {
    return epoxy_glEnableClientStateiEXT.?(arg_7695, arg_7696);
}
pub const GL_DEPTH_COMPONENT32 = 0x81A7;
pub inline fn glBufferAttachMemoryNV(arg_7697: GLenum, arg_7698: GLuint, arg_7699: GLuint64) void {
    return epoxy_glBufferAttachMemoryNV.?(arg_7697, arg_7698, arg_7699);
}
pub inline fn glCopyTextureSubImage1D(arg_7700: GLuint, arg_7701: GLint, arg_7702: GLint, arg_7703: GLint, arg_7704: GLint, arg_7705: GLsizei) void {
    return epoxy_glCopyTextureSubImage1D.?(arg_7700, arg_7701, arg_7702, arg_7703, arg_7704, arg_7705);
}
pub const GL_MAX_PATCH_VERTICES_EXT = 0x8E7D;
pub const GL_ACTIVE_SUBROUTINE_UNIFORMS = 0x8DE6;
pub inline fn glGetNamedBufferPointerv(arg_7706: GLuint, arg_7707: GLenum, arg_7708: [*c]?*c_void) void {
    return epoxy_glGetNamedBufferPointerv.?(arg_7706, arg_7707, arg_7708);
}
pub const GL_FLOAT16_MAT2x4_AMD = 0x91C9;
pub inline fn glGetQueryBufferObjectiv(arg_7709: GLuint, arg_7710: GLuint, arg_7711: GLenum, arg_7712: GLintptr) void {
    return epoxy_glGetQueryBufferObjectiv.?(arg_7709, arg_7710, arg_7711, arg_7712);
}
pub const GL_VERTEX_PROGRAM_CALLBACK_DATA_MESA = 0x8BB7;
pub const GL_DOT_PRODUCT_PASS_THROUGH_NV = 0x885B;
pub inline fn glEvalCoord1dv(arg_7713: [*c]const GLdouble) void {
    return epoxy_glEvalCoord1dv.?(arg_7713);
}
pub inline fn glGetActiveUniformBlockiv(arg_7714: GLuint, arg_7715: GLuint, arg_7716: GLenum, arg_7717: [*c]GLint) void {
    return epoxy_glGetActiveUniformBlockiv.?(arg_7714, arg_7715, arg_7716, arg_7717);
}
pub inline fn glReplacementCodeuiTexCoord2fVertex3fvSUN(arg_7718: [*c]const GLuint, arg_7719: [*c]const GLfloat, arg_7720: [*c]const GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fVertex3fvSUN.?(arg_7718, arg_7719, arg_7720);
}
pub const GL_FONT_DESCENDER_BIT_NV = 0x00400000;
pub const GL_EXT_multisampled_render_to_texture = 1;
pub const GL_FLOAT_RG_NV = 0x8881;
pub inline fn glVertexAttribL3ui64NV(arg_7721: GLuint, arg_7722: GLuint64EXT, arg_7723: GLuint64EXT, arg_7724: GLuint64EXT) void {
    return epoxy_glVertexAttribL3ui64NV.?(arg_7721, arg_7722, arg_7723, arg_7724);
}
pub const GL_MATRIX_INDEX_ARRAY_POINTER_OES = 0x8849;
pub const GL_UNIFORM_SIZE = 0x8A38;
pub const GL_MODELVIEW30_ARB = 0x873E;
pub inline fn glRasterPos3iv(arg_7725: [*c]const GLint) void {
    return epoxy_glRasterPos3iv.?(arg_7725);
}
pub inline fn glWindowPos3sMESA(arg_7726: GLshort, arg_7727: GLshort, arg_7728: GLshort) void {
    return epoxy_glWindowPos3sMESA.?(arg_7726, arg_7727, arg_7728);
}
pub inline fn glRasterPos4fv(arg_7729: [*c]const GLfloat) void {
    return epoxy_glRasterPos4fv.?(arg_7729);
}
pub const SCNoLEAST32 = "o";
pub inline fn glDebugMessageEnableAMD(arg_7730: GLenum, arg_7731: GLenum, arg_7732: GLsizei, arg_7733: [*c]const GLuint, arg_7734: GLboolean) void {
    return epoxy_glDebugMessageEnableAMD.?(arg_7730, arg_7731, arg_7732, arg_7733, arg_7734);
}
pub const PRIXPTR = __PRIPTR_PREFIX ++ "X";
pub const GL_BITMAP_TOKEN = 0x0704;
pub const GL_VERTEX_DATA_HINT_PGI = 0x1A22A;
pub const GL_SPARE0_PLUS_SECONDARY_COLOR_NV = 0x8532;
pub inline fn glTbufferMask3DFX(arg_7735: GLuint) void {
    return epoxy_glTbufferMask3DFX.?(arg_7735);
}
pub const GL_RGBA_MODE = 0x0C31;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_WIDTH_ARB = 0x933E;
pub const GL_TRANSFORM_FEEDBACK = 0x8E22;
pub inline fn glDeleteFencesAPPLE(arg_7736: GLsizei, arg_7737: [*c]const GLuint) void {
    return epoxy_glDeleteFencesAPPLE.?(arg_7736, arg_7737);
}
pub const GL_ARB_half_float_vertex = 1;
pub const GL_COMPRESSED_LUMINANCE = 0x84EA;
pub const GL_ARB_shader_draw_parameters = 1;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR = 0x93D7;
pub inline fn glBeginVertexShaderEXT() void {
    return epoxy_glBeginVertexShaderEXT.?();
}
pub inline fn glActiveVaryingNV(arg_7738: GLuint, arg_7739: [*c]const GLchar) void {
    return epoxy_glActiveVaryingNV.?(arg_7738, arg_7739);
}
pub inline fn glLightxv(arg_7740: GLenum, arg_7741: GLenum, arg_7742: [*c]const GLfixed) void {
    return epoxy_glLightxv.?(arg_7740, arg_7741, arg_7742);
}
pub const GL_ALPHA16_SNORM = 0x9018;
pub const GL_SHADING_RATE_IMAGE_TEXEL_HEIGHT_NV = 0x955D;
pub const UINTMAX_MAX = __UINT64_C(18446744073709551615);
pub const GL_INTERPOLATE_EXT = 0x8575;
pub const GL_STENCIL_BUFFER_BIT3_QCOM = 0x00080000;
pub const GL_PRIMITIVES_GENERATED_OES = 0x8C87;
pub const GL_COMPRESSED_RGBA_S3TC_DXT3_ANGLE = 0x83F2;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_NV = 0x8C4F;
pub const GL_UNSIGNED_INT_SAMPLER_3D_EXT = 0x8DD3;
pub const GL_CONVOLUTION_HEIGHT_EXT = 0x8019;
pub const GL_SHADER_OBJECT_ARB = 0x8B48;
pub inline fn glRectiv(arg_7743: [*c]const GLint, arg_7744: [*c]const GLint) void {
    return epoxy_glRectiv.?(arg_7743, arg_7744);
}
pub inline fn glTransformFeedbackAttribsNV(arg_7745: GLsizei, arg_7746: [*c]const GLint, arg_7747: GLenum) void {
    return epoxy_glTransformFeedbackAttribsNV.?(arg_7745, arg_7746, arg_7747);
}
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS_OES = 0x90CC;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6x5_OES = 0x93E8;
pub const GL_MAX_GEOMETRY_SHADER_STORAGE_BLOCKS_OES = 0x90D7;
pub const GL_REG_3_ATI = 0x8924;
pub const GL_OES_fixed_point = 1;
pub const GL_MODELVIEW2_ARB = 0x8722;
pub const GL_UNSIGNED_INT_24_8_MESA = 0x8751;
pub const GL_OES_vertex_type_10_10_10_2 = 1;
pub inline fn glVertexAttribI4usvEXT(arg_7748: GLuint, arg_7749: [*c]const GLushort) void {
    return epoxy_glVertexAttribI4usvEXT.?(arg_7748, arg_7749);
}
pub inline fn glGenSemaphoresEXT(arg_7750: GLsizei, arg_7751: [*c]GLuint) void {
    return epoxy_glGenSemaphoresEXT.?(arg_7750, arg_7751);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5x5_OES = 0x93E7;
pub const GL_VIDEO_BUFFER_INTERNAL_FORMAT_NV = 0x902D;
pub inline fn glMemoryBarrierByRegion(arg_7752: GLbitfield) void {
    return epoxy_glMemoryBarrierByRegion.?(arg_7752);
}
pub inline fn glDrawElementsInstancedBaseVertex(arg_7753: GLenum, arg_7754: GLsizei, arg_7755: GLenum, arg_7756: ?*const c_void, arg_7757: GLsizei, arg_7758: GLint) void {
    return epoxy_glDrawElementsInstancedBaseVertex.?(arg_7753, arg_7754, arg_7755, arg_7756, arg_7757, arg_7758);
}
pub const GL_NV_shader_atomic_counters = 1;
pub const GL_UNSIGNED_INT_SAMPLER_1D_ARRAY = 0x8DD6;
pub inline fn glCullParameterdvEXT(arg_7759: GLenum, arg_7760: [*c]GLdouble) void {
    return epoxy_glCullParameterdvEXT.?(arg_7759, arg_7760);
}
pub inline fn glRects(arg_7761: GLshort, arg_7762: GLshort, arg_7763: GLshort, arg_7764: GLshort) void {
    return epoxy_glRects.?(arg_7761, arg_7762, arg_7763, arg_7764);
}
pub inline fn glGetnMapfvARB(arg_7765: GLenum, arg_7766: GLenum, arg_7767: GLsizei, arg_7768: [*c]GLfloat) void {
    return epoxy_glGetnMapfvARB.?(arg_7765, arg_7766, arg_7767, arg_7768);
}
pub const GL_MAX_TRANSFORM_FEEDBACK_INTERLEAVED_COMPONENTS_EXT = 0x8C8A;
pub const GL_COLOR_TABLE_GREEN_SIZE_SGI = 0x80DB;
pub const GL_MAX_RENDERBUFFER_SIZE_EXT = 0x84E8;
pub inline fn glVideoCaptureNV(arg_7769: GLuint, arg_7770: [*c]GLuint, arg_7771: [*c]GLuint64EXT) GLenum {
    return epoxy_glVideoCaptureNV.?(arg_7769, arg_7770, arg_7771);
}
pub const GL_SGI_color_matrix = 1;
pub const __STDC_IEC_559__ = 1;
pub const GL_EXT_separate_shader_objects = 1;
pub const GL_POST_COLOR_MATRIX_BLUE_SCALE_SGI = 0x80B6;
pub const GL_INVALID_FRAMEBUFFER_OPERATION_OES = 0x0506;
pub const GL_ASYNC_MARKER_SGIX = 0x8329;
pub const GL_WARPS_PER_SM_NV = 0x933A;
pub inline fn glTexStorageMem3DEXT(arg_7772: GLenum, arg_7773: GLsizei, arg_7774: GLenum, arg_7775: GLsizei, arg_7776: GLsizei, arg_7777: GLsizei, arg_7778: GLuint, arg_7779: GLuint64) void {
    return epoxy_glTexStorageMem3DEXT.?(arg_7772, arg_7773, arg_7774, arg_7775, arg_7776, arg_7777, arg_7778, arg_7779);
}
pub const GL_MAX_COLOR_ATTACHMENTS = 0x8CDF;
pub const GL_OES_blend_subtract = 1;
pub const GL_COMPRESSED_RGBA_ASTC_10x6_KHR = 0x93B9;
pub const GL_MAP_FLUSH_EXPLICIT_BIT_EXT = 0x0010;
pub inline fn glFragmentMaterialfvSGIX(arg_7780: GLenum, arg_7781: GLenum, arg_7782: [*c]const GLfloat) void {
    return epoxy_glFragmentMaterialfvSGIX.?(arg_7780, arg_7781, arg_7782);
}
pub inline fn glVertexAttribL1i64vNV(arg_7783: GLuint, arg_7784: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL1i64vNV.?(arg_7783, arg_7784);
}
pub inline fn glTextureViewOES(arg_7785: GLuint, arg_7786: GLenum, arg_7787: GLuint, arg_7788: GLenum, arg_7789: GLuint, arg_7790: GLuint, arg_7791: GLuint, arg_7792: GLuint) void {
    return epoxy_glTextureViewOES.?(arg_7785, arg_7786, arg_7787, arg_7788, arg_7789, arg_7790, arg_7791, arg_7792);
}
pub const GL_FJ_shader_binary_GCCSO = 1;
pub const __UINT_FAST32_FMTX__ = "X";
pub inline fn glTexBufferRangeEXT(arg_7793: GLenum, arg_7794: GLenum, arg_7795: GLuint, arg_7796: GLintptr, arg_7797: GLsizeiptr) void {
    return epoxy_glTexBufferRangeEXT.?(arg_7793, arg_7794, arg_7795, arg_7796, arg_7797);
}
pub inline fn glMultiTexCoord4d(arg_7798: GLenum, arg_7799: GLdouble, arg_7800: GLdouble, arg_7801: GLdouble, arg_7802: GLdouble) void {
    return epoxy_glMultiTexCoord4d.?(arg_7798, arg_7799, arg_7800, arg_7801, arg_7802);
}
pub inline fn glTexBuffer(arg_7803: GLenum, arg_7804: GLenum, arg_7805: GLuint) void {
    return epoxy_glTexBuffer.?(arg_7803, arg_7804, arg_7805);
}
pub const GL_IMAGE_CLASS_4_X_32 = 0x82B9;
pub inline fn glGetTrackMatrixivNV(arg_7806: GLenum, arg_7807: GLuint, arg_7808: GLenum, arg_7809: [*c]GLint) void {
    return epoxy_glGetTrackMatrixivNV.?(arg_7806, arg_7807, arg_7808, arg_7809);
}
pub inline fn glReadnPixelsEXT(arg_7810: GLint, arg_7811: GLint, arg_7812: GLsizei, arg_7813: GLsizei, arg_7814: GLenum, arg_7815: GLenum, arg_7816: GLsizei, arg_7817: ?*c_void) void {
    return epoxy_glReadnPixelsEXT.?(arg_7810, arg_7811, arg_7812, arg_7813, arg_7814, arg_7815, arg_7816, arg_7817);
}
pub const GL_CONTRAST_NV = 0x92A1;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CA;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_INDEX = 0x934B;
pub const GL_POINT_SIZE_MIN_SGIS = 0x8126;
pub inline fn glTexStorage2DMultisample(arg_7818: GLenum, arg_7819: GLsizei, arg_7820: GLenum, arg_7821: GLsizei, arg_7822: GLsizei, arg_7823: GLboolean) void {
    return epoxy_glTexStorage2DMultisample.?(arg_7818, arg_7819, arg_7820, arg_7821, arg_7822, arg_7823);
}
pub const GL_VERTEX_PROGRAM_POINT_SIZE = 0x8642;
pub const GL_VERTEX_ARRAY_STRIDE_EXT = 0x807C;
pub const GL_OUTPUT_TEXTURE_COORD29_EXT = 0x87BA;
pub inline fn glVertexAttrib3dv(arg_7824: GLuint, arg_7825: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib3dv.?(arg_7824, arg_7825);
}
pub const GL_CONSTANT_ALPHA = 0x8003;
pub const GL_RGBA_INTEGER_EXT = 0x8D99;
pub const GL_RGBA2_EXT = 0x8055;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE_AND_DOWNSAMPLE_IMG = 0x913C;
pub const PRIoMAX = __PRI64_PREFIX ++ "o";
pub const GL_COVERAGE_BUFFER_BIT_NV = 0x00008000;
pub const GL_MAX_WINDOW_RECTANGLES_EXT = 0x8F14;
pub const GL_COLOR_ATTACHMENT1 = 0x8CE1;
pub const GL_ANGLE_translated_shader_source = 1;
pub inline fn glClearColor(arg_7826: GLfloat, arg_7827: GLfloat, arg_7828: GLfloat, arg_7829: GLfloat) void {
    return epoxy_glClearColor.?(arg_7826, arg_7827, arg_7828, arg_7829);
}
pub const GL_SGIX_instruments = 1;
pub const GL_PATH_TERMINAL_END_CAP_NV = 0x9078;
pub inline fn glDebugMessageControlKHR(arg_7830: GLenum, arg_7831: GLenum, arg_7832: GLenum, arg_7833: GLsizei, arg_7834: [*c]const GLuint, arg_7835: GLboolean) void {
    return epoxy_glDebugMessageControlKHR.?(arg_7830, arg_7831, arg_7832, arg_7833, arg_7834, arg_7835);
}
pub const GL_TRANSFORM_FEEDBACK_RECORD_NV = 0x8C86;
pub const GL_COMPRESSED_SLUMINANCE_EXT = 0x8C4A;
pub inline fn glFramebufferRenderbufferEXT(arg_7836: GLenum, arg_7837: GLenum, arg_7838: GLenum, arg_7839: GLuint) void {
    return epoxy_glFramebufferRenderbufferEXT.?(arg_7836, arg_7837, arg_7838, arg_7839);
}
pub const GL_COPY_READ_BUFFER_BINDING = 0x8F36;
pub inline fn glMapParameterivNV(arg_7840: GLenum, arg_7841: GLenum, arg_7842: [*c]const GLint) void {
    return epoxy_glMapParameterivNV.?(arg_7840, arg_7841, arg_7842);
}
pub const __SCHAR_MAX__ = 127;
pub const GL_MAX_GEOMETRY_VARYING_COMPONENTS_ARB = 0x8DDD;
pub const GL_R32UI = 0x8236;
pub const GL_ARB_texture_mirrored_repeat = 1;
pub const GL_TEXTURE_WRAP_R = 0x8072;
pub inline fn glGetShaderSource(arg_7843: GLuint, arg_7844: GLsizei, arg_7845: [*c]GLsizei, arg_7846: [*c]GLchar) void {
    return epoxy_glGetShaderSource.?(arg_7843, arg_7844, arg_7845, arg_7846);
}
pub inline fn glVertex3bOES(arg_7847: GLbyte, arg_7848: GLbyte, arg_7849: GLbyte) void {
    return epoxy_glVertex3bOES.?(arg_7847, arg_7848, arg_7849);
}
pub inline fn glMultiTexCoord2xvOES(arg_7850: GLenum, arg_7851: [*c]const GLfixed) void {
    return epoxy_glMultiTexCoord2xvOES.?(arg_7850, arg_7851);
}
pub const __GLIBC__ = 2;
pub const GL_INT_IMAGE_BUFFER_OES = 0x905C;
pub inline fn glUniform4ui64vARB(arg_7852: GLint, arg_7853: GLsizei, arg_7854: [*c]const GLuint64) void {
    return epoxy_glUniform4ui64vARB.?(arg_7852, arg_7853, arg_7854);
}
pub const GL_BLEND_EQUATION_ALPHA_OES = 0x883D;
pub const GL_TEXTURE_4D_SGIS = 0x8134;
pub const GL_PGI_vertex_hints = 1;
pub inline fn glCreateMemoryObjectsEXT(arg_7855: GLsizei, arg_7856: [*c]GLuint) void {
    return epoxy_glCreateMemoryObjectsEXT.?(arg_7855, arg_7856);
}
pub const GL_UNSIGNED_SHORT_5_6_5_REV_EXT = 0x8364;
pub const GL_EDGE_FLAG_ARRAY_BUFFER_BINDING_ARB = 0x889B;
pub const __FLT_MIN_10_EXP__ = -37;
pub inline fn glGetMinmaxParameterivEXT(arg_7857: GLenum, arg_7858: GLenum, arg_7859: [*c]GLint) void {
    return epoxy_glGetMinmaxParameterivEXT.?(arg_7857, arg_7858, arg_7859);
}
pub inline fn glPrimitiveBoundingBoxEXT(arg_7860: GLfloat, arg_7861: GLfloat, arg_7862: GLfloat, arg_7863: GLfloat, arg_7864: GLfloat, arg_7865: GLfloat, arg_7866: GLfloat, arg_7867: GLfloat) void {
    return epoxy_glPrimitiveBoundingBoxEXT.?(arg_7860, arg_7861, arg_7862, arg_7863, arg_7864, arg_7865, arg_7866, arg_7867);
}
pub inline fn glMatrixIndexusvARB(arg_7868: GLint, arg_7869: [*c]const GLushort) void {
    return epoxy_glMatrixIndexusvARB.?(arg_7868, arg_7869);
}
pub inline fn glMultiTexParameterfvEXT(arg_7870: GLenum, arg_7871: GLenum, arg_7872: GLenum, arg_7873: [*c]const GLfloat) void {
    return epoxy_glMultiTexParameterfvEXT.?(arg_7870, arg_7871, arg_7872, arg_7873);
}
pub const GL_PRIMITIVE_RESTART_INDEX = 0x8F9E;
pub inline fn glVertexAttribs4hvNV(arg_7874: GLuint, arg_7875: GLsizei, arg_7876: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttribs4hvNV.?(arg_7874, arg_7875, arg_7876);
}
pub inline fn glActiveProgramEXT(arg_7877: GLuint) void {
    return epoxy_glActiveProgramEXT.?(arg_7877);
}
pub const GL_SAMPLER_2D_MULTISAMPLE_ARRAY = 0x910B;
pub const GL_CLIP_PLANE2_IMG = 0x3002;
pub const GL_PERFQUERY_COUNTER_RAW_INTEL = 0x94F4;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_COMPONENTS_ARB = 0x8F9F;
pub const GL_MAP1_VERTEX_3 = 0x0D97;
pub const GL_BLEND_COLOR_EXT = 0x8005;
pub const GL_LUMINANCE16F_ARB = 0x881E;
pub const GL_RG32F_EXT = 0x8230;
pub inline fn glWeightsvARB(arg_7878: GLint, arg_7879: [*c]const GLshort) void {
    return epoxy_glWeightsvARB.?(arg_7878, arg_7879);
}
pub const GL_SUBGROUP_FEATURE_SHUFFLE_BIT_KHR = 0x00000010;
pub const GL_BUFFER_SIZE_ARB = 0x8764;
pub const GL_SGI_color_table = 1;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z = 0x851A;
pub inline fn glGetNamedFramebufferAttachmentParameterivEXT(arg_7880: GLuint, arg_7881: GLenum, arg_7882: GLenum, arg_7883: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferAttachmentParameterivEXT.?(arg_7880, arg_7881, arg_7882, arg_7883);
}
pub const GL_MAX_PROGRAM_NATIVE_TEX_INSTRUCTIONS_ARB = 0x880F;
pub const GL_GEOMETRY_LINKED_OUTPUT_TYPE_OES = 0x8918;
pub const GL_PIXEL_PACK_BUFFER = 0x88EB;
pub inline fn glDrawBuffersIndexedEXT(arg_7884: GLint, arg_7885: [*c]const GLenum, arg_7886: [*c]const GLint) void {
    return epoxy_glDrawBuffersIndexedEXT.?(arg_7884, arg_7885, arg_7886);
}
pub const GL_MIRRORED_REPEAT_OES = 0x8370;
pub const GL_COMPRESSED_RGBA_ASTC_6x6 = 0x93B4;
pub inline fn glPathGlyphIndexRangeNV(arg_7887: GLenum, arg_7888: ?*const c_void, arg_7889: GLbitfield, arg_7890: GLuint, arg_7891: GLfloat, arg_7892: GLuint) GLenum {
    return epoxy_glPathGlyphIndexRangeNV.?(arg_7887, arg_7888, arg_7889, arg_7890, arg_7891, arg_7892);
}
pub inline fn glDepthRangeArrayv(arg_7893: GLuint, arg_7894: GLsizei, arg_7895: [*c]const GLdouble) void {
    return epoxy_glDepthRangeArrayv.?(arg_7893, arg_7894, arg_7895);
}
pub const _DEBUG = 1;
pub inline fn glBindImageTexture(arg_7896: GLuint, arg_7897: GLuint, arg_7898: GLint, arg_7899: GLboolean, arg_7900: GLint, arg_7901: GLenum, arg_7902: GLenum) void {
    return epoxy_glBindImageTexture.?(arg_7896, arg_7897, arg_7898, arg_7899, arg_7900, arg_7901, arg_7902);
}
pub inline fn __PMT(args: var) @TypeOf(args) {
    return args;
}
pub inline fn glTexCoord1bvOES(arg_7903: [*c]const GLbyte) void {
    return epoxy_glTexCoord1bvOES.?(arg_7903);
}
pub const GL_SECONDARY_COLOR_ARRAY_POINTER = 0x845D;
pub const GL_NV_shader_subgroup_partitioned = 1;
pub inline fn glMapGrid2d(arg_7904: GLint, arg_7905: GLdouble, arg_7906: GLdouble, arg_7907: GLint, arg_7908: GLdouble, arg_7909: GLdouble) void {
    return epoxy_glMapGrid2d.?(arg_7904, arg_7905, arg_7906, arg_7907, arg_7908, arg_7909);
}
pub const GL_PGI_misc_hints = 1;
pub const GL_MULTISAMPLE_BIT = 0x20000000;
pub const GL_MAX_DUAL_SOURCE_DRAW_BUFFERS = 0x88FC;
pub const GL_COMPLETION_STATUS_ARB = 0x91B1;
pub const GL_FRAMEBUFFER_SRGB_CAPABLE_EXT = 0x8DBA;
pub inline fn glTexCoord2xvOES(arg_7910: [*c]const GLfixed) void {
    return epoxy_glTexCoord2xvOES.?(arg_7910);
}
pub const PRIuFAST32 = __PRIPTR_PREFIX ++ "u";
pub inline fn glUniformMatrix4x2dv(arg_7911: GLint, arg_7912: GLsizei, arg_7913: GLboolean, arg_7914: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix4x2dv.?(arg_7911, arg_7912, arg_7913, arg_7914);
}
pub inline fn glVertexAttrib4usv(arg_7915: GLuint, arg_7916: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4usv.?(arg_7915, arg_7916);
}
pub inline fn glPrimitiveRestartIndex(arg_7917: GLuint) void {
    return epoxy_glPrimitiveRestartIndex.?(arg_7917);
}
pub inline fn glUniform3iARB(arg_7918: GLint, arg_7919: GLint, arg_7920: GLint, arg_7921: GLint) void {
    return epoxy_glUniform3iARB.?(arg_7918, arg_7919, arg_7920, arg_7921);
}
pub const __INT64_FMTd__ = "ld";
pub inline fn glDrawTexsvOES(arg_7922: [*c]const GLshort) void {
    return epoxy_glDrawTexsvOES.?(arg_7922);
}
pub inline fn glNamedFramebufferRenderbuffer(arg_7923: GLuint, arg_7924: GLenum, arg_7925: GLenum, arg_7926: GLuint) void {
    return epoxy_glNamedFramebufferRenderbuffer.?(arg_7923, arg_7924, arg_7925, arg_7926);
}
pub const GL_SPARSE_TEXTURE_FULL_ARRAY_CUBE_MIPMAPS_EXT = 0x91A9;
pub const GL_DRAW_BUFFER13_NV = 0x8832;
pub const GL_NONE_OES = 0;
pub inline fn glNamedFramebufferDrawBuffers(arg_7927: GLuint, arg_7928: GLsizei, arg_7929: [*c]const GLenum) void {
    return epoxy_glNamedFramebufferDrawBuffers.?(arg_7927, arg_7928, arg_7929);
}
pub const GL_MAX_CONVOLUTION_WIDTH_EXT = 0x801A;
pub inline fn glUniform3fvARB(arg_7930: GLint, arg_7931: GLsizei, arg_7932: [*c]const GLfloat) void {
    return epoxy_glUniform3fvARB.?(arg_7930, arg_7931, arg_7932);
}
pub inline fn glStencilOpSeparateATI(arg_7933: GLenum, arg_7934: GLenum, arg_7935: GLenum, arg_7936: GLenum) void {
    return epoxy_glStencilOpSeparateATI.?(arg_7933, arg_7934, arg_7935, arg_7936);
}
pub const GL_APPLE_ycbcr_422 = 1;
pub inline fn glIsQueryARB(arg_7937: GLuint) GLboolean {
    return epoxy_glIsQueryARB.?(arg_7937);
}
pub inline fn glGetDebugMessageLog(arg_7938: GLuint, arg_7939: GLsizei, arg_7940: [*c]GLenum, arg_7941: [*c]GLenum, arg_7942: [*c]GLuint, arg_7943: [*c]GLenum, arg_7944: [*c]GLsizei, arg_7945: [*c]GLchar) GLuint {
    return epoxy_glGetDebugMessageLog.?(arg_7938, arg_7939, arg_7940, arg_7941, arg_7942, arg_7943, arg_7944, arg_7945);
}
pub inline fn glProgramUniformMatrix3dv(arg_7946: GLuint, arg_7947: GLint, arg_7948: GLsizei, arg_7949: GLboolean, arg_7950: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3dv.?(arg_7946, arg_7947, arg_7948, arg_7949, arg_7950);
}
pub const GL_PATH_STROKE_BOUNDING_BOX_NV = 0x90A2;
pub inline fn glNormalPointerListIBM(arg_7951: GLenum, arg_7952: GLint, arg_7953: [*c]?*const c_void, arg_7954: GLint) void {
    return epoxy_glNormalPointerListIBM.?(arg_7951, arg_7952, arg_7953, arg_7954);
}
pub inline fn glUniform3uiv(arg_7955: GLint, arg_7956: GLsizei, arg_7957: [*c]const GLuint) void {
    return epoxy_glUniform3uiv.?(arg_7955, arg_7956, arg_7957);
}
pub const GL_COLOR_MATERIAL_FACE = 0x0B55;
pub const GL_INVALID_OPERATION = 0x0502;
pub const GL_FRAGMENT_COVERAGE_COLOR_NV = 0x92DE;
pub inline fn glProgramUniform2ui64vNV(arg_7958: GLuint, arg_7959: GLint, arg_7960: GLsizei, arg_7961: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform2ui64vNV.?(arg_7958, arg_7959, arg_7960, arg_7961);
}
pub const GL_COLOR_BUFFER_BIT5_QCOM = 0x00000020;
pub const GL_TEXTURE_BUFFER_OFFSET_ALIGNMENT = 0x919F;
pub inline fn glBlendEquationSeparateEXT(arg_7962: GLenum, arg_7963: GLenum) void {
    return epoxy_glBlendEquationSeparateEXT.?(arg_7962, arg_7963);
}
pub const GL_LIGHT3 = 0x4003;
pub const __attribute_deprecated__ = __attribute__(__deprecated__);
pub const GL_SQUARE_NV = 0x90A3;
pub const GL_ALL_BARRIER_BITS_EXT = 0xFFFFFFFF;
pub const GL_PIXEL_BUFFER_BARRIER_BIT = 0x00000080;
pub inline fn glEvalMesh2(arg_7964: GLenum, arg_7965: GLint, arg_7966: GLint, arg_7967: GLint, arg_7968: GLint) void {
    return epoxy_glEvalMesh2.?(arg_7964, arg_7965, arg_7966, arg_7967, arg_7968);
}
pub const __CLANG_ATOMIC_LONG_LOCK_FREE = 2;
pub inline fn glInstrumentsBufferSGIX(arg_7969: GLsizei, arg_7970: [*c]GLint) void {
    return epoxy_glInstrumentsBufferSGIX.?(arg_7969, arg_7970);
}
pub const GL_NV_shader_atomic_float64 = 1;
pub inline fn glDrawElementsInstancedNV(arg_7971: GLenum, arg_7972: GLsizei, arg_7973: GLenum, arg_7974: ?*const c_void, arg_7975: GLsizei) void {
    return epoxy_glDrawElementsInstancedNV.?(arg_7971, arg_7972, arg_7973, arg_7974, arg_7975);
}
pub inline fn glTexCoord4hNV(arg_7976: GLhalfNV, arg_7977: GLhalfNV, arg_7978: GLhalfNV, arg_7979: GLhalfNV) void {
    return epoxy_glTexCoord4hNV.?(arg_7976, arg_7977, arg_7978, arg_7979);
}
pub inline fn glEndPerfMonitorAMD(arg_7980: GLuint) void {
    return epoxy_glEndPerfMonitorAMD.?(arg_7980);
}
pub const GL_MATRIX1_ARB = 0x88C1;
pub const GL_CURRENT_RASTER_POSITION_VALID = 0x0B08;
pub const GL_TRANSFORM_FEEDBACK_VARYING = 0x92F4;
pub inline fn glPathDashArrayNV(arg_7981: GLuint, arg_7982: GLsizei, arg_7983: [*c]const GLfloat) void {
    return epoxy_glPathDashArrayNV.?(arg_7981, arg_7982, arg_7983);
}
pub inline fn glPointParameterxv(arg_7984: GLenum, arg_7985: [*c]const GLfixed) void {
    return epoxy_glPointParameterxv.?(arg_7984, arg_7985);
}
pub const GL_PROVOKING_VERTEX = 0x8E4F;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X2_PIXELS_NV = 0x9568;
pub const GL_IMAGE_CUBIC_WEIGHT_HP = 0x815E;
pub inline fn glGetMultiTexGenfvEXT(arg_7986: GLenum, arg_7987: GLenum, arg_7988: GLenum, arg_7989: [*c]GLfloat) void {
    return epoxy_glGetMultiTexGenfvEXT.?(arg_7986, arg_7987, arg_7988, arg_7989);
}
pub const GL_ARB_clip_control = 1;
pub inline fn glFrameTerminatorGREMEDY() void {
    return epoxy_glFrameTerminatorGREMEDY.?();
}
pub const __OPTIMIZE__ = 1;
pub const GL_TEXTURE_RECTANGLE_NV = 0x84F5;
pub const GL_NV_scissor_exclusive = 1;
pub const GL_REFLECTION_MAP_NV = 0x8512;
pub const GL_ONE_MINUS_SRC_COLOR = 0x0301;
pub const GL_TEXTURE_2D_STACK_BINDING_MESAX = 0x875E;
pub inline fn glVertexStream1dATI(arg_7990: GLenum, arg_7991: GLdouble) void {
    return epoxy_glVertexStream1dATI.?(arg_7990, arg_7991);
}
pub const GL_INT_IMAGE_2D_RECT = 0x905A;
pub const GL_COMPRESSED_SIGNED_RG11_EAC_OES = 0x9273;
pub const GL_TEXTURE17_ARB = 0x84D1;
pub const GL_VERTEX_ATTRIB_ARRAY14_NV = 0x865E;
pub const PRIXLEAST16 = "X";
pub const GL_RENDERBUFFER_SAMPLES_IMG = 0x9133;
pub inline fn glGetRenderbufferParameterivOES(arg_7992: GLenum, arg_7993: GLenum, arg_7994: [*c]GLint) void {
    return epoxy_glGetRenderbufferParameterivOES.?(arg_7992, arg_7993, arg_7994);
}
pub const GL_MOVE_TO_CONTINUES_NV = 0x90B6;
pub const GL_NVX_cross_process_interop = 1;
pub const GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV1_EXT = 0x8A56;
pub const GL_UNSIGNED_INT_2_10_10_10_REV = 0x8368;
pub inline fn glMultiModeDrawElementsIBM(arg_7995: [*c]const GLenum, arg_7996: [*c]const GLsizei, arg_7997: GLenum, arg_7998: [*c]const ?*const c_void, arg_7999: GLsizei, arg_8000: GLint) void {
    return epoxy_glMultiModeDrawElementsIBM.?(arg_7995, arg_7996, arg_7997, arg_7998, arg_7999, arg_8000);
}
pub const GL_CONVOLUTION_HINT_SGIX = 0x8316;
pub const GL_COMPUTE_PROGRAM_PARAMETER_BUFFER_NV = 0x90FC;
pub inline fn glGetQueryObjectuivEXT(arg_8001: GLuint, arg_8002: GLenum, arg_8003: [*c]GLuint) void {
    return epoxy_glGetQueryObjectuivEXT.?(arg_8001, arg_8002, arg_8003);
}
pub const GL_TABLE_TOO_LARGE_EXT = 0x8031;
pub const GL_MAX_PROGRAM_ADDRESS_REGISTERS_ARB = 0x88B1;
pub const GL_NUM_EXTENSIONS = 0x821D;
pub inline fn glImportSyncEXT(arg_8004: GLenum, arg_8005: GLintptr, arg_8006: GLbitfield) GLsync {
    return epoxy_glImportSyncEXT.?(arg_8004, arg_8005, arg_8006);
}
pub const GL_SIGNED_ALPHA_NV = 0x8705;
pub inline fn glGetTextureLevelParameterfv(arg_8007: GLuint, arg_8008: GLint, arg_8009: GLenum, arg_8010: [*c]GLfloat) void {
    return epoxy_glGetTextureLevelParameterfv.?(arg_8007, arg_8008, arg_8009, arg_8010);
}
pub const GL_MAX_LIST_NESTING = 0x0B31;
pub inline fn glStencilFuncSeparateATI(arg_8011: GLenum, arg_8012: GLenum, arg_8013: GLint, arg_8014: GLuint) void {
    return epoxy_glStencilFuncSeparateATI.?(arg_8011, arg_8012, arg_8013, arg_8014);
}
pub const GL_QCOM_texture_foveated_subsampled_layout = 1;
pub const GL_OES_sample_variables = 1;
pub const GL_HALF_FLOAT_NV = 0x140B;
pub const GL_IMAGE_BINDING_ACCESS = 0x8F3E;
pub const GL_HARDMIX_NV = 0x92A9;
pub const GL_ARB_sparse_texture = 1;
pub const __INT_LEAST64_FMTi__ = "li";
pub const GL_RGB16I = 0x8D89;
pub const GL_PATH_GEN_COEFF_NV = 0x90B1;
pub const GL_COLOR_ARRAY_SIZE = 0x8081;
pub const GL_SPOT_EXPONENT = 0x1205;
pub inline fn glTextureFoveationParametersQCOM(arg_8015: GLuint, arg_8016: GLuint, arg_8017: GLuint, arg_8018: GLfloat, arg_8019: GLfloat, arg_8020: GLfloat, arg_8021: GLfloat, arg_8022: GLfloat) void {
    return epoxy_glTextureFoveationParametersQCOM.?(arg_8015, arg_8016, arg_8017, arg_8018, arg_8019, arg_8020, arg_8021, arg_8022);
}
pub inline fn glIsTransformFeedbackNV(arg_8023: GLuint) GLboolean {
    return epoxy_glIsTransformFeedbackNV.?(arg_8023);
}
pub inline fn glProgramUniform3d(arg_8024: GLuint, arg_8025: GLint, arg_8026: GLdouble, arg_8027: GLdouble, arg_8028: GLdouble) void {
    return epoxy_glProgramUniform3d.?(arg_8024, arg_8025, arg_8026, arg_8027, arg_8028);
}
pub const SCNiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const __GLIBC_USE_DEPRECATED_GETS = 0;
pub const GL_TEXTURE_SWIZZLE_A = 0x8E45;
pub const GL_MAX_MESH_WORK_GROUP_SIZE_NV = 0x953B;
pub inline fn glNormalStream3bvATI(arg_8029: GLenum, arg_8030: [*c]const GLbyte) void {
    return epoxy_glNormalStream3bvATI.?(arg_8029, arg_8030);
}
pub inline fn glUniformMatrix3dv(arg_8031: GLint, arg_8032: GLsizei, arg_8033: GLboolean, arg_8034: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix3dv.?(arg_8031, arg_8032, arg_8033, arg_8034);
}
pub const GL_ANDROID_extension_pack_es31a = 1;
pub inline fn glUniform3i64ARB(arg_8035: GLint, arg_8036: GLint64, arg_8037: GLint64, arg_8038: GLint64) void {
    return epoxy_glUniform3i64ARB.?(arg_8035, arg_8036, arg_8037, arg_8038);
}
pub const GL_ARB_texture_rectangle = 1;
pub const GL_SIMULTANEOUS_TEXTURE_AND_DEPTH_WRITE = 0x82AE;
pub inline fn glBlendColorEXT(arg_8039: GLfloat, arg_8040: GLfloat, arg_8041: GLfloat, arg_8042: GLfloat) void {
    return epoxy_glBlendColorEXT.?(arg_8039, arg_8040, arg_8041, arg_8042);
}
pub const GL_PERFQUERY_COUNTER_DESC_LENGTH_MAX_INTEL = 0x94FF;
pub const GL_INT16_VEC4_NV = 0x8FE7;
pub const GL_EXT_shader_pixel_local_storage2 = 1;
pub const GL_FRAMEBUFFER_ATTACHMENT_COMPONENT_TYPE = 0x8211;
pub inline fn glEnableIndexedEXT(arg_8043: GLenum, arg_8044: GLuint) void {
    return epoxy_glEnableIndexedEXT.?(arg_8043, arg_8044);
}
pub const GL_MAX_VARYING_VECTORS = 0x8DFC;
pub inline fn glGetnUniformivEXT(arg_8045: GLuint, arg_8046: GLint, arg_8047: GLsizei, arg_8048: [*c]GLint) void {
    return epoxy_glGetnUniformivEXT.?(arg_8045, arg_8046, arg_8047, arg_8048);
}
pub inline fn glVertexStream4sATI(arg_8049: GLenum, arg_8050: GLshort, arg_8051: GLshort, arg_8052: GLshort, arg_8053: GLshort) void {
    return epoxy_glVertexStream4sATI.?(arg_8049, arg_8050, arg_8051, arg_8052, arg_8053);
}
pub const __GCC_ATOMIC_TEST_AND_SET_TRUEVAL = 1;
pub const __USE_ISOC95 = 1;
pub const GL_INDEX_ARRAY_LENGTH_NV = 0x8F2E;
pub const __linux = 1;
pub const GL_VERTICAL_LINE_TO_NV = 0x08;
pub const GL_GEOMETRY_SHADER_EXT = 0x8DD9;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Z_ARB = 0x851A;
pub const GL_TEXTURE_GEN_R = 0x0C62;
pub const GL_COLOR_ATTACHMENT12_NV = 0x8CEC;
pub const GL_TESS_CONTROL_SHADER_BIT = 0x00000008;
pub const GL_CURRENT_RASTER_POSITION = 0x0B07;
pub const GL_MAX_SAMPLE_MASK_WORDS_NV = 0x8E59;
pub const GL_VERTEX_ARRAY_BINDING = 0x85B5;
pub const GL_VERTEX_SHADER_INVARIANTS_EXT = 0x87D1;
pub const GL_CULL_VERTEX_OBJECT_POSITION_EXT = 0x81AC;
pub inline fn glClipPlanexIMG(arg_8054: GLenum, arg_8055: [*c]const GLfixed) void {
    return epoxy_glClipPlanexIMG.?(arg_8054, arg_8055);
}
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_OES = 0x8E85;
pub inline fn glTexCoord1hvNV(arg_8056: [*c]const GLhalfNV) void {
    return epoxy_glTexCoord1hvNV.?(arg_8056);
}
pub inline fn glStencilFillPathInstancedNV(arg_8057: GLsizei, arg_8058: GLenum, arg_8059: ?*const c_void, arg_8060: GLuint, arg_8061: GLenum, arg_8062: GLuint, arg_8063: GLenum, arg_8064: [*c]const GLfloat) void {
    return epoxy_glStencilFillPathInstancedNV.?(arg_8057, arg_8058, arg_8059, arg_8060, arg_8061, arg_8062, arg_8063, arg_8064);
}
pub const GL_CLIP_DISTANCE4 = 0x3004;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1 = 0x8DBC;
pub inline fn glCreateQueries(arg_8065: GLenum, arg_8066: GLsizei, arg_8067: [*c]GLuint) void {
    return epoxy_glCreateQueries.?(arg_8065, arg_8066, arg_8067);
}
pub inline fn glEnableVertexArrayAttribEXT(arg_8068: GLuint, arg_8069: GLuint) void {
    return epoxy_glEnableVertexArrayAttribEXT.?(arg_8068, arg_8069);
}
pub const GL_AMD_blend_minmax_factor = 1;
pub inline fn glMultiTexCoord2fvARB(arg_8070: GLenum, arg_8071: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord2fvARB.?(arg_8070, arg_8071);
}
pub inline fn glProgramUniform3dvEXT(arg_8072: GLuint, arg_8073: GLint, arg_8074: GLsizei, arg_8075: [*c]const GLdouble) void {
    return epoxy_glProgramUniform3dvEXT.?(arg_8072, arg_8073, arg_8074, arg_8075);
}
pub const GL_RGB12 = 0x8053;
pub inline fn glTexParameterf(arg_8076: GLenum, arg_8077: GLenum, arg_8078: GLfloat) void {
    return epoxy_glTexParameterf.?(arg_8076, arg_8077, arg_8078);
}
pub const __CONSTANT_CFSTRINGS__ = 1;
pub inline fn glGetTexParameterIiv(arg_8079: GLenum, arg_8080: GLenum, arg_8081: [*c]GLint) void {
    return epoxy_glGetTexParameterIiv.?(arg_8079, arg_8080, arg_8081);
}
pub const __TIME64_T_TYPE = __TIME_T_TYPE;
pub inline fn glGetTextureSamplerHandleNV(arg_8082: GLuint, arg_8083: GLuint) GLuint64 {
    return epoxy_glGetTextureSamplerHandleNV.?(arg_8082, arg_8083);
}
pub inline fn glUniform4dv(arg_8084: GLint, arg_8085: GLsizei, arg_8086: [*c]const GLdouble) void {
    return epoxy_glUniform4dv.?(arg_8084, arg_8085, arg_8086);
}
pub const GL_ARB_multitexture = 1;
pub inline fn glUniform1i64NV(arg_8087: GLint, arg_8088: GLint64EXT) void {
    return epoxy_glUniform1i64NV.?(arg_8087, arg_8088);
}
pub inline fn glVertexAttrib4NivARB(arg_8089: GLuint, arg_8090: [*c]const GLint) void {
    return epoxy_glVertexAttrib4NivARB.?(arg_8089, arg_8090);
}
pub const GL_FONT_Y_MAX_BOUNDS_BIT_NV = 0x00080000;
pub const GL_BLEND_DST_RGB_EXT = 0x80C8;
pub const GL_MODELVIEW16_ARB = 0x8730;
pub const PRIu64 = __PRI64_PREFIX ++ "u";
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_ARB = 0x900D;
pub inline fn glVertexAttrib3fNV(arg_8091: GLuint, arg_8092: GLfloat, arg_8093: GLfloat, arg_8094: GLfloat) void {
    return epoxy_glVertexAttrib3fNV.?(arg_8091, arg_8092, arg_8093, arg_8094);
}
pub const GL_EDGE_FLAG_ARRAY_ADDRESS_NV = 0x8F26;
pub const GL_INTERNALFORMAT_DEPTH_TYPE = 0x827C;
pub inline fn glNamedProgramLocalParameter4dEXT(arg_8095: GLuint, arg_8096: GLenum, arg_8097: GLuint, arg_8098: GLdouble, arg_8099: GLdouble, arg_8100: GLdouble, arg_8101: GLdouble) void {
    return epoxy_glNamedProgramLocalParameter4dEXT.?(arg_8095, arg_8096, arg_8097, arg_8098, arg_8099, arg_8100, arg_8101);
}
pub inline fn glBlendFuncSeparatei(arg_8102: GLuint, arg_8103: GLenum, arg_8104: GLenum, arg_8105: GLenum, arg_8106: GLenum) void {
    return epoxy_glBlendFuncSeparatei.?(arg_8102, arg_8103, arg_8104, arg_8105, arg_8106);
}
pub inline fn glGetColorTableParameterfvEXT(arg_8107: GLenum, arg_8108: GLenum, arg_8109: [*c]GLfloat) void {
    return epoxy_glGetColorTableParameterfvEXT.?(arg_8107, arg_8108, arg_8109);
}
pub const GL_VERTEX_SHADER_OPTIMIZED_EXT = 0x87D4;
pub const GL_LUMINANCE_FLOAT16_APPLE = 0x881E;
pub const GL_FLOAT_RGBA_MODE_NV = 0x888E;
pub const GL_PATH_OBJECT_BOUNDING_BOX_NV = 0x908A;
pub const GL_READ_FRAMEBUFFER_APPLE = 0x8CA8;
pub const GL_LINE_NV = 0x1B01;
pub inline fn glReplacementCodeuivSUN(arg_8110: [*c]const GLuint) void {
    return epoxy_glReplacementCodeuivSUN.?(arg_8110);
}
pub const GL_TEXTURE_IMAGE_TYPE = 0x8290;
pub inline fn glTangent3bEXT(arg_8111: GLbyte, arg_8112: GLbyte, arg_8113: GLbyte) void {
    return epoxy_glTangent3bEXT.?(arg_8111, arg_8112, arg_8113);
}
pub const GL_NV_fragment_shader_barycentric = 1;
pub const GL_MATRIX17_ARB = 0x88D1;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS = 0x8803;
pub const GL_REFLECTION_MAP = 0x8512;
pub inline fn glGetnUniformuivKHR(arg_8114: GLuint, arg_8115: GLint, arg_8116: GLsizei, arg_8117: [*c]GLuint) void {
    return epoxy_glGetnUniformuivKHR.?(arg_8114, arg_8115, arg_8116, arg_8117);
}
pub const PTRDIFF_MAX = @as(c_long, 9223372036854775807);
pub const GL_IMG_texture_env_enhanced_fixed_function = 1;
pub inline fn glMultiTexCoordP4ui(arg_8118: GLenum, arg_8119: GLenum, arg_8120: GLuint) void {
    return epoxy_glMultiTexCoordP4ui.?(arg_8118, arg_8119, arg_8120);
}
pub inline fn glSpriteParameterfSGIX(arg_8121: GLenum, arg_8122: GLfloat) void {
    return epoxy_glSpriteParameterfSGIX.?(arg_8121, arg_8122);
}
pub const GL_SAMPLE_ALPHA_TO_ONE_EXT = 0x809F;
pub const GL_CONTINUOUS_AMD = 0x9007;
pub const GL_LUMINANCE_ALPHA32I_EXT = 0x8D87;
pub const GL_VERTEX_SHADER_INSTRUCTIONS_EXT = 0x87CF;
pub const GL_FLOAT_VEC2_ARB = 0x8B50;
pub inline fn glAreProgramsResidentNV(arg_8123: GLsizei, arg_8124: [*c]const GLuint, arg_8125: [*c]GLboolean) GLboolean {
    return epoxy_glAreProgramsResidentNV.?(arg_8123, arg_8124, arg_8125);
}
pub inline fn glProgramUniform3uivEXT(arg_8126: GLuint, arg_8127: GLint, arg_8128: GLsizei, arg_8129: [*c]const GLuint) void {
    return epoxy_glProgramUniform3uivEXT.?(arg_8126, arg_8127, arg_8128, arg_8129);
}
pub inline fn glNormal3f(arg_8130: GLfloat, arg_8131: GLfloat, arg_8132: GLfloat) void {
    return epoxy_glNormal3f.?(arg_8130, arg_8131, arg_8132);
}
pub const GL_COLOR_ATTACHMENT3 = 0x8CE3;
pub const GL_FIXED = 0x140C;
pub const GL_FRAGMENT_SUBROUTINE = 0x92EC;
pub const __F16C__ = 1;
pub const GL_MAX_ELEMENTS_VERTICES = 0x80E8;
pub const GL_MODELVIEW_STACK_DEPTH = 0x0BA3;
pub const GL_TEXTURE_COORD_ARRAY_COUNT_EXT = 0x808B;
pub const GL_CON_11_ATI = 0x894C;
pub const __SUSECONDS_T_TYPE = __SYSCALL_SLONG_TYPE;
pub const GL_STENCIL_BUFFER_BIT6_QCOM = 0x00400000;
pub const GL_EXT_tessellation_shader = 1;
pub const GL_ARB_tessellation_shader = 1;
pub const GL_COVERAGE_ATTACHMENT_NV = 0x8ED2;
pub const GL_EXT_texture_env_combine = 1;
pub const GL_MAX_PROGRAM_ALU_INSTRUCTIONS_ARB = 0x880B;
pub const GL_POST_CONVOLUTION_COLOR_TABLE_SGI = 0x80D1;
pub const GL_TEXTURE_BUFFER_OFFSET_EXT = 0x919D;
pub const GL_FONT_UNINTELLIGIBLE_NV = 0x936B;
pub const GL_AMD_gpu_shader_int16 = 1;
pub const GL_PROXY_TEXTURE_2D_ARRAY = 0x8C1B;
pub const GL_TESS_EVALUATION_SHADER_BIT_OES = 0x00000010;
pub inline fn glMultiTexCoordP3uiv(arg_8133: GLenum, arg_8134: GLenum, arg_8135: [*c]const GLuint) void {
    return epoxy_glMultiTexCoordP3uiv.?(arg_8133, arg_8134, arg_8135);
}
pub const GL_ATI_envmap_bumpmap = 1;
pub const GL_PIXEL_MAP_S_TO_S = 0x0C71;
pub const GL_FRAGMENT_COLOR_MATERIAL_FACE_SGIX = 0x8402;
pub const GL_DECAL = 0x2101;
pub const SCNxLEAST32 = "x";
pub inline fn glTexCoord4fv(arg_8136: [*c]const GLfloat) void {
    return epoxy_glTexCoord4fv.?(arg_8136);
}
pub const GL_ARB_ES2_compatibility = 1;
pub const GL_OFFSET_TEXTURE_2D_NV = 0x86E8;
pub const GL_DEPTH_STENCIL_OES = 0x84F9;
pub const GL_RENDERBUFFER_BLUE_SIZE = 0x8D52;
pub const GL_MEDIUM_INT = 0x8DF4;
pub const GL_TRACE_ALL_BITS_MESA = 0xFFFF;
pub const GL_POSITION = 0x1203;
pub inline fn glTangentPointerEXT(arg_8137: GLenum, arg_8138: GLsizei, arg_8139: ?*const c_void) void {
    return epoxy_glTangentPointerEXT.?(arg_8137, arg_8138, arg_8139);
}
pub const GL_CON_6_ATI = 0x8947;
pub const GL_BUFFER_MAP_LENGTH = 0x9120;
pub inline fn glGetShaderPrecisionFormat(arg_8140: GLenum, arg_8141: GLenum, arg_8142: [*c]GLint, arg_8143: [*c]GLint) void {
    return epoxy_glGetShaderPrecisionFormat.?(arg_8140, arg_8141, arg_8142, arg_8143);
}
pub inline fn glVertexAttrib2f(arg_8144: GLuint, arg_8145: GLfloat, arg_8146: GLfloat) void {
    return epoxy_glVertexAttrib2f.?(arg_8144, arg_8145, arg_8146);
}
pub const GL_BLEND_SRC_ALPHA = 0x80CB;
pub const GL_SAMPLER_2D_SHADOW = 0x8B62;
pub const GL_EXT_gpu_shader5 = 1;
pub const GL_SURFACE_STATE_NV = 0x86EB;
pub inline fn glTexParameterIiv(arg_8147: GLenum, arg_8148: GLenum, arg_8149: [*c]const GLint) void {
    return epoxy_glTexParameterIiv.?(arg_8147, arg_8148, arg_8149);
}
pub inline fn glExtGetBufferPointervQCOM(arg_8150: GLenum, arg_8151: [*c]?*c_void) void {
    return epoxy_glExtGetBufferPointervQCOM.?(arg_8150, arg_8151);
}
pub const GL_ANY_SAMPLES_PASSED_CONSERVATIVE_EXT = 0x8D6A;
pub inline fn glGetTextureParameterIuivEXT(arg_8152: GLuint, arg_8153: GLenum, arg_8154: GLenum, arg_8155: [*c]GLuint) void {
    return epoxy_glGetTextureParameterIuivEXT.?(arg_8152, arg_8153, arg_8154, arg_8155);
}
pub inline fn glTexImage3D(arg_8156: GLenum, arg_8157: GLint, arg_8158: GLint, arg_8159: GLsizei, arg_8160: GLsizei, arg_8161: GLsizei, arg_8162: GLint, arg_8163: GLenum, arg_8164: GLenum, arg_8165: ?*const c_void) void {
    return epoxy_glTexImage3D.?(arg_8156, arg_8157, arg_8158, arg_8159, arg_8160, arg_8161, arg_8162, arg_8163, arg_8164, arg_8165);
}
pub const GL_FILL_NV = 0x1B02;
pub const GL_STENCIL_BACK_PASS_DEPTH_FAIL = 0x8802;
pub const GL_DEBUG_SEVERITY_MEDIUM = 0x9147;
pub const GL_ARB_texture_cube_map = 1;
pub const GL_MAX_TESS_PATCH_COMPONENTS_OES = 0x8E84;
pub inline fn glVertexAttrib2sARB(arg_8166: GLuint, arg_8167: GLshort, arg_8168: GLshort) void {
    return epoxy_glVertexAttrib2sARB.?(arg_8166, arg_8167, arg_8168);
}
pub inline fn glGetFragmentMaterialivSGIX(arg_8169: GLenum, arg_8170: GLenum, arg_8171: [*c]GLint) void {
    return epoxy_glGetFragmentMaterialivSGIX.?(arg_8169, arg_8170, arg_8171);
}
pub const GL_COMPRESSED_SIGNED_R11_EAC_OES = 0x9271;
pub const GL_DOUBLE_MAT3_EXT = 0x8F47;
pub const GL_MAX_DEBUG_LOGGED_MESSAGES_AMD = 0x9144;
pub inline fn glColorMaskiOES(arg_8172: GLuint, arg_8173: GLboolean, arg_8174: GLboolean, arg_8175: GLboolean, arg_8176: GLboolean) void {
    return epoxy_glColorMaskiOES.?(arg_8172, arg_8173, arg_8174, arg_8175, arg_8176);
}
pub inline fn glStencilStrokePathNV(arg_8177: GLuint, arg_8178: GLint, arg_8179: GLuint) void {
    return epoxy_glStencilStrokePathNV.?(arg_8177, arg_8178, arg_8179);
}
pub const GL_ARB_blend_func_extended = 1;
pub inline fn glViewportArrayv(arg_8180: GLuint, arg_8181: GLsizei, arg_8182: [*c]const GLfloat) void {
    return epoxy_glViewportArrayv.?(arg_8180, arg_8181, arg_8182);
}
pub const GL_TEXTURE0 = 0x84C0;
pub const GL_GLOBAL_ALPHA_SUN = 0x81D9;
pub inline fn glVertexAttribL2i64NV(arg_8183: GLuint, arg_8184: GLint64EXT, arg_8185: GLint64EXT) void {
    return epoxy_glVertexAttribL2i64NV.?(arg_8183, arg_8184, arg_8185);
}
pub const GL_SAMPLES_SGIS = 0x80A9;
pub const GL_SOURCE1_ALPHA_EXT = 0x8589;
pub const GL_T4F_C4F_N3F_V4F = 0x2A2D;
pub const GL_RGBA16UI = 0x8D76;
pub const GL_UTF16_NV = 0x909B;
pub inline fn __attribute_deprecated_msg__(msg: var) @TypeOf(__attribute__(__deprecated__(msg))) {
    return __attribute__(__deprecated__(msg));
}
pub inline fn glProgramUniformMatrix2x4dvEXT(arg_8186: GLuint, arg_8187: GLint, arg_8188: GLsizei, arg_8189: GLboolean, arg_8190: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x4dvEXT.?(arg_8186, arg_8187, arg_8188, arg_8189, arg_8190);
}
pub const GL_QUERY_RESULT_AVAILABLE_ARB = 0x8867;
pub inline fn glScissorIndexedv(arg_8191: GLuint, arg_8192: [*c]const GLint) void {
    return epoxy_glScissorIndexedv.?(arg_8191, arg_8192);
}
pub inline fn glGetCompressedTexImage(arg_8193: GLenum, arg_8194: GLint, arg_8195: ?*c_void) void {
    return epoxy_glGetCompressedTexImage.?(arg_8193, arg_8194, arg_8195);
}
pub inline fn glInterpolatePathsNV(arg_8196: GLuint, arg_8197: GLuint, arg_8198: GLuint, arg_8199: GLfloat) void {
    return epoxy_glInterpolatePathsNV.?(arg_8196, arg_8197, arg_8198, arg_8199);
}
pub const GL_INDEX_LOGIC_OP = 0x0BF1;
pub const GL_FLOAT16_MAT2_AMD = 0x91C5;
pub const GL_NEAREST_CLIPMAP_LINEAR_SGIX = 0x844E;
pub inline fn glQueryCounter(arg_8200: GLuint, arg_8201: GLenum) void {
    return epoxy_glQueryCounter.?(arg_8200, arg_8201);
}
pub const GL_TIMESTAMP = 0x8E28;
pub inline fn glGetLightxv(arg_8202: GLenum, arg_8203: GLenum, arg_8204: [*c]GLfixed) void {
    return epoxy_glGetLightxv.?(arg_8202, arg_8203, arg_8204);
}
pub const GL_QUERY_ALL_EVENT_BITS_AMD = 0xFFFFFFFF;
pub const GL_PROGRAM_ATTRIBS_ARB = 0x88AC;
pub const GL_VIEWPORT_BIT = 0x00000800;
pub const GL_TEXTURE_BINDING_CUBE_MAP_OES = 0x8514;
pub const GL_UNSIGNED_INT_IMAGE_2D_MULTISAMPLE_ARRAY_EXT = 0x906C;
pub const GL_ROUNDED_RECT2_NV = 0xEA;
pub const GL_DRAW_BUFFER3_EXT = 0x8828;
pub const GL_HANDLE_TYPE_D3D12_RESOURCE_EXT = 0x958A;
pub const GL_MAX_SHADER_COMBINED_LOCAL_STORAGE_FAST_SIZE_EXT = 0x9650;
pub const GL_NVX_blend_equation_advanced_multi_draw_buffers = 1;
pub const __RLIM64_T_TYPE = __UQUAD_TYPE;
pub const GL_MESA_pack_invert = 1;
pub const GL_DUAL_LUMINANCE16_SGIS = 0x8117;
pub const GL_AVERAGE_EXT = 0x8335;
pub inline fn glCompressedTexSubImage3DOES(arg_8205: GLenum, arg_8206: GLint, arg_8207: GLint, arg_8208: GLint, arg_8209: GLint, arg_8210: GLsizei, arg_8211: GLsizei, arg_8212: GLsizei, arg_8213: GLenum, arg_8214: GLsizei, arg_8215: ?*const c_void) void {
    return epoxy_glCompressedTexSubImage3DOES.?(arg_8205, arg_8206, arg_8207, arg_8208, arg_8209, arg_8210, arg_8211, arg_8212, arg_8213, arg_8214, arg_8215);
}
pub const GL_TEXTURE_BINDING_2D_ARRAY_EXT = 0x8C1D;
pub inline fn glQueryResourceTagNV(arg_8216: GLint, arg_8217: [*c]const GLchar) void {
    return epoxy_glQueryResourceTagNV.?(arg_8216, arg_8217);
}
pub inline fn glCoverFillPathNV(arg_8218: GLuint, arg_8219: GLenum) void {
    return epoxy_glCoverFillPathNV.?(arg_8218, arg_8219);
}
pub inline fn glVertexAttribDivisorARB(arg_8220: GLuint, arg_8221: GLuint) void {
    return epoxy_glVertexAttribDivisorARB.?(arg_8220, arg_8221);
}
pub const GL_ARB_query_buffer_object = 1;
pub const GL_DUAL_ALPHA8_SGIS = 0x8111;
pub inline fn glUniform2fv(arg_8222: GLint, arg_8223: GLsizei, arg_8224: [*c]const GLfloat) void {
    return epoxy_glUniform2fv.?(arg_8222, arg_8223, arg_8224);
}
pub const GL_SCREEN_KHR = 0x9295;
pub inline fn glGetTexGeniv(arg_8225: GLenum, arg_8226: GLenum, arg_8227: [*c]GLint) void {
    return epoxy_glGetTexGeniv.?(arg_8225, arg_8226, arg_8227);
}
pub const GL_TEXCOORD2_BIT_PGI = 0x20000000;
pub inline fn glMultiTexGenivEXT(arg_8228: GLenum, arg_8229: GLenum, arg_8230: GLenum, arg_8231: [*c]const GLint) void {
    return epoxy_glMultiTexGenivEXT.?(arg_8228, arg_8229, arg_8230, arg_8231);
}
pub const GL_ES_VERSION_3_1 = 1;
pub const GL_COMPRESSED_RGBA_ASTC_6x6_KHR = 0x93B4;
pub const GL_VERTEX23_BIT_PGI = 0x00000004;
pub inline fn glGetTextureParameterIivEXT(arg_8232: GLuint, arg_8233: GLenum, arg_8234: GLenum, arg_8235: [*c]GLint) void {
    return epoxy_glGetTextureParameterIivEXT.?(arg_8232, arg_8233, arg_8234, arg_8235);
}
pub const GL_MAP2_VERTEX_3 = 0x0DB7;
pub const GL_DEPTH = 0x1801;
pub inline fn glProgramUniform3iv(arg_8236: GLuint, arg_8237: GLint, arg_8238: GLsizei, arg_8239: [*c]const GLint) void {
    return epoxy_glProgramUniform3iv.?(arg_8236, arg_8237, arg_8238, arg_8239);
}
pub inline fn glBindVertexBuffers(arg_8240: GLuint, arg_8241: GLsizei, arg_8242: [*c]const GLuint, arg_8243: [*c]const GLintptr, arg_8244: [*c]const GLsizei) void {
    return epoxy_glBindVertexBuffers.?(arg_8240, arg_8241, arg_8242, arg_8243, arg_8244);
}
pub inline fn glProgramUniformui64vNV(arg_8245: GLuint, arg_8246: GLint, arg_8247: GLsizei, arg_8248: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniformui64vNV.?(arg_8245, arg_8246, arg_8247, arg_8248);
}
pub const GL_BGRA_INTEGER = 0x8D9B;
pub const GL_NV_framebuffer_blit = 1;
pub inline fn glBindFragDataLocationIndexedEXT(arg_8249: GLuint, arg_8250: GLuint, arg_8251: GLuint, arg_8252: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocationIndexedEXT.?(arg_8249, arg_8250, arg_8251, arg_8252);
}
pub inline fn glNamedRenderbufferStorageMultisampleEXT(arg_8253: GLuint, arg_8254: GLsizei, arg_8255: GLenum, arg_8256: GLsizei, arg_8257: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisampleEXT.?(arg_8253, arg_8254, arg_8255, arg_8256, arg_8257);
}
pub const KHRONOS_SUPPORT_FLOAT = 1;
pub inline fn glMultiTexCoord4xOES(arg_8258: GLenum, arg_8259: GLfixed, arg_8260: GLfixed, arg_8261: GLfixed, arg_8262: GLfixed) void {
    return epoxy_glMultiTexCoord4xOES.?(arg_8258, arg_8259, arg_8260, arg_8261, arg_8262);
}
pub const GL_STENCIL_INDEX_OES = 0x1901;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_TESS_EVALUATION_SHADER = 0x84F1;
pub const GL_MAX_PROGRAM_LOOP_DEPTH_NV = 0x88F7;
pub const GL_EXT_base_instance = 1;
pub const __attribute_warn_unused_result__ = __attribute__(__warn_unused_result__);
pub inline fn glTexSubImage4DSGIS(arg_8263: GLenum, arg_8264: GLint, arg_8265: GLint, arg_8266: GLint, arg_8267: GLint, arg_8268: GLint, arg_8269: GLsizei, arg_8270: GLsizei, arg_8271: GLsizei, arg_8272: GLsizei, arg_8273: GLenum, arg_8274: GLenum, arg_8275: ?*const c_void) void {
    return epoxy_glTexSubImage4DSGIS.?(arg_8263, arg_8264, arg_8265, arg_8266, arg_8267, arg_8268, arg_8269, arg_8270, arg_8271, arg_8272, arg_8273, arg_8274, arg_8275);
}
pub inline fn glCopyImageSubDataNV(arg_8276: GLuint, arg_8277: GLenum, arg_8278: GLint, arg_8279: GLint, arg_8280: GLint, arg_8281: GLint, arg_8282: GLuint, arg_8283: GLenum, arg_8284: GLint, arg_8285: GLint, arg_8286: GLint, arg_8287: GLint, arg_8288: GLsizei, arg_8289: GLsizei, arg_8290: GLsizei) void {
    return epoxy_glCopyImageSubDataNV.?(arg_8276, arg_8277, arg_8278, arg_8279, arg_8280, arg_8281, arg_8282, arg_8283, arg_8284, arg_8285, arg_8286, arg_8287, arg_8288, arg_8289, arg_8290);
}
pub const GL_INT_SAMPLER_1D = 0x8DC9;
pub inline fn glLinkProgram(arg_8291: GLuint) void {
    return epoxy_glLinkProgram.?(arg_8291);
}
pub const GL_RED_MIN_CLAMP_INGR = 0x8560;
pub const GL_UNPACK_COMPRESSED_BLOCK_HEIGHT = 0x9128;
pub const GL_TEXTURE_CUBE_MAP_ARRAY_EXT = 0x9009;
pub const GL_PATH_INITIAL_END_CAP_NV = 0x9077;
pub const GL_COMBINER_CD_DOT_PRODUCT_NV = 0x8546;
pub const GL_AMBIENT_AND_DIFFUSE = 0x1602;
pub inline fn glIsVertexArrayAPPLE(arg_8292: GLuint) GLboolean {
    return epoxy_glIsVertexArrayAPPLE.?(arg_8292);
}
pub const PRId64 = __PRI64_PREFIX ++ "d";
pub const GL_SAMPLES_3DFX = 0x86B4;
pub const GL_LUMINANCE6_ALPHA2_EXT = 0x8044;
pub const GL_RELEASED_APPLE = 0x8A19;
pub const GL_RGB8_SNORM = 0x8F96;
pub const GL_MODELVIEW22_ARB = 0x8736;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 0x8CD2;
pub const GL_IMAGE_CLASS_4_X_16 = 0x82BC;
pub const GL_ARB_texture_env_crossbar = 1;
pub const GL_TEXTURE_BLUE_TYPE = 0x8C12;
pub inline fn glUnmapTexture2DINTEL(arg_8293: GLuint, arg_8294: GLint) void {
    return epoxy_glUnmapTexture2DINTEL.?(arg_8293, arg_8294);
}
pub inline fn glTextureSubImage3D(arg_8295: GLuint, arg_8296: GLint, arg_8297: GLint, arg_8298: GLint, arg_8299: GLint, arg_8300: GLsizei, arg_8301: GLsizei, arg_8302: GLsizei, arg_8303: GLenum, arg_8304: GLenum, arg_8305: ?*const c_void) void {
    return epoxy_glTextureSubImage3D.?(arg_8295, arg_8296, arg_8297, arg_8298, arg_8299, arg_8300, arg_8301, arg_8302, arg_8303, arg_8304, arg_8305);
}
pub const GL_TEXTURE_STACK_DEPTH = 0x0BA5;
pub const GL_INCR_WRAP_OES = 0x8507;
pub const GL_GS_PROGRAM_BINARY_MTK = 0x9641;
pub inline fn glVertexAttribI2uiEXT(arg_8306: GLuint, arg_8307: GLuint, arg_8308: GLuint) void {
    return epoxy_glVertexAttribI2uiEXT.?(arg_8306, arg_8307, arg_8308);
}
pub const GL_ONE_MINUS_CONSTANT_ALPHA_EXT = 0x8004;
pub const GL_PROGRAM_KHR = 0x82E2;
pub const GL_PATH_TERMINAL_DASH_CAP_NV = 0x907D;
pub const GL_MODELVIEW18_ARB = 0x8732;
pub inline fn glCompressedTexSubImage1D(arg_8309: GLenum, arg_8310: GLint, arg_8311: GLint, arg_8312: GLsizei, arg_8313: GLenum, arg_8314: GLsizei, arg_8315: ?*const c_void) void {
    return epoxy_glCompressedTexSubImage1D.?(arg_8309, arg_8310, arg_8311, arg_8312, arg_8313, arg_8314, arg_8315);
}
pub const GL_VARIABLE_C_NV = 0x8525;
pub inline fn glExtGetProgramsQCOM(arg_8316: [*c]GLuint, arg_8317: GLint, arg_8318: [*c]GLint) void {
    return epoxy_glExtGetProgramsQCOM.?(arg_8316, arg_8317, arg_8318);
}
pub const GL_VARIANT_EXT = 0x87C1;
pub inline fn glDispatchComputeGroupSizeARB(arg_8319: GLuint, arg_8320: GLuint, arg_8321: GLuint, arg_8322: GLuint, arg_8323: GLuint, arg_8324: GLuint) void {
    return epoxy_glDispatchComputeGroupSizeARB.?(arg_8319, arg_8320, arg_8321, arg_8322, arg_8323, arg_8324);
}
pub const GL_SGIS_point_parameters = 1;
pub inline fn glVertexAttrib1fvARB(arg_8325: GLuint, arg_8326: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib1fvARB.?(arg_8325, arg_8326);
}
pub const GL_ALPHA32UI_EXT = 0x8D72;
pub const GL_VERTEX_ARRAY_SIZE_EXT = 0x807A;
pub const GL_MAX_LABEL_LENGTH_KHR = 0x82E8;
pub const GL_SGIX_fog_offset = 1;
pub const GL_SAMPLE_BUFFERS_ARB = 0x80A8;
pub const PRIdFAST8 = "d";
pub inline fn glNormal3s(arg_8327: GLshort, arg_8328: GLshort, arg_8329: GLshort) void {
    return epoxy_glNormal3s.?(arg_8327, arg_8328, arg_8329);
}
pub const GL_ITALIC_BIT_NV = 0x02;
pub const GL_VERTEX_ATTRIB_ARRAY_LENGTH_NV = 0x8F2A;
pub const GL_SAMPLE_POSITION = 0x8E50;
pub inline fn glVertexAttrib1dNV(arg_8330: GLuint, arg_8331: GLdouble) void {
    return epoxy_glVertexAttrib1dNV.?(arg_8330, arg_8331);
}
pub const GL_TEXCOORD4_BIT_PGI = 0x80000000;
pub inline fn glPixelTexGenParameteriSGIS(arg_8332: GLenum, arg_8333: GLint) void {
    return epoxy_glPixelTexGenParameteriSGIS.?(arg_8332, arg_8333);
}
pub const GL_FEEDBACK_BUFFER_SIZE = 0x0DF1;
pub const GL_DRAW_BUFFER9_ATI = 0x882E;
pub const GL_UNSIGNED_INT_8_8_S8_S8_REV_NV = 0x86DB;
pub const GL_SLUMINANCE_ALPHA_NV = 0x8C44;
pub const GL_VERTEX_ARRAY_BUFFER_BINDING_ARB = 0x8896;
pub inline fn glGetQueryivARB(arg_8334: GLenum, arg_8335: GLenum, arg_8336: [*c]GLint) void {
    return epoxy_glGetQueryivARB.?(arg_8334, arg_8335, arg_8336);
}
pub const GL_NV_draw_buffers = 1;
pub const GL_AMD_shader_explicit_vertex_parameter = 1;
pub inline fn glVertexAttribLPointerEXT(arg_8337: GLuint, arg_8338: GLint, arg_8339: GLenum, arg_8340: GLsizei, arg_8341: ?*const c_void) void {
    return epoxy_glVertexAttribLPointerEXT.?(arg_8337, arg_8338, arg_8339, arg_8340, arg_8341);
}
pub const GL_FLOAT16_MAT4x2_AMD = 0x91CC;
pub const GL_MAP1_VERTEX_ATTRIB10_4_NV = 0x866A;
pub inline fn glIsEnabledIndexedEXT(arg_8342: GLenum, arg_8343: GLuint) GLboolean {
    return epoxy_glIsEnabledIndexedEXT.?(arg_8342, arg_8343);
}
pub const GL_TEXTURE_LOD_BIAS = 0x8501;
pub const GL_COLOR_ARRAY_LENGTH_NV = 0x8F2D;
pub const GL_POLYGON_SMOOTH_HINT = 0x0C53;
pub const GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 0x8C01;
pub const GL_VIEWPORT_SUBPIXEL_BITS_OES = 0x825C;
pub const GL_IMPLEMENTATION_COLOR_READ_TYPE_OES = 0x8B9A;
pub inline fn glRasterPos2fv(arg_8344: [*c]const GLfloat) void {
    return epoxy_glRasterPos2fv.?(arg_8344);
}
pub inline fn glTexEnvf(arg_8345: GLenum, arg_8346: GLenum, arg_8347: GLfloat) void {
    return epoxy_glTexEnvf.?(arg_8345, arg_8346, arg_8347);
}
pub const GL_3DFX_multisample = 1;
pub inline fn glClearAccumxOES(arg_8348: GLfixed, arg_8349: GLfixed, arg_8350: GLfixed, arg_8351: GLfixed) void {
    return epoxy_glClearAccumxOES.?(arg_8348, arg_8349, arg_8350, arg_8351);
}
pub const GL_ARB_viewport_array = 1;
pub const GL_PROGRAM_POINT_SIZE = 0x8642;
pub const GL_CONVOLUTION_FILTER_SCALE = 0x8014;
pub const GL_ARB_clear_texture = 1;
pub const GL_RGB_INTEGER = 0x8D98;
pub const GL_ARB_shadow = 1;
pub const UINT32_MAX = @as(c_uint, 4294967295);
pub const GL_FONT_Y_MIN_BOUNDS_BIT_NV = 0x00020000;
pub const GL_ARB_direct_state_access = 1;
pub const GL_TRIANGLE_FAN = 0x0006;
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_COMPUTE_SHADER = 0x90ED;
pub const GL_DRAW_FRAMEBUFFER_BINDING_APPLE = 0x8CA6;
pub const GL_CULL_VERTEX_EYE_POSITION_EXT = 0x81AB;
pub const GL_MAX_COMBINED_ATOMIC_COUNTER_BUFFERS = 0x92D1;
pub const GL_INFO_LOG_LENGTH = 0x8B84;
pub const GL_UNIFORM_BARRIER_BIT = 0x00000004;
pub inline fn glIsQueryEXT(arg_8352: GLuint) GLboolean {
    return epoxy_glIsQueryEXT.?(arg_8352);
}
pub inline fn glGetVertexAttribArrayObjectivATI(arg_8353: GLuint, arg_8354: GLenum, arg_8355: [*c]GLint) void {
    return epoxy_glGetVertexAttribArrayObjectivATI.?(arg_8353, arg_8354, arg_8355);
}
pub inline fn glFramebufferParameteri(arg_8356: GLenum, arg_8357: GLenum, arg_8358: GLint) void {
    return epoxy_glFramebufferParameteri.?(arg_8356, arg_8357, arg_8358);
}
pub const __INT32_FMTd__ = "d";
pub const GL_COLOR_ATTACHMENT21 = 0x8CF5;
pub const GL_DEPTH_COMPONENT32F = 0x8CAC;
pub const __USE_POSIX199506 = 1;
pub inline fn glGetFragDataIndexEXT(arg_8359: GLuint, arg_8360: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataIndexEXT.?(arg_8359, arg_8360);
}
pub const GL_TRANSFORM_FEEDBACK_BINDING_NV = 0x8E25;
pub inline fn glVertexAttribI4i(arg_8361: GLuint, arg_8362: GLint, arg_8363: GLint, arg_8364: GLint, arg_8365: GLint) void {
    return epoxy_glVertexAttribI4i.?(arg_8361, arg_8362, arg_8363, arg_8364, arg_8365);
}
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_COMPONENTS_EXT = 0x8C80;
pub const GL_ELEMENT_ARRAY_BUFFER_ARB = 0x8893;
pub const __UINT_FAST64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const GL_READ_PIXELS_TYPE = 0x828E;
pub inline fn glTransformFeedbackVaryings(arg_8366: GLuint, arg_8367: GLsizei, arg_8368: [*c]const [*c]const GLchar, arg_8369: GLenum) void {
    return epoxy_glTransformFeedbackVaryings.?(arg_8366, arg_8367, arg_8368, arg_8369);
}
pub inline fn glGetMapfv(arg_8370: GLenum, arg_8371: GLenum, arg_8372: [*c]GLfloat) void {
    return epoxy_glGetMapfv.?(arg_8370, arg_8371, arg_8372);
}
pub inline fn glFramebufferTexture2DMultisampleEXT(arg_8373: GLenum, arg_8374: GLenum, arg_8375: GLenum, arg_8376: GLuint, arg_8377: GLint, arg_8378: GLsizei) void {
    return epoxy_glFramebufferTexture2DMultisampleEXT.?(arg_8373, arg_8374, arg_8375, arg_8376, arg_8377, arg_8378);
}
pub const GL_VERTEX_PROGRAM_CALLBACK_MESA = 0x8BB5;
pub inline fn glNormalStream3sATI(arg_8379: GLenum, arg_8380: GLshort, arg_8381: GLshort, arg_8382: GLshort) void {
    return epoxy_glNormalStream3sATI.?(arg_8379, arg_8380, arg_8381, arg_8382);
}
pub const GL_ACCUM_RED_BITS = 0x0D58;
pub inline fn glProgramBufferParametersIivNV(arg_8383: GLenum, arg_8384: GLuint, arg_8385: GLuint, arg_8386: GLsizei, arg_8387: [*c]const GLint) void {
    return epoxy_glProgramBufferParametersIivNV.?(arg_8383, arg_8384, arg_8385, arg_8386, arg_8387);
}
pub const GL_MAX_VERTEX_HINT_PGI = 0x1A22D;
pub const GL_DARKEN_NV = 0x9297;
pub const GL_INVALID_VALUE = 0x0501;
pub const GL_HISTOGRAM_GREEN_SIZE = 0x8029;
pub const GL_PRIMITIVE_RESTART = 0x8F9D;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_EXT = 0x8C85;
pub const GL_SET = 0x150F;
pub const GL_RENDERBUFFER_STENCIL_SIZE_EXT = 0x8D55;
pub const GL_QUERY_BY_REGION_WAIT_INVERTED = 0x8E19;
pub const GL_TEXTURE_3D_EXT = 0x806F;
pub inline fn glVertexAttribI2ivEXT(arg_8388: GLuint, arg_8389: [*c]const GLint) void {
    return epoxy_glVertexAttribI2ivEXT.?(arg_8388, arg_8389);
}
pub const GL_PROXY_POST_IMAGE_TRANSFORM_COLOR_TABLE_HP = 0x8163;
pub const GL_VERTEX_SHADER_LOCALS_EXT = 0x87D3;
pub const GL_DOMAIN = 0x0A02;
pub inline fn glUniform4i(arg_8390: GLint, arg_8391: GLint, arg_8392: GLint, arg_8393: GLint, arg_8394: GLint) void {
    return epoxy_glUniform4i.?(arg_8390, arg_8391, arg_8392, arg_8393, arg_8394);
}
pub const GL_RENDERBUFFER_RED_SIZE = 0x8D50;
pub inline fn glDeleteProgramsNV(arg_8395: GLsizei, arg_8396: [*c]const GLuint) void {
    return epoxy_glDeleteProgramsNV.?(arg_8395, arg_8396);
}
pub const GL_OP_SET_GE_EXT = 0x878C;
pub inline fn glVertexAttribs4dvNV(arg_8397: GLuint, arg_8398: GLsizei, arg_8399: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs4dvNV.?(arg_8397, arg_8398, arg_8399);
}
pub const SCNi8 = "hhi";
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4 = 0x93D1;
pub const GL_DEBUG_SEVERITY_HIGH_AMD = 0x9146;
pub inline fn glDepthRangex(arg_8400: GLfixed, arg_8401: GLfixed) void {
    return epoxy_glDepthRangex.?(arg_8400, arg_8401);
}
pub const __CLANG_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const GL_SAMPLE_COVERAGE_VALUE_ARB = 0x80AA;
pub const GL_MAX_PROGRAM_NATIVE_ATTRIBS_ARB = 0x88AF;
pub const GL_DEPENDENT_RGB_TEXTURE_CUBE_MAP_NV = 0x885A;
pub inline fn glPrimitiveBoundingBoxOES(arg_8402: GLfloat, arg_8403: GLfloat, arg_8404: GLfloat, arg_8405: GLfloat, arg_8406: GLfloat, arg_8407: GLfloat, arg_8408: GLfloat, arg_8409: GLfloat) void {
    return epoxy_glPrimitiveBoundingBoxOES.?(arg_8402, arg_8403, arg_8404, arg_8405, arg_8406, arg_8407, arg_8408, arg_8409);
}
pub inline fn glBeginTransformFeedback(arg_8410: GLenum) void {
    return epoxy_glBeginTransformFeedback.?(arg_8410);
}
pub const GL_STACK_OVERFLOW_KHR = 0x0503;
pub const GL_NOR = 0x1508;
pub const GL_VIEWPORT_BOUNDS_RANGE_NV = 0x825D;
pub const GL_VERTEX_SUBROUTINE_UNIFORM = 0x92EE;
pub const GL_EXT_YUV_target = 1;
pub inline fn glNamedProgramLocalParameterI4uiEXT(arg_8411: GLuint, arg_8412: GLenum, arg_8413: GLuint, arg_8414: GLuint, arg_8415: GLuint, arg_8416: GLuint, arg_8417: GLuint) void {
    return epoxy_glNamedProgramLocalParameterI4uiEXT.?(arg_8411, arg_8412, arg_8413, arg_8414, arg_8415, arg_8416, arg_8417);
}
pub inline fn glUniform2i64ARB(arg_8418: GLint, arg_8419: GLint64, arg_8420: GLint64) void {
    return epoxy_glUniform2i64ARB.?(arg_8418, arg_8419, arg_8420);
}
pub const GL_EXT_vertex_shader = 1;
pub const GL_PROXY_TEXTURE_1D_EXT = 0x8063;
pub inline fn glCreateProgramPipelines(arg_8421: GLsizei, arg_8422: [*c]GLuint) void {
    return epoxy_glCreateProgramPipelines.?(arg_8421, arg_8422);
}
pub const GL_ARB_shader_atomic_counter_ops = 1;
pub const GL_MODULATE_SIGNED_ADD_ATI = 0x8745;
pub const GL_UNIFORM = 0x92E1;
pub const GL_TEXTURE_FOVEATED_FEATURE_QUERY_QCOM = 0x8BFD;
pub const GL_EXT_pixel_transform = 1;
pub inline fn glGetPixelMapfv(arg_8423: GLenum, arg_8424: [*c]GLfloat) void {
    return epoxy_glGetPixelMapfv.?(arg_8423, arg_8424);
}
pub inline fn glSeparableFilter2DEXT(arg_8425: GLenum, arg_8426: GLenum, arg_8427: GLsizei, arg_8428: GLsizei, arg_8429: GLenum, arg_8430: GLenum, arg_8431: ?*const c_void, arg_8432: ?*const c_void) void {
    return epoxy_glSeparableFilter2DEXT.?(arg_8425, arg_8426, arg_8427, arg_8428, arg_8429, arg_8430, arg_8431, arg_8432);
}
pub const GL_POST_COLOR_MATRIX_BLUE_BIAS = 0x80BA;
pub const __UINT_FAST32_FMTx__ = "x";
pub const __UINTPTR_MAX__ = @as(c_ulong, 18446744073709551615);
pub const GL_VIEW_CLASS_32_BITS = 0x82C8;
pub const GL_MAX_DRAW_BUFFERS_EXT = 0x8824;
pub const GL_OES_matrix_get = 1;
pub inline fn glVertexAttribL4dv(arg_8433: GLuint, arg_8434: [*c]const GLdouble) void {
    return epoxy_glVertexAttribL4dv.?(arg_8433, arg_8434);
}
pub inline fn glLightModelx(arg_8435: GLenum, arg_8436: GLfixed) void {
    return epoxy_glLightModelx.?(arg_8435, arg_8436);
}
pub const GL_INTERNALFORMAT_DEPTH_SIZE = 0x8275;
pub const GL_COLOR_ARRAY_SIZE_EXT = 0x8081;
pub const GL_LUMINANCE_ALPHA16F_ARB = 0x881F;
pub inline fn glEdgeFlagPointerEXT(arg_8437: GLsizei, arg_8438: GLsizei, arg_8439: [*c]const GLboolean) void {
    return epoxy_glEdgeFlagPointerEXT.?(arg_8437, arg_8438, arg_8439);
}
pub inline fn glHintPGI(arg_8440: GLenum, arg_8441: GLint) void {
    return epoxy_glHintPGI.?(arg_8440, arg_8441);
}
pub const GL_VERTEX_STREAM5_ATI = 0x8771;
pub const GL_DEBUG_CATEGORY_APPLICATION_AMD = 0x914F;
pub const GL_POINT_SMOOTH_HINT = 0x0C51;
pub inline fn glGetTexEnvxv(arg_8442: GLenum, arg_8443: GLenum, arg_8444: [*c]GLfixed) void {
    return epoxy_glGetTexEnvxv.?(arg_8442, arg_8443, arg_8444);
}
pub const GL_TRANSFORM_HINT_APPLE = 0x85B1;
pub const GL_SAMPLER_2D_RECT_SHADOW_ARB = 0x8B64;
pub inline fn glBlendFuncIndexedAMD(arg_8445: GLuint, arg_8446: GLenum, arg_8447: GLenum) void {
    return epoxy_glBlendFuncIndexedAMD.?(arg_8445, arg_8446, arg_8447);
}
pub const GL_FLOAT_MAT4 = 0x8B5C;
pub const GL_RELATIVE_CONIC_CURVE_TO_NV = 0x1B;
pub inline fn glMakeBufferNonResidentNV(arg_8448: GLenum) void {
    return epoxy_glMakeBufferNonResidentNV.?(arg_8448);
}
pub const GL_LINES_ADJACENCY_EXT = 0x000A;
pub const GL_FIELD_UPPER_NV = 0x9022;
pub const GL_MAX_VERTEX_OUTPUT_COMPONENTS = 0x9122;
pub inline fn glMultiTexCoord1xOES(arg_8449: GLenum, arg_8450: GLfixed) void {
    return epoxy_glMultiTexCoord1xOES.?(arg_8449, arg_8450);
}
pub const PRIXFAST8 = "X";
pub const __UINT64_MAX__ = @as(c_ulong, 18446744073709551615);
pub const GL_MAP2_VERTEX_ATTRIB11_4_NV = 0x867B;
pub inline fn glProgramUniformMatrix2x3fv(arg_8451: GLuint, arg_8452: GLint, arg_8453: GLsizei, arg_8454: GLboolean, arg_8455: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x3fv.?(arg_8451, arg_8452, arg_8453, arg_8454, arg_8455);
}
pub const GL_APPLE_texture_2D_limited_npot = 1;
pub inline fn glVertexAttribL2ui64vNV(arg_8456: GLuint, arg_8457: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL2ui64vNV.?(arg_8456, arg_8457);
}
pub const GL_NUM_GENERAL_COMBINERS_NV = 0x854E;
pub const GL_TEXTURE_BINDING_2D_ARRAY = 0x8C1D;
pub const GL_LINEAR_MIPMAP_NEAREST = 0x2701;
pub const GL_TEXTURE2_ARB = 0x84C2;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS = 0x92CD;
pub inline fn glMultiTexCoordP3ui(arg_8458: GLenum, arg_8459: GLenum, arg_8460: GLuint) void {
    return epoxy_glMultiTexCoordP3ui.?(arg_8458, arg_8459, arg_8460);
}
pub inline fn glVertexStream1ivATI(arg_8461: GLenum, arg_8462: [*c]const GLint) void {
    return epoxy_glVertexStream1ivATI.?(arg_8461, arg_8462);
}
pub const GL_OES_framebuffer_object = 1;
pub const GL_WEIGHTED_AVERAGE_EXT = 0x9367;
pub const GL_DRAW_BUFFER2_NV = 0x8827;
pub inline fn glGetIntegerv(arg_8463: GLenum, arg_8464: [*c]GLint) void {
    return epoxy_glGetIntegerv.?(arg_8463, arg_8464);
}
pub inline fn glVertexArrayRangeAPPLE(arg_8465: GLsizei, arg_8466: ?*c_void) void {
    return epoxy_glVertexArrayRangeAPPLE.?(arg_8465, arg_8466);
}
pub inline fn glVertexAttrib4bvARB(arg_8467: GLuint, arg_8468: [*c]const GLbyte) void {
    return epoxy_glVertexAttrib4bvARB.?(arg_8467, arg_8468);
}
pub inline fn glUniform1uiEXT(arg_8469: GLint, arg_8470: GLuint) void {
    return epoxy_glUniform1uiEXT.?(arg_8469, arg_8470);
}
pub const GL_TEXTURE_STENCIL_SIZE_EXT = 0x88F1;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_EXT = 0x8DA8;
pub const GL_PATH_GEN_COLOR_FORMAT_NV = 0x90B2;
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS = 0x8DDF;
pub const __DBL_MIN_10_EXP__ = -307;
pub const GL_RENDERBUFFER_STORAGE_SAMPLES_AMD = 0x91B2;
pub const GL_PIXEL_UNPACK_BUFFER_NV = 0x88EC;
pub const GL_EXT_vertex_array = 1;
pub const SCNuFAST8 = "hhu";
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT = 0x8CD1;
pub inline fn glEnableiOES(arg_8471: GLenum, arg_8472: GLuint) void {
    return epoxy_glEnableiOES.?(arg_8471, arg_8472);
}
pub const GL_PERSPECTIVE_CORRECTION_HINT = 0x0C50;
pub inline fn glGetFramebufferParameteriv(arg_8473: GLenum, arg_8474: GLenum, arg_8475: [*c]GLint) void {
    return epoxy_glGetFramebufferParameteriv.?(arg_8473, arg_8474, arg_8475);
}
pub const GL_TEXTURE_1D_STACK_BINDING_MESAX = 0x875D;
pub const GL_VERSION_3_0 = 1;
pub inline fn glGetQueryBufferObjecti64v(arg_8476: GLuint, arg_8477: GLuint, arg_8478: GLenum, arg_8479: GLintptr) void {
    return epoxy_glGetQueryBufferObjecti64v.?(arg_8476, arg_8477, arg_8478, arg_8479);
}
pub inline fn glUniform4i64vNV(arg_8480: GLint, arg_8481: GLsizei, arg_8482: [*c]const GLint64EXT) void {
    return epoxy_glUniform4i64vNV.?(arg_8480, arg_8481, arg_8482);
}
pub inline fn glImageTransformParameterfvHP(arg_8483: GLenum, arg_8484: GLenum, arg_8485: [*c]const GLfloat) void {
    return epoxy_glImageTransformParameterfvHP.?(arg_8483, arg_8484, arg_8485);
}
pub const GL_WRITE_PIXEL_DATA_RANGE_NV = 0x8878;
pub inline fn glPathTexGenNV(arg_8486: GLenum, arg_8487: GLenum, arg_8488: GLint, arg_8489: [*c]const GLfloat) void {
    return epoxy_glPathTexGenNV.?(arg_8486, arg_8487, arg_8488, arg_8489);
}
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 0x8C4E;
pub const GL_INTEL_parallel_arrays = 1;
pub inline fn glVertexAttrib4ubvARB(arg_8490: GLuint, arg_8491: [*c]const GLubyte) void {
    return epoxy_glVertexAttrib4ubvARB.?(arg_8490, arg_8491);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_SIZE_NV = 0x8C85;
pub const GL_EXTENSIONS = 0x1F03;
pub inline fn glNormalStream3dvATI(arg_8492: GLenum, arg_8493: [*c]const GLdouble) void {
    return epoxy_glNormalStream3dvATI.?(arg_8492, arg_8493);
}
pub inline fn glTagSampleBufferSGIX() void {
    return epoxy_glTagSampleBufferSGIX.?();
}
pub inline fn glGetVertexArrayIndexed64iv(arg_8494: GLuint, arg_8495: GLuint, arg_8496: GLenum, arg_8497: [*c]GLint64) void {
    return epoxy_glGetVertexArrayIndexed64iv.?(arg_8494, arg_8495, arg_8496, arg_8497);
}
pub const GL_PLUS_CLAMPED_ALPHA_NV = 0x92B2;
pub inline fn glProgramUniform1ui64vNV(arg_8498: GLuint, arg_8499: GLint, arg_8500: GLsizei, arg_8501: [*c]const GLuint64EXT) void {
    return epoxy_glProgramUniform1ui64vNV.?(arg_8498, arg_8499, arg_8500, arg_8501);
}
pub const GL_SAMPLE_BUFFERS_EXT = 0x80A8;
pub const GL_VERSION_4_5 = 1;
pub const GL_MAP2_VERTEX_ATTRIB6_4_NV = 0x8676;
pub const GL_IMAGE_BINDING_ACCESS_EXT = 0x8F3E;
pub const GL_RGB16F_ARB = 0x881B;
pub const GL_STATIC_READ = 0x88E5;
pub inline fn glSelectPerfMonitorCountersAMD(arg_8502: GLuint, arg_8503: GLboolean, arg_8504: GLuint, arg_8505: GLint, arg_8506: [*c]GLuint) void {
    return epoxy_glSelectPerfMonitorCountersAMD.?(arg_8502, arg_8503, arg_8504, arg_8505, arg_8506);
}
pub inline fn glVertexAttrib2dNV(arg_8507: GLuint, arg_8508: GLdouble, arg_8509: GLdouble) void {
    return epoxy_glVertexAttrib2dNV.?(arg_8507, arg_8508, arg_8509);
}
pub inline fn glIsVertexArray(arg_8510: GLuint) GLboolean {
    return epoxy_glIsVertexArray.?(arg_8510);
}
pub const GL_FRAMEBUFFER_DEFAULT_HEIGHT = 0x9311;
pub const GL_TEXTURE_RESIDENT_EXT = 0x8067;
pub const GL_TEXTURE_MATRIX = 0x0BA8;
pub const GL_UNPACK_RESAMPLE_OML = 0x8985;
pub inline fn glNamedProgramStringEXT(arg_8511: GLuint, arg_8512: GLenum, arg_8513: GLenum, arg_8514: GLsizei, arg_8515: ?*const c_void) void {
    return epoxy_glNamedProgramStringEXT.?(arg_8511, arg_8512, arg_8513, arg_8514, arg_8515);
}
pub inline fn glMapNamedBufferRangeEXT(arg_8516: GLuint, arg_8517: GLintptr, arg_8518: GLsizeiptr, arg_8519: GLbitfield) ?*c_void {
    return epoxy_glMapNamedBufferRangeEXT.?(arg_8516, arg_8517, arg_8518, arg_8519);
}
pub inline fn glGetProgramParameterfvNV(arg_8520: GLenum, arg_8521: GLuint, arg_8522: GLenum, arg_8523: [*c]GLfloat) void {
    return epoxy_glGetProgramParameterfvNV.?(arg_8520, arg_8521, arg_8522, arg_8523);
}
pub const GL_DOWNSAMPLE_SCALES_IMG = 0x913E;
pub inline fn glIsPointInFillPathNV(arg_8524: GLuint, arg_8525: GLuint, arg_8526: GLfloat, arg_8527: GLfloat) GLboolean {
    return epoxy_glIsPointInFillPathNV.?(arg_8524, arg_8525, arg_8526, arg_8527);
}
pub const GL_TIMEOUT_IGNORED_APPLE = 0xFFFFFFFFFFFFFFFF;
pub const GL_DRAW_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
pub const GL_TEXTURE_LUMINANCE_TYPE_ARB = 0x8C14;
pub const GL_TEXTURE_LIGHT_EXT = 0x8350;
pub const GL_TEXTURE_COORD_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F8;
pub inline fn glFramebufferDrawBuffersEXT(arg_8528: GLuint, arg_8529: GLsizei, arg_8530: [*c]const GLenum) void {
    return epoxy_glFramebufferDrawBuffersEXT.?(arg_8528, arg_8529, arg_8530);
}
pub inline fn glIndexubv(arg_8531: [*c]const GLubyte) void {
    return epoxy_glIndexubv.?(arg_8531);
}
pub inline fn glProgramUniform3i64ARB(arg_8532: GLuint, arg_8533: GLint, arg_8534: GLint64, arg_8535: GLint64, arg_8536: GLint64) void {
    return epoxy_glProgramUniform3i64ARB.?(arg_8532, arg_8533, arg_8534, arg_8535, arg_8536);
}
pub const GL_MAX_PROGRAM_TEX_INSTRUCTIONS_ARB = 0x880C;
pub const GL_SHADER_STORAGE_BUFFER_START = 0x90D4;
pub const GL_FRAMEBUFFER_BARRIER_BIT = 0x00000400;
pub const __INTMAX_C_SUFFIX__ = L;
pub const GL_GUILTY_CONTEXT_RESET_EXT = 0x8253;
pub inline fn glFramebufferFoveationConfigQCOM(arg_8537: GLuint, arg_8538: GLuint, arg_8539: GLuint, arg_8540: GLuint, arg_8541: [*c]GLuint) void {
    return epoxy_glFramebufferFoveationConfigQCOM.?(arg_8537, arg_8538, arg_8539, arg_8540, arg_8541);
}
pub const GL_MAP2_INDEX = 0x0DB1;
pub const GL_PROXY_TEXTURE_3D = 0x8070;
pub inline fn glImportSemaphoreWin32NameEXT(arg_8542: GLuint, arg_8543: GLenum, arg_8544: ?*const c_void) void {
    return epoxy_glImportSemaphoreWin32NameEXT.?(arg_8542, arg_8543, arg_8544);
}
pub const GL_EXT_depth_clamp = 1;
pub const GL_FRAMEBUFFER_UNSUPPORTED_EXT = 0x8CDD;
pub inline fn glIsObjectBufferATI(arg_8545: GLuint) GLboolean {
    return epoxy_glIsObjectBufferATI.?(arg_8545);
}
pub const GL_MAX_TASK_OUTPUT_COUNT_NV = 0x953A;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_ARB = 0x8872;
pub inline fn glMapGrid2xOES(arg_8546: GLint, arg_8547: GLfixed, arg_8548: GLfixed, arg_8549: GLfixed, arg_8550: GLfixed) void {
    return epoxy_glMapGrid2xOES.?(arg_8546, arg_8547, arg_8548, arg_8549, arg_8550);
}
pub const GL_WEIGHT_ARRAY_BUFFER_BINDING_ARB = 0x889E;
pub const GL_REFLECTION_MAP_ARB = 0x8512;
pub const GL_UNSIGNED_INT_8_8_8_8_REV = 0x8367;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y_EXT = 0x8517;
pub const GL_HALF_BIAS_NORMAL_NV = 0x853A;
pub const __USE_XOPEN2K8 = 1;
pub const GL_MODELVIEW19_ARB = 0x8733;
pub const GL_EXT_texture_format_BGRA8888 = 1;
pub inline fn glProgramUniform4dv(arg_8551: GLuint, arg_8552: GLint, arg_8553: GLsizei, arg_8554: [*c]const GLdouble) void {
    return epoxy_glProgramUniform4dv.?(arg_8551, arg_8552, arg_8553, arg_8554);
}
pub const GL_VIEWPORT_SWIZZLE_NEGATIVE_X_NV = 0x9351;
pub inline fn glGetFragmentLightfvSGIX(arg_8555: GLenum, arg_8556: GLenum, arg_8557: [*c]GLfloat) void {
    return epoxy_glGetFragmentLightfvSGIX.?(arg_8555, arg_8556, arg_8557);
}
pub const GL_INTENSITY_FLOAT16_APPLE = 0x881D;
pub inline fn glDeleteFragmentShaderATI(arg_8558: GLuint) void {
    return epoxy_glDeleteFragmentShaderATI.?(arg_8558);
}
pub const GL_PROXY_TEXTURE_COLOR_TABLE_SGI = 0x80BD;
pub inline fn glUpdateObjectBufferATI(arg_8559: GLuint, arg_8560: GLuint, arg_8561: GLsizei, arg_8562: ?*const c_void, arg_8563: GLenum) void {
    return epoxy_glUpdateObjectBufferATI.?(arg_8559, arg_8560, arg_8561, arg_8562, arg_8563);
}
pub const GL_PACK_SWAP_BYTES = 0x0D00;
pub const GL_UNSIGNED_INT_8_8_8_8_REV_EXT = 0x8367;
pub const GL_ZERO_EXT = 0x87DD;
pub inline fn glGetLocalConstantBooleanvEXT(arg_8564: GLuint, arg_8565: GLenum, arg_8566: [*c]GLboolean) void {
    return epoxy_glGetLocalConstantBooleanvEXT.?(arg_8564, arg_8565, arg_8566);
}
pub inline fn glNamedRenderbufferStorageMultisampleAdvancedAMD(arg_8567: GLuint, arg_8568: GLsizei, arg_8569: GLsizei, arg_8570: GLenum, arg_8571: GLsizei, arg_8572: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisampleAdvancedAMD.?(arg_8567, arg_8568, arg_8569, arg_8570, arg_8571, arg_8572);
}
pub const GL_SGIS_point_line_texgen = 1;
pub const GL_RED_NV = 0x1903;
pub inline fn glSeparableFilter2D(arg_8573: GLenum, arg_8574: GLenum, arg_8575: GLsizei, arg_8576: GLsizei, arg_8577: GLenum, arg_8578: GLenum, arg_8579: ?*const c_void, arg_8580: ?*const c_void) void {
    return epoxy_glSeparableFilter2D.?(arg_8573, arg_8574, arg_8575, arg_8576, arg_8577, arg_8578, arg_8579, arg_8580);
}
pub const GL_MAX_RENDERBUFFER_SIZE = 0x84E8;
pub const GL_EXT_subtexture = 1;
pub const GL_NV_viewport_swizzle = 1;
pub inline fn glWindowPos4dvMESA(arg_8581: [*c]const GLdouble) void {
    return epoxy_glWindowPos4dvMESA.?(arg_8581);
}
pub const GL_VIEW_CLASS_RGTC2_RG = 0x82D1;
pub const GL_MAX_COMBINED_TESS_CONTROL_UNIFORM_COMPONENTS = 0x8E1E;
pub inline fn glGetIntegerui64vNV(arg_8582: GLenum, arg_8583: [*c]GLuint64EXT) void {
    return epoxy_glGetIntegerui64vNV.?(arg_8582, arg_8583);
}
pub inline fn glMultiTexCoord2dvARB(arg_8584: GLenum, arg_8585: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord2dvARB.?(arg_8584, arg_8585);
}
pub const GL_MODELVIEW10_ARB = 0x872A;
pub const GL_PIXEL_SUBSAMPLE_4444_SGIX = 0x85A2;
pub const GL_NORMAL_MAP_NV = 0x8511;
pub inline fn glSharpenTexFuncSGIS(arg_8586: GLenum, arg_8587: GLsizei, arg_8588: [*c]const GLfloat) void {
    return epoxy_glSharpenTexFuncSGIS.?(arg_8586, arg_8587, arg_8588);
}
pub const GL_LIGHT7 = 0x4007;
pub const GL_TASK_WORK_GROUP_SIZE_NV = 0x953F;
pub const GL_MAX_CONVOLUTION_HEIGHT_EXT = 0x801B;
pub inline fn glGetPathTexGenivNV(arg_8589: GLenum, arg_8590: GLenum, arg_8591: [*c]GLint) void {
    return epoxy_glGetPathTexGenivNV.?(arg_8589, arg_8590, arg_8591);
}
pub const GL_MAX_COARSE_FRAGMENT_SAMPLES_NV = 0x955F;
pub const GL_SAMPLE_LOCATION_PIXEL_GRID_HEIGHT_NV = 0x933F;
pub const GL_ATI_pixel_format_float = 1;
pub const GL_IMAGE_BUFFER_EXT = 0x9051;
pub inline fn glVertexAttrib4Nusv(arg_8592: GLuint, arg_8593: [*c]const GLushort) void {
    return epoxy_glVertexAttrib4Nusv.?(arg_8592, arg_8593);
}
pub const GL_MAX_TESS_CONTROL_SHADER_STORAGE_BLOCKS_EXT = 0x90D8;
pub const GL_MAX_SHADER_STORAGE_BLOCK_SIZE = 0x90DE;
pub const GL_IMAGE_CLASS_11_11_10 = 0x82C2;
pub const GL_3_BYTES = 0x1408;
pub inline fn glMultiDrawArrays(arg_8594: GLenum, arg_8595: [*c]const GLint, arg_8596: [*c]const GLsizei, arg_8597: GLsizei) void {
    return epoxy_glMultiDrawArrays.?(arg_8594, arg_8595, arg_8596, arg_8597);
}
pub inline fn glEdgeFlagFormatNV(arg_8598: GLsizei) void {
    return epoxy_glEdgeFlagFormatNV.?(arg_8598);
}
pub const GL_RGB16_SNORM = 0x8F9A;
pub const GL_CLIP_FAR_HINT_PGI = 0x1A221;
pub inline fn glGetFragDataLocation(arg_8599: GLuint, arg_8600: [*c]const GLchar) GLint {
    return epoxy_glGetFragDataLocation.?(arg_8599, arg_8600);
}
pub inline fn glClearBufferData(arg_8601: GLenum, arg_8602: GLenum, arg_8603: GLenum, arg_8604: GLenum, arg_8605: ?*const c_void) void {
    return epoxy_glClearBufferData.?(arg_8601, arg_8602, arg_8603, arg_8604, arg_8605);
}
pub const GL_FRAGMENT_PROGRAM_POSITION_MESA = 0x8BB0;
pub const GL_PIXEL_MAP_I_TO_I = 0x0C70;
pub inline fn glFramebufferTextureFaceARB(arg_8606: GLenum, arg_8607: GLenum, arg_8608: GLuint, arg_8609: GLint, arg_8610: GLenum) void {
    return epoxy_glFramebufferTextureFaceARB.?(arg_8606, arg_8607, arg_8608, arg_8609, arg_8610);
}
pub inline fn glGetListParameterfvSGIX(arg_8611: GLuint, arg_8612: GLenum, arg_8613: [*c]GLfloat) void {
    return epoxy_glGetListParameterfvSGIX.?(arg_8611, arg_8612, arg_8613);
}
pub inline fn glExtGetTexturesQCOM(arg_8614: [*c]GLuint, arg_8615: GLint, arg_8616: [*c]GLint) void {
    return epoxy_glExtGetTexturesQCOM.?(arg_8614, arg_8615, arg_8616);
}
pub const GL_MAX_TESS_GEN_LEVEL = 0x8E7E;
pub const GL_TESSELLATION_FACTOR_AMD = 0x9005;
pub const GL_FONT_MAX_ADVANCE_WIDTH_BIT_NV = 0x01000000;
pub const GL_WRITE_PIXEL_DATA_RANGE_LENGTH_NV = 0x887A;
pub inline fn glColorPointer(arg_8617: GLint, arg_8618: GLenum, arg_8619: GLsizei, arg_8620: ?*const c_void) void {
    return epoxy_glColorPointer.?(arg_8617, arg_8618, arg_8619, arg_8620);
}
pub inline fn glTexImage3DMultisampleCoverageNV(arg_8621: GLenum, arg_8622: GLsizei, arg_8623: GLsizei, arg_8624: GLint, arg_8625: GLsizei, arg_8626: GLsizei, arg_8627: GLsizei, arg_8628: GLboolean) void {
    return epoxy_glTexImage3DMultisampleCoverageNV.?(arg_8621, arg_8622, arg_8623, arg_8624, arg_8625, arg_8626, arg_8627, arg_8628);
}
pub const GL_RGBA_FLOAT_MODE_ATI = 0x8820;
pub const GL_MAX_COMBINED_GEOMETRY_UNIFORM_COMPONENTS_OES = 0x8A32;
pub const GL_PALETTE4_RGBA4_OES = 0x8B93;
pub inline fn glMultiTexCoord2dARB(arg_8629: GLenum, arg_8630: GLdouble, arg_8631: GLdouble) void {
    return epoxy_glMultiTexCoord2dARB.?(arg_8629, arg_8630, arg_8631);
}
pub inline fn glGetnPolygonStipple(arg_8632: GLsizei, arg_8633: [*c]GLubyte) void {
    return epoxy_glGetnPolygonStipple.?(arg_8632, arg_8633);
}
pub const GL_REPLACE_MIDDLE_SUN = 0x0002;
pub inline fn glColor4iv(arg_8634: [*c]const GLint) void {
    return epoxy_glColor4iv.?(arg_8634);
}
pub const GL_ARRAY_OBJECT_BUFFER_ATI = 0x8766;
pub const GL_STENCIL_BUFFER_BIT7_QCOM = 0x00800000;
pub const GL_EXT_framebuffer_object = 1;
pub const GL_MODELVIEW20_ARB = 0x8734;
pub inline fn glEndList() void {
    return epoxy_glEndList.?();
}
pub inline fn glTexCoord4bOES(arg_8635: GLbyte, arg_8636: GLbyte, arg_8637: GLbyte, arg_8638: GLbyte) void {
    return epoxy_glTexCoord4bOES.?(arg_8635, arg_8636, arg_8637, arg_8638);
}
pub inline fn glVertexBlendEnviATI(arg_8639: GLenum, arg_8640: GLint) void {
    return epoxy_glVertexBlendEnviATI.?(arg_8639, arg_8640);
}
pub const GL_SMOOTH_POINT_SIZE_GRANULARITY = 0x0B13;
pub inline fn glMapNamedBufferRange(arg_8641: GLuint, arg_8642: GLintptr, arg_8643: GLsizeiptr, arg_8644: GLbitfield) ?*c_void {
    return epoxy_glMapNamedBufferRange.?(arg_8641, arg_8642, arg_8643, arg_8644);
}
pub const GL_DOUBLE_MAT3x4 = 0x8F4C;
pub const GL_COMBINE_RGB = 0x8571;
pub const __XSAVEOPT__ = 1;
pub const GL_COMPRESSED_SRGB_ALPHA = 0x8C49;
pub inline fn glUniform4f(arg_8645: GLint, arg_8646: GLfloat, arg_8647: GLfloat, arg_8648: GLfloat, arg_8649: GLfloat) void {
    return epoxy_glUniform4f.?(arg_8645, arg_8646, arg_8647, arg_8648, arg_8649);
}
pub const GL_OUTPUT_TEXTURE_COORD14_EXT = 0x87AB;
pub const __UINTMAX_FMTX__ = "lX";
pub const GL_COLOR_ARRAY_PARALLEL_POINTERS_INTEL = 0x83F7;
pub const GL_IMAGE_2D_MULTISAMPLE_EXT = 0x9055;
pub const __AVX2__ = 1;
pub const GL_FRACTIONAL_ODD_OES = 0x8E7B;
pub const GL_NUM_DOWNSAMPLE_SCALES_IMG = 0x913D;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_OES = 0x8DD8;
pub const _STDC_PREDEF_H = 1;
pub const GL_ARRAY_BUFFER_BINDING = 0x8894;
pub const GL_OR_INVERTED = 0x150D;
pub inline fn glTexImage3DEXT(arg_8650: GLenum, arg_8651: GLint, arg_8652: GLenum, arg_8653: GLsizei, arg_8654: GLsizei, arg_8655: GLsizei, arg_8656: GLint, arg_8657: GLenum, arg_8658: GLenum, arg_8659: ?*const c_void) void {
    return epoxy_glTexImage3DEXT.?(arg_8650, arg_8651, arg_8652, arg_8653, arg_8654, arg_8655, arg_8656, arg_8657, arg_8658, arg_8659);
}
pub inline fn glFogCoordfEXT(arg_8660: GLfloat) void {
    return epoxy_glFogCoordfEXT.?(arg_8660);
}
pub const GL_CURRENT_RASTER_DISTANCE = 0x0B09;
pub const GL_MULTISAMPLE_BUFFER_BIT5_QCOM = 0x20000000;
pub inline fn glWindowPos3svMESA(arg_8661: [*c]const GLshort) void {
    return epoxy_glWindowPos3svMESA.?(arg_8661);
}
pub const GL_POINT_SPRITE_R_MODE_NV = 0x8863;
pub const GL_DSDT8_NV = 0x8709;
pub inline fn glLightModelxv(arg_8662: GLenum, arg_8663: [*c]const GLfixed) void {
    return epoxy_glLightModelxv.?(arg_8662, arg_8663);
}
pub const GL_INTERLEAVED_ATTRIBS = 0x8C8C;
pub const GL_STENCIL = 0x1802;
pub const GL_COMPRESSED_RGBA_ASTC_4x4x4_OES = 0x93C3;
pub const GL_UNPACK_SKIP_VOLUMES_SGIS = 0x8132;
pub const GL_VIEW_CLASS_EAC_RG11 = 0x9384;
pub const GL_DEPENDENT_HILO_TEXTURE_2D_NV = 0x8858;
pub const GL_OBJECT_DISTANCE_TO_LINE_SGIS = 0x81F3;
pub const GL_EXT_cull_vertex = 1;
pub inline fn glTextureColorMaskSGIS(arg_8664: GLboolean, arg_8665: GLboolean, arg_8666: GLboolean, arg_8667: GLboolean) void {
    return epoxy_glTextureColorMaskSGIS.?(arg_8664, arg_8665, arg_8666, arg_8667);
}
pub const GL_FRAMEBUFFER_BLEND = 0x828B;
pub const PRIoPTR = __PRIPTR_PREFIX ++ "o";
pub const GL_REFLECTION_MAP_OES = 0x8512;
pub inline fn glGetMultiTexParameterIuivEXT(arg_8668: GLenum, arg_8669: GLenum, arg_8670: GLenum, arg_8671: [*c]GLuint) void {
    return epoxy_glGetMultiTexParameterIuivEXT.?(arg_8668, arg_8669, arg_8670, arg_8671);
}
pub inline fn glVDPAUFiniNV() void {
    return epoxy_glVDPAUFiniNV.?();
}
pub inline fn glColor3hvNV(arg_8672: [*c]const GLhalfNV) void {
    return epoxy_glColor3hvNV.?(arg_8672);
}
pub const GL_PATH_COMMAND_COUNT_NV = 0x909D;
pub const GL_GREEN_MIN_CLAMP_INGR = 0x8561;
pub const GL_DOT_PRODUCT_TEXTURE_1D_NV = 0x885C;
pub const GL_SIGNED_IDENTITY_NV = 0x853C;
pub const __UINT_LEAST64_FMTo__ = "lo";
pub const GL_CLIP_DISTANCE7_EXT = 0x3007;
pub const GL_DEBUG_LOGGED_MESSAGES_KHR = 0x9145;
pub const GL_PROGRAM_TEMPORARIES_ARB = 0x88A4;
pub const GL_FOG_COORDINATE_EXT = 0x8451;
pub const GL_RASTER_MULTISAMPLE_EXT = 0x9327;
pub inline fn glVertexAttrib3sARB(arg_8673: GLuint, arg_8674: GLshort, arg_8675: GLshort, arg_8676: GLshort) void {
    return epoxy_glVertexAttrib3sARB.?(arg_8673, arg_8674, arg_8675, arg_8676);
}
pub const GL_VERTEX_ARRAY_LIST_IBM = 103070;
pub const GL_RGB32I_EXT = 0x8D83;
pub const GL_WARP_SIZE_NV = 0x9339;
pub const GL_RELATIVE_QUADRATIC_CURVE_TO_NV = 0x0B;
pub const GL_RENDERBUFFER_GREEN_SIZE_OES = 0x8D51;
pub const GL_TEXTURE26 = 0x84DA;
pub const GL_DEBUG_SOURCE_OTHER = 0x824B;
pub const GL_TEXTURE_VIEW_MIN_LEVEL_EXT = 0x82DB;
pub const GL_MESH_SUBROUTINE_NV = 0x957C;
pub const GL_ARB_robustness = 1;
pub const GL_SGIX_shadow = 1;
pub const GL_DOT2_ADD_ATI = 0x896C;
pub const GL_LINEARDODGE_NV = 0x92A4;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Z_EXT = 0x8519;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_Y = 0x8517;
pub const GL_PERFQUERY_COUNTER_DURATION_NORM_INTEL = 0x94F1;
pub const GL_SHADE_MODEL = 0x0B54;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM_ARB = 0x8E8C;
pub inline fn glRequestResidentProgramsNV(arg_8677: GLsizei, arg_8678: [*c]const GLuint) void {
    return epoxy_glRequestResidentProgramsNV.?(arg_8677, arg_8678);
}
pub const GL_ARB_robust_buffer_access_behavior = 1;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTERS = 0x92D3;
pub const GL_DEPTH_COMPONENT16_ARB = 0x81A5;
pub const __FLT_HAS_DENORM__ = 1;
pub const GL_SPIR_V_BINARY = 0x9552;
pub const GL_YCBAYCR8A_4224_NV = 0x9032;
pub const GL_SYNC_CL_EVENT_COMPLETE_ARB = 0x8241;
pub inline fn glGetTexFilterFuncSGIS(arg_8679: GLenum, arg_8680: GLenum, arg_8681: [*c]GLfloat) void {
    return epoxy_glGetTexFilterFuncSGIS.?(arg_8679, arg_8680, arg_8681);
}
pub inline fn glGetProgramPipelineInfoLogEXT(arg_8682: GLuint, arg_8683: GLsizei, arg_8684: [*c]GLsizei, arg_8685: [*c]GLchar) void {
    return epoxy_glGetProgramPipelineInfoLogEXT.?(arg_8682, arg_8683, arg_8684, arg_8685);
}
pub const GL_ALPHA12_EXT = 0x803D;
pub inline fn glTextureStorageMem2DEXT(arg_8686: GLuint, arg_8687: GLsizei, arg_8688: GLenum, arg_8689: GLsizei, arg_8690: GLsizei, arg_8691: GLuint, arg_8692: GLuint64) void {
    return epoxy_glTextureStorageMem2DEXT.?(arg_8686, arg_8687, arg_8688, arg_8689, arg_8690, arg_8691, arg_8692);
}
pub const GL_TEXTURE_DEFORMATION_BIT_SGIX = 0x00000001;
pub const GL_VERTEX_ARRAY_RANGE_APPLE = 0x851D;
pub inline fn glPixelZoom(arg_8693: GLfloat, arg_8694: GLfloat) void {
    return epoxy_glPixelZoom.?(arg_8693, arg_8694);
}
pub const GL_TRANSPOSE_NV = 0x862C;
pub inline fn glScissorIndexedNV(arg_8695: GLuint, arg_8696: GLint, arg_8697: GLint, arg_8698: GLsizei, arg_8699: GLsizei) void {
    return epoxy_glScissorIndexedNV.?(arg_8695, arg_8696, arg_8697, arg_8698, arg_8699);
}
pub const GL_LINE_STRIP_ADJACENCY = 0x000B;
pub inline fn glGetPerfMonitorCounterInfoAMD(arg_8700: GLuint, arg_8701: GLuint, arg_8702: GLenum, arg_8703: ?*c_void) void {
    return epoxy_glGetPerfMonitorCounterInfoAMD.?(arg_8700, arg_8701, arg_8702, arg_8703);
}
pub const GL_TESSELLATION_MODE_AMD = 0x9004;
pub const GL_MAX_PROGRAM_TEMPORARIES_ARB = 0x88A5;
pub const GL_INTERLACE_READ_INGR = 0x8568;
pub inline fn glProgramUniform2fv(arg_8704: GLuint, arg_8705: GLint, arg_8706: GLsizei, arg_8707: [*c]const GLfloat) void {
    return epoxy_glProgramUniform2fv.?(arg_8704, arg_8705, arg_8706, arg_8707);
}
pub inline fn glBlendEquationSeparate(arg_8708: GLenum, arg_8709: GLenum) void {
    return epoxy_glBlendEquationSeparate.?(arg_8708, arg_8709);
}
pub const GL_GENERATE_MIPMAP = 0x8191;
pub const GL_FRAMEBUFFER_DEFAULT_LAYERS_OES = 0x9312;
pub const GL_COMBINE_ALPHA_ARB = 0x8572;
pub inline fn glProgramUniform2dv(arg_8710: GLuint, arg_8711: GLint, arg_8712: GLsizei, arg_8713: [*c]const GLdouble) void {
    return epoxy_glProgramUniform2dv.?(arg_8710, arg_8711, arg_8712, arg_8713);
}
pub inline fn glTexCoordP1ui(arg_8714: GLenum, arg_8715: GLuint) void {
    return epoxy_glTexCoordP1ui.?(arg_8714, arg_8715);
}
pub inline fn glLoadTransposeMatrixf(arg_8716: [*c]const GLfloat) void {
    return epoxy_glLoadTransposeMatrixf.?(arg_8716);
}
pub inline fn glScaled(arg_8717: GLdouble, arg_8718: GLdouble, arg_8719: GLdouble) void {
    return epoxy_glScaled.?(arg_8717, arg_8718, arg_8719);
}
pub const GL_VARIANT_VALUE_EXT = 0x87E4;
pub inline fn glUniformHandleui64IMG(arg_8720: GLint, arg_8721: GLuint64) void {
    return epoxy_glUniformHandleui64IMG.?(arg_8720, arg_8721);
}
pub const __UINT_FAST64_FMTx__ = "lx";
pub const GL_SAMPLER_CUBE_SHADOW = 0x8DC5;
pub const INTPTR_MAX = @as(c_long, 9223372036854775807);
pub const __UINT_LEAST8_MAX__ = 255;
pub inline fn glCallList(arg_8722: GLuint) void {
    return epoxy_glCallList.?(arg_8722);
}
pub const GL_PATH_STROKE_MASK_NV = 0x9084;
pub inline fn glInvalidateBufferSubData(arg_8723: GLuint, arg_8724: GLintptr, arg_8725: GLsizeiptr) void {
    return epoxy_glInvalidateBufferSubData.?(arg_8723, arg_8724, arg_8725);
}
pub const INT_FAST64_MIN = -__INT64_C(9223372036854775807) - 1;
pub const GL_RG32UI = 0x823C;
pub const GL_MAP1_GRID_SEGMENTS = 0x0DD1;
pub const GL_ARB_timer_query = 1;
pub const GL_MAX_COMBINED_DIMENSIONS = 0x8282;
pub const __SLONG32_TYPE = c_int;
pub const GL_ARB_shader_objects = 1;
pub inline fn glCopyColorSubTableEXT(arg_8726: GLenum, arg_8727: GLsizei, arg_8728: GLint, arg_8729: GLint, arg_8730: GLsizei) void {
    return epoxy_glCopyColorSubTableEXT.?(arg_8726, arg_8727, arg_8728, arg_8729, arg_8730);
}
pub inline fn glRectd(arg_8731: GLdouble, arg_8732: GLdouble, arg_8733: GLdouble, arg_8734: GLdouble) void {
    return epoxy_glRectd.?(arg_8731, arg_8732, arg_8733, arg_8734);
}
pub const __DBL_MAX_EXP__ = 1024;
pub const GL_DRAW_BUFFER1_ATI = 0x8826;
pub inline fn glNamedProgramLocalParameterI4ivEXT(arg_8735: GLuint, arg_8736: GLenum, arg_8737: GLuint, arg_8738: [*c]const GLint) void {
    return epoxy_glNamedProgramLocalParameterI4ivEXT.?(arg_8735, arg_8736, arg_8737, arg_8738);
}
pub const GL_RGBA8_OES = 0x8058;
pub const GL_PIXEL_TILE_WIDTH_SGIX = 0x8140;
pub const SCNxMAX = __PRI64_PREFIX ++ "x";
pub const GL_COLOR_ATTACHMENT25 = 0x8CF9;
pub inline fn glGetUniformOffsetEXT(arg_8739: GLuint, arg_8740: GLint) GLintptr {
    return epoxy_glGetUniformOffsetEXT.?(arg_8739, arg_8740);
}
pub inline fn glColor3fVertex3fvSUN(arg_8741: [*c]const GLfloat, arg_8742: [*c]const GLfloat) void {
    return epoxy_glColor3fVertex3fvSUN.?(arg_8741, arg_8742);
}
pub inline fn glColorTableEXT(arg_8743: GLenum, arg_8744: GLenum, arg_8745: GLsizei, arg_8746: GLenum, arg_8747: GLenum, arg_8748: ?*const c_void) void {
    return epoxy_glColorTableEXT.?(arg_8743, arg_8744, arg_8745, arg_8746, arg_8747, arg_8748);
}
pub const GL_DRAW_BUFFER13_ATI = 0x8832;
pub inline fn glClipControlEXT(arg_8749: GLenum, arg_8750: GLenum) void {
    return epoxy_glClipControlEXT.?(arg_8749, arg_8750);
}
pub const GL_SAMPLER_CUBE_ARB = 0x8B60;
pub const GL_EXT_semaphore_win32 = 1;
pub const GL_HALF_FLOAT_ARB = 0x140B;
pub const GL_SAMPLE_ALPHA_TO_MASK_SGIS = 0x809E;
pub const GL_NV_stereo_view_rendering = 1;
pub const GL_SGX_BINARY_IMG = 0x8C0A;
pub const GL_COLOR_COMPONENTS = 0x8283;
pub const GL_RG16_SNORM_EXT = 0x8F99;
pub const GL_COLOR_ATTACHMENT7_NV = 0x8CE7;
pub const GL_EXT_texture_sRGB_RG8 = 1;
pub inline fn glVertexAttribI3i(arg_8751: GLuint, arg_8752: GLint, arg_8753: GLint, arg_8754: GLint) void {
    return epoxy_glVertexAttribI3i.?(arg_8751, arg_8752, arg_8753, arg_8754);
}
pub const GL_PROGRAM_ERROR_STRING_ARB = 0x8874;
pub inline fn glFogxv(arg_8755: GLenum, arg_8756: [*c]const GLfixed) void {
    return epoxy_glFogxv.?(arg_8755, arg_8756);
}
pub inline fn glBindFragDataLocationEXT(arg_8757: GLuint, arg_8758: GLuint, arg_8759: [*c]const GLchar) void {
    return epoxy_glBindFragDataLocationEXT.?(arg_8757, arg_8758, arg_8759);
}
pub const GL_UNIFORM_IS_ROW_MAJOR = 0x8A3E;
pub const GL_VERTEX_ARRAY_BINDING_APPLE = 0x85B5;
pub inline fn glProgramUniformMatrix4x2fvEXT(arg_8760: GLuint, arg_8761: GLint, arg_8762: GLsizei, arg_8763: GLboolean, arg_8764: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x2fvEXT.?(arg_8760, arg_8761, arg_8762, arg_8763, arg_8764);
}
pub const GL_LINE_TOKEN = 0x0702;
pub const GL_GEOMETRY_LINKED_VERTICES_OUT_OES = 0x8916;
pub const GL_MAX_HEIGHT = 0x827F;
pub const GL_VERTEX_ARRAY_RANGE_LENGTH_APPLE = 0x851E;
pub const GL_APPLE_specular_vector = 1;
pub inline fn glIsImageHandleResidentARB(arg_8765: GLuint64) GLboolean {
    return epoxy_glIsImageHandleResidentARB.?(arg_8765);
}
pub inline fn glVertex2bvOES(arg_8766: [*c]const GLbyte) void {
    return epoxy_glVertex2bvOES.?(arg_8766);
}
pub inline fn glVertexStream2fvATI(arg_8767: GLenum, arg_8768: [*c]const GLfloat) void {
    return epoxy_glVertexStream2fvATI.?(arg_8767, arg_8768);
}
pub const GL_CLIP_DISTANCE3 = 0x3003;
pub const GL_PRESERVE_ATI = 0x8762;
pub const GL_LESS = 0x0201;
pub const GL_LUMINANCE8_OES = 0x8040;
pub const GL_MAX_OPTIMIZED_VERTEX_SHADER_LOCALS_EXT = 0x87CE;
pub const GL_MAP2_VERTEX_4 = 0x0DB8;
pub const GL_MAX_VIEWPORTS_OES = 0x825B;
pub const GL_MAX_SPOT_EXPONENT_NV = 0x8505;
pub const GL_MAX_TEXTURE_IMAGE_UNITS = 0x8872;
pub const __STDC_VERSION__ = @as(c_long, 201112);
pub const GL_BOOL_VEC2_ARB = 0x8B57;
pub const PRIxLEAST64 = __PRI64_PREFIX ++ "x";
pub inline fn glGetLightxOES(arg_8769: GLenum, arg_8770: GLenum, arg_8771: [*c]GLfixed) void {
    return epoxy_glGetLightxOES.?(arg_8769, arg_8770, arg_8771);
}
pub const GL_NV_conservative_raster_pre_snap_triangles = 1;
pub inline fn glClearBufferSubData(arg_8772: GLenum, arg_8773: GLenum, arg_8774: GLintptr, arg_8775: GLsizeiptr, arg_8776: GLenum, arg_8777: GLenum, arg_8778: ?*const c_void) void {
    return epoxy_glClearBufferSubData.?(arg_8772, arg_8773, arg_8774, arg_8775, arg_8776, arg_8777, arg_8778);
}
pub const GL_REPLACE_EXT = 0x8062;
pub const GL_MAX_IMAGE_UNITS_EXT = 0x8F38;
pub inline fn glReadBufferIndexedEXT(arg_8779: GLenum, arg_8780: GLint) void {
    return epoxy_glReadBufferIndexedEXT.?(arg_8779, arg_8780);
}
pub const GL_ARB_texture_filter_anisotropic = 1;
pub inline fn glImportMemoryWin32HandleEXT(arg_8781: GLuint, arg_8782: GLuint64, arg_8783: GLenum, arg_8784: ?*c_void) void {
    return epoxy_glImportMemoryWin32HandleEXT.?(arg_8781, arg_8782, arg_8783, arg_8784);
}
pub const GL_MAP2_VERTEX_ATTRIB15_4_NV = 0x867F;
pub const GL_ARB_shader_viewport_layer_array = 1;
pub const GL_DEBUG_TYPE_PORTABILITY_ARB = 0x824F;
pub const SCNx16 = "hx";
pub const GL_VERTEX_ATTRIB_ARRAY_BARRIER_BIT = 0x00000001;
pub inline fn glIsSemaphoreEXT(arg_8785: GLuint) GLboolean {
    return epoxy_glIsSemaphoreEXT.?(arg_8785);
}
pub const GL_CONSTANT_COLOR_EXT = 0x8001;
pub const GL_TEXTURE19_ARB = 0x84D3;
pub const GL_VERTEX_ATTRIB_MAP1_DOMAIN_APPLE = 0x8A05;
pub const GL_ARB_texture_border_clamp = 1;
pub inline fn glVertex3i(arg_8786: GLint, arg_8787: GLint, arg_8788: GLint) void {
    return epoxy_glVertex3i.?(arg_8786, arg_8787, arg_8788);
}
pub const GL_INTERNALFORMAT_GREEN_TYPE = 0x8279;
pub const GL_SAMPLER_1D_ARRAY = 0x8DC0;
pub const __UINT_LEAST64_FMTX__ = "lX";
pub const GL_TEXTURE21 = 0x84D5;
pub inline fn glEvalCoord2xvOES(arg_8789: [*c]const GLfixed) void {
    return epoxy_glEvalCoord2xvOES.?(arg_8789);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_STENCIL_SIZE = 0x8217;
pub const GL_TEXTURE_DEPTH_TYPE_ARB = 0x8C16;
pub inline fn glMaxShaderCompilerThreadsARB(arg_8790: GLuint) void {
    return epoxy_glMaxShaderCompilerThreadsARB.?(arg_8790);
}
pub const GL_MAX_DRAW_BUFFERS_NV = 0x8824;
pub const GL_QUADS_EXT = 0x0007;
pub const GL_IBM_cull_vertex = 1;
pub const __INT_FAST32_FMTd__ = "d";
pub inline fn glGetVertexAttribivNV(arg_8791: GLuint, arg_8792: GLenum, arg_8793: [*c]GLint) void {
    return epoxy_glGetVertexAttribivNV.?(arg_8791, arg_8792, arg_8793);
}
pub inline fn glUniform1d(arg_8794: GLint, arg_8795: GLdouble) void {
    return epoxy_glUniform1d.?(arg_8794, arg_8795);
}
pub const GL_IMAGE_BINDING_LAYERED_EXT = 0x8F3C;
pub inline fn glFramebufferTexture2DDownsampleIMG(arg_8796: GLenum, arg_8797: GLenum, arg_8798: GLenum, arg_8799: GLuint, arg_8800: GLint, arg_8801: GLint, arg_8802: GLint) void {
    return epoxy_glFramebufferTexture2DDownsampleIMG.?(arg_8796, arg_8797, arg_8798, arg_8799, arg_8800, arg_8801, arg_8802);
}
pub const GL_MAX_EVAL_ORDER = 0x0D30;
pub inline fn glTexGeniOES(arg_8803: GLenum, arg_8804: GLenum, arg_8805: GLint) void {
    return epoxy_glTexGeniOES.?(arg_8803, arg_8804, arg_8805);
}
pub inline fn glRasterPos3xvOES(arg_8806: [*c]const GLfixed) void {
    return epoxy_glRasterPos3xvOES.?(arg_8806);
}
pub const GL_EXT_shader_texture_lod = 1;
pub const GL_TEXTURE_GEN_MODE_OES = 0x2500;
pub const GL_DOT3_RGB_EXT = 0x8740;
pub inline fn glTexBufferOES(arg_8807: GLenum, arg_8808: GLenum, arg_8809: GLuint) void {
    return epoxy_glTexBufferOES.?(arg_8807, arg_8808, arg_8809);
}
pub const SCNo64 = __PRI64_PREFIX ++ "o";
pub inline fn glVertexAttrib4svNV(arg_8810: GLuint, arg_8811: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4svNV.?(arg_8810, arg_8811);
}
pub const GL_COLOR_ARRAY_TYPE = 0x8082;
pub inline fn glSamplerParameterIuivOES(arg_8812: GLuint, arg_8813: GLenum, arg_8814: [*c]const GLuint) void {
    return epoxy_glSamplerParameterIuivOES.?(arg_8812, arg_8813, arg_8814);
}
pub const GL_FRAMEBUFFER_BINDING_EXT = 0x8CA6;
pub const GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM_ARB = 0x8E8D;
pub const __INT_FAST16_MAX__ = 32767;
pub const GL_LUMINANCE16F_EXT = 0x881E;
pub const GL_NV_mesh_shader = 1;
pub const GL_2_BYTES = 0x1407;
pub const GL_CONSTANT_EXT = 0x8576;
pub inline fn glGetTexParameteriv(arg_8815: GLenum, arg_8816: GLenum, arg_8817: [*c]GLint) void {
    return epoxy_glGetTexParameteriv.?(arg_8815, arg_8816, arg_8817);
}
pub const GL_DEPTH24_STENCIL8_EXT = 0x88F0;
pub const GL_PRIMITIVE_RESTART_INDEX_NV = 0x8559;
pub inline fn glGetCombinerInputParameterivNV(arg_8818: GLenum, arg_8819: GLenum, arg_8820: GLenum, arg_8821: GLenum, arg_8822: [*c]GLint) void {
    return epoxy_glGetCombinerInputParameterivNV.?(arg_8818, arg_8819, arg_8820, arg_8821, arg_8822);
}
pub inline fn glGetClipPlanex(arg_8823: GLenum, arg_8824: [*c]GLfixed) void {
    return epoxy_glGetClipPlanex.?(arg_8823, arg_8824);
}
pub inline fn glVertexStream4fvATI(arg_8825: GLenum, arg_8826: [*c]const GLfloat) void {
    return epoxy_glVertexStream4fvATI.?(arg_8825, arg_8826);
}
pub const GL_NORMAL_MAP_EXT = 0x8511;
pub const SCNo8 = "hho";
pub const GL_2D = 0x0600;
pub inline fn glCopyTexSubImage3D(arg_8827: GLenum, arg_8828: GLint, arg_8829: GLint, arg_8830: GLint, arg_8831: GLint, arg_8832: GLint, arg_8833: GLint, arg_8834: GLsizei, arg_8835: GLsizei) void {
    return epoxy_glCopyTexSubImage3D.?(arg_8827, arg_8828, arg_8829, arg_8830, arg_8831, arg_8832, arg_8833, arg_8834, arg_8835);
}
pub const GL_MAX_PROGRAM_ENV_PARAMETERS_ARB = 0x88B5;
pub inline fn __glibc_likely(cond: var) @TypeOf(__builtin_expect(cond, 1)) {
    return __builtin_expect(cond, 1);
}
pub const SCNdLEAST8 = "hhd";
pub const GL_MAX_GEOMETRY_IMAGE_UNIFORMS = 0x90CD;
pub const GL_COMPRESSED_TEXTURE_FORMATS = 0x86A3;
pub const GL_UNSIGNED_SHORT_5_5_5_1_EXT = 0x8034;
pub const GL_ALPHA_INTEGER_EXT = 0x8D97;
pub const GL_AMD_texture_gather_bias_lod = 1;
pub inline fn glGetVertexArrayIndexediv(arg_8836: GLuint, arg_8837: GLuint, arg_8838: GLenum, arg_8839: [*c]GLint) void {
    return epoxy_glGetVertexArrayIndexediv.?(arg_8836, arg_8837, arg_8838, arg_8839);
}
pub const GL_DEPTH_BUFFER_BIT6_QCOM = 0x00004000;
pub inline fn glColor3ui(arg_8840: GLuint, arg_8841: GLuint, arg_8842: GLuint) void {
    return epoxy_glColor3ui.?(arg_8840, arg_8841, arg_8842);
}
pub const GL_PERFORMANCE_MONITOR_AMD = 0x9152;
pub const GL_AMD_framebuffer_sample_positions = 1;
pub const GL_EXT_shader_implicit_conversions = 1;
pub const GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT = 0x8CD7;
pub inline fn glMulticastViewportPositionWScaleNVX(arg_8843: GLuint, arg_8844: GLuint, arg_8845: GLfloat, arg_8846: GLfloat) void {
    return epoxy_glMulticastViewportPositionWScaleNVX.?(arg_8843, arg_8844, arg_8845, arg_8846);
}
pub const GL_OUTPUT_TEXTURE_COORD0_EXT = 0x879D;
pub const GL_SECONDARY_INTERPOLATOR_ATI = 0x896D;
pub inline fn glVertexArrayVertexAttribLOffsetEXT(arg_8847: GLuint, arg_8848: GLuint, arg_8849: GLuint, arg_8850: GLint, arg_8851: GLenum, arg_8852: GLsizei, arg_8853: GLintptr) void {
    return epoxy_glVertexArrayVertexAttribLOffsetEXT.?(arg_8847, arg_8848, arg_8849, arg_8850, arg_8851, arg_8852, arg_8853);
}
pub const GL_NV_light_max_exponent = 1;
pub const __INT_FAST8_FMTd__ = "hhd";
pub inline fn glColor3f(arg_8854: GLfloat, arg_8855: GLfloat, arg_8856: GLfloat) void {
    return epoxy_glColor3f.?(arg_8854, arg_8855, arg_8856);
}
pub const GL_CCW = 0x0901;
pub const GL_SAMPLE_MASK_VALUE_SGIS = 0x80AA;
pub inline fn glVertexArrayBindVertexBufferEXT(arg_8857: GLuint, arg_8858: GLuint, arg_8859: GLuint, arg_8860: GLintptr, arg_8861: GLsizei) void {
    return epoxy_glVertexArrayBindVertexBufferEXT.?(arg_8857, arg_8858, arg_8859, arg_8860, arg_8861);
}
pub inline fn glVariantsvEXT(arg_8862: GLuint, arg_8863: [*c]const GLshort) void {
    return epoxy_glVariantsvEXT.?(arg_8862, arg_8863);
}
pub const GL_WEIGHTED_AVERAGE_ARB = 0x9367;
pub inline fn glVertexAttribL3i64vNV(arg_8864: GLuint, arg_8865: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL3i64vNV.?(arg_8864, arg_8865);
}
pub inline fn glVideoCaptureStreamParameterdvNV(arg_8866: GLuint, arg_8867: GLuint, arg_8868: GLenum, arg_8869: [*c]const GLdouble) void {
    return epoxy_glVideoCaptureStreamParameterdvNV.?(arg_8866, arg_8867, arg_8868, arg_8869);
}
pub inline fn glProgramUniformMatrix4x3fv(arg_8870: GLuint, arg_8871: GLint, arg_8872: GLsizei, arg_8873: GLboolean, arg_8874: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix4x3fv.?(arg_8870, arg_8871, arg_8872, arg_8873, arg_8874);
}
pub const GL_INTERNALFORMAT_RED_SIZE = 0x8271;
pub const GL_SAMPLER_CUBE_MAP_ARRAY_SHADOW_EXT = 0x900D;
pub const GL_CURRENT_BINORMAL_EXT = 0x843C;
pub const GL_EXT_422_pixels = 1;
pub const GL_NORMAL_ARRAY_COUNT_EXT = 0x8080;
pub const GL_RGB4_EXT = 0x804F;
pub inline fn glGetUniformui64vNV(arg_8875: GLuint, arg_8876: GLint, arg_8877: [*c]GLuint64EXT) void {
    return epoxy_glGetUniformui64vNV.?(arg_8875, arg_8876, arg_8877);
}
pub const GL_STENCIL_INDEX = 0x1901;
pub const GL_INT_SAMPLER_CUBE = 0x8DCC;
pub const GL_COMPRESSED_SRGB_S3TC_DXT1_NV = 0x8C4C;
pub const GL_SKIP_DECODE_EXT = 0x8A4A;
pub const GL_DEPTH_CLAMP_EXT = 0x864F;
pub const GL_ARB_map_buffer_alignment = 1;
pub inline fn glGetMultiTexLevelParameterivEXT(arg_8878: GLenum, arg_8879: GLenum, arg_8880: GLint, arg_8881: GLenum, arg_8882: [*c]GLint) void {
    return epoxy_glGetMultiTexLevelParameterivEXT.?(arg_8878, arg_8879, arg_8880, arg_8881, arg_8882);
}
pub const GL_RGBA_FLOAT16_APPLE = 0x881A;
pub inline fn glProgramUniform4ivEXT(arg_8883: GLuint, arg_8884: GLint, arg_8885: GLsizei, arg_8886: [*c]const GLint) void {
    return epoxy_glProgramUniform4ivEXT.?(arg_8883, arg_8884, arg_8885, arg_8886);
}
pub const GL_MODELVIEW_PROJECTION_NV = 0x8629;
pub const GL_RENDERBUFFER_ALPHA_SIZE_OES = 0x8D53;
pub const GL_EYE_LINEAR = 0x2400;
pub inline fn glVertexAttrib3fv(arg_8887: GLuint, arg_8888: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib3fv.?(arg_8887, arg_8888);
}
pub const GL_EXT_texture_compression_s3tc_srgb = 1;
pub inline fn glGetnUniformui64vARB(arg_8889: GLuint, arg_8890: GLint, arg_8891: GLsizei, arg_8892: [*c]GLuint64) void {
    return epoxy_glGetnUniformui64vARB.?(arg_8889, arg_8890, arg_8891, arg_8892);
}
pub inline fn glRenderbufferStorageMultisampleEXT(arg_8893: GLenum, arg_8894: GLsizei, arg_8895: GLenum, arg_8896: GLsizei, arg_8897: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleEXT.?(arg_8893, arg_8894, arg_8895, arg_8896, arg_8897);
}
pub inline fn glTranslatexOES(arg_8898: GLfixed, arg_8899: GLfixed, arg_8900: GLfixed) void {
    return epoxy_glTranslatexOES.?(arg_8898, arg_8899, arg_8900);
}
pub const GL_GEOMETRY_INPUT_TYPE_EXT = 0x8DDB;
pub const GL_OUTPUT_TEXTURE_COORD3_EXT = 0x87A0;
pub inline fn glExtGetTexSubImageQCOM(arg_8901: GLenum, arg_8902: GLint, arg_8903: GLint, arg_8904: GLint, arg_8905: GLint, arg_8906: GLsizei, arg_8907: GLsizei, arg_8908: GLsizei, arg_8909: GLenum, arg_8910: GLenum, arg_8911: ?*c_void) void {
    return epoxy_glExtGetTexSubImageQCOM.?(arg_8901, arg_8902, arg_8903, arg_8904, arg_8905, arg_8906, arg_8907, arg_8908, arg_8909, arg_8910, arg_8911);
}
pub const GL_UNPACK_CONSTANT_DATA_SUNX = 0x81D5;
pub inline fn glTextureStorage1D(arg_8912: GLuint, arg_8913: GLsizei, arg_8914: GLenum, arg_8915: GLsizei) void {
    return epoxy_glTextureStorage1D.?(arg_8912, arg_8913, arg_8914, arg_8915);
}
pub const PRIdFAST64 = __PRI64_PREFIX ++ "d";
pub inline fn glFogxvOES(arg_8916: GLenum, arg_8917: [*c]const GLfixed) void {
    return epoxy_glFogxvOES.?(arg_8916, arg_8917);
}
pub const GL_RGB_INTEGER_EXT = 0x8D98;
pub const GL_BOOL_VEC2 = 0x8B57;
pub const GL_DRIVER_UUID_EXT = 0x9598;
pub const GL_MAX_TESS_CONTROL_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CD;
pub const GL_EVAL_VERTEX_ATTRIB13_NV = 0x86D3;
pub const GL_DEBUG_OUTPUT_KHR = 0x92E0;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_EXT = 0x900F;
pub const GL_RED_INTEGER = 0x8D94;
pub inline fn glGetImageTransformParameterfvHP(arg_8918: GLenum, arg_8919: GLenum, arg_8920: [*c]GLfloat) void {
    return epoxy_glGetImageTransformParameterfvHP.?(arg_8918, arg_8919, arg_8920);
}
pub inline fn glGetnCompressedTexImage(arg_8921: GLenum, arg_8922: GLint, arg_8923: GLsizei, arg_8924: ?*c_void) void {
    return epoxy_glGetnCompressedTexImage.?(arg_8921, arg_8922, arg_8923, arg_8924);
}
pub inline fn glLoadTransposeMatrixd(arg_8925: [*c]const GLdouble) void {
    return epoxy_glLoadTransposeMatrixd.?(arg_8925);
}
pub const GL_EXT_sRGB = 1;
pub const GL_MAX_TESS_CONTROL_IMAGE_UNIFORMS_EXT = 0x90CB;
pub const GL_DST_OUT_NV = 0x928D;
pub const GL_SOURCE2_RGB_EXT = 0x8582;
pub const GL_REFERENCED_BY_TESS_CONTROL_SHADER_OES = 0x9307;
pub const SCNx32 = "x";
pub inline fn glVertexAttribIFormat(arg_8926: GLuint, arg_8927: GLint, arg_8928: GLenum, arg_8929: GLuint) void {
    return epoxy_glVertexAttribIFormat.?(arg_8926, arg_8927, arg_8928, arg_8929);
}
pub inline fn glGetnUniformi64vARB(arg_8930: GLuint, arg_8931: GLint, arg_8932: GLsizei, arg_8933: [*c]GLint64) void {
    return epoxy_glGetnUniformi64vARB.?(arg_8930, arg_8931, arg_8932, arg_8933);
}
pub const GL_REPLACEMENT_CODE_ARRAY_SUN = 0x85C0;
pub const GL_DMP_shader_binary = 1;
pub const GL_RENDERBUFFER_INTERNAL_FORMAT_OES = 0x8D44;
pub inline fn glMultiTexGenfvEXT(arg_8934: GLenum, arg_8935: GLenum, arg_8936: GLenum, arg_8937: [*c]const GLfloat) void {
    return epoxy_glMultiTexGenfvEXT.?(arg_8934, arg_8935, arg_8936, arg_8937);
}
pub const INT_FAST8_MAX = 127;
pub const __UINT_LEAST16_FMTx__ = "hx";
pub const _ATFILE_SOURCE = 1;
pub const GL_MAX_TEXTURE_UNITS_ARB = 0x84E2;
pub const GL_OES_texture_float_linear = 1;
pub const GL_PROGRAM_OBJECT_EXT = 0x8B40;
pub inline fn glAlphaFunc(arg_8938: GLenum, arg_8939: GLfloat) void {
    return epoxy_glAlphaFunc.?(arg_8938, arg_8939);
}
pub const GL_STENCIL_INDEX4_OES = 0x8D47;
pub const GL_RGBA_INTEGER_MODE_EXT = 0x8D9E;
pub const GL_IMAGE_FORMAT_COMPATIBILITY_TYPE = 0x90C7;
pub const GL_STENCIL_SAMPLES_NV = 0x932E;
pub const GL_HIGH_FLOAT = 0x8DF2;
pub const GL_VERTEX_ATTRIB_MAP2_COEFF_APPLE = 0x8A07;
pub inline fn glVertexArrayVertexAttribLFormatEXT(arg_8940: GLuint, arg_8941: GLuint, arg_8942: GLint, arg_8943: GLenum, arg_8944: GLuint) void {
    return epoxy_glVertexArrayVertexAttribLFormatEXT.?(arg_8940, arg_8941, arg_8942, arg_8943, arg_8944);
}
pub inline fn glVertexAttrib1hvNV(arg_8945: GLuint, arg_8946: [*c]const GLhalfNV) void {
    return epoxy_glVertexAttrib1hvNV.?(arg_8945, arg_8946);
}
pub inline fn glCopyMultiTexImage1DEXT(arg_8947: GLenum, arg_8948: GLenum, arg_8949: GLint, arg_8950: GLenum, arg_8951: GLint, arg_8952: GLint, arg_8953: GLsizei, arg_8954: GLint) void {
    return epoxy_glCopyMultiTexImage1DEXT.?(arg_8947, arg_8948, arg_8949, arg_8950, arg_8951, arg_8952, arg_8953, arg_8954);
}
pub const GL_VIRTUAL_PAGE_SIZE_Y_AMD = 0x9196;
pub const PRIo32 = "o";
pub inline fn glMatrixIndexubvARB(arg_8955: GLint, arg_8956: [*c]const GLubyte) void {
    return epoxy_glMatrixIndexubvARB.?(arg_8955, arg_8956);
}
pub const GL_SHADER_PIXEL_LOCAL_STORAGE_EXT = 0x8F64;
pub inline fn glGetBooleani_v(arg_8957: GLenum, arg_8958: GLuint, arg_8959: [*c]GLboolean) void {
    return epoxy_glGetBooleani_v.?(arg_8957, arg_8958, arg_8959);
}
pub inline fn glPathStringNV(arg_8960: GLuint, arg_8961: GLenum, arg_8962: GLsizei, arg_8963: ?*const c_void) void {
    return epoxy_glPathStringNV.?(arg_8960, arg_8961, arg_8962, arg_8963);
}
pub const GL_ELEMENT_ARRAY_UNIFIED_NV = 0x8F1F;
pub const GL_BIAS_BY_NEGATIVE_ONE_HALF_NV = 0x8541;
pub const GL_VERSION_3_3 = 1;
pub inline fn glFramebufferTextureARB(arg_8964: GLenum, arg_8965: GLenum, arg_8966: GLuint, arg_8967: GLint) void {
    return epoxy_glFramebufferTextureARB.?(arg_8964, arg_8965, arg_8966, arg_8967);
}
pub inline fn glNormalStream3bATI(arg_8968: GLenum, arg_8969: GLbyte, arg_8970: GLbyte, arg_8971: GLbyte) void {
    return epoxy_glNormalStream3bATI.?(arg_8968, arg_8969, arg_8970, arg_8971);
}
pub const GL_PACK_ROW_BYTES_APPLE = 0x8A15;
pub const GL_UNSIGNED_INT_IMAGE_2D_RECT_EXT = 0x9065;
pub const GL_DEPTH_BITS = 0x0D56;
pub inline fn glBindImageTextures(arg_8972: GLuint, arg_8973: GLsizei, arg_8974: [*c]const GLuint) void {
    return epoxy_glBindImageTextures.?(arg_8972, arg_8973, arg_8974);
}
pub const GL_COMBINE_EXT = 0x8570;
pub inline fn glFragmentLightModelfSGIX(arg_8975: GLenum, arg_8976: GLfloat) void {
    return epoxy_glFragmentLightModelfSGIX.?(arg_8975, arg_8976);
}
pub inline fn glNamedBufferStorageMemEXT(arg_8977: GLuint, arg_8978: GLsizeiptr, arg_8979: GLuint, arg_8980: GLuint64) void {
    return epoxy_glNamedBufferStorageMemEXT.?(arg_8977, arg_8978, arg_8979, arg_8980);
}
pub inline fn glBindBufferBase(arg_8981: GLenum, arg_8982: GLuint, arg_8983: GLuint) void {
    return epoxy_glBindBufferBase.?(arg_8981, arg_8982, arg_8983);
}
pub inline fn glWindowPos2ivARB(arg_8984: [*c]const GLint) void {
    return epoxy_glWindowPos2ivARB.?(arg_8984);
}
pub const GL_EXT_vertex_weighting = 1;
pub const GL_CURRENT_FOG_COORDINATE_EXT = 0x8453;
pub inline fn glVertexPointerListIBM(arg_8985: GLint, arg_8986: GLenum, arg_8987: GLint, arg_8988: [*c]?*const c_void, arg_8989: GLint) void {
    return epoxy_glVertexPointerListIBM.?(arg_8985, arg_8986, arg_8987, arg_8988, arg_8989);
}
pub const GL_STENCIL_INDEX16 = 0x8D49;
pub const GL_SHADING_RATE_1_INVOCATION_PER_2X4_PIXELS_NV = 0x9569;
pub inline fn glGetUniformivARB(arg_8990: GLhandleARB, arg_8991: GLint, arg_8992: [*c]GLint) void {
    return epoxy_glGetUniformivARB.?(arg_8990, arg_8991, arg_8992);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR = 0x93D5;
pub const GL_FOG_MODE = 0x0B65;
pub const GL_T2F_C4UB_V3F = 0x2A29;
pub const GL_GEQUAL = 0x0206;
pub inline fn glColor3xOES(arg_8993: GLfixed, arg_8994: GLfixed, arg_8995: GLfixed) void {
    return epoxy_glColor3xOES.?(arg_8993, arg_8994, arg_8995);
}
pub const GL_ACCUM_ADJACENT_PAIRS_NV = 0x90AD;
pub const GL_DEBUG_SEVERITY_LOW_AMD = 0x9148;
pub inline fn glResetMemoryObjectParameterNV(arg_8996: GLuint, arg_8997: GLenum) void {
    return epoxy_glResetMemoryObjectParameterNV.?(arg_8996, arg_8997);
}
pub const __UINT32_FMTu__ = "u";
pub const GL_ARB_transform_feedback3 = 1;
pub inline fn glGetnUniformivKHR(arg_8998: GLuint, arg_8999: GLint, arg_9000: GLsizei, arg_9001: [*c]GLint) void {
    return epoxy_glGetnUniformivKHR.?(arg_8998, arg_8999, arg_9000, arg_9001);
}
pub const GL_QUAD_ALPHA8_SGIS = 0x811F;
pub const GL_OPERAND0_ALPHA_ARB = 0x8598;
pub const GL_COLOR_ATTACHMENT2_NV = 0x8CE2;
pub const GL_TESS_GEN_POINT_MODE_OES = 0x8E79;
pub inline fn glDeleteSamplers(arg_9002: GLsizei, arg_9003: [*c]const GLuint) void {
    return epoxy_glDeleteSamplers.?(arg_9002, arg_9003);
}
pub inline fn glGenPerfMonitorsAMD(arg_9004: GLsizei, arg_9005: [*c]GLuint) void {
    return epoxy_glGenPerfMonitorsAMD.?(arg_9004, arg_9005);
}
pub const GL_IMAGE_ROTATE_ANGLE_HP = 0x8159;
pub const GL_Z_EXT = 0x87D7;
pub const GL_TEXTURE_CUBE_MAP_EXT = 0x8513;
pub const GL_POINT_SIZE_ARRAY_STRIDE_OES = 0x898B;
pub const GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_ARB = 0x8E8F;
pub const GL_DEBUG_SOURCE_THIRD_PARTY_ARB = 0x8249;
pub const GL_REG_24_ATI = 0x8939;
pub inline fn glNamedFramebufferSampleLocationsfvNV(arg_9006: GLuint, arg_9007: GLuint, arg_9008: GLsizei, arg_9009: [*c]const GLfloat) void {
    return epoxy_glNamedFramebufferSampleLocationsfvNV.?(arg_9006, arg_9007, arg_9008, arg_9009);
}
pub const GL_TEXTURE_LOD_BIAS_EXT = 0x8501;
pub const __GCC_ATOMIC_BOOL_LOCK_FREE = 2;
pub inline fn glGetTexParameterIuivOES(arg_9010: GLenum, arg_9011: GLenum, arg_9012: [*c]GLuint) void {
    return epoxy_glGetTexParameterIuivOES.?(arg_9010, arg_9011, arg_9012);
}
pub const GL_BLEND_EQUATION_OES = 0x8009;
pub const GL_VIBRANCE_SCALE_NV = 0x8713;
pub const GL_MAX_ELEMENTS_INDICES_EXT = 0x80E9;
pub const GL_CLIP_DISTANCE1_APPLE = 0x3001;
pub const GL_EXT_unpack_subimage = 1;
pub const GL_COMPRESSED_SIGNED_RED_RGTC1_EXT = 0x8DBC;
pub inline fn glGetQueryObjectuivARB(arg_9013: GLuint, arg_9014: GLenum, arg_9015: [*c]GLuint) void {
    return epoxy_glGetQueryObjectuivARB.?(arg_9013, arg_9014, arg_9015);
}
pub const GL_ONE_MINUS_SRC1_COLOR = 0x88FA;
pub const GL_INTENSITY8I_EXT = 0x8D91;
pub const GL_EXT_clip_cull_distance = 1;
pub const GL_INTENSITY12 = 0x804C;
pub const GL_MAP2_TEXTURE_COORD_1 = 0x0DB3;
pub const GL_COVERAGE_ALL_FRAGMENTS_NV = 0x8ED5;
pub const GL_HSL_SATURATION_KHR = 0x92AE;
pub const GL_FRAMEBUFFER_SAMPLE_LOCATION_PIXEL_GRID_NV = 0x9343;
pub const GL_FIELD_LOWER_NV = 0x9023;
pub inline fn glDisableDriverControlQCOM(arg_9016: GLuint) void {
    return epoxy_glDisableDriverControlQCOM.?(arg_9016);
}
pub const GL_OP_INDEX_EXT = 0x8782;
pub const GL_FRAGMENT_MATERIAL_EXT = 0x8349;
pub const GL_MULTISAMPLE_FILTER_HINT_NV = 0x8534;
pub const GL_TILE_RASTER_ORDER_INCREASING_X_MESA = 0x8BB9;
pub const GL_MATRIX9_ARB = 0x88C9;
pub const GL_PROVOKING_VERTEX_EXT = 0x8E4F;
pub inline fn glFramebufferSamplePositionsfvAMD(arg_9017: GLenum, arg_9018: GLuint, arg_9019: GLuint, arg_9020: [*c]const GLfloat) void {
    return epoxy_glFramebufferSamplePositionsfvAMD.?(arg_9017, arg_9018, arg_9019, arg_9020);
}
pub const GL_HILO16_NV = 0x86F8;
pub const GL_VIDEO_BUFFER_BINDING_NV = 0x9021;
pub const GL_AUX0 = 0x0409;
pub const GL_EVAL_VERTEX_ATTRIB1_NV = 0x86C7;
pub const GL_TEXTURE13_ARB = 0x84CD;
pub const GL_UNSIGNED_SHORT_5_6_5_REV = 0x8364;
pub inline fn glMakeNamedBufferNonResidentNV(arg_9021: GLuint) void {
    return epoxy_glMakeNamedBufferNonResidentNV.?(arg_9021);
}
pub inline fn glClearNamedFramebufferuiv(arg_9022: GLuint, arg_9023: GLenum, arg_9024: GLint, arg_9025: [*c]const GLuint) void {
    return epoxy_glClearNamedFramebufferuiv.?(arg_9022, arg_9023, arg_9024, arg_9025);
}
pub inline fn glMultiDrawArraysIndirectEXT(arg_9026: GLenum, arg_9027: ?*const c_void, arg_9028: GLsizei, arg_9029: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectEXT.?(arg_9026, arg_9027, arg_9028, arg_9029);
}
pub const GL_OP_MOV_EXT = 0x8799;
pub const GL_COMPRESSED_RGBA_ASTC_6x5_KHR = 0x93B3;
pub const GL_TEXTURE_CLIPMAP_VIRTUAL_DEPTH_SGIX = 0x8174;
pub const GL_SHADING_RATE_1_INVOCATION_PER_4X2_PIXELS_NV = 0x956A;
pub const GL_QUERY_DEPTH_BOUNDS_FAIL_EVENT_BIT_AMD = 0x00000008;
pub inline fn glNormal3iv(arg_9030: [*c]const GLint) void {
    return epoxy_glNormal3iv.?(arg_9030);
}
pub inline fn glMultiTexCoord3fARB(arg_9031: GLenum, arg_9032: GLfloat, arg_9033: GLfloat, arg_9034: GLfloat) void {
    return epoxy_glMultiTexCoord3fARB.?(arg_9031, arg_9032, arg_9033, arg_9034);
}
pub const GL_TEXTURE_COMPARE_FAIL_VALUE_ARB = 0x80BF;
pub const __WCHAR_MAX = __WCHAR_MAX__;
pub const GL_FRAGMENT_LIGHTING_SGIX = 0x8400;
pub inline fn glGetConvolutionParameteriv(arg_9035: GLenum, arg_9036: GLenum, arg_9037: [*c]GLint) void {
    return epoxy_glGetConvolutionParameteriv.?(arg_9035, arg_9036, arg_9037);
}
pub inline fn glGetVariantArrayObjectivATI(arg_9038: GLuint, arg_9039: GLenum, arg_9040: [*c]GLint) void {
    return epoxy_glGetVariantArrayObjectivATI.?(arg_9038, arg_9039, arg_9040);
}
pub inline fn glNamedBufferDataEXT(arg_9041: GLuint, arg_9042: GLsizeiptr, arg_9043: ?*const c_void, arg_9044: GLenum) void {
    return epoxy_glNamedBufferDataEXT.?(arg_9041, arg_9042, arg_9043, arg_9044);
}
pub const GL_ATI_separate_stencil = 1;
pub const __NLINK_T_TYPE = __SYSCALL_ULONG_TYPE;
pub const GL_CLIPPING_INPUT_PRIMITIVES = 0x82F6;
pub const GL_DEBUG_OUTPUT_SYNCHRONOUS = 0x8242;
pub const GL_TEXTURE_STORAGE_HINT_APPLE = 0x85BC;
pub inline fn glTexStorage3DEXT(arg_9045: GLenum, arg_9046: GLsizei, arg_9047: GLenum, arg_9048: GLsizei, arg_9049: GLsizei, arg_9050: GLsizei) void {
    return epoxy_glTexStorage3DEXT.?(arg_9045, arg_9046, arg_9047, arg_9048, arg_9049, arg_9050);
}
pub const GL_ANGLE_depth_texture = 1;
pub const GL_TEXTURE_DEPTH = 0x8071;
pub inline fn glGetVariantFloatvEXT(arg_9051: GLuint, arg_9052: GLenum, arg_9053: [*c]GLfloat) void {
    return epoxy_glGetVariantFloatvEXT.?(arg_9051, arg_9052, arg_9053);
}
pub const GL_DEPTH_COMPONENT16 = 0x81A5;
pub inline fn glGetFloatIndexedvEXT(arg_9054: GLenum, arg_9055: GLuint, arg_9056: [*c]GLfloat) void {
    return epoxy_glGetFloatIndexedvEXT.?(arg_9054, arg_9055, arg_9056);
}
pub inline fn glGetSamplerParameteriv(arg_9057: GLuint, arg_9058: GLenum, arg_9059: [*c]GLint) void {
    return epoxy_glGetSamplerParameteriv.?(arg_9057, arg_9058, arg_9059);
}
pub const GL_TEXTURE_COMPARE_FUNC_ARB = 0x884D;
pub inline fn glGetTextureLevelParameteriv(arg_9060: GLuint, arg_9061: GLint, arg_9062: GLenum, arg_9063: [*c]GLint) void {
    return epoxy_glGetTextureLevelParameteriv.?(arg_9060, arg_9061, arg_9062, arg_9063);
}
pub const GL_TEXTURE_RENDERBUFFER_NV = 0x8E55;
pub const GL_TEXTURE_COORD_ARRAY_STRIDE = 0x808A;
pub inline fn __glibc_unlikely(cond: var) @TypeOf(__builtin_expect(cond, 0)) {
    return __builtin_expect(cond, 0);
}
pub inline fn glBlendBarrier() void {
    return epoxy_glBlendBarrier.?();
}
pub inline fn glLabelObjectEXT(arg_9064: GLenum, arg_9065: GLuint, arg_9066: GLsizei, arg_9067: [*c]const GLchar) void {
    return epoxy_glLabelObjectEXT.?(arg_9064, arg_9065, arg_9066, arg_9067);
}
pub inline fn glMapBufferARB(arg_9068: GLenum, arg_9069: GLenum) ?*c_void {
    return epoxy_glMapBufferARB.?(arg_9068, arg_9069);
}
pub const GL_DRAW_BUFFER6_EXT = 0x882B;
pub inline fn glTexCoord2fv(arg_9070: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fv.?(arg_9070);
}
pub const GL_DRAW_INDIRECT_LENGTH_NV = 0x8F42;
pub const GL_FOG_COORDINATE_ARRAY_LIST_STRIDE_IBM = 103086;
pub inline fn glVertexAttrib2dvNV(arg_9071: GLuint, arg_9072: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib2dvNV.?(arg_9071, arg_9072);
}
pub const GL_OPERAND3_ALPHA_NV = 0x859B;
pub inline fn glVertexAttribL3ui64vNV(arg_9073: GLuint, arg_9074: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL3ui64vNV.?(arg_9073, arg_9074);
}
pub const GL_MAX_PROGRAM_RESULT_COMPONENTS_NV = 0x8909;
pub inline fn glDrawElementsInstanced(arg_9075: GLenum, arg_9076: GLsizei, arg_9077: GLenum, arg_9078: ?*const c_void, arg_9079: GLsizei) void {
    return epoxy_glDrawElementsInstanced.?(arg_9075, arg_9076, arg_9077, arg_9078, arg_9079);
}
pub inline fn glGetPerfCounterInfoINTEL(arg_9080: GLuint, arg_9081: GLuint, arg_9082: GLuint, arg_9083: [*c]GLchar, arg_9084: GLuint, arg_9085: [*c]GLchar, arg_9086: [*c]GLuint, arg_9087: [*c]GLuint, arg_9088: [*c]GLuint, arg_9089: [*c]GLuint, arg_9090: [*c]GLuint64) void {
    return epoxy_glGetPerfCounterInfoINTEL.?(arg_9080, arg_9081, arg_9082, arg_9083, arg_9084, arg_9085, arg_9086, arg_9087, arg_9088, arg_9089, arg_9090);
}
pub const GL_REPRESENTATIVE_FRAGMENT_TEST_NV = 0x937F;
pub inline fn glGetProgramInfoLog(arg_9091: GLuint, arg_9092: GLsizei, arg_9093: [*c]GLsizei, arg_9094: [*c]GLchar) void {
    return epoxy_glGetProgramInfoLog.?(arg_9091, arg_9092, arg_9093, arg_9094);
}
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT = 0x8CD4;
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_COMPUTE_SHADER = 0x90EC;
pub const GL_DEPTH_COMPONENT24_ARB = 0x81A6;
pub const GL_RGB_SNORM = 0x8F92;
pub const GL_PERFQUERY_COUNTER_DATA_FLOAT_INTEL = 0x94FA;
pub const GL_STENCIL_BUFFER_BIT0_QCOM = 0x00010000;
pub const GL_MAP_READ_BIT_EXT = 0x0001;
pub const GL_DRAW_BUFFER14_ARB = 0x8833;
pub inline fn glProgramUniform1uiv(arg_9095: GLuint, arg_9096: GLint, arg_9097: GLsizei, arg_9098: [*c]const GLuint) void {
    return epoxy_glProgramUniform1uiv.?(arg_9095, arg_9096, arg_9097, arg_9098);
}
pub inline fn glVertexP3uiv(arg_9099: GLenum, arg_9100: [*c]const GLuint) void {
    return epoxy_glVertexP3uiv.?(arg_9099, arg_9100);
}
pub const GL_ARB_texture_storage = 1;
pub const GL_TEXTURE_MAX_LEVEL_SGIS = 0x813D;
pub const __INT32_FMTi__ = "i";
pub inline fn glGetProgramResourceiv(arg_9101: GLuint, arg_9102: GLenum, arg_9103: GLuint, arg_9104: GLsizei, arg_9105: [*c]const GLenum, arg_9106: GLsizei, arg_9107: [*c]GLsizei, arg_9108: [*c]GLint) void {
    return epoxy_glGetProgramResourceiv.?(arg_9101, arg_9102, arg_9103, arg_9104, arg_9105, arg_9106, arg_9107, arg_9108);
}
pub inline fn glSignalVkSemaphoreNV(arg_9109: GLuint64) void {
    return epoxy_glSignalVkSemaphoreNV.?(arg_9109);
}
pub inline fn glGenQueriesEXT(arg_9110: GLsizei, arg_9111: [*c]GLuint) void {
    return epoxy_glGenQueriesEXT.?(arg_9110, arg_9111);
}
pub const __GCC_ATOMIC_INT_LOCK_FREE = 2;
pub const GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT = 0x8E8E;
pub inline fn glWindowPos3f(arg_9112: GLfloat, arg_9113: GLfloat, arg_9114: GLfloat) void {
    return epoxy_glWindowPos3f.?(arg_9112, arg_9113, arg_9114);
}
pub const GL_ADD_BLEND_IMG = 0x8C09;
pub const GL_BGR_INTEGER_EXT = 0x8D9A;
pub const GL_BUFFER_STORAGE_FLAGS = 0x8220;
pub const GL_ACTIVE_UNIFORM_BLOCK_MAX_NAME_LENGTH = 0x8A35;
pub inline fn glNamedFramebufferTexture2DEXT(arg_9115: GLuint, arg_9116: GLenum, arg_9117: GLenum, arg_9118: GLuint, arg_9119: GLint) void {
    return epoxy_glNamedFramebufferTexture2DEXT.?(arg_9115, arg_9116, arg_9117, arg_9118, arg_9119);
}
pub inline fn glLightModelxvOES(arg_9120: GLenum, arg_9121: [*c]const GLfixed) void {
    return epoxy_glLightModelxvOES.?(arg_9120, arg_9121);
}
pub const GL_MIRRORED_REPEAT = 0x8370;
pub const GL_MAX_PALETTE_MATRICES_OES = 0x8842;
pub const GL_MAX_GEOMETRY_SHADER_INVOCATIONS_OES = 0x8E5A;
pub const __ATOMIC_SEQ_CST = 5;
pub const GL_MAX_DEBUG_MESSAGE_LENGTH_ARB = 0x9143;
pub const GL_ATC_RGBA_INTERPOLATED_ALPHA_AMD = 0x87EE;
pub const GL_MAX_VARYING_COMPONENTS = 0x8B4B;
pub const PRIdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const GL_BUFFER_ACCESS_FLAGS = 0x911F;
pub inline fn glMatrixLoaddEXT(arg_9122: GLenum, arg_9123: [*c]const GLdouble) void {
    return epoxy_glMatrixLoaddEXT.?(arg_9122, arg_9123);
}
pub const GL_ARB_compute_variable_group_size = 1;
pub inline fn glNamedFramebufferTexture(arg_9124: GLuint, arg_9125: GLenum, arg_9126: GLuint, arg_9127: GLint) void {
    return epoxy_glNamedFramebufferTexture.?(arg_9124, arg_9125, arg_9126, arg_9127);
}
pub inline fn glVertexAttribI3iEXT(arg_9128: GLuint, arg_9129: GLint, arg_9130: GLint, arg_9131: GLint) void {
    return epoxy_glVertexAttribI3iEXT.?(arg_9128, arg_9129, arg_9130, arg_9131);
}
pub const GL_PATH_PROJECTION_MATRIX_NV = 0x0BA7;
pub const GL_GEOMETRY_SHADER_ARB = 0x8DD9;
pub const GL_T2F_IUI_V3F_EXT = 0x81B2;
pub const GL_WINDOW_RECTANGLE_EXT = 0x8F12;
pub const GL_SLIM10U_SGIX = 0x831E;
pub const GL_BLEND_DST_ALPHA = 0x80CA;
pub const GL_RESAMPLE_REPLICATE_OML = 0x8986;
pub const __USE_POSIX_IMPLICITLY = 1;
pub const GL_COLOR_TABLE_ALPHA_SIZE_SGI = 0x80DD;
pub const GL_SUN_slice_accum = 1;
pub const GL_REQUIRED_TEXTURE_IMAGE_UNITS_OES = 0x8D68;
pub inline fn glMatrixTranslatefEXT(arg_9132: GLenum, arg_9133: GLfloat, arg_9134: GLfloat, arg_9135: GLfloat) void {
    return epoxy_glMatrixTranslatefEXT.?(arg_9132, arg_9133, arg_9134, arg_9135);
}
pub inline fn glProgramUniform3f(arg_9136: GLuint, arg_9137: GLint, arg_9138: GLfloat, arg_9139: GLfloat, arg_9140: GLfloat) void {
    return epoxy_glProgramUniform3f.?(arg_9136, arg_9137, arg_9138, arg_9139, arg_9140);
}
pub inline fn glTexCoord1xOES(arg_9141: GLfixed) void {
    return epoxy_glTexCoord1xOES.?(arg_9141);
}
pub const GL_TRANSFORM_FEEDBACK_BARRIER_BIT_EXT = 0x00000800;
pub const GL_NV_sample_mask_override_coverage = 1;
pub const GL_VERTEX_ARRAY_OBJECT_EXT = 0x9154;
pub const GL_PROGRAM_OUTPUT = 0x92E4;
pub const GL_TRANSFORM_FEEDBACK_PAUSED = 0x8E23;
pub inline fn glGetColorTableParameteriv(arg_9142: GLenum, arg_9143: GLenum, arg_9144: [*c]GLint) void {
    return epoxy_glGetColorTableParameteriv.?(arg_9142, arg_9143, arg_9144);
}
pub const GL_MAX_ASYNC_DRAW_PIXELS_SGIX = 0x8360;
pub inline fn glBeginConditionalRenderNVX(arg_9145: GLuint) void {
    return epoxy_glBeginConditionalRenderNVX.?(arg_9145);
}
pub const GL_TEXTURE_ALPHA_SIZE_EXT = 0x805F;
pub inline fn glGetProgramStringARB(arg_9146: GLenum, arg_9147: GLenum, arg_9148: ?*c_void) void {
    return epoxy_glGetProgramStringARB.?(arg_9146, arg_9147, arg_9148);
}
pub const GL_ALREADY_SIGNALED = 0x911A;
pub inline fn glVertexAttribL2i64vNV(arg_9149: GLuint, arg_9150: [*c]const GLint64EXT) void {
    return epoxy_glVertexAttribL2i64vNV.?(arg_9149, arg_9150);
}
pub inline fn glGetSemaphoreParameterui64vEXT(arg_9151: GLuint, arg_9152: GLenum, arg_9153: [*c]GLuint64) void {
    return epoxy_glGetSemaphoreParameterui64vEXT.?(arg_9151, arg_9152, arg_9153);
}
pub const GL_COLOR_TABLE_SGI = 0x80D0;
pub const GL_INTERNALFORMAT_BLUE_SIZE = 0x8273;
pub const GL_PIXEL_MAP_G_TO_G_SIZE = 0x0CB7;
pub const GL_OBJECT_DELETE_STATUS_ARB = 0x8B80;
pub inline fn glTextureParameterfv(arg_9154: GLuint, arg_9155: GLenum, arg_9156: [*c]const GLfloat) void {
    return epoxy_glTextureParameterfv.?(arg_9154, arg_9155, arg_9156);
}
pub const GL_PROGRAM_POINT_SIZE_EXT = 0x8642;
pub const GL_LUMINANCE_ALPHA32F_EXT = 0x8819;
pub const GL_MAX_DETACHED_BUFFERS_NV = 0x95AD;
pub inline fn glClearNamedFramebufferfv(arg_9157: GLuint, arg_9158: GLenum, arg_9159: GLint, arg_9160: [*c]const GLfloat) void {
    return epoxy_glClearNamedFramebufferfv.?(arg_9157, arg_9158, arg_9159, arg_9160);
}
pub const __LP64__ = 1;
pub const GL_MAX_COMPUTE_SHARED_MEMORY_SIZE = 0x8262;
pub const GL_DEBUG_TYPE_OTHER_ARB = 0x8251;
pub const __LDBL_MAX_10_EXP__ = 4932;
pub const GL_SGIX_async_pixel = 1;
pub const GL_CLIP_DISTANCE1 = 0x3001;
pub const GL_BLEND_EQUATION_RGB_OES = 0x8009;
pub inline fn glGetVertexAttribdvNV(arg_9161: GLuint, arg_9162: GLenum, arg_9163: [*c]GLdouble) void {
    return epoxy_glGetVertexAttribdvNV.?(arg_9161, arg_9162, arg_9163);
}
pub const GL_LO_BIAS_NV = 0x8715;
pub inline fn glDepthRange(arg_9164: GLdouble, arg_9165: GLdouble) void {
    return epoxy_glDepthRange.?(arg_9164, arg_9165);
}
pub inline fn glWaitSync(arg_9166: GLsync, arg_9167: GLbitfield, arg_9168: GLuint64) void {
    return epoxy_glWaitSync.?(arg_9166, arg_9167, arg_9168);
}
pub const GL_RGBA12_EXT = 0x805A;
pub inline fn glGetVideoCaptureStreamdvNV(arg_9169: GLuint, arg_9170: GLuint, arg_9171: GLenum, arg_9172: [*c]GLdouble) void {
    return epoxy_glGetVideoCaptureStreamdvNV.?(arg_9169, arg_9170, arg_9171, arg_9172);
}
pub const GL_MAX_TESS_EVALUATION_IMAGE_UNIFORMS = 0x90CC;
pub inline fn glTexBumpParameterfvATI(arg_9173: GLenum, arg_9174: [*c]const GLfloat) void {
    return epoxy_glTexBumpParameterfvATI.?(arg_9173, arg_9174);
}
pub inline fn glUniform3i64vARB(arg_9175: GLint, arg_9176: GLsizei, arg_9177: [*c]const GLint64) void {
    return epoxy_glUniform3i64vARB.?(arg_9175, arg_9176, arg_9177);
}
pub inline fn glStencilOpValueAMD(arg_9178: GLenum, arg_9179: GLuint) void {
    return epoxy_glStencilOpValueAMD.?(arg_9178, arg_9179);
}
pub const __code_model_small_ = 1;
pub inline fn glVertex2d(arg_9180: GLdouble, arg_9181: GLdouble) void {
    return epoxy_glVertex2d.?(arg_9180, arg_9181);
}
pub const PRIi64 = __PRI64_PREFIX ++ "i";
pub const GL_GEOMETRY_PROGRAM_PARAMETER_BUFFER_NV = 0x8DA3;
pub const GL_ACTIVE_UNIFORMS = 0x8B86;
pub inline fn glCopyMultiTexSubImage3DEXT(arg_9182: GLenum, arg_9183: GLenum, arg_9184: GLint, arg_9185: GLint, arg_9186: GLint, arg_9187: GLint, arg_9188: GLint, arg_9189: GLint, arg_9190: GLsizei, arg_9191: GLsizei) void {
    return epoxy_glCopyMultiTexSubImage3DEXT.?(arg_9182, arg_9183, arg_9184, arg_9185, arg_9186, arg_9187, arg_9188, arg_9189, arg_9190, arg_9191);
}
pub inline fn glNormalStream3iATI(arg_9192: GLenum, arg_9193: GLint, arg_9194: GLint, arg_9195: GLint) void {
    return epoxy_glNormalStream3iATI.?(arg_9192, arg_9193, arg_9194, arg_9195);
}
pub inline fn glPolygonStipple(arg_9196: [*c]const GLubyte) void {
    return epoxy_glPolygonStipple.?(arg_9196);
}
pub const SCNdLEAST32 = "d";
pub inline fn glViewportIndexedf(arg_9197: GLuint, arg_9198: GLfloat, arg_9199: GLfloat, arg_9200: GLfloat, arg_9201: GLfloat) void {
    return epoxy_glViewportIndexedf.?(arg_9197, arg_9198, arg_9199, arg_9200, arg_9201);
}
pub inline fn glVertexAttrib1fNV(arg_9202: GLuint, arg_9203: GLfloat) void {
    return epoxy_glVertexAttrib1fNV.?(arg_9202, arg_9203);
}
pub const GL_FRAGMENT_SHADER_DERIVATIVE_HINT_OES = 0x8B8B;
pub inline fn glColor3us(arg_9204: GLushort, arg_9205: GLushort, arg_9206: GLushort) void {
    return epoxy_glColor3us.?(arg_9204, arg_9205, arg_9206);
}
pub const GL_STREAM_COPY = 0x88E2;
pub inline fn glPixelTexGenParameterfvSGIS(arg_9207: GLenum, arg_9208: [*c]const GLfloat) void {
    return epoxy_glPixelTexGenParameterfvSGIS.?(arg_9207, arg_9208);
}
pub const GL_MODELVIEW31_ARB = 0x873F;
pub const GL_PROGRAM_BINARY_FORMATS_OES = 0x87FF;
pub const GL_MAP1_BINORMAL_EXT = 0x8446;
pub const GL_UPPER_LEFT = 0x8CA2;
pub inline fn glTexParameterIuivOES(arg_9209: GLenum, arg_9210: GLenum, arg_9211: [*c]const GLuint) void {
    return epoxy_glTexParameterIuivOES.?(arg_9209, arg_9210, arg_9211);
}
pub const GL_OUTPUT_TEXTURE_COORD17_EXT = 0x87AE;
pub inline fn glWindowPos3iv(arg_9212: [*c]const GLint) void {
    return epoxy_glWindowPos3iv.?(arg_9212);
}
pub const GL_MODELVIEW_MATRIX = 0x0BA6;
pub inline fn glVariantubvEXT(arg_9213: GLuint, arg_9214: [*c]const GLubyte) void {
    return epoxy_glVariantubvEXT.?(arg_9213, arg_9214);
}
pub inline fn glTexAttachMemoryNV(arg_9215: GLenum, arg_9216: GLuint, arg_9217: GLuint64) void {
    return epoxy_glTexAttachMemoryNV.?(arg_9215, arg_9216, arg_9217);
}
pub inline fn glObjectPtrLabel(arg_9218: ?*const c_void, arg_9219: GLsizei, arg_9220: [*c]const GLchar) void {
    return epoxy_glObjectPtrLabel.?(arg_9218, arg_9219, arg_9220);
}
pub const GL_IMAGE_3D = 0x904E;
pub const GL_SAMPLER_2D_ARB = 0x8B5E;
pub const GL_COLOR_INDEX8_EXT = 0x80E5;
pub const GL_COMPUTE_SHADER_INVOCATIONS = 0x82F5;
pub inline fn glProgramNamedParameter4fNV(arg_9221: GLuint, arg_9222: GLsizei, arg_9223: [*c]const GLubyte, arg_9224: GLfloat, arg_9225: GLfloat, arg_9226: GLfloat, arg_9227: GLfloat) void {
    return epoxy_glProgramNamedParameter4fNV.?(arg_9221, arg_9222, arg_9223, arg_9224, arg_9225, arg_9226, arg_9227);
}
pub const GL_COLOR_TABLE_SCALE = 0x80D6;
pub const GL_REND_screen_coordinates = 1;
pub const GL_TESS_CONTROL_SUBROUTINE_UNIFORM = 0x92EF;
pub inline fn glPassThroughxOES(arg_9228: GLfixed) void {
    return epoxy_glPassThroughxOES.?(arg_9228);
}
pub inline fn glCompressedTextureSubImage3DEXT(arg_9229: GLuint, arg_9230: GLenum, arg_9231: GLint, arg_9232: GLint, arg_9233: GLint, arg_9234: GLint, arg_9235: GLsizei, arg_9236: GLsizei, arg_9237: GLsizei, arg_9238: GLenum, arg_9239: GLsizei, arg_9240: ?*const c_void) void {
    return epoxy_glCompressedTextureSubImage3DEXT.?(arg_9229, arg_9230, arg_9231, arg_9232, arg_9233, arg_9234, arg_9235, arg_9236, arg_9237, arg_9238, arg_9239, arg_9240);
}
pub const PRIuFAST8 = "u";
pub const GL_PERFQUERY_COUNTER_DATA_UINT64_INTEL = 0x94F9;
pub const GL_FOG_COORD_ARRAY_LENGTH_NV = 0x8F32;
pub const GL_POLYGON_OFFSET_POINT = 0x2A01;
pub const GL_VERTEX_ARRAY_RANGE_NV = 0x851D;
pub const GL_LINEAR_SHARPEN_SGIS = 0x80AD;
pub const GL_GET_TEXTURE_IMAGE_FORMAT = 0x8291;
pub inline fn glStencilThenCoverStrokePathNV(arg_9241: GLuint, arg_9242: GLint, arg_9243: GLuint, arg_9244: GLenum) void {
    return epoxy_glStencilThenCoverStrokePathNV.?(arg_9241, arg_9242, arg_9243, arg_9244);
}
pub const GL_3_BYTES_NV = 0x1408;
pub const GL_COMPRESSED_RGBA_ASTC_5x4 = 0x93B1;
pub const GL_MULTISAMPLE_3DFX = 0x86B2;
pub const GL_MAP1_VERTEX_ATTRIB11_4_NV = 0x866B;
pub const GL_CULL_FACE_MODE = 0x0B45;
pub const GL_DEPTH_COMPONENT32F_NV = 0x8DAB;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS_OES = 0x8E80;
pub const GL_EDGE_FLAG_ARRAY_POINTER_EXT = 0x8093;
pub const GL_MAP1_VERTEX_ATTRIB8_4_NV = 0x8668;
pub inline fn glIsQuery(arg_9245: GLuint) GLboolean {
    return epoxy_glIsQuery.?(arg_9245);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT = 0x8CDC;
pub const GL_SHADING_RATE_IMAGE_BINDING_NV = 0x955B;
pub const GL_ZOOM_X = 0x0D16;
pub inline fn glBufferStorage(arg_9246: GLenum, arg_9247: GLsizeiptr, arg_9248: ?*const c_void, arg_9249: GLbitfield) void {
    return epoxy_glBufferStorage.?(arg_9246, arg_9247, arg_9248, arg_9249);
}
pub inline fn glMultMatrixd(arg_9250: [*c]const GLdouble) void {
    return epoxy_glMultMatrixd.?(arg_9250);
}
pub const GL_FRAME_NV = 0x8E26;
pub const GL_POINT_TOKEN = 0x0701;
pub const GL_MAX_TEXTURE_BUFFER_SIZE_ARB = 0x8C2B;
pub const GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE = 0x8D56;
pub const GL_PROXY_TEXTURE_CUBE_MAP_ARRAY_ARB = 0x900B;
pub inline fn glGenFencesAPPLE(arg_9251: GLsizei, arg_9252: [*c]GLuint) void {
    return epoxy_glGenFencesAPPLE.?(arg_9251, arg_9252);
}
pub const GL_SRC_OVER_NV = 0x9288;
pub inline fn glGetnColorTable(arg_9253: GLenum, arg_9254: GLenum, arg_9255: GLenum, arg_9256: GLsizei, arg_9257: ?*c_void) void {
    return epoxy_glGetnColorTable.?(arg_9253, arg_9254, arg_9255, arg_9256, arg_9257);
}
pub inline fn glSecondaryColor3ubv(arg_9258: [*c]const GLubyte) void {
    return epoxy_glSecondaryColor3ubv.?(arg_9258);
}
pub const GL_FASTEST = 0x1101;
pub inline fn glProgramEnvParameterI4ivNV(arg_9259: GLenum, arg_9260: GLuint, arg_9261: [*c]const GLint) void {
    return epoxy_glProgramEnvParameterI4ivNV.?(arg_9259, arg_9260, arg_9261);
}
pub const GL_MAX_TASK_WORK_GROUP_INVOCATIONS_NV = 0x95A3;
pub const GL_INGR_interlace_read = 1;
pub const GL_DEPTH_STENCIL_MESA = 0x8750;
pub inline fn glClientWaitSync(arg_9262: GLsync, arg_9263: GLbitfield, arg_9264: GLuint64) GLenum {
    return epoxy_glClientWaitSync.?(arg_9262, arg_9263, arg_9264);
}
pub const GL_SAMPLER_2D_RECT = 0x8B63;
pub const GL_PIXEL_TILE_HEIGHT_SGIX = 0x8141;
pub const GL_UNSIGNED_INT_IMAGE_BUFFER = 0x9067;
pub const GL_EXT_EGL_image_storage = 1;
pub inline fn glUniform3ui64vARB(arg_9265: GLint, arg_9266: GLsizei, arg_9267: [*c]const GLuint64) void {
    return epoxy_glUniform3ui64vARB.?(arg_9265, arg_9266, arg_9267);
}
pub const GL_EXT_texture_env_add = 1;
pub const GL_SRGB8_ALPHA8 = 0x8C43;
pub const GL_DEBUG_SOURCE_OTHER_KHR = 0x824B;
pub const GL_FOG_COORDINATE_ARRAY_BUFFER_BINDING = 0x889D;
pub const GL_OES_get_program_binary = 1;
pub const GL_FRAMEBUFFER_INCOMPLETE_INSUFFICIENT_SHADER_COMBINED_LOCAL_STORAGE_EXT = 0x9652;
pub const GL_ARB_texture_cube_map_array = 1;
pub inline fn glProgramUniform1i64NV(arg_9268: GLuint, arg_9269: GLint, arg_9270: GLint64EXT) void {
    return epoxy_glProgramUniform1i64NV.?(arg_9268, arg_9269, arg_9270);
}
pub inline fn glDisableVertexArrayAttribEXT(arg_9271: GLuint, arg_9272: GLuint) void {
    return epoxy_glDisableVertexArrayAttribEXT.?(arg_9271, arg_9272);
}
pub const GL_BUFFER_IMMUTABLE_STORAGE = 0x821F;
pub const GL_ALPHA_FLOAT32_ATI = 0x8816;
pub const GL_PATH_FILL_BOUNDING_BOX_NV = 0x90A1;
pub const GL_SIGNED_NEGATE_NV = 0x853D;
pub const GL_SAMPLER_1D_SHADOW_ARB = 0x8B61;
pub inline fn glUniform2uivEXT(arg_9273: GLint, arg_9274: GLsizei, arg_9275: [*c]const GLuint) void {
    return epoxy_glUniform2uivEXT.?(arg_9273, arg_9274, arg_9275);
}
pub const GL_DOT_PRODUCT_CONST_EYE_REFLECT_CUBE_MAP_NV = 0x86F3;
pub const GL_COLORDODGE_KHR = 0x9299;
pub const GL_OUTPUT_TEXTURE_COORD30_EXT = 0x87BB;
pub inline fn glRasterPos3s(arg_9276: GLshort, arg_9277: GLshort, arg_9278: GLshort) void {
    return epoxy_glRasterPos3s.?(arg_9276, arg_9277, arg_9278);
}
pub const GL_TEXTURE_WRAP_Q_SGIS = 0x8137;
pub const GL_MATRIX_INDEX_ARRAY_SIZE_ARB = 0x8846;
pub const SCNdFAST8 = "hhd";
pub const GL_ALPHA16F_ARB = 0x881C;
pub const GL_SR8_EXT = 0x8FBD;
pub const GL_MULTISAMPLE_EXT = 0x809D;
pub const GL_TEXTURE21_ARB = 0x84D5;
pub const GL_MAP_UNSYNCHRONIZED_BIT_EXT = 0x0020;
pub inline fn glUseProgramStagesEXT(arg_9279: GLuint, arg_9280: GLbitfield, arg_9281: GLuint) void {
    return epoxy_glUseProgramStagesEXT.?(arg_9279, arg_9280, arg_9281);
}
pub const __GLIBC_USE_IEC_60559_BFP_EXT = 0;
pub const __INT_FAST16_TYPE__ = c_short;
pub const GL_CONTEXT_CORE_PROFILE_BIT = 0x00000001;
pub inline fn glRenderbufferStorageMultisampleNV(arg_9282: GLenum, arg_9283: GLsizei, arg_9284: GLenum, arg_9285: GLsizei, arg_9286: GLsizei) void {
    return epoxy_glRenderbufferStorageMultisampleNV.?(arg_9282, arg_9283, arg_9284, arg_9285, arg_9286);
}
pub const GL_TRANSPOSE_PROJECTION_MATRIX_ARB = 0x84E4;
pub const GL_BUFFER_STORAGE_FLAGS_EXT = 0x8220;
pub inline fn glPushName(arg_9287: GLuint) void {
    return epoxy_glPushName.?(arg_9287);
}
pub const GL_DEBUG_CATEGORY_API_ERROR_AMD = 0x9149;
pub const GL_MAX_TESS_EVALUATION_TEXTURE_IMAGE_UNITS_OES = 0x8E82;
pub const GL_EXT_bgra = 1;
pub const GL_VERTEX_ATTRIB_ARRAY_ENABLED_ARB = 0x8622;
pub const GL_SAMPLES_PASSED = 0x8914;
pub inline fn glGetVertexAttribfvARB(arg_9288: GLuint, arg_9289: GLenum, arg_9290: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribfvARB.?(arg_9288, arg_9289, arg_9290);
}
pub const GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB = 0x8B49;
pub const GL_DRAW_BUFFER5_NV = 0x882A;
pub const GL_INT8_VEC3_NV = 0x8FE2;
pub const GL_DEVICE_UUID_EXT = 0x9597;
pub const GL_SOURCE0_ALPHA_ARB = 0x8588;
pub const GL_MESH_SHADER_BIT_NV = 0x00000040;
pub const GL_NV_gpu_program5 = 1;
pub inline fn glCoverageModulationNV(arg_9291: GLenum) void {
    return epoxy_glCoverageModulationNV.?(arg_9291);
}
pub inline fn glConvolutionParameterf(arg_9292: GLenum, arg_9293: GLenum, arg_9294: GLfloat) void {
    return epoxy_glConvolutionParameterf.?(arg_9292, arg_9293, arg_9294);
}
pub const UINT_LEAST64_MAX = __UINT64_C(18446744073709551615);
pub inline fn glDrawRangeElementArrayAPPLE(arg_9295: GLenum, arg_9296: GLuint, arg_9297: GLuint, arg_9298: GLint, arg_9299: GLsizei) void {
    return epoxy_glDrawRangeElementArrayAPPLE.?(arg_9295, arg_9296, arg_9297, arg_9298, arg_9299);
}
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS = 0x9123;
pub const @"true" = 1;
pub const GL_APPLE_texture_packed_float = 1;
pub const GL_FRAMEBUFFER_DEFAULT_FIXED_SAMPLE_LOCATIONS = 0x9314;
pub inline fn glMulticastWaitSyncNV(arg_9300: GLuint, arg_9301: GLbitfield) void {
    return epoxy_glMulticastWaitSyncNV.?(arg_9300, arg_9301);
}
pub const GL_TEXTURE15 = 0x84CF;
pub inline fn glProgramLocalParameterI4iNV(arg_9302: GLenum, arg_9303: GLuint, arg_9304: GLint, arg_9305: GLint, arg_9306: GLint, arg_9307: GLint) void {
    return epoxy_glProgramLocalParameterI4iNV.?(arg_9302, arg_9303, arg_9304, arg_9305, arg_9306, arg_9307);
}
pub const SCNi64 = __PRI64_PREFIX ++ "i";
pub inline fn glMultiTexCoord4dvARB(arg_9308: GLenum, arg_9309: [*c]const GLdouble) void {
    return epoxy_glMultiTexCoord4dvARB.?(arg_9308, arg_9309);
}
pub const GL_QUERY_NO_WAIT_NV = 0x8E14;
pub inline fn glFramebufferTextureLayerEXT(arg_9310: GLenum, arg_9311: GLenum, arg_9312: GLuint, arg_9313: GLint, arg_9314: GLint) void {
    return epoxy_glFramebufferTextureLayerEXT.?(arg_9310, arg_9311, arg_9312, arg_9313, arg_9314);
}
pub const __RDRND__ = 1;
pub inline fn glProgramUniform3ui64vARB(arg_9315: GLuint, arg_9316: GLint, arg_9317: GLsizei, arg_9318: [*c]const GLuint64) void {
    return epoxy_glProgramUniform3ui64vARB.?(arg_9315, arg_9316, arg_9317, arg_9318);
}
pub const GL_COMPRESSED_LUMINANCE_ARB = 0x84EA;
pub const GL_CON_26_ATI = 0x895B;
pub const GL_ANGLE_instanced_arrays = 1;
pub const GL_GREEN_BIT_ATI = 0x00000002;
pub const GL_SUBGROUP_FEATURE_SHUFFLE_RELATIVE_BIT_KHR = 0x00000020;
pub const GL_MAX_SPARSE_ARRAY_TEXTURE_LAYERS = 0x919A;
pub const GL_DEPTH_STENCIL_EXT = 0x84F9;
pub const GL_TRANSPOSE_CURRENT_MATRIX_ARB = 0x88B7;
pub inline fn glVertexAttribPointerARB(arg_9319: GLuint, arg_9320: GLint, arg_9321: GLenum, arg_9322: GLboolean, arg_9323: GLsizei, arg_9324: ?*const c_void) void {
    return epoxy_glVertexAttribPointerARB.?(arg_9319, arg_9320, arg_9321, arg_9322, arg_9323, arg_9324);
}
pub const GL_TEXTURE_WIDTH_QCOM = 0x8BD2;
pub const GL_VERSION_2_0 = 1;
pub const __SIG_ATOMIC_WIDTH__ = 32;
pub const GL_KHR_parallel_shader_compile = 1;
pub const GL_FRONT_LEFT = 0x0400;
pub const GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2_OES = 0x9277;
pub inline fn glBlendFunciEXT(arg_9325: GLuint, arg_9326: GLenum, arg_9327: GLenum) void {
    return epoxy_glBlendFunciEXT.?(arg_9325, arg_9326, arg_9327);
}
pub const GL_MAX_TASK_WORK_GROUP_SIZE_NV = 0x953C;
pub inline fn glVertexAttribI2uivEXT(arg_9328: GLuint, arg_9329: [*c]const GLuint) void {
    return epoxy_glVertexAttribI2uivEXT.?(arg_9328, arg_9329);
}
pub inline fn glColor4dv(arg_9330: [*c]const GLdouble) void {
    return epoxy_glColor4dv.?(arg_9330);
}
pub const GL_ARB_transform_feedback_overflow_query = 1;
pub const GL_IMAGE_1D_EXT = 0x904C;
pub inline fn glDetachObjectARB(arg_9331: GLhandleARB, arg_9332: GLhandleARB) void {
    return epoxy_glDetachObjectARB.?(arg_9331, arg_9332);
}
pub const __SSE2_MATH__ = 1;
pub const GL_ARB_shader_storage_buffer_object = 1;
pub const GL_COLOR_ARRAY_BUFFER_BINDING = 0x8898;
pub const GL_TEXTURE_BINDING_2D = 0x8069;
pub const GL_UNSIGNED_INT64_VEC4_NV = 0x8FF7;
pub const GL_MAX_VIEWS_OVR = 0x9631;
pub inline fn glVertexAttrib3f(arg_9333: GLuint, arg_9334: GLfloat, arg_9335: GLfloat, arg_9336: GLfloat) void {
    return epoxy_glVertexAttrib3f.?(arg_9333, arg_9334, arg_9335, arg_9336);
}
pub const GL_SOURCE3_ALPHA_NV = 0x858B;
pub const GL_MULTISAMPLE_BIT_ARB = 0x20000000;
pub inline fn glColor4ubVertex2fvSUN(arg_9337: [*c]const GLubyte, arg_9338: [*c]const GLfloat) void {
    return epoxy_glColor4ubVertex2fvSUN.?(arg_9337, arg_9338);
}
pub inline fn glTexFilterFuncSGIS(arg_9339: GLenum, arg_9340: GLenum, arg_9341: GLsizei, arg_9342: [*c]const GLfloat) void {
    return epoxy_glTexFilterFuncSGIS.?(arg_9339, arg_9340, arg_9341, arg_9342);
}
pub inline fn glExecuteProgramNV(arg_9343: GLenum, arg_9344: GLuint, arg_9345: [*c]const GLfloat) void {
    return epoxy_glExecuteProgramNV.?(arg_9343, arg_9344, arg_9345);
}
pub const GL_VERTEX_ATTRIB_ARRAY_LONG = 0x874E;
pub inline fn glColorSubTableEXT(arg_9346: GLenum, arg_9347: GLsizei, arg_9348: GLsizei, arg_9349: GLenum, arg_9350: GLenum, arg_9351: ?*const c_void) void {
    return epoxy_glColorSubTableEXT.?(arg_9346, arg_9347, arg_9348, arg_9349, arg_9350, arg_9351);
}
pub const GL_BLOCK_INDEX = 0x92FD;
pub const GL_DRAW_BUFFER1_EXT = 0x8826;
pub inline fn glGetQueryBufferObjectuiv(arg_9352: GLuint, arg_9353: GLuint, arg_9354: GLenum, arg_9355: GLintptr) void {
    return epoxy_glGetQueryBufferObjectuiv.?(arg_9352, arg_9353, arg_9354, arg_9355);
}
pub const GL_NAMED_STRING_LENGTH_ARB = 0x8DE9;
pub inline fn glWindowPos3fARB(arg_9356: GLfloat, arg_9357: GLfloat, arg_9358: GLfloat) void {
    return epoxy_glWindowPos3fARB.?(arg_9356, arg_9357, arg_9358);
}
pub const GL_MAX_CUBE_MAP_TEXTURE_SIZE = 0x851C;
pub const __khrplatform_h_ = 1;
pub const GL_TASK_SUBROUTINE_UNIFORM_NV = 0x957F;
pub inline fn glMap2d(arg_9359: GLenum, arg_9360: GLdouble, arg_9361: GLdouble, arg_9362: GLint, arg_9363: GLint, arg_9364: GLdouble, arg_9365: GLdouble, arg_9366: GLint, arg_9367: GLint, arg_9368: [*c]const GLdouble) void {
    return epoxy_glMap2d.?(arg_9359, arg_9360, arg_9361, arg_9362, arg_9363, arg_9364, arg_9365, arg_9366, arg_9367, arg_9368);
}
pub inline fn glFlushMappedNamedBufferRange(arg_9369: GLuint, arg_9370: GLintptr, arg_9371: GLsizeiptr) void {
    return epoxy_glFlushMappedNamedBufferRange.?(arg_9369, arg_9370, arg_9371);
}
pub const GL_MAX_VERTEX_SHADER_LOCAL_CONSTANTS_EXT = 0x87C8;
pub const GL_FIXED_ONLY = 0x891D;
pub const GL_GEOMETRY_INPUT_TYPE = 0x8917;
pub inline fn glTransformFeedbackVaryingsEXT(arg_9372: GLuint, arg_9373: GLsizei, arg_9374: [*c]const [*c]const GLchar, arg_9375: GLenum) void {
    return epoxy_glTransformFeedbackVaryingsEXT.?(arg_9372, arg_9373, arg_9374, arg_9375);
}
pub inline fn glIsEnabled(arg_9376: GLenum) GLboolean {
    return epoxy_glIsEnabled.?(arg_9376);
}
pub const GL_IUI_V3F_EXT = 0x81AE;
pub const GL_INDEX_ARRAY_ADDRESS_NV = 0x8F24;
pub const GL_READ_PIXEL_DATA_RANGE_LENGTH_NV = 0x887B;
pub inline fn glTransformFeedbackStreamAttribsNV(arg_9377: GLsizei, arg_9378: [*c]const GLint, arg_9379: GLsizei, arg_9380: [*c]const GLint, arg_9381: GLenum) void {
    return epoxy_glTransformFeedbackStreamAttribsNV.?(arg_9377, arg_9378, arg_9379, arg_9380, arg_9381);
}
pub const GL_BUFFER_SIZE = 0x8764;
pub const GL_VIEWPORT_BOUNDS_RANGE = 0x825D;
pub const GL_READ_BUFFER_NV = 0x0C02;
pub inline fn glMultiTexCoordPointerEXT(arg_9382: GLenum, arg_9383: GLint, arg_9384: GLenum, arg_9385: GLsizei, arg_9386: ?*const c_void) void {
    return epoxy_glMultiTexCoordPointerEXT.?(arg_9382, arg_9383, arg_9384, arg_9385, arg_9386);
}
pub const GL_MAX_GEOMETRY_UNIFORM_COMPONENTS_ARB = 0x8DDF;
pub const GL_EXT_index_texture = 1;
pub const __ATOMIC_CONSUME = 1;
pub const GL_CURRENT_QUERY = 0x8865;
pub inline fn glCopyTexSubImage1DEXT(arg_9387: GLenum, arg_9388: GLint, arg_9389: GLint, arg_9390: GLint, arg_9391: GLint, arg_9392: GLsizei) void {
    return epoxy_glCopyTexSubImage1DEXT.?(arg_9387, arg_9388, arg_9389, arg_9390, arg_9391, arg_9392);
}
pub inline fn glTextureImage2DMultisampleCoverageNV(arg_9393: GLuint, arg_9394: GLenum, arg_9395: GLsizei, arg_9396: GLsizei, arg_9397: GLint, arg_9398: GLsizei, arg_9399: GLsizei, arg_9400: GLboolean) void {
    return epoxy_glTextureImage2DMultisampleCoverageNV.?(arg_9393, arg_9394, arg_9395, arg_9396, arg_9397, arg_9398, arg_9399, arg_9400);
}
pub const GL_EDGE_FLAG_ARRAY_POINTER = 0x8093;
pub inline fn glVertex4xOES(arg_9401: GLfixed, arg_9402: GLfixed, arg_9403: GLfixed) void {
    return epoxy_glVertex4xOES.?(arg_9401, arg_9402, arg_9403);
}
pub const __INT8_MAX__ = 127;
pub const GL_TEXTURE11_ARB = 0x84CB;
pub const GL_MAX_UNIFORM_BUFFER_BINDINGS = 0x8A2F;
pub const GL_VIEWPORT_INDEX_PROVOKING_VERTEX_OES = 0x825F;
pub inline fn glMultiDrawArraysIndirectCount(arg_9404: GLenum, arg_9405: ?*const c_void, arg_9406: GLintptr, arg_9407: GLsizei, arg_9408: GLsizei) void {
    return epoxy_glMultiDrawArraysIndirectCount.?(arg_9404, arg_9405, arg_9406, arg_9407, arg_9408);
}
pub const GL_MULTISAMPLE_COVERAGE_MODES_NV = 0x8E12;
pub const GL_TEXTURE_GEN_STR_OES = 0x8D60;
pub const GL_TEXTURE = 0x1702;
pub inline fn glPolygonMode(arg_9409: GLenum, arg_9410: GLenum) void {
    return epoxy_glPolygonMode.?(arg_9409, arg_9410);
}
pub inline fn glVDPAUIsSurfaceNV(arg_9411: GLvdpauSurfaceNV) GLboolean {
    return epoxy_glVDPAUIsSurfaceNV.?(arg_9411);
}
pub const GL_COMPRESSED_RGBA_S3TC_DXT5_EXT = 0x83F3;
pub const GL_CURRENT_FOG_COORDINATE = 0x8453;
pub inline fn __ASMNAME(cname: var) @TypeOf(__ASMNAME2(__USER_LABEL_PREFIX__, cname)) {
    return __ASMNAME2(__USER_LABEL_PREFIX__, cname);
}
pub inline fn glProgramUniform1ui64vARB(arg_9412: GLuint, arg_9413: GLint, arg_9414: GLsizei, arg_9415: [*c]const GLuint64) void {
    return epoxy_glProgramUniform1ui64vARB.?(arg_9412, arg_9413, arg_9414, arg_9415);
}
pub const GL_OES_shader_multisample_interpolation = 1;
pub const GL_FRAGMENTS_INSTRUMENT_MAX_SGIX = 0x8315;
pub const GL_DRAW_BUFFER0_ARB = 0x8825;
pub const __clang_major__ = 10;
pub const GL_COPY = 0x1503;
pub const GL_NEGATE_BIT_ATI = 0x00000004;
pub const GL_ARB_shader_image_size = 1;
pub inline fn glVertexAttribs3dvNV(arg_9416: GLuint, arg_9417: GLsizei, arg_9418: [*c]const GLdouble) void {
    return epoxy_glVertexAttribs3dvNV.?(arg_9416, arg_9417, arg_9418);
}
pub const GL_TRANSFORM_FEEDBACK_BUFFER_STRIDE = 0x934C;
pub inline fn glColor3xvOES(arg_9419: [*c]const GLfixed) void {
    return epoxy_glColor3xvOES.?(arg_9419);
}
pub const SCNo32 = "o";
pub inline fn glFrustumx(arg_9420: GLfixed, arg_9421: GLfixed, arg_9422: GLfixed, arg_9423: GLfixed, arg_9424: GLfixed, arg_9425: GLfixed) void {
    return epoxy_glFrustumx.?(arg_9420, arg_9421, arg_9422, arg_9423, arg_9424, arg_9425);
}
pub const GL_NV_representative_fragment_test = 1;
pub const GL_COLOR_ARRAY_ADDRESS_NV = 0x8F23;
pub const GL_EXCLUSIVE_EXT = 0x8F11;
pub const GL_PERFQUERY_COUNTER_TIMESTAMP_INTEL = 0x94F5;
pub inline fn glNamedRenderbufferStorageMultisampleCoverageEXT(arg_9426: GLuint, arg_9427: GLsizei, arg_9428: GLsizei, arg_9429: GLenum, arg_9430: GLsizei, arg_9431: GLsizei) void {
    return epoxy_glNamedRenderbufferStorageMultisampleCoverageEXT.?(arg_9426, arg_9427, arg_9428, arg_9429, arg_9430, arg_9431);
}
pub const GL_HISTOGRAM_GREEN_SIZE_EXT = 0x8029;
pub inline fn glColor3hNV(arg_9432: GLhalfNV, arg_9433: GLhalfNV, arg_9434: GLhalfNV) void {
    return epoxy_glColor3hNV.?(arg_9432, arg_9433, arg_9434);
}
pub const __unix = 1;
pub const GL_SRC1_RGB = 0x8581;
pub const GL_EDGE_FLAG_ARRAY_LENGTH_NV = 0x8F30;
pub const SCNu16 = "hu";
pub const __llvm__ = 1;
pub inline fn glDrawTextureNV(arg_9435: GLuint, arg_9436: GLuint, arg_9437: GLfloat, arg_9438: GLfloat, arg_9439: GLfloat, arg_9440: GLfloat, arg_9441: GLfloat, arg_9442: GLfloat, arg_9443: GLfloat, arg_9444: GLfloat, arg_9445: GLfloat) void {
    return epoxy_glDrawTextureNV.?(arg_9435, arg_9436, arg_9437, arg_9438, arg_9439, arg_9440, arg_9441, arg_9442, arg_9443, arg_9444, arg_9445);
}
pub const GL_TESS_GEN_SPACING = 0x8E77;
pub const GL_LIGHT_ENV_MODE_SGIX = 0x8407;
pub const GL_TEXTURE_CUBE_MAP_POSITIVE_X_EXT = 0x8515;
pub inline fn glVertexAttribL1ui64vNV(arg_9446: GLuint, arg_9447: [*c]const GLuint64EXT) void {
    return epoxy_glVertexAttribL1ui64vNV.?(arg_9446, arg_9447);
}
pub const GL_SYNC_FENCE_APPLE = 0x9116;
pub inline fn glGetIntegerui64i_vNV(arg_9448: GLenum, arg_9449: GLuint, arg_9450: [*c]GLuint64EXT) void {
    return epoxy_glGetIntegerui64i_vNV.?(arg_9448, arg_9449, arg_9450);
}
pub const GL_MAX = 0x8008;
pub inline fn glStencilThenCoverFillPathNV(arg_9451: GLuint, arg_9452: GLenum, arg_9453: GLuint, arg_9454: GLenum) void {
    return epoxy_glStencilThenCoverFillPathNV.?(arg_9451, arg_9452, arg_9453, arg_9454);
}
pub const GL_MAT_AMBIENT_BIT_PGI = 0x00100000;
pub const GL_MAX_ASYNC_HISTOGRAM_SGIX = 0x832D;
pub inline fn glAttachObjectARB(arg_9455: GLhandleARB, arg_9456: GLhandleARB) void {
    return epoxy_glAttachObjectARB.?(arg_9455, arg_9456);
}
pub inline fn glExtGetRenderbuffersQCOM(arg_9457: [*c]GLuint, arg_9458: GLint, arg_9459: [*c]GLint) void {
    return epoxy_glExtGetRenderbuffersQCOM.?(arg_9457, arg_9458, arg_9459);
}
pub const GL_WRITE_DISCARD_NV = 0x88BE;
pub inline fn glTexParameterIivEXT(arg_9460: GLenum, arg_9461: GLenum, arg_9462: [*c]const GLint) void {
    return epoxy_glTexParameterIivEXT.?(arg_9460, arg_9461, arg_9462);
}
pub const GL_MAX_TESS_CONTROL_INPUT_COMPONENTS = 0x886C;
pub const GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_OES = 0x8CD6;
pub inline fn glTexCoordP3uiv(arg_9463: GLenum, arg_9464: [*c]const GLuint) void {
    return epoxy_glTexCoordP3uiv.?(arg_9463, arg_9464);
}
pub inline fn glReplacementCodeuiColor4ubVertex3fSUN(arg_9465: GLuint, arg_9466: GLubyte, arg_9467: GLubyte, arg_9468: GLubyte, arg_9469: GLubyte, arg_9470: GLfloat, arg_9471: GLfloat, arg_9472: GLfloat) void {
    return epoxy_glReplacementCodeuiColor4ubVertex3fSUN.?(arg_9465, arg_9466, arg_9467, arg_9468, arg_9469, arg_9470, arg_9471, arg_9472);
}
pub const GL_ARB_polygon_offset_clamp = 1;
pub const GL_STACK_UNDERFLOW = 0x0504;
pub inline fn glProgramUniformMatrix3x2dvEXT(arg_9473: GLuint, arg_9474: GLint, arg_9475: GLsizei, arg_9476: GLboolean, arg_9477: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3x2dvEXT.?(arg_9473, arg_9474, arg_9475, arg_9476, arg_9477);
}
pub const GL_INSTRUMENT_MEASUREMENTS_SGIX = 0x8181;
pub inline fn glIndexFormatNV(arg_9478: GLenum, arg_9479: GLsizei) void {
    return epoxy_glIndexFormatNV.?(arg_9478, arg_9479);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR = 0x93DC;
pub inline fn glSecondaryColor3dEXT(arg_9480: GLdouble, arg_9481: GLdouble, arg_9482: GLdouble) void {
    return epoxy_glSecondaryColor3dEXT.?(arg_9480, arg_9481, arg_9482);
}
pub const GL_TEXTURE_LOD_BIAS_T_SGIX = 0x818F;
pub const GL_DISCARD_ATI = 0x8763;
pub const GL_R3_G3_B2 = 0x2A10;
pub const GL_RGB9_E5_EXT = 0x8C3D;
pub inline fn glTextureBufferEXT(arg_9483: GLuint, arg_9484: GLenum, arg_9485: GLenum, arg_9486: GLuint) void {
    return epoxy_glTextureBufferEXT.?(arg_9483, arg_9484, arg_9485, arg_9486);
}
pub const GL_MODELVIEW0_STACK_DEPTH_EXT = 0x0BA3;
pub const GL_DEBUG_TYPE_UNDEFINED_BEHAVIOR_KHR = 0x824E;
pub const GL_FRAGMENT_PROGRAM_INTERPOLATION_OFFSET_BITS_NV = 0x8E5D;
pub const GL_SAMPLE_ALPHA_TO_ONE_ARB = 0x809F;
pub const GL_BOOL_VEC3_ARB = 0x8B58;
pub const GL_MAX_SUBROUTINES = 0x8DE7;
pub inline fn glWindowPos2dv(arg_9487: [*c]const GLdouble) void {
    return epoxy_glWindowPos2dv.?(arg_9487);
}
pub const GL_UNSIGNED_INT_2_10_10_10_REV_EXT = 0x8368;
pub const GL_COLOR_ATTACHMENT13_EXT = 0x8CED;
pub inline fn glProgramUniformMatrix4dvEXT(arg_9488: GLuint, arg_9489: GLint, arg_9490: GLsizei, arg_9491: GLboolean, arg_9492: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix4dvEXT.?(arg_9488, arg_9489, arg_9490, arg_9491, arg_9492);
}
pub const GL_DEPTH_COMPONENT32_SGIX = 0x81A7;
pub const GL_CONVOLUTION_1D = 0x8010;
pub const GL_MAX_MESH_UNIFORM_BLOCKS_NV = 0x8E60;
pub const GL_ARB_texture_non_power_of_two = 1;
pub const GL_TEXTURE10 = 0x84CA;
pub const GL_DOUBLE_MAT4_EXT = 0x8F48;
pub const GL_NVX_gpu_multicast2 = 1;
pub const GL_VARIABLE_F_NV = 0x8528;
pub const GL_COMPRESSED_RGBA_ASTC_5x5x4_OES = 0x93C5;
pub const GL_ES_VERSION_2_0 = 1;
pub const GL_READ_WRITE = 0x88BA;
pub inline fn glMakeNamedBufferResidentNV(arg_9493: GLuint, arg_9494: GLenum) void {
    return epoxy_glMakeNamedBufferResidentNV.?(arg_9493, arg_9494);
}
pub const GL_SRC_ALPHA_SATURATE_EXT = 0x0308;
pub inline fn glMultiDrawElementsEXT(arg_9495: GLenum, arg_9496: [*c]const GLsizei, arg_9497: GLenum, arg_9498: [*c]const ?*const c_void, arg_9499: GLsizei) void {
    return epoxy_glMultiDrawElementsEXT.?(arg_9495, arg_9496, arg_9497, arg_9498, arg_9499);
}
pub const GL_VIDEO_CAPTURE_FRAME_HEIGHT_NV = 0x9039;
pub const GL_MAX_COMPUTE_WORK_GROUP_SIZE = 0x91BF;
pub inline fn glSignalSemaphoreui64NVX(arg_9500: GLuint, arg_9501: GLsizei, arg_9502: [*c]const GLuint, arg_9503: [*c]const GLuint64) void {
    return epoxy_glSignalSemaphoreui64NVX.?(arg_9500, arg_9501, arg_9502, arg_9503);
}
pub const __UINT64_FMTX__ = "lX";
pub inline fn glDisable(arg_9504: GLenum) void {
    return epoxy_glDisable.?(arg_9504);
}
pub inline fn glGlobalAlphaFactoruiSUN(arg_9505: GLuint) void {
    return epoxy_glGlobalAlphaFactoruiSUN.?(arg_9505);
}
pub const __BYTE_ORDER__ = __ORDER_LITTLE_ENDIAN__;
pub const GL_IMAGE_2D_RECT_EXT = 0x904F;
pub const GL_COMPRESSED_RGBA_S3TC_DXT1_EXT = 0x83F1;
pub const GL_COMBINER_MAPPING_NV = 0x8543;
pub const GL_SIGNED_HILO16_NV = 0x86FA;
pub inline fn glGetTexGenfvOES(arg_9506: GLenum, arg_9507: GLenum, arg_9508: [*c]GLfloat) void {
    return epoxy_glGetTexGenfvOES.?(arg_9506, arg_9507, arg_9508);
}
pub const GL_GREEN = 0x1904;
pub const GL_STENCIL_BACK_PASS_DEPTH_PASS_ATI = 0x8803;
pub const GL_REG_31_ATI = 0x8940;
pub inline fn glDrawElementsInstancedBaseVertexBaseInstance(arg_9509: GLenum, arg_9510: GLsizei, arg_9511: GLenum, arg_9512: ?*const c_void, arg_9513: GLsizei, arg_9514: GLint, arg_9515: GLuint) void {
    return epoxy_glDrawElementsInstancedBaseVertexBaseInstance.?(arg_9509, arg_9510, arg_9511, arg_9512, arg_9513, arg_9514, arg_9515);
}
pub const GL_ATOMIC_COUNTER_BUFFER_REFERENCED_BY_GEOMETRY_SHADER = 0x92CA;
pub const GL_EXT_occlusion_query_boolean = 1;
pub const GL_COMPRESSED_LUMINANCE_LATC1_EXT = 0x8C70;
pub inline fn glDebugMessageCallbackAMD(arg_9516: GLDEBUGPROCAMD, arg_9517: ?*c_void) void {
    return epoxy_glDebugMessageCallbackAMD.?(arg_9516, arg_9517);
}
pub const GL_UNSIGNED_INT_IMAGE_3D_EXT = 0x9064;
pub const GL_VIEW_COMPATIBILITY_CLASS = 0x82B6;
pub inline fn glShadeModel(arg_9518: GLenum) void {
    return epoxy_glShadeModel.?(arg_9518);
}
pub const _INTTYPES_H = 1;
pub const __UINT_LEAST64_FMTu__ = "lu";
pub const GL_VERTEX_STATE_PROGRAM_NV = 0x8621;
pub const GL_NORMAL_ARRAY_LIST_IBM = 103071;
pub inline fn glMultiDrawRangeElementArrayAPPLE(arg_9519: GLenum, arg_9520: GLuint, arg_9521: GLuint, arg_9522: [*c]const GLint, arg_9523: [*c]const GLsizei, arg_9524: GLsizei) void {
    return epoxy_glMultiDrawRangeElementArrayAPPLE.?(arg_9519, arg_9520, arg_9521, arg_9522, arg_9523, arg_9524);
}
pub const __UINT8_FMTX__ = "hhX";
pub const GL_CLAMP = 0x2900;
pub inline fn glProgramUniform1fEXT(arg_9525: GLuint, arg_9526: GLint, arg_9527: GLfloat) void {
    return epoxy_glProgramUniform1fEXT.?(arg_9525, arg_9526, arg_9527);
}
pub const GL_LUMINANCE8_ALPHA8_OES = 0x8045;
pub const GL_PERFQUERY_COUNTER_DATA_BOOL32_INTEL = 0x94FC;
pub const GL_OES_vertex_array_object = 1;
pub const GL_RGBA8UI_EXT = 0x8D7C;
pub inline fn glProgramUniform2ui64ARB(arg_9528: GLuint, arg_9529: GLint, arg_9530: GLuint64, arg_9531: GLuint64) void {
    return epoxy_glProgramUniform2ui64ARB.?(arg_9528, arg_9529, arg_9530, arg_9531);
}
pub const GL_CLAMP_TO_BORDER = 0x812D;
pub const GL_R16 = 0x822A;
pub const GL_UNSIGNED_INT_10_10_10_2_OES = 0x8DF6;
pub const GL_VERTEX_TEXTURE = 0x829B;
pub inline fn glGetnUniformuiv(arg_9532: GLuint, arg_9533: GLint, arg_9534: GLsizei, arg_9535: [*c]GLuint) void {
    return epoxy_glGetnUniformuiv.?(arg_9532, arg_9533, arg_9534, arg_9535);
}
pub const GL_UNIFORM_BUFFER_OFFSET_ALIGNMENT = 0x8A34;
pub const __INT_LEAST64_FMTd__ = "ld";
pub const GL_MAX_MESH_SHADER_STORAGE_BLOCKS_NV = 0x8E66;
pub const GL_SYNC_CONDITION_APPLE = 0x9113;
pub const GL_MAX_TEXTURE_IMAGE_UNITS_NV = 0x8872;
pub inline fn glMultiTexCoord3fvARB(arg_9536: GLenum, arg_9537: [*c]const GLfloat) void {
    return epoxy_glMultiTexCoord3fvARB.?(arg_9536, arg_9537);
}
pub const GL_MAX_VERTEX_SHADER_STORAGE_BLOCKS = 0x90D6;
pub inline fn glNormal3d(arg_9538: GLdouble, arg_9539: GLdouble, arg_9540: GLdouble) void {
    return epoxy_glNormal3d.?(arg_9538, arg_9539, arg_9540);
}
pub const GL_FOG_COORD_ARRAY_POINTER = 0x8456;
pub const GL_COLOR_ATTACHMENT3_EXT = 0x8CE3;
pub inline fn glDrawBuffersNV(arg_9541: GLsizei, arg_9542: [*c]const GLenum) void {
    return epoxy_glDrawBuffersNV.?(arg_9541, arg_9542);
}
pub const GL_FLOAT_VEC3_ARB = 0x8B51;
pub const GL_VERTEX_SOURCE_ATI = 0x8774;
pub const GL_INT_IMAGE_BUFFER_EXT = 0x905C;
pub inline fn glTextureStorage1DEXT(arg_9543: GLuint, arg_9544: GLenum, arg_9545: GLsizei, arg_9546: GLenum, arg_9547: GLsizei) void {
    return epoxy_glTextureStorage1DEXT.?(arg_9543, arg_9544, arg_9545, arg_9546, arg_9547);
}
pub const GL_VIRTUAL_PAGE_SIZE_Z_AMD = 0x9197;
pub inline fn glBlendEquationSeparateiOES(arg_9548: GLuint, arg_9549: GLenum, arg_9550: GLenum) void {
    return epoxy_glBlendEquationSeparateiOES.?(arg_9548, arg_9549, arg_9550);
}
pub const __LDBL_DIG__ = 18;
pub const GL_RESAMPLE_AVERAGE_OML = 0x8988;
pub inline fn glMultiTexCoord1iARB(arg_9551: GLenum, arg_9552: GLint) void {
    return epoxy_glMultiTexCoord1iARB.?(arg_9551, arg_9552);
}
pub const GL_UNSIGNED_INT64_VEC3_ARB = 0x8FF6;
pub const GL_EXT_texture_swizzle = 1;
pub const GL_QUADS_OES = 0x0007;
pub inline fn glTexGeni(arg_9553: GLenum, arg_9554: GLenum, arg_9555: GLint) void {
    return epoxy_glTexGeni.?(arg_9553, arg_9554, arg_9555);
}
pub const __SIZEOF_WINT_T__ = 4;
pub const GL_NUM_INSTRUCTIONS_TOTAL_ATI = 0x8972;
pub inline fn glProgramUniformMatrix2x4fv(arg_9556: GLuint, arg_9557: GLint, arg_9558: GLsizei, arg_9559: GLboolean, arg_9560: [*c]const GLfloat) void {
    return epoxy_glProgramUniformMatrix2x4fv.?(arg_9556, arg_9557, arg_9558, arg_9559, arg_9560);
}
pub const GL_COLOR_INDEX2_EXT = 0x80E3;
pub inline fn glDrawElementsInstancedBaseVertexOES(arg_9561: GLenum, arg_9562: GLsizei, arg_9563: GLenum, arg_9564: ?*const c_void, arg_9565: GLsizei, arg_9566: GLint) void {
    return epoxy_glDrawElementsInstancedBaseVertexOES.?(arg_9561, arg_9562, arg_9563, arg_9564, arg_9565, arg_9566);
}
pub const GL_FLOAT_VEC2 = 0x8B50;
pub const GL_TEXTURE_POST_SPECULAR_HP = 0x8168;
pub inline fn glDebugMessageCallbackARB(arg_9567: GLDEBUGPROCARB, arg_9568: ?*const c_void) void {
    return epoxy_glDebugMessageCallbackARB.?(arg_9567, arg_9568);
}
pub const GL_DRAW_BUFFER5 = 0x882A;
pub inline fn glObjectUnpurgeableAPPLE(arg_9569: GLenum, arg_9570: GLuint, arg_9571: GLenum) GLenum {
    return epoxy_glObjectUnpurgeableAPPLE.?(arg_9569, arg_9570, arg_9571);
}
pub const GL_MESH_OUTPUT_PER_PRIMITIVE_GRANULARITY_NV = 0x9543;
pub const __UINT_FAST32_FMTu__ = "u";
pub const WCHAR_MIN = __WCHAR_MIN;
pub const GL_SIGNED_RGBA_NV = 0x86FB;
pub const GL_PER_STAGE_CONSTANTS_NV = 0x8535;
pub const GL_UNSIGNED_INT = 0x1405;
pub inline fn glUnmapObjectBufferATI(arg_9572: GLuint) void {
    return epoxy_glUnmapObjectBufferATI.?(arg_9572);
}
pub const UINT_FAST32_MAX = @as(c_ulong, 18446744073709551615);
pub inline fn glFramebufferParameteriMESA(arg_9573: GLenum, arg_9574: GLenum, arg_9575: GLint) void {
    return epoxy_glFramebufferParameteriMESA.?(arg_9573, arg_9574, arg_9575);
}
pub const GL_PATH_MAX_MODELVIEW_STACK_DEPTH_NV = 0x0D36;
pub const GL_INT_IMAGE_2D_MULTISAMPLE_ARRAY = 0x9061;
pub const GL_TEXTURE_STENCIL_SIZE = 0x88F1;
pub const SCNuLEAST64 = __PRI64_PREFIX ++ "u";
pub inline fn glPushDebugGroup(arg_9576: GLenum, arg_9577: GLuint, arg_9578: GLsizei, arg_9579: [*c]const GLchar) void {
    return epoxy_glPushDebugGroup.?(arg_9576, arg_9577, arg_9578, arg_9579);
}
pub const GL_BOOL_ARB = 0x8B56;
pub const INT8_MAX = 127;
pub const GL_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D2;
pub const GL_SRGB_WRITE = 0x8298;
pub const GL_TEXTURE_LO_SIZE_NV = 0x871C;
pub const GL_TEXTURE_TYPE_QCOM = 0x8BD7;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_OES = 0x8CD3;
pub const GL_PRIMARY_COLOR_NV = 0x852C;
pub inline fn glPointParameterfSGIS(arg_9580: GLenum, arg_9581: GLfloat) void {
    return epoxy_glPointParameterfSGIS.?(arg_9580, arg_9581);
}
pub const GL_PATCHES = 0x000E;
pub const GL_CLIP_DEPTH_MODE = 0x935D;
pub const GL_NV_depth_buffer_float = 1;
pub const GL_SHADING_LANGUAGE_VERSION = 0x8B8C;
pub const SCNxFAST64 = __PRI64_PREFIX ++ "x";
pub const GL_ATOMIC_COUNTER_BUFFER = 0x92C0;
pub inline fn glTexCoord4fVertex4fSUN(arg_9582: GLfloat, arg_9583: GLfloat, arg_9584: GLfloat, arg_9585: GLfloat, arg_9586: GLfloat, arg_9587: GLfloat, arg_9588: GLfloat, arg_9589: GLfloat) void {
    return epoxy_glTexCoord4fVertex4fSUN.?(arg_9582, arg_9583, arg_9584, arg_9585, arg_9586, arg_9587, arg_9588, arg_9589);
}
pub const GL_SRC0_ALPHA = 0x8588;
pub inline fn glEGLImageTargetTexStorageEXT(arg_9590: GLenum, arg_9591: GLeglImageOES, arg_9592: [*c]const GLint) void {
    return epoxy_glEGLImageTargetTexStorageEXT.?(arg_9590, arg_9591, arg_9592);
}
pub inline fn glGetHistogram(arg_9593: GLenum, arg_9594: GLboolean, arg_9595: GLenum, arg_9596: GLenum, arg_9597: ?*c_void) void {
    return epoxy_glGetHistogram.?(arg_9593, arg_9594, arg_9595, arg_9596, arg_9597);
}
pub const GL_ARB_draw_buffers = 1;
pub const GL_LUMINANCE16_ALPHA16 = 0x8048;
pub const GL_TEXTURE_CONSTANT_DATA_SUNX = 0x81D6;
pub const GL_VERTEX_STREAM7_ATI = 0x8773;
pub const GL_R32F = 0x822E;
pub const GL_MAX_MESH_OUTPUT_VERTICES_NV = 0x9538;
pub inline fn glMultiTexCoordP2ui(arg_9598: GLenum, arg_9599: GLenum, arg_9600: GLuint) void {
    return epoxy_glMultiTexCoordP2ui.?(arg_9598, arg_9599, arg_9600);
}
pub const GL_COLOR_ATTACHMENT11_EXT = 0x8CEB;
pub inline fn glCreatePerfQueryINTEL(arg_9601: GLuint, arg_9602: [*c]GLuint) void {
    return epoxy_glCreatePerfQueryINTEL.?(arg_9601, arg_9602);
}
pub inline fn glGetListParameterivSGIX(arg_9603: GLuint, arg_9604: GLenum, arg_9605: [*c]GLint) void {
    return epoxy_glGetListParameterivSGIX.?(arg_9603, arg_9604, arg_9605);
}
pub inline fn glPopMatrix() void {
    return epoxy_glPopMatrix.?();
}
pub const GL_ALWAYS_SOFT_HINT_PGI = 0x1A20D;
pub inline fn glCompressedMultiTexImage2DEXT(arg_9606: GLenum, arg_9607: GLenum, arg_9608: GLint, arg_9609: GLenum, arg_9610: GLsizei, arg_9611: GLsizei, arg_9612: GLint, arg_9613: GLsizei, arg_9614: ?*const c_void) void {
    return epoxy_glCompressedMultiTexImage2DEXT.?(arg_9606, arg_9607, arg_9608, arg_9609, arg_9610, arg_9611, arg_9612, arg_9613, arg_9614);
}
pub inline fn glDrawArraysInstancedNV(arg_9615: GLenum, arg_9616: GLint, arg_9617: GLsizei, arg_9618: GLsizei) void {
    return epoxy_glDrawArraysInstancedNV.?(arg_9615, arg_9616, arg_9617, arg_9618);
}
pub inline fn glGetQueryivEXT(arg_9619: GLenum, arg_9620: GLenum, arg_9621: [*c]GLint) void {
    return epoxy_glGetQueryivEXT.?(arg_9619, arg_9620, arg_9621);
}
pub const GL_TRACE_OPERATIONS_BIT_MESA = 0x0001;
pub inline fn glProgramEnvParameters4fvEXT(arg_9622: GLenum, arg_9623: GLuint, arg_9624: GLsizei, arg_9625: [*c]const GLfloat) void {
    return epoxy_glProgramEnvParameters4fvEXT.?(arg_9622, arg_9623, arg_9624, arg_9625);
}
pub const GL_RGBA_SIGNED_COMPONENTS_EXT = 0x8C3C;
pub inline fn glVertexArrayAttribFormat(arg_9626: GLuint, arg_9627: GLuint, arg_9628: GLint, arg_9629: GLenum, arg_9630: GLboolean, arg_9631: GLuint) void {
    return epoxy_glVertexArrayAttribFormat.?(arg_9626, arg_9627, arg_9628, arg_9629, arg_9630, arg_9631);
}
pub const GL_SAMPLE_COVERAGE_VALUE = 0x80AA;
pub const GL_COLOR_ATTACHMENT9_NV = 0x8CE9;
pub const GL_SAMPLER_BINDING = 0x8919;
pub inline fn glCopyImageSubDataOES(arg_9632: GLuint, arg_9633: GLenum, arg_9634: GLint, arg_9635: GLint, arg_9636: GLint, arg_9637: GLint, arg_9638: GLuint, arg_9639: GLenum, arg_9640: GLint, arg_9641: GLint, arg_9642: GLint, arg_9643: GLint, arg_9644: GLsizei, arg_9645: GLsizei, arg_9646: GLsizei) void {
    return epoxy_glCopyImageSubDataOES.?(arg_9632, arg_9633, arg_9634, arg_9635, arg_9636, arg_9637, arg_9638, arg_9639, arg_9640, arg_9641, arg_9642, arg_9643, arg_9644, arg_9645, arg_9646);
}
pub inline fn glHint(arg_9647: GLenum, arg_9648: GLenum) void {
    return epoxy_glHint.?(arg_9647, arg_9648);
}
pub const GL_COMPRESSED_RGBA_ASTC_10x8_KHR = 0x93BA;
pub const GL_MAX_GEOMETRY_INPUT_COMPONENTS_OES = 0x9123;
pub inline fn glClearColorIuiEXT(arg_9649: GLuint, arg_9650: GLuint, arg_9651: GLuint, arg_9652: GLuint) void {
    return epoxy_glClearColorIuiEXT.?(arg_9649, arg_9650, arg_9651, arg_9652);
}
pub inline fn glCompressedTexImage1DARB(arg_9653: GLenum, arg_9654: GLint, arg_9655: GLenum, arg_9656: GLsizei, arg_9657: GLint, arg_9658: GLsizei, arg_9659: ?*const c_void) void {
    return epoxy_glCompressedTexImage1DARB.?(arg_9653, arg_9654, arg_9655, arg_9656, arg_9657, arg_9658, arg_9659);
}
pub inline fn glProgramUniform1dvEXT(arg_9660: GLuint, arg_9661: GLint, arg_9662: GLsizei, arg_9663: [*c]const GLdouble) void {
    return epoxy_glProgramUniform1dvEXT.?(arg_9660, arg_9661, arg_9662, arg_9663);
}
pub const GL_CON_5_ATI = 0x8946;
pub const GL_CURRENT_RASTER_SECONDARY_COLOR = 0x845F;
pub const GL_VERTEX_STREAM1_ATI = 0x876D;
pub inline fn glGetGraphicsResetStatusKHR() GLenum {
    return epoxy_glGetGraphicsResetStatusKHR.?();
}
pub inline fn glGetFirstPerfQueryIdINTEL(arg_9664: [*c]GLuint) void {
    return epoxy_glGetFirstPerfQueryIdINTEL.?(arg_9664);
}
pub const __STDC__ = 1;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH = 0x8243;
pub const GL_TEXTURE_BUFFER_DATA_STORE_BINDING = 0x8C2D;
pub const GL_DSDT_MAG_INTENSITY_NV = 0x86DC;
pub const GL_SIGNALED_APPLE = 0x9119;
pub inline fn glGetString(arg_9665: GLenum) [*c]const GLubyte {
    return epoxy_glGetString.?(arg_9665);
}
pub const GL_PROGRAM_BINARY_ANGLE = 0x93A6;
pub const GL_LAST_VERTEX_CONVENTION = 0x8E4E;
pub inline fn glMultiTexParameterIuivEXT(arg_9666: GLenum, arg_9667: GLenum, arg_9668: GLenum, arg_9669: [*c]const GLuint) void {
    return epoxy_glMultiTexParameterIuivEXT.?(arg_9666, arg_9667, arg_9668, arg_9669);
}
pub const GL_SWIZZLE_STRQ_ATI = 0x897A;
pub const GL_IMAGE_BINDING_NAME = 0x8F3A;
pub const GL_MAX_PROGRAM_TEXTURE_GATHER_OFFSET = 0x8E5F;
pub const GL_BOOL_VEC4_ARB = 0x8B59;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_Y_ARB = 0x8518;
pub inline fn glFramebufferTextureMultiviewOVR(arg_9670: GLenum, arg_9671: GLenum, arg_9672: GLuint, arg_9673: GLint, arg_9674: GLint, arg_9675: GLsizei) void {
    return epoxy_glFramebufferTextureMultiviewOVR.?(arg_9670, arg_9671, arg_9672, arg_9673, arg_9674, arg_9675);
}
pub const GL_LUMINANCE_ALPHA = 0x190A;
pub const GL_MAX_PROGRAM_LOCAL_PARAMETERS_ARB = 0x88B4;
pub inline fn glBufferStorageEXT(arg_9676: GLenum, arg_9677: GLsizeiptr, arg_9678: ?*const c_void, arg_9679: GLbitfield) void {
    return epoxy_glBufferStorageEXT.?(arg_9676, arg_9677, arg_9678, arg_9679);
}
pub inline fn glGetTexLevelParameterfv(arg_9680: GLenum, arg_9681: GLint, arg_9682: GLenum, arg_9683: [*c]GLfloat) void {
    return epoxy_glGetTexLevelParameterfv.?(arg_9680, arg_9681, arg_9682, arg_9683);
}
pub const GL_STENCIL_INDEX1 = 0x8D46;
pub inline fn glGetNamedFramebufferParameterivEXT(arg_9684: GLuint, arg_9685: GLenum, arg_9686: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferParameterivEXT.?(arg_9684, arg_9685, arg_9686);
}
pub inline fn glVertexAttribs4fvNV(arg_9687: GLuint, arg_9688: GLsizei, arg_9689: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs4fvNV.?(arg_9687, arg_9688, arg_9689);
}
pub inline fn glPathStencilDepthOffsetNV(arg_9690: GLfloat, arg_9691: GLfloat) void {
    return epoxy_glPathStencilDepthOffsetNV.?(arg_9690, arg_9691);
}
pub const GL_QUADS_FOLLOW_PROVOKING_VERTEX_CONVENTION_EXT = 0x8E4C;
pub const GL_ACTIVE_VARYING_MAX_LENGTH_NV = 0x8C82;
pub const GL_SECONDARY_COLOR_ARRAY_TYPE = 0x845B;
pub const GL_TEXTURE7_ARB = 0x84C7;
pub const GL_VERTEX_STREAM2_ATI = 0x876E;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTERS = 0x92D6;
pub inline fn glProgramUniformHandleui64NV(arg_9692: GLuint, arg_9693: GLint, arg_9694: GLuint64) void {
    return epoxy_glProgramUniformHandleui64NV.?(arg_9692, arg_9693, arg_9694);
}
pub inline fn glGetVertexAttribfv(arg_9695: GLuint, arg_9696: GLenum, arg_9697: [*c]GLfloat) void {
    return epoxy_glGetVertexAttribfv.?(arg_9695, arg_9696, arg_9697);
}
pub inline fn glVertexAttribI4ubvEXT(arg_9698: GLuint, arg_9699: [*c]const GLubyte) void {
    return epoxy_glVertexAttribI4ubvEXT.?(arg_9698, arg_9699);
}
pub const __UINT8_MAX__ = 255;
pub const GL_AMD_occlusion_query_event = 1;
pub const GL_ALPHA16_EXT = 0x803E;
pub const GL_MODELVIEW25_ARB = 0x8739;
pub const GL_POLYGON_OFFSET_CLAMP = 0x8E1B;
pub const GL_MAX_TESS_CONTROL_TOTAL_OUTPUT_COMPONENTS_EXT = 0x8E85;
pub const GL_MAX_FRAGMENT_INPUT_COMPONENTS = 0x9125;
pub const GL_TEXTURE_COLOR_SAMPLES_NV = 0x9046;
pub const GL_TEXTURE_FREE_MEMORY_ATI = 0x87FC;
pub inline fn glTexCoord2fVertex3fvSUN(arg_9700: [*c]const GLfloat, arg_9701: [*c]const GLfloat) void {
    return epoxy_glTexCoord2fVertex3fvSUN.?(arg_9700, arg_9701);
}
pub inline fn glTexStorage3DMultisample(arg_9702: GLenum, arg_9703: GLsizei, arg_9704: GLenum, arg_9705: GLsizei, arg_9706: GLsizei, arg_9707: GLsizei, arg_9708: GLboolean) void {
    return epoxy_glTexStorage3DMultisample.?(arg_9702, arg_9703, arg_9704, arg_9705, arg_9706, arg_9707, arg_9708);
}
pub const GL_DEBUG_TYPE_ERROR_ARB = 0x824C;
pub inline fn glGetUniformi64vNV(arg_9709: GLuint, arg_9710: GLint, arg_9711: [*c]GLint64EXT) void {
    return epoxy_glGetUniformi64vNV.?(arg_9709, arg_9710, arg_9711);
}
pub inline fn glGetnConvolutionFilter(arg_9712: GLenum, arg_9713: GLenum, arg_9714: GLenum, arg_9715: GLsizei, arg_9716: ?*c_void) void {
    return epoxy_glGetnConvolutionFilter.?(arg_9712, arg_9713, arg_9714, arg_9715, arg_9716);
}
pub const GL_EXT_texture_integer = 1;
pub const GL_TESS_GEN_VERTEX_ORDER_EXT = 0x8E78;
pub const GL_DISJOINT_NV = 0x9283;
pub const GL_MAX_COMBINED_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E1F;
pub const GL_INCR_WRAP = 0x8507;
pub inline fn glGetUniformuiv(arg_9717: GLuint, arg_9718: GLint, arg_9719: [*c]GLuint) void {
    return epoxy_glGetUniformuiv.?(arg_9717, arg_9718, arg_9719);
}
pub const GL_UNSIGNED_INT_8_8_8_8 = 0x8035;
pub const GL_SPRITE_AXIS_SGIX = 0x814A;
pub inline fn glFramebufferTextureEXT(arg_9720: GLenum, arg_9721: GLenum, arg_9722: GLuint, arg_9723: GLint) void {
    return epoxy_glFramebufferTextureEXT.?(arg_9720, arg_9721, arg_9722, arg_9723);
}
pub const GL_PRIMITIVE_BOUNDING_BOX_OES = 0x92BE;
pub const GL_UNSIGNED_SHORT_8_8_MESA = 0x85BA;
pub const GL_STENCIL_BITS = 0x0D57;
pub const GL_COMPRESSED_R11_EAC_OES = 0x9270;
pub const GL_COMPRESSED_ALPHA_ARB = 0x84E9;
pub inline fn glReadBuffer(arg_9724: GLenum) void {
    return epoxy_glReadBuffer.?(arg_9724);
}
pub const GL_CLIP_DISTANCE3_EXT = 0x3003;
pub const GL_IMAGE_1D_ARRAY = 0x9052;
pub const GL_UNPACK_ROW_LENGTH = 0x0CF2;
pub const GL_ARB_gpu_shader_fp64 = 1;
pub inline fn glMultiTexImage2DEXT(arg_9725: GLenum, arg_9726: GLenum, arg_9727: GLint, arg_9728: GLint, arg_9729: GLsizei, arg_9730: GLsizei, arg_9731: GLint, arg_9732: GLenum, arg_9733: GLenum, arg_9734: ?*const c_void) void {
    return epoxy_glMultiTexImage2DEXT.?(arg_9725, arg_9726, arg_9727, arg_9728, arg_9729, arg_9730, arg_9731, arg_9732, arg_9733, arg_9734);
}
pub const GL_DRAW_BUFFER9_ARB = 0x882E;
pub inline fn glProgramUniform1ui64NV(arg_9735: GLuint, arg_9736: GLint, arg_9737: GLuint64EXT) void {
    return epoxy_glProgramUniform1ui64NV.?(arg_9735, arg_9736, arg_9737);
}
pub const GL_IUI_V2F_EXT = 0x81AD;
pub const GL_PIXEL_TRANSFORM_2D_STACK_DEPTH_EXT = 0x8336;
pub const GL_EXT_disjoint_timer_query = 1;
pub inline fn glGetnMinmaxARB(arg_9738: GLenum, arg_9739: GLboolean, arg_9740: GLenum, arg_9741: GLenum, arg_9742: GLsizei, arg_9743: ?*c_void) void {
    return epoxy_glGetnMinmaxARB.?(arg_9738, arg_9739, arg_9740, arg_9741, arg_9742, arg_9743);
}
pub inline fn glVertexWeighthvNV(arg_9744: [*c]const GLhalfNV) void {
    return epoxy_glVertexWeighthvNV.?(arg_9744);
}
pub inline fn INT32_C(c: var) @TypeOf(c) {
    return c;
}
pub inline fn glDepthRangeIndexed(arg_9745: GLuint, arg_9746: GLdouble, arg_9747: GLdouble) void {
    return epoxy_glDepthRangeIndexed.?(arg_9745, arg_9746, arg_9747);
}
pub inline fn glVertexAttrib1dvARB(arg_9748: GLuint, arg_9749: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib1dvARB.?(arg_9748, arg_9749);
}
pub const GL_TEXTURE_2D_MULTISAMPLE_ARRAY = 0x9102;
pub const _SYS_CDEFS_H = 1;
pub const GL_CLAMP_FRAGMENT_COLOR_ARB = 0x891B;
pub const GL_READ_FRAMEBUFFER_EXT = 0x8CA8;
pub const GL_LUMINANCE_ALPHA16I_EXT = 0x8D8D;
pub const GL_LOCATION_INDEX = 0x930F;
pub const GL_LOCAL_CONSTANT_EXT = 0x87C3;
pub const GL_MAX_TESS_EVALUATION_UNIFORM_COMPONENTS = 0x8E80;
pub const GL_INTERNALFORMAT_STENCIL_SIZE = 0x8276;
pub const GL_MAX_VERTEX_BINDABLE_UNIFORMS_EXT = 0x8DE2;
pub const GL_UNSIGNED_INT_SAMPLER_RENDERBUFFER_NV = 0x8E58;
pub const GL_COLOR_MATRIX = 0x80B1;
pub const GL_PIXEL_UNPACK_BUFFER_EXT = 0x88EC;
pub inline fn glWindowPos3fvMESA(arg_9750: [*c]const GLfloat) void {
    return epoxy_glWindowPos3fvMESA.?(arg_9750);
}
pub const GL_NV_shading_rate_image = 1;
pub const GL_COLOR_SUM_EXT = 0x8458;
pub inline fn glWindowPos3sv(arg_9751: [*c]const GLshort) void {
    return epoxy_glWindowPos3sv.?(arg_9751);
}
pub const GL_TEXTURE_INTERNAL_FORMAT_QCOM = 0x8BD5;
pub const GL_GREEN_NV = 0x1904;
pub const GL_DETAIL_TEXTURE_2D_BINDING_SGIS = 0x8096;
pub const GL_RGB16UI = 0x8D77;
pub const GL_MAX_MESH_WORK_GROUP_INVOCATIONS_NV = 0x95A2;
pub const GL_PATH_DASH_OFFSET_NV = 0x907E;
pub const GL_MATRIX8_ARB = 0x88C8;
pub const GL_UNIFORM_BLOCK_NAME_LENGTH = 0x8A41;
pub const GL_DRAW_PIXEL_TOKEN = 0x0705;
pub const GL_UNSIGNED_INT_24_8_OES = 0x84FA;
pub const __SIZEOF_LONG_LONG__ = 8;
pub inline fn glMatrixMultfEXT(arg_9752: GLenum, arg_9753: [*c]const GLfloat) void {
    return epoxy_glMatrixMultfEXT.?(arg_9752, arg_9753);
}
pub inline fn glGlobalAlphaFactorusSUN(arg_9754: GLushort) void {
    return epoxy_glGlobalAlphaFactorusSUN.?(arg_9754);
}
pub const GL_COLOR_ARRAY_COUNT_EXT = 0x8084;
pub inline fn glPolygonOffsetClampEXT(arg_9755: GLfloat, arg_9756: GLfloat, arg_9757: GLfloat) void {
    return epoxy_glPolygonOffsetClampEXT.?(arg_9755, arg_9756, arg_9757);
}
pub const GL_RG8_EXT = 0x822B;
pub const GL_FRAMEBUFFER = 0x8D40;
pub const GL_UNSIGNED_BYTE = 0x1401;
pub inline fn glColor4ubVertex3fvSUN(arg_9758: [*c]const GLubyte, arg_9759: [*c]const GLfloat) void {
    return epoxy_glColor4ubVertex3fvSUN.?(arg_9758, arg_9759);
}
pub const GL_LINEAR_SHARPEN_ALPHA_SGIS = 0x80AE;
pub inline fn glTextureRangeAPPLE(arg_9760: GLenum, arg_9761: GLsizei, arg_9762: ?*const c_void) void {
    return epoxy_glTextureRangeAPPLE.?(arg_9760, arg_9761, arg_9762);
}
pub const GL_TEXTURE_COORD_ARRAY_LIST_STRIDE_IBM = 103084;
pub const GL_RGB8 = 0x8051;
pub inline fn glPrioritizeTextures(arg_9763: GLsizei, arg_9764: [*c]const GLuint, arg_9765: [*c]const GLfloat) void {
    return epoxy_glPrioritizeTextures.?(arg_9763, arg_9764, arg_9765);
}
pub const GL_VENDOR = 0x1F00;
pub const GL_COMPRESSED_RGB_FXT1_3DFX = 0x86B0;
pub const GL_PRIMITIVES_GENERATED_EXT = 0x8C87;
pub const GL_TEXTURE_USAGE_ANGLE = 0x93A2;
pub const GL_EYE_POINT_SGIS = 0x81F4;
pub const GL_VERTEX_ARRAY_TYPE_EXT = 0x807B;
pub const GL_OES_compressed_paletted_texture = 1;
pub const GL_PACK_IMAGE_HEIGHT_EXT = 0x806C;
pub const PRIoFAST8 = "o";
pub inline fn glGetBufferParameteri64v(arg_9766: GLenum, arg_9767: GLenum, arg_9768: [*c]GLint64) void {
    return epoxy_glGetBufferParameteri64v.?(arg_9766, arg_9767, arg_9768);
}
pub const GL_SIGNED_RGBA8_NV = 0x86FC;
pub const __UINT_LEAST32_FMTX__ = "X";
pub const GL_SAMPLER_3D = 0x8B5F;
pub const GL_FLOAT_MAT3x4 = 0x8B68;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_EXT = 0x8365;
pub const GL_422_REV_AVERAGE_EXT = 0x80CF;
pub inline fn glPixelZoomxOES(arg_9769: GLfixed, arg_9770: GLfixed) void {
    return epoxy_glPixelZoomxOES.?(arg_9769, arg_9770);
}
pub const GL_SUBGROUP_FEATURE_ARITHMETIC_BIT_KHR = 0x00000004;
pub const GL_DOUBLE_MAT3x2_EXT = 0x8F4B;
pub const GL_NO_ERROR = 0;
pub const GL_RGB12_EXT = 0x8053;
pub inline fn glDispatchComputeIndirect(arg_9771: GLintptr) void {
    return epoxy_glDispatchComputeIndirect.?(arg_9771);
}
pub const GL_UNSIGNED_INT_SAMPLER_2D_MULTISAMPLE_ARRAY_OES = 0x910D;
pub const GL_SPARE0_NV = 0x852E;
pub const GL_PURGEABLE_APPLE = 0x8A1D;
pub const GL_RGBA16F_ARB = 0x881A;
pub const GL_QCOM_shader_framebuffer_fetch_rate = 1;
pub inline fn glProgramNamedParameter4fvNV(arg_9772: GLuint, arg_9773: GLsizei, arg_9774: [*c]const GLubyte, arg_9775: [*c]const GLfloat) void {
    return epoxy_glProgramNamedParameter4fvNV.?(arg_9772, arg_9773, arg_9774, arg_9775);
}
pub const GL_TEXTURE_EXTERNAL_OES = 0x8D65;
pub const GL_MAX_SHADER_PIXEL_LOCAL_STORAGE_FAST_SIZE_EXT = 0x8F63;
pub const GL_ARB_buffer_storage = 1;
pub const GL_HSL_LUMINOSITY = 0x92B0;
pub const GL_SYNC_FENCE = 0x9116;
pub inline fn glNormal3dv(arg_9776: [*c]const GLdouble) void {
    return epoxy_glNormal3dv.?(arg_9776);
}
pub inline fn glEvalCoord2xOES(arg_9777: GLfixed, arg_9778: GLfixed) void {
    return epoxy_glEvalCoord2xOES.?(arg_9777, arg_9778);
}
pub const GL_INTERNALFORMAT_ALPHA_SIZE = 0x8274;
pub const GL_SHORT = 0x1402;
pub const GL_LINES_ADJACENCY_OES = 0x000A;
pub const GL_DRAW_BUFFER15_ARB = 0x8834;
pub inline fn glPolygonOffsetx(arg_9779: GLfixed, arg_9780: GLfixed) void {
    return epoxy_glPolygonOffsetx.?(arg_9779, arg_9780);
}
pub inline fn glCompressedMultiTexSubImage2DEXT(arg_9781: GLenum, arg_9782: GLenum, arg_9783: GLint, arg_9784: GLint, arg_9785: GLint, arg_9786: GLsizei, arg_9787: GLsizei, arg_9788: GLenum, arg_9789: GLsizei, arg_9790: ?*const c_void) void {
    return epoxy_glCompressedMultiTexSubImage2DEXT.?(arg_9781, arg_9782, arg_9783, arg_9784, arg_9785, arg_9786, arg_9787, arg_9788, arg_9789, arg_9790);
}
pub inline fn glGetProgramEnvParameterfvARB(arg_9791: GLenum, arg_9792: GLuint, arg_9793: [*c]GLfloat) void {
    return epoxy_glGetProgramEnvParameterfvARB.?(arg_9791, arg_9792, arg_9793);
}
pub inline fn glTexCoordPointerEXT(arg_9794: GLint, arg_9795: GLenum, arg_9796: GLsizei, arg_9797: GLsizei, arg_9798: ?*const c_void) void {
    return epoxy_glTexCoordPointerEXT.?(arg_9794, arg_9795, arg_9796, arg_9797, arg_9798);
}
pub const GL_EXCLUSION_NV = 0x92A0;
pub inline fn glClipPlanefOES(arg_9799: GLenum, arg_9800: [*c]const GLfloat) void {
    return epoxy_glClipPlanefOES.?(arg_9799, arg_9800);
}
pub inline fn glInvalidateNamedFramebufferSubData(arg_9801: GLuint, arg_9802: GLsizei, arg_9803: [*c]const GLenum, arg_9804: GLint, arg_9805: GLint, arg_9806: GLsizei, arg_9807: GLsizei) void {
    return epoxy_glInvalidateNamedFramebufferSubData.?(arg_9801, arg_9802, arg_9803, arg_9804, arg_9805, arg_9806, arg_9807);
}
pub inline fn glGetCompressedTextureImageEXT(arg_9808: GLuint, arg_9809: GLenum, arg_9810: GLint, arg_9811: ?*c_void) void {
    return epoxy_glGetCompressedTextureImageEXT.?(arg_9808, arg_9809, arg_9810, arg_9811);
}
pub const GL_FRACTIONAL_ODD = 0x8E7B;
pub const GL_UNPACK_SKIP_ROWS_EXT = 0x0CF3;
pub inline fn glGetTexParameterxv(arg_9812: GLenum, arg_9813: GLenum, arg_9814: [*c]GLfixed) void {
    return epoxy_glGetTexParameterxv.?(arg_9812, arg_9813, arg_9814);
}
pub const GL_STENCIL_FAIL = 0x0B94;
pub inline fn glNamedFramebufferParameteriEXT(arg_9815: GLuint, arg_9816: GLenum, arg_9817: GLint) void {
    return epoxy_glNamedFramebufferParameteriEXT.?(arg_9815, arg_9816, arg_9817);
}
pub const GL_PROGRAM_TARGET_NV = 0x8646;
pub const GL_RENDERBUFFER_BINDING_EXT = 0x8CA7;
pub inline fn glValidateProgram(arg_9818: GLuint) void {
    return epoxy_glValidateProgram.?(arg_9818);
}
pub const GL_TEXTURE_CUBE_MAP_ARRAY = 0x9009;
pub const GL_FOG_COORD_ARRAY = 0x8457;
pub const GL_DRAW_BUFFER6 = 0x882B;
pub inline fn glNormal3xvOES(arg_9819: [*c]const GLfixed) void {
    return epoxy_glNormal3xvOES.?(arg_9819);
}
pub inline fn glBlendEquationSeparateOES(arg_9820: GLenum, arg_9821: GLenum) void {
    return epoxy_glBlendEquationSeparateOES.?(arg_9820, arg_9821);
}
pub const GL_LO_SCALE_NV = 0x870F;
pub const SCNdFAST32 = __PRIPTR_PREFIX ++ "d";
pub const GL_SAMPLE_COVERAGE_INVERT = 0x80AB;
pub const GL_MAX_FRAGMENT_ATOMIC_COUNTER_BUFFERS = 0x92D0;
pub const GL_DEBUG_SOURCE_APPLICATION_KHR = 0x824A;
pub const GL_GREATER = 0x0204;
pub inline fn glBitmap(arg_9822: GLsizei, arg_9823: GLsizei, arg_9824: GLfloat, arg_9825: GLfloat, arg_9826: GLfloat, arg_9827: GLfloat, arg_9828: [*c]const GLubyte) void {
    return epoxy_glBitmap.?(arg_9822, arg_9823, arg_9824, arg_9825, arg_9826, arg_9827, arg_9828);
}
pub inline fn glRotated(arg_9829: GLdouble, arg_9830: GLdouble, arg_9831: GLdouble, arg_9832: GLdouble) void {
    return epoxy_glRotated.?(arg_9829, arg_9830, arg_9831, arg_9832);
}
pub const GL_ARB_fragment_layer_viewport = 1;
pub const GL_SAMPLER_1D = 0x8B5D;
pub inline fn glVertexAttrib3dvARB(arg_9833: GLuint, arg_9834: [*c]const GLdouble) void {
    return epoxy_glVertexAttrib3dvARB.?(arg_9833, arg_9834);
}
pub const GL_DOUBLE_MAT3x4_EXT = 0x8F4C;
pub const GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT = 0x8A54;
pub const __OBJC_BOOL_IS_BOOL = 0;
pub const GL_HISTOGRAM_SINK = 0x802D;
pub inline fn glClearPixelLocalStorageuiEXT(arg_9835: GLsizei, arg_9836: GLsizei, arg_9837: [*c]const GLuint) void {
    return epoxy_glClearPixelLocalStorageuiEXT.?(arg_9835, arg_9836, arg_9837);
}
pub const GL_GUILTY_CONTEXT_RESET = 0x8253;
pub const GL_INGR_color_clamp = 1;
pub const GL_Q = 0x2003;
pub const GL_VARIABLE_E_NV = 0x8527;
pub inline fn glGetObjectParameterfvARB(arg_9838: GLhandleARB, arg_9839: GLenum, arg_9840: [*c]GLfloat) void {
    return epoxy_glGetObjectParameterfvARB.?(arg_9838, arg_9839, arg_9840);
}
pub const GL_TEXTURE_SPARSE_EXT = 0x91A6;
pub inline fn glVertexStream2iATI(arg_9841: GLenum, arg_9842: GLint, arg_9843: GLint) void {
    return epoxy_glVertexStream2iATI.?(arg_9841, arg_9842, arg_9843);
}
pub const GL_INSTRUMENT_BUFFER_POINTER_SGIX = 0x8180;
pub const GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT = 0x8CD2;
pub const GL_EXT_buffer_storage = 1;
pub const GL_BIAS_BIT_ATI = 0x00000008;
pub const GL_UNSIGNED_INT_IMAGE_1D = 0x9062;
pub const GL_RGBA_UNSIGNED_DOT_PRODUCT_MAPPING_NV = 0x86D9;
pub const GL_R8UI = 0x8232;
pub inline fn glRasterPos3dv(arg_9844: [*c]const GLdouble) void {
    return epoxy_glRasterPos3dv.?(arg_9844);
}
pub const GL_PRIMITIVE_RESTART_NV = 0x8558;
pub inline fn glVertexArrayVertexOffsetEXT(arg_9845: GLuint, arg_9846: GLuint, arg_9847: GLint, arg_9848: GLenum, arg_9849: GLsizei, arg_9850: GLintptr) void {
    return epoxy_glVertexArrayVertexOffsetEXT.?(arg_9845, arg_9846, arg_9847, arg_9848, arg_9849, arg_9850);
}
pub inline fn glProgramEnvParameterI4iNV(arg_9851: GLenum, arg_9852: GLuint, arg_9853: GLint, arg_9854: GLint, arg_9855: GLint, arg_9856: GLint) void {
    return epoxy_glProgramEnvParameterI4iNV.?(arg_9851, arg_9852, arg_9853, arg_9854, arg_9855, arg_9856);
}
pub inline fn glGetMinmaxParameteriv(arg_9857: GLenum, arg_9858: GLenum, arg_9859: [*c]GLint) void {
    return epoxy_glGetMinmaxParameteriv.?(arg_9857, arg_9858, arg_9859);
}
pub const GL_TEXTURE_IMMUTABLE_FORMAT_EXT = 0x912F;
pub const GL_SUN_mesh_array = 1;
pub const GL_UNSIGNED_INT_IMAGE_CUBE_MAP_ARRAY_OES = 0x906A;
pub inline fn glWindowPos2d(arg_9860: GLdouble, arg_9861: GLdouble) void {
    return epoxy_glWindowPos2d.?(arg_9860, arg_9861);
}
pub const GL_LOSE_CONTEXT_ON_RESET_ARB = 0x8252;
pub const GL_MATRIX0_NV = 0x8630;
pub const GL_SHADER_IMAGE_ATOMIC = 0x82A6;
pub const GL_UNSIGNED_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900F;
pub inline fn glGenNamesAMD(arg_9862: GLenum, arg_9863: GLuint, arg_9864: [*c]GLuint) void {
    return epoxy_glGenNamesAMD.?(arg_9862, arg_9863, arg_9864);
}
pub const GL_LOCATION_COMPONENT = 0x934A;
pub const __FLT_MAX_EXP__ = 128;
pub const GL_UNIFORM_BUFFER = 0x8A11;
pub const GL_PERFQUERY_COUNTER_NAME_LENGTH_MAX_INTEL = 0x94FE;
pub const GL_IMAGE_2D_ARRAY_EXT = 0x9053;
pub const GL_CON_13_ATI = 0x894E;
pub inline fn glPushDebugGroupKHR(arg_9865: GLenum, arg_9866: GLuint, arg_9867: GLsizei, arg_9868: [*c]const GLchar) void {
    return epoxy_glPushDebugGroupKHR.?(arg_9865, arg_9866, arg_9867, arg_9868);
}
pub const GL_SGIS_pixel_texture = 1;
pub const GL_SAMPLE_POSITION_NV = 0x8E50;
pub const GL_MAP1_VERTEX_ATTRIB13_4_NV = 0x866D;
pub const __DECIMAL_DIG__ = __LDBL_DECIMAL_DIG__;
pub const GL_CLIP_PLANE3_IMG = 0x3003;
pub const GL_ALWAYS = 0x0207;
pub const GL_PROGRAM_POINT_SIZE_ARB = 0x8642;
pub inline fn glColor3iv(arg_9869: [*c]const GLint) void {
    return epoxy_glColor3iv.?(arg_9869);
}
pub inline fn glDeleteVertexShaderEXT(arg_9870: GLuint) void {
    return epoxy_glDeleteVertexShaderEXT.?(arg_9870);
}
pub const GL_STENCIL_INDEX8_EXT = 0x8D48;
pub const GL_EXP2 = 0x0801;
pub inline fn glProgramBinary(arg_9871: GLuint, arg_9872: GLenum, arg_9873: ?*const c_void, arg_9874: GLsizei) void {
    return epoxy_glProgramBinary.?(arg_9871, arg_9872, arg_9873, arg_9874);
}
pub const GL_MAX_TRANSFORM_FEEDBACK_SEPARATE_ATTRIBS = 0x8C8B;
pub const GL_TEXTURE_3D_BINDING_EXT = 0x806A;
pub inline fn glVertexStream3iATI(arg_9875: GLenum, arg_9876: GLint, arg_9877: GLint, arg_9878: GLint) void {
    return epoxy_glVertexStream3iATI.?(arg_9875, arg_9876, arg_9877, arg_9878);
}
pub const GL_PATH_MODELVIEW_MATRIX_NV = 0x0BA6;
pub inline fn glPixelMapusv(arg_9879: GLenum, arg_9880: GLsizei, arg_9881: [*c]const GLushort) void {
    return epoxy_glPixelMapusv.?(arg_9879, arg_9880, arg_9881);
}
pub inline fn glBindProgramNV(arg_9882: GLenum, arg_9883: GLuint) void {
    return epoxy_glBindProgramNV.?(arg_9882, arg_9883);
}
pub const GL_LINE_BIT = 0x00000004;
pub const GL_CONDITION_SATISFIED_APPLE = 0x911C;
pub const GL_NV_query_resource_tag = 1;
pub inline fn glGetObjectBufferfvATI(arg_9884: GLuint, arg_9885: GLenum, arg_9886: [*c]GLfloat) void {
    return epoxy_glGetObjectBufferfvATI.?(arg_9884, arg_9885, arg_9886);
}
pub const GL_MAX_DETACHED_TEXTURES_NV = 0x95AC;
pub const GL_TEXTURE_PRE_SPECULAR_HP = 0x8169;
pub inline fn glVertexArrayVertexAttribIFormatEXT(arg_9887: GLuint, arg_9888: GLuint, arg_9889: GLint, arg_9890: GLenum, arg_9891: GLuint) void {
    return epoxy_glVertexArrayVertexAttribIFormatEXT.?(arg_9887, arg_9888, arg_9889, arg_9890, arg_9891);
}
pub const GL_QUAD_STRIP = 0x0008;
pub const GL_PRIMITIVE_RESTART_FOR_PATCHES_SUPPORTED_OES = 0x8221;
pub const __UINT32_FMTx__ = "x";
pub inline fn glGetFramebufferParameterivEXT(arg_9892: GLuint, arg_9893: GLenum, arg_9894: [*c]GLint) void {
    return epoxy_glGetFramebufferParameterivEXT.?(arg_9892, arg_9893, arg_9894);
}
pub const GL_ARB_draw_elements_base_vertex = 1;
pub inline fn glIsShader(arg_9895: GLuint) GLboolean {
    return epoxy_glIsShader.?(arg_9895);
}
pub const GL_DEBUG_LOGGED_MESSAGES_AMD = 0x9145;
pub const GL_MAX_VERTEX_STREAMS = 0x8E71;
pub inline fn glGetPerfQueryInfoINTEL(arg_9896: GLuint, arg_9897: GLuint, arg_9898: [*c]GLchar, arg_9899: [*c]GLuint, arg_9900: [*c]GLuint, arg_9901: [*c]GLuint, arg_9902: [*c]GLuint) void {
    return epoxy_glGetPerfQueryInfoINTEL.?(arg_9896, arg_9897, arg_9898, arg_9899, arg_9900, arg_9901, arg_9902);
}
pub const __INT_FAST32_TYPE__ = c_int;
pub const GL_TEXTURE_MAX_LEVEL = 0x813D;
pub inline fn glPathStencilFuncNV(arg_9903: GLenum, arg_9904: GLint, arg_9905: GLuint) void {
    return epoxy_glPathStencilFuncNV.?(arg_9903, arg_9904, arg_9905);
}
pub inline fn glBindTextureUnitParameterEXT(arg_9906: GLenum, arg_9907: GLenum) GLuint {
    return epoxy_glBindTextureUnitParameterEXT.?(arg_9906, arg_9907);
}
pub inline fn glProgramUniformMatrix2dv(arg_9908: GLuint, arg_9909: GLint, arg_9910: GLsizei, arg_9911: GLboolean, arg_9912: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2dv.?(arg_9908, arg_9909, arg_9910, arg_9911, arg_9912);
}
pub inline fn glVertexAttribI4bv(arg_9913: GLuint, arg_9914: [*c]const GLbyte) void {
    return epoxy_glVertexAttribI4bv.?(arg_9913, arg_9914);
}
pub const GL_COMBINER_INPUT_NV = 0x8542;
pub const GL_DRAW_BUFFER14 = 0x8833;
pub const GL_TEXTURE22_ARB = 0x84D6;
pub inline fn glVertexStream4dATI(arg_9915: GLenum, arg_9916: GLdouble, arg_9917: GLdouble, arg_9918: GLdouble, arg_9919: GLdouble) void {
    return epoxy_glVertexStream4dATI.?(arg_9915, arg_9916, arg_9917, arg_9918, arg_9919);
}
pub const GL_MIRROR_CLAMP_TO_EDGE_ATI = 0x8743;
pub const GL_PN_TRIANGLES_NORMAL_MODE_LINEAR_ATI = 0x87F7;
pub const GL_PROGRAM = 0x82E2;
pub const GL_COLOR_TABLE_BIAS_SGI = 0x80D7;
pub inline fn glClearTexImage(arg_9920: GLuint, arg_9921: GLint, arg_9922: GLenum, arg_9923: GLenum, arg_9924: ?*const c_void) void {
    return epoxy_glClearTexImage.?(arg_9920, arg_9921, arg_9922, arg_9923, arg_9924);
}
pub const GL_READ_FRAMEBUFFER_BINDING_APPLE = 0x8CAA;
pub const GL_REFERENCED_BY_TESS_EVALUATION_SHADER_EXT = 0x9308;
pub inline fn glTextureImage3DEXT(arg_9925: GLuint, arg_9926: GLenum, arg_9927: GLint, arg_9928: GLint, arg_9929: GLsizei, arg_9930: GLsizei, arg_9931: GLsizei, arg_9932: GLint, arg_9933: GLenum, arg_9934: GLenum, arg_9935: ?*const c_void) void {
    return epoxy_glTextureImage3DEXT.?(arg_9925, arg_9926, arg_9927, arg_9928, arg_9929, arg_9930, arg_9931, arg_9932, arg_9933, arg_9934, arg_9935);
}
pub inline fn glPatchParameteriOES(arg_9936: GLenum, arg_9937: GLint) void {
    return epoxy_glPatchParameteriOES.?(arg_9936, arg_9937);
}
pub const GL_OFFSET_PROJECTIVE_TEXTURE_2D_NV = 0x8850;
pub inline fn glTexImage3DOES(arg_9938: GLenum, arg_9939: GLint, arg_9940: GLenum, arg_9941: GLsizei, arg_9942: GLsizei, arg_9943: GLsizei, arg_9944: GLint, arg_9945: GLenum, arg_9946: GLenum, arg_9947: ?*const c_void) void {
    return epoxy_glTexImage3DOES.?(arg_9938, arg_9939, arg_9940, arg_9941, arg_9942, arg_9943, arg_9944, arg_9945, arg_9946, arg_9947);
}
pub inline fn glGetNamedProgramLocalParameterdvEXT(arg_9948: GLuint, arg_9949: GLenum, arg_9950: GLuint, arg_9951: [*c]GLdouble) void {
    return epoxy_glGetNamedProgramLocalParameterdvEXT.?(arg_9948, arg_9949, arg_9950, arg_9951);
}
pub const GL_DRAW_BUFFER15_NV = 0x8834;
pub const GL_INDEX_TEST_EXT = 0x81B5;
pub inline fn glIsFramebufferEXT(arg_9952: GLuint) GLboolean {
    return epoxy_glIsFramebufferEXT.?(arg_9952);
}
pub const GL_SGIX_blend_alpha_minmax = 1;
pub const GL_MAX_ACTIVE_LIGHTS_SGIX = 0x8405;
pub inline fn glGetObjectParameterivAPPLE(arg_9953: GLenum, arg_9954: GLuint, arg_9955: GLenum, arg_9956: [*c]GLint) void {
    return epoxy_glGetObjectParameterivAPPLE.?(arg_9953, arg_9954, arg_9955, arg_9956);
}
pub const GL_OES_depth24 = 1;
pub inline fn glBindTexture(arg_9957: GLenum, arg_9958: GLuint) void {
    return epoxy_glBindTexture.?(arg_9957, arg_9958);
}
pub const GL_DEPTH_STENCIL_ATTACHMENT = 0x821A;
pub const GL_BACK_NORMALS_HINT_PGI = 0x1A223;
pub const GL_MAX_GEOMETRY_UNIFORM_BLOCKS = 0x8A2C;
pub const GL_PROGRAM_FORMAT_ASCII_ARB = 0x8875;
pub const GL_QCOM_framebuffer_foveated = 1;
pub inline fn glIsEnablediOES(arg_9959: GLenum, arg_9960: GLuint) GLboolean {
    return epoxy_glIsEnablediOES.?(arg_9959, arg_9960);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_VIEW_TARGETS_OVR = 0x9633;
pub const SCNd16 = "hd";
pub inline fn glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN(arg_9961: GLuint, arg_9962: GLfloat, arg_9963: GLfloat, arg_9964: GLfloat, arg_9965: GLfloat, arg_9966: GLfloat, arg_9967: GLfloat, arg_9968: GLfloat, arg_9969: GLfloat) void {
    return epoxy_glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN.?(arg_9961, arg_9962, arg_9963, arg_9964, arg_9965, arg_9966, arg_9967, arg_9968, arg_9969);
}
pub const GL_SPOT_CUTOFF = 0x1206;
pub const GL_RGB565 = 0x8D62;
pub inline fn glGetVertexAttribivARB(arg_9970: GLuint, arg_9971: GLenum, arg_9972: [*c]GLint) void {
    return epoxy_glGetVertexAttribivARB.?(arg_9970, arg_9971, arg_9972);
}
pub const GL_FUNC_ADD_OES = 0x8006;
pub const GL_TEXTURE_MATERIAL_PARAMETER_EXT = 0x8352;
pub const GL_INDEX_ARRAY_BUFFER_BINDING = 0x8899;
pub const GL_SAMPLE_MASK_INVERT_EXT = 0x80AB;
pub const GL_SHADING_RATE_SAMPLE_ORDER_DEFAULT_NV = 0x95AE;
pub const GL_QUERY_BY_REGION_NO_WAIT = 0x8E16;
pub inline fn glShaderStorageBlockBinding(arg_9973: GLuint, arg_9974: GLuint, arg_9975: GLuint) void {
    return epoxy_glShaderStorageBlockBinding.?(arg_9973, arg_9974, arg_9975);
}
pub inline fn glViewportIndexedfv(arg_9976: GLuint, arg_9977: [*c]const GLfloat) void {
    return epoxy_glViewportIndexedfv.?(arg_9976, arg_9977);
}
pub const GL_STREAM_DRAW_ARB = 0x88E0;
pub const GL_PIXELS_PER_SAMPLE_PATTERN_X_AMD = 0x91AE;
pub inline fn glGetnUniformfvKHR(arg_9978: GLuint, arg_9979: GLint, arg_9980: GLsizei, arg_9981: [*c]GLfloat) void {
    return epoxy_glGetnUniformfvKHR.?(arg_9978, arg_9979, arg_9980, arg_9981);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR = 0x93D3;
pub const GL_EXT_memory_object = 1;
pub const GL_LIGHT0 = 0x4000;
pub const __CHAR_BIT__ = 8;
pub const GL_GENERIC_ATTRIB_NV = 0x8C7D;
pub inline fn glNormal3i(arg_9982: GLint, arg_9983: GLint, arg_9984: GLint) void {
    return epoxy_glNormal3i.?(arg_9982, arg_9983, arg_9984);
}
pub const GL_PLUS_NV = 0x9291;
pub const GL_TEXTURE_RENDERBUFFER_DATA_STORE_BINDING_NV = 0x8E54;
pub inline fn glMultiDrawElementsBaseVertex(arg_9985: GLenum, arg_9986: [*c]const GLsizei, arg_9987: GLenum, arg_9988: [*c]const ?*const c_void, arg_9989: GLsizei, arg_9990: [*c]const GLint) void {
    return epoxy_glMultiDrawElementsBaseVertex.?(arg_9985, arg_9986, arg_9987, arg_9988, arg_9989, arg_9990);
}
pub const GL_OES_texture_3D = 1;
pub inline fn glUniform1f(arg_9991: GLint, arg_9992: GLfloat) void {
    return epoxy_glUniform1f.?(arg_9991, arg_9992);
}
pub const GL_TEXTURE_PRIORITY_EXT = 0x8066;
pub inline fn glAsyncCopyBufferSubDataNVX(arg_9993: GLsizei, arg_9994: [*c]const GLuint, arg_9995: [*c]const GLuint64, arg_9996: GLuint, arg_9997: GLbitfield, arg_9998: GLuint, arg_9999: GLuint, arg_10000: GLintptr, arg_10001: GLintptr, arg_10002: GLsizeiptr, arg_10003: GLsizei, arg_10004: [*c]const GLuint, arg_10005: [*c]const GLuint64) GLuint {
    return epoxy_glAsyncCopyBufferSubDataNVX.?(arg_9993, arg_9994, arg_9995, arg_9996, arg_9997, arg_9998, arg_9999, arg_10000, arg_10001, arg_10002, arg_10003, arg_10004, arg_10005);
}
pub const GL_QUARTER_BIT_ATI = 0x00000010;
pub const GL_QUERY_TARGET = 0x82EA;
pub const SCNu8 = "hhu";
pub const GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT = 0x8CD0;
pub inline fn glShaderSourceARB(arg_10006: GLhandleARB, arg_10007: GLsizei, arg_10008: [*c][*c]const GLcharARB, arg_10009: [*c]const GLint) void {
    return epoxy_glShaderSourceARB.?(arg_10006, arg_10007, arg_10008, arg_10009);
}
pub const GL_MAGNITUDE_BIAS_NV = 0x8718;
pub inline fn glVertexAttribDivisorNV(arg_10010: GLuint, arg_10011: GLuint) void {
    return epoxy_glVertexAttribDivisorNV.?(arg_10010, arg_10011);
}
pub const GL_RENDERBUFFER_STENCIL_SIZE_OES = 0x8D55;
pub const GL_MATRIX_INDEX_ARRAY_ARB = 0x8844;
pub const GL_TIME_ELAPSED = 0x88BF;
pub const GL_LAYOUT_COLOR_ATTACHMENT_EXT = 0x958E;
pub const GL_UNIFORM_BUFFER_EXT = 0x8DEE;
pub const GL_ARB_fragment_program = 1;
pub const GL_COLOR_EXT = 0x1800;
pub inline fn glPatchParameteriEXT(arg_10012: GLenum, arg_10013: GLint) void {
    return epoxy_glPatchParameteriEXT.?(arg_10012, arg_10013);
}
pub const GL_BLEND_SRC_ALPHA_EXT = 0x80CB;
pub const GL_MAX_DRAW_BUFFERS_ARB = 0x8824;
pub const GL_DOT3_RGB_ARB = 0x86AE;
pub const GL_TEXTURE_1D = 0x0DE0;
pub const __HAVE_GENERIC_SELECTION = 1;
pub const GL_BUFFER_USAGE = 0x8765;
pub const GL_TEXTURE_BUFFER_FORMAT_EXT = 0x8C2E;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_START_EXT = 0x8C84;
pub const INTPTR_MIN = -@as(c_long, 9223372036854775807) - 1;
pub inline fn glStencilThenCoverFillPathInstancedNV(arg_10014: GLsizei, arg_10015: GLenum, arg_10016: ?*const c_void, arg_10017: GLuint, arg_10018: GLenum, arg_10019: GLuint, arg_10020: GLenum, arg_10021: GLenum, arg_10022: [*c]const GLfloat) void {
    return epoxy_glStencilThenCoverFillPathInstancedNV.?(arg_10014, arg_10015, arg_10016, arg_10017, arg_10018, arg_10019, arg_10020, arg_10021, arg_10022);
}
pub const GL_FRAMEBUFFER_SRGB = 0x8DB9;
pub inline fn glCompressedMultiTexImage3DEXT(arg_10023: GLenum, arg_10024: GLenum, arg_10025: GLint, arg_10026: GLenum, arg_10027: GLsizei, arg_10028: GLsizei, arg_10029: GLsizei, arg_10030: GLint, arg_10031: GLsizei, arg_10032: ?*const c_void) void {
    return epoxy_glCompressedMultiTexImage3DEXT.?(arg_10023, arg_10024, arg_10025, arg_10026, arg_10027, arg_10028, arg_10029, arg_10030, arg_10031, arg_10032);
}
pub const GL_FLOAT_MAT3x4_NV = 0x8B68;
pub const GL_AMD_shader_image_load_store_lod = 1;
pub inline fn glCopyImageSubDataEXT(arg_10033: GLuint, arg_10034: GLenum, arg_10035: GLint, arg_10036: GLint, arg_10037: GLint, arg_10038: GLint, arg_10039: GLuint, arg_10040: GLenum, arg_10041: GLint, arg_10042: GLint, arg_10043: GLint, arg_10044: GLint, arg_10045: GLsizei, arg_10046: GLsizei, arg_10047: GLsizei) void {
    return epoxy_glCopyImageSubDataEXT.?(arg_10033, arg_10034, arg_10035, arg_10036, arg_10037, arg_10038, arg_10039, arg_10040, arg_10041, arg_10042, arg_10043, arg_10044, arg_10045, arg_10046, arg_10047);
}
pub const GL_BLEND_SRC_RGB_OES = 0x80C9;
pub const GL_MAX_CULL_DISTANCES_EXT = 0x82F9;
pub const GL_DEPTH_BUFFER_FLOAT_MODE_NV = 0x8DAF;
pub inline fn glMakeTextureHandleResidentARB(arg_10048: GLuint64) void {
    return epoxy_glMakeTextureHandleResidentARB.?(arg_10048);
}
pub const GL_IMG_shader_binary = 1;
pub const GL_DUAL_INTENSITY16_SGIS = 0x811B;
pub const GL_UNSIGNED_INT_VEC4_EXT = 0x8DC8;
pub const GL_SCREEN_NV = 0x9295;
pub const GL_PRIMITIVE_ID_NV = 0x8C7C;
pub inline fn glGetProgramEnvParameterIivNV(arg_10049: GLenum, arg_10050: GLuint, arg_10051: [*c]GLint) void {
    return epoxy_glGetProgramEnvParameterIivNV.?(arg_10049, arg_10050, arg_10051);
}
pub const GL_DEBUG_SEVERITY_LOW_ARB = 0x9148;
pub inline fn glVertex3sv(arg_10052: [*c]const GLshort) void {
    return epoxy_glVertex3sv.?(arg_10052);
}
pub const GL_PIXEL_UNPACK_BUFFER = 0x88EC;
pub const GL_REG_17_ATI = 0x8932;
pub inline fn glGetnPixelMapfv(arg_10053: GLenum, arg_10054: GLsizei, arg_10055: [*c]GLfloat) void {
    return epoxy_glGetnPixelMapfv.?(arg_10053, arg_10054, arg_10055);
}
pub const PRIxLEAST16 = "x";
pub const GL_PROJECTION_STACK_DEPTH = 0x0BA4;
pub const KHRONOS_SUPPORT_INT64 = 1;
pub const GL_COLOR_TABLE_WIDTH = 0x80D9;
pub const GL_DRAW_FRAMEBUFFER_BINDING_NV = 0x8CA6;
pub const GL_REPLACE = 0x1E01;
pub const ____gwchar_t_defined = 1;
pub const GL_TEXTURE_FETCH_BARRIER_BIT_EXT = 0x00000008;
pub const GL_TRIANGLES_ADJACENCY_OES = 0x000C;
pub const GL_ALL_ATTRIB_BITS = 0xFFFFFFFF;
pub const GL_HORIZONTAL_LINE_TO_NV = 0x06;
pub const GL_IMAGE_1D_ARRAY_EXT = 0x9052;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8 = 0x93D7;
pub inline fn glCopyTextureSubImage1DEXT(arg_10056: GLuint, arg_10057: GLenum, arg_10058: GLint, arg_10059: GLint, arg_10060: GLint, arg_10061: GLint, arg_10062: GLsizei) void {
    return epoxy_glCopyTextureSubImage1DEXT.?(arg_10056, arg_10057, arg_10058, arg_10059, arg_10060, arg_10061, arg_10062);
}
pub const GL_NORMAL_ARRAY_ADDRESS_NV = 0x8F22;
pub const PRIiFAST32 = __PRIPTR_PREFIX ++ "i";
pub const GL_STENCIL_ATTACHMENT_OES = 0x8D20;
pub inline fn glCopyTexSubImage1D(arg_10063: GLenum, arg_10064: GLint, arg_10065: GLint, arg_10066: GLint, arg_10067: GLint, arg_10068: GLsizei) void {
    return epoxy_glCopyTexSubImage1D.?(arg_10063, arg_10064, arg_10065, arg_10066, arg_10067, arg_10068);
}
pub const GL_PARAMETER_BUFFER_BINDING = 0x80EF;
pub inline fn glVertex2xOES(arg_10069: GLfixed) void {
    return epoxy_glVertex2xOES.?(arg_10069);
}
pub inline fn glVertexAttrib3sv(arg_10070: GLuint, arg_10071: [*c]const GLshort) void {
    return epoxy_glVertexAttrib3sv.?(arg_10070, arg_10071);
}
pub const __SHRT_MAX__ = 32767;
pub const GL_MAX_TESS_EVALUATION_OUTPUT_COMPONENTS_EXT = 0x8E86;
pub const GL_AUTO_GENERATE_MIPMAP = 0x8295;
pub const GL_OBJECT_TYPE_ARB = 0x8B4E;
pub inline fn glElementPointerATI(arg_10072: GLenum, arg_10073: ?*const c_void) void {
    return epoxy_glElementPointerATI.?(arg_10072, arg_10073);
}
pub const GL_CON_2_ATI = 0x8943;
pub const GL_IMAGE_BINDING_LAYERED = 0x8F3C;
pub const GL_TRANSFORM_FEEDBACK_BUFFER_MODE = 0x8C7F;
pub inline fn glTexCoord2hNV(arg_10074: GLhalfNV, arg_10075: GLhalfNV) void {
    return epoxy_glTexCoord2hNV.?(arg_10074, arg_10075);
}
pub const GL_LUMINANCE16_EXT = 0x8042;
pub const GL_AMD_gpu_shader_int64 = 1;
pub const GL_COLOR_TABLE_BLUE_SIZE_SGI = 0x80DC;
pub const GL_POST_CONVOLUTION_GREEN_BIAS = 0x8021;
pub const GL_MAX_ARRAY_TEXTURE_LAYERS = 0x88FF;
pub const GL_IMAGE_1D = 0x904C;
pub const GL_NV_bindless_multi_draw_indirect_count = 1;
pub inline fn glUniform1iARB(arg_10076: GLint, arg_10077: GLint) void {
    return epoxy_glUniform1iARB.?(arg_10076, arg_10077);
}
pub const GL_SOURCE1_RGB_ARB = 0x8581;
pub const GL_SCISSOR_BOX = 0x0C10;
pub const GL_TEXTURE_COMPARE_FUNC_EXT = 0x884D;
pub const GL_CLIP_DISTANCE5 = 0x3005;
pub inline fn glReferencePlaneSGIX(arg_10078: [*c]const GLdouble) void {
    return epoxy_glReferencePlaneSGIX.?(arg_10078);
}
pub const GL_MAX_IMAGE_UNITS = 0x8F38;
pub inline fn glDrawTexfvOES(arg_10079: [*c]const GLfloat) void {
    return epoxy_glDrawTexfvOES.?(arg_10079);
}
pub inline fn glDispatchCompute(arg_10080: GLuint, arg_10081: GLuint, arg_10082: GLuint) void {
    return epoxy_glDispatchCompute.?(arg_10080, arg_10081, arg_10082);
}
pub const GL_COMPRESSED_SRGB8_ETC2 = 0x9275;
pub const GL_OBJECT_TYPE_APPLE = 0x9112;
pub const GL_PERFQUERY_GPA_EXTENDED_COUNTERS_INTEL = 0x9500;
pub inline fn glMatrixScalefEXT(arg_10083: GLenum, arg_10084: GLfloat, arg_10085: GLfloat, arg_10086: GLfloat) void {
    return epoxy_glMatrixScalefEXT.?(arg_10083, arg_10084, arg_10085, arg_10086);
}
pub inline fn glIsFenceAPPLE(arg_10087: GLuint) GLboolean {
    return epoxy_glIsFenceAPPLE.?(arg_10087);
}
pub const GL_APPLE_clip_distance = 1;
pub inline fn glMapBufferOES(arg_10088: GLenum, arg_10089: GLenum) ?*c_void {
    return epoxy_glMapBufferOES.?(arg_10088, arg_10089);
}
pub const __WORDSIZE = 64;
pub const GL_VERTEX_ATTRIB_ARRAY_UNIFIED_NV = 0x8F1E;
pub const GL_TRANSLATE_3D_NV = 0x9091;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5 = 0x93D2;
pub const GL_MATRIX21_ARB = 0x88D5;
pub const GL_PROGRAM_FORMAT_ARB = 0x8876;
pub inline fn glNamedProgramLocalParameter4dvEXT(arg_10090: GLuint, arg_10091: GLenum, arg_10092: GLuint, arg_10093: [*c]const GLdouble) void {
    return epoxy_glNamedProgramLocalParameter4dvEXT.?(arg_10090, arg_10091, arg_10092, arg_10093);
}
pub const GL_MAX_VERTEX_ATTRIBS_ARB = 0x8869;
pub const GL_MAX_SHADER_STORAGE_BUFFER_BINDINGS = 0x90DD;
pub const GL_OES_texture_half_float = 1;
pub const GL_RGB_SCALE = 0x8573;
pub const GL_RELATIVE_LINE_TO_NV = 0x05;
pub inline fn glBindFragmentShaderATI(arg_10094: GLuint) void {
    return epoxy_glBindFragmentShaderATI.?(arg_10094);
}
pub const GL_UNIFORM_BLOCK_REFERENCED_BY_FRAGMENT_SHADER = 0x8A46;
pub inline fn glFogCoordd(arg_10095: GLdouble) void {
    return epoxy_glFogCoordd.?(arg_10095);
}
pub const GL_ARB_debug_output = 1;
pub const SCNuFAST16 = __PRIPTR_PREFIX ++ "u";
pub inline fn glMemoryBarrier(arg_10096: GLbitfield) void {
    return epoxy_glMemoryBarrier.?(arg_10096);
}
pub inline fn glLoadMatrixx(arg_10097: [*c]const GLfixed) void {
    return epoxy_glLoadMatrixx.?(arg_10097);
}
pub const GL_ANGLE_framebuffer_blit = 1;
pub inline fn glGetObjectParameterivARB(arg_10098: GLhandleARB, arg_10099: GLenum, arg_10100: [*c]GLint) void {
    return epoxy_glGetObjectParameterivARB.?(arg_10098, arg_10099, arg_10100);
}
pub const GL_STREAM_RASTERIZATION_AMD = 0x91A0;
pub const GL_UNSIGNED_SHORT_4_4_4_4_REV_IMG = 0x8365;
pub const GL_MIN_PROGRAM_TEXEL_OFFSET_NV = 0x8904;
pub const GL_NV_depth_nonlinear = 1;
pub const GL_RG32F = 0x8230;
pub inline fn glDrawPixels(arg_10101: GLsizei, arg_10102: GLsizei, arg_10103: GLenum, arg_10104: GLenum, arg_10105: ?*const c_void) void {
    return epoxy_glDrawPixels.?(arg_10101, arg_10102, arg_10103, arg_10104, arg_10105);
}
pub const GL_SRGB8 = 0x8C41;
pub const GL_PROJECTION = 0x1701;
pub const GL_PACK_IMAGE_HEIGHT = 0x806C;
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_NV = 0x8C4E;
pub inline fn glTextureStorageMem1DEXT(arg_10106: GLuint, arg_10107: GLsizei, arg_10108: GLenum, arg_10109: GLsizei, arg_10110: GLuint, arg_10111: GLuint64) void {
    return epoxy_glTextureStorageMem1DEXT.?(arg_10106, arg_10107, arg_10108, arg_10109, arg_10110, arg_10111);
}
pub const GL_FORMAT_SUBSAMPLE_24_24_OML = 0x8982;
pub inline fn glPushClientAttrib(arg_10112: GLbitfield) void {
    return epoxy_glPushClientAttrib.?(arg_10112);
}
pub const GL_NV_float_buffer = 1;
pub inline fn glProgramUniform2fEXT(arg_10113: GLuint, arg_10114: GLint, arg_10115: GLfloat, arg_10116: GLfloat) void {
    return epoxy_glProgramUniform2fEXT.?(arg_10113, arg_10114, arg_10115, arg_10116);
}
pub inline fn glGetGraphicsResetStatusEXT() GLenum {
    return epoxy_glGetGraphicsResetStatusEXT.?();
}
pub inline fn glGetCompressedTexImageARB(arg_10117: GLenum, arg_10118: GLint, arg_10119: ?*c_void) void {
    return epoxy_glGetCompressedTexImageARB.?(arg_10117, arg_10118, arg_10119);
}
pub const GL_DEBUG_TYPE_MARKER = 0x8268;
pub inline fn glNormal3hvNV(arg_10120: [*c]const GLhalfNV) void {
    return epoxy_glNormal3hvNV.?(arg_10120);
}
pub const GL_CUBIC_MIPMAP_LINEAR_IMG = 0x913B;
pub const GL_NV_shader_texture_footprint = 1;
pub const GL_SHADER_STORAGE_BUFFER_BINDING = 0x90D3;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12 = 0x93DD;
pub const GL_MAX_GEOMETRY_ATOMIC_COUNTER_BUFFERS_EXT = 0x92CF;
pub const GL_PROGRAM_ERROR_POSITION_ARB = 0x864B;
pub const GL_UNSIGNED_INT_SAMPLER_1D = 0x8DD1;
pub inline fn glMatrixLoadfEXT(arg_10121: GLenum, arg_10122: [*c]const GLfloat) void {
    return epoxy_glMatrixLoadfEXT.?(arg_10121, arg_10122);
}
pub const GL_NV_framebuffer_mixed_samples = 1;
pub inline fn glGetStageIndexNV(arg_10123: GLenum) GLushort {
    return epoxy_glGetStageIndexNV.?(arg_10123);
}
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY = 0x9068;
pub const GL_SHARED_TEXTURE_PALETTE_EXT = 0x81FB;
pub inline fn glCreateTransformFeedbacks(arg_10124: GLsizei, arg_10125: [*c]GLuint) void {
    return epoxy_glCreateTransformFeedbacks.?(arg_10124, arg_10125);
}
pub const PRIiFAST64 = __PRI64_PREFIX ++ "i";
pub const GL_SECONDARY_COLOR_ARRAY_SIZE_EXT = 0x845A;
pub inline fn glInterleavedArrays(arg_10126: GLenum, arg_10127: GLsizei, arg_10128: ?*const c_void) void {
    return epoxy_glInterleavedArrays.?(arg_10126, arg_10127, arg_10128);
}
pub const GL_SHADER_CONSISTENT_NV = 0x86DD;
pub const __UINT32_C_SUFFIX__ = U;
pub const GL_MAX_TEXTURE_STACK_DEPTH = 0x0D39;
pub const GL_RGB16F_EXT = 0x881B;
pub const GL_FRAGMENT_INTERPOLATION_OFFSET_BITS = 0x8E5D;
pub const GL_TESS_EVALUATION_SHADER_OES = 0x8E87;
pub inline fn glMatrixMultTransposedEXT(arg_10129: GLenum, arg_10130: [*c]const GLdouble) void {
    return epoxy_glMatrixMultTransposedEXT.?(arg_10129, arg_10130);
}
pub const GL_MAX_PROGRAM_IF_DEPTH_NV = 0x88F6;
pub const GL_RG_SNORM = 0x8F91;
pub const GL_NV_viewport_array2 = 1;
pub const GL_MAP1_VERTEX_ATTRIB1_4_NV = 0x8661;
pub inline fn glMultiDrawElementsIndirectCount(arg_10131: GLenum, arg_10132: GLenum, arg_10133: ?*const c_void, arg_10134: GLintptr, arg_10135: GLsizei, arg_10136: GLsizei) void {
    return epoxy_glMultiDrawElementsIndirectCount.?(arg_10131, arg_10132, arg_10133, arg_10134, arg_10135, arg_10136);
}
pub const GL_PASS_THROUGH_NV = 0x86E6;
pub const GL_PRIMARY_COLOR_ARB = 0x8577;
pub inline fn glUniform3fARB(arg_10137: GLint, arg_10138: GLfloat, arg_10139: GLfloat, arg_10140: GLfloat) void {
    return epoxy_glUniform3fARB.?(arg_10137, arg_10138, arg_10139, arg_10140);
}
pub const GL_FUNC_ADD = 0x8006;
pub const GL_MAX_COLOR_ATTACHMENTS_EXT = 0x8CDF;
pub const GL_COMBINER3_NV = 0x8553;
pub inline fn glGetCompressedTextureImage(arg_10141: GLuint, arg_10142: GLint, arg_10143: GLsizei, arg_10144: ?*c_void) void {
    return epoxy_glGetCompressedTextureImage.?(arg_10141, arg_10142, arg_10143, arg_10144);
}
pub inline fn glUniform2i(arg_10145: GLint, arg_10146: GLint, arg_10147: GLint) void {
    return epoxy_glUniform2i.?(arg_10145, arg_10146, arg_10147);
}
pub inline fn glTextureStorage2DMultisample(arg_10148: GLuint, arg_10149: GLsizei, arg_10150: GLenum, arg_10151: GLsizei, arg_10152: GLsizei, arg_10153: GLboolean) void {
    return epoxy_glTextureStorage2DMultisample.?(arg_10148, arg_10149, arg_10150, arg_10151, arg_10152, arg_10153);
}
pub inline fn glLoadIdentity() void {
    return epoxy_glLoadIdentity.?();
}
pub const GL_REG_4_ATI = 0x8925;
pub const GL_VERTEX_ID_SWIZZLE_AMD = 0x91A5;
pub const GL_RG16_EXT = 0x822C;
pub const GL_MATRIX10_ARB = 0x88CA;
pub inline fn glFrustum(arg_10154: GLdouble, arg_10155: GLdouble, arg_10156: GLdouble, arg_10157: GLdouble, arg_10158: GLdouble, arg_10159: GLdouble) void {
    return epoxy_glFrustum.?(arg_10154, arg_10155, arg_10156, arg_10157, arg_10158, arg_10159);
}
pub inline fn glNamedBufferStorage(arg_10160: GLuint, arg_10161: GLsizeiptr, arg_10162: ?*const c_void, arg_10163: GLbitfield) void {
    return epoxy_glNamedBufferStorage.?(arg_10160, arg_10161, arg_10162, arg_10163);
}
pub inline fn glTextureSubImage2DEXT(arg_10164: GLuint, arg_10165: GLenum, arg_10166: GLint, arg_10167: GLint, arg_10168: GLint, arg_10169: GLsizei, arg_10170: GLsizei, arg_10171: GLenum, arg_10172: GLenum, arg_10173: ?*const c_void) void {
    return epoxy_glTextureSubImage2DEXT.?(arg_10164, arg_10165, arg_10166, arg_10167, arg_10168, arg_10169, arg_10170, arg_10171, arg_10172, arg_10173);
}
pub const GL_MATRIX6_NV = 0x8636;
pub const GL_COLOR_RENDERABLE = 0x8286;
pub const GL_SEPARABLE_2D = 0x8012;
pub inline fn glUniformMatrix4x2fv(arg_10174: GLint, arg_10175: GLsizei, arg_10176: GLboolean, arg_10177: [*c]const GLfloat) void {
    return epoxy_glUniformMatrix4x2fv.?(arg_10174, arg_10175, arg_10176, arg_10177);
}
pub inline fn glVertexAttrib3dARB(arg_10178: GLuint, arg_10179: GLdouble, arg_10180: GLdouble, arg_10181: GLdouble) void {
    return epoxy_glVertexAttrib3dARB.?(arg_10178, arg_10179, arg_10180, arg_10181);
}
pub const GL_COLOR_ATTACHMENT10_NV = 0x8CEA;
pub const GL_ARRAY_BUFFER = 0x8892;
pub const __USE_FORTIFY_LEVEL = 0;
pub inline fn glFogiv(arg_10182: GLenum, arg_10183: [*c]const GLint) void {
    return epoxy_glFogiv.?(arg_10182, arg_10183);
}
pub const GL_INTERLEAVED_ATTRIBS_EXT = 0x8C8C;
pub const GL_TEXTURE15_ARB = 0x84CF;
pub const __SIZE_FMTx__ = "lx";
pub const GL_CLIP_DISTANCE2_APPLE = 0x3002;
pub inline fn glImageTransformParameterfHP(arg_10184: GLenum, arg_10185: GLenum, arg_10186: GLfloat) void {
    return epoxy_glImageTransformParameterfHP.?(arg_10184, arg_10185, arg_10186);
}
pub const GL_VERTEX_WEIGHT_ARRAY_EXT = 0x850C;
pub const GL_GEOMETRY_SHADER_PRIMITIVES_EMITTED = 0x82F3;
pub const GL_INVERSE_NV = 0x862B;
pub const GL_POINT_SIZE_MAX = 0x8127;
pub const GL_EXT_framebuffer_sRGB = 1;
pub const GL_EXT_sparse_texture2 = 1;
pub const __UINT_LEAST8_FMTo__ = "hho";
pub const GL_DEBUG_TYPE_OTHER = 0x8251;
pub const GL_FLOAT_RGB32_NV = 0x8889;
pub const GL_REG_0_ATI = 0x8921;
pub const GL_DETACHED_TEXTURES_NV = 0x95AA;
pub inline fn glColor3b(arg_10187: GLbyte, arg_10188: GLbyte, arg_10189: GLbyte) void {
    return epoxy_glColor3b.?(arg_10187, arg_10188, arg_10189);
}
pub inline fn glImageTransformParameterivHP(arg_10190: GLenum, arg_10191: GLenum, arg_10192: [*c]const GLint) void {
    return epoxy_glImageTransformParameterivHP.?(arg_10190, arg_10191, arg_10192);
}
pub inline fn glUniform4uivEXT(arg_10193: GLint, arg_10194: GLsizei, arg_10195: [*c]const GLuint) void {
    return epoxy_glUniform4uivEXT.?(arg_10193, arg_10194, arg_10195);
}
pub const __CPU_MASK_TYPE = __SYSCALL_ULONG_TYPE;
pub const GL_COMPRESSED_RGBA_BPTC_UNORM = 0x8E8C;
pub inline fn glGetTexParameterfv(arg_10196: GLenum, arg_10197: GLenum, arg_10198: [*c]GLfloat) void {
    return epoxy_glGetTexParameterfv.?(arg_10196, arg_10197, arg_10198);
}
pub const GL_COMPLETION_STATUS_KHR = 0x91B1;
pub inline fn glRectxOES(arg_10199: GLfixed, arg_10200: GLfixed, arg_10201: GLfixed, arg_10202: GLfixed) void {
    return epoxy_glRectxOES.?(arg_10199, arg_10200, arg_10201, arg_10202);
}
pub const GL_UNSIGNED_SHORT_4_4_4_4 = 0x8033;
pub const GL_SUPERSAMPLE_SCALE_Y_NV = 0x9373;
pub const GL_SGIX_vertex_preclip = 1;
pub const GL_ROUNDED_RECT4_NV = 0xEC;
pub const __UINT64_FMTu__ = "lu";
pub inline fn glGetVideouivNV(arg_10203: GLuint, arg_10204: GLenum, arg_10205: [*c]GLuint) void {
    return epoxy_glGetVideouivNV.?(arg_10203, arg_10204, arg_10205);
}
pub inline fn glNormalStream3fvATI(arg_10206: GLenum, arg_10207: [*c]const GLfloat) void {
    return epoxy_glNormalStream3fvATI.?(arg_10206, arg_10207);
}
pub const GL_CURRENT_VERTEX_WEIGHT_EXT = 0x850B;
pub const GL_ARB_compatibility = 1;
pub const GL_PATH_PROJECTION_STACK_DEPTH_NV = 0x0BA4;
pub const GL_COMPRESSED_RGBA = 0x84EE;
pub const GL_SAMPLE_ALPHA_TO_ONE = 0x809F;
pub const GL_CND0_ATI = 0x896B;
pub inline fn glBindBuffer(arg_10208: GLenum, arg_10209: GLuint) void {
    return epoxy_glBindBuffer.?(arg_10208, arg_10209);
}
pub const GL_TEXTURE_VIEW_MIN_LAYER = 0x82DD;
pub const GL_APPLE_rgb_422 = 1;
pub const GL_CONSERVATIVE_RASTER_MODE_PRE_SNAP_NV = 0x9550;
pub const GL_FRAGMENT_PROGRAM_CALLBACK_FUNC_MESA = 0x8BB2;
pub const __INO_T_MATCHES_INO64_T = 1;
pub const GL_OUTPUT_TEXTURE_COORD16_EXT = 0x87AD;
pub const GL_QUAD_ALPHA4_SGIS = 0x811E;
pub const GL_VARIANT_ARRAY_EXT = 0x87E8;
pub const GL_MAX_TEXTURE_COORDS_ARB = 0x8871;
pub const GL_ALPHA_FLOAT16_APPLE = 0x881C;
pub inline fn glProgramUniform3i64NV(arg_10210: GLuint, arg_10211: GLint, arg_10212: GLint64EXT, arg_10213: GLint64EXT, arg_10214: GLint64EXT) void {
    return epoxy_glProgramUniform3i64NV.?(arg_10210, arg_10211, arg_10212, arg_10213, arg_10214);
}
pub const GL_LAST_VERTEX_CONVENTION_OES = 0x8E4E;
pub const GL_AUTO_NORMAL = 0x0D80;
pub const GL_RGB8_OES = 0x8051;
pub inline fn glGetAttribLocationARB(arg_10215: GLhandleARB, arg_10216: [*c]const GLcharARB) GLint {
    return epoxy_glGetAttribLocationARB.?(arg_10215, arg_10216);
}
pub const GL_NUM_VIRTUAL_PAGE_SIZES_EXT = 0x91A8;
pub inline fn glVertexAttribs1svNV(arg_10217: GLuint, arg_10218: GLsizei, arg_10219: [*c]const GLshort) void {
    return epoxy_glVertexAttribs1svNV.?(arg_10217, arg_10218, arg_10219);
}
pub const INT_LEAST16_MAX = 32767;
pub inline fn glGetMapParameterfvNV(arg_10220: GLenum, arg_10221: GLenum, arg_10222: [*c]GLfloat) void {
    return epoxy_glGetMapParameterfvNV.?(arg_10220, arg_10221, arg_10222);
}
pub const GL_FRAGMENT_COLOR_EXT = 0x834C;
pub const GL_EXT_color_buffer_float = 1;
pub const GL_MAX_GEOMETRY_OUTPUT_COMPONENTS_EXT = 0x9124;
pub inline fn glCullParameterfvEXT(arg_10223: GLenum, arg_10224: [*c]GLfloat) void {
    return epoxy_glCullParameterfvEXT.?(arg_10223, arg_10224);
}
pub inline fn glBindRenderbufferOES(arg_10225: GLenum, arg_10226: GLuint) void {
    return epoxy_glBindRenderbufferOES.?(arg_10225, arg_10226);
}
pub inline fn glUniform2ui64vNV(arg_10227: GLint, arg_10228: GLsizei, arg_10229: [*c]const GLuint64EXT) void {
    return epoxy_glUniform2ui64vNV.?(arg_10227, arg_10228, arg_10229);
}
pub const SCNdLEAST64 = __PRI64_PREFIX ++ "d";
pub const GL_MAX_COLOR_MATRIX_STACK_DEPTH = 0x80B3;
pub const GL_SPIR_V_EXTENSIONS = 0x9553;
pub const __GCC_HAVE_SYNC_COMPARE_AND_SWAP_1 = 1;
pub const GL_UNSIGNED_SHORT_8_8_APPLE = 0x85BA;
pub inline fn glGenTransformFeedbacks(arg_10230: GLsizei, arg_10231: [*c]GLuint) void {
    return epoxy_glGenTransformFeedbacks.?(arg_10230, arg_10231);
}
pub const GL_PACK_REVERSE_ROW_ORDER_ANGLE = 0x93A4;
pub const GL_NV_texture_multisample = 1;
pub const GL_BLEND = 0x0BE2;
pub const GL_UNSIGNED_INT64_VEC2_NV = 0x8FF5;
pub const GL_TEXTURE_2D_STACK_MESAX = 0x875A;
pub inline fn glGetNamedFramebufferParameteriv(arg_10232: GLuint, arg_10233: GLenum, arg_10234: [*c]GLint) void {
    return epoxy_glGetNamedFramebufferParameteriv.?(arg_10232, arg_10233, arg_10234);
}
pub inline fn glPathParameterfNV(arg_10235: GLuint, arg_10236: GLenum, arg_10237: GLfloat) void {
    return epoxy_glPathParameterfNV.?(arg_10235, arg_10236, arg_10237);
}
pub const GL_NV_framebuffer_multisample_coverage = 1;
pub const GL_TEXTURE_BINDING_3D_OES = 0x806A;
pub const GL_MAX_TASK_ATOMIC_COUNTER_BUFFERS_NV = 0x8E6C;
pub const GL_ARB_depth_buffer_float = 1;
pub const GL_DEBUG_TYPE_MARKER_KHR = 0x8268;
pub const GL_REFERENCED_BY_TASK_SHADER_NV = 0x95A1;
pub const GL_NV_pixel_buffer_object = 1;
pub inline fn glGetInfoLogARB(arg_10238: GLhandleARB, arg_10239: GLsizei, arg_10240: [*c]GLsizei, arg_10241: [*c]GLcharARB) void {
    return epoxy_glGetInfoLogARB.?(arg_10238, arg_10239, arg_10240, arg_10241);
}
pub inline fn glCompressedTexSubImage1DARB(arg_10242: GLenum, arg_10243: GLint, arg_10244: GLint, arg_10245: GLsizei, arg_10246: GLenum, arg_10247: GLsizei, arg_10248: ?*const c_void) void {
    return epoxy_glCompressedTexSubImage1DARB.?(arg_10242, arg_10243, arg_10244, arg_10245, arg_10246, arg_10247, arg_10248);
}
pub const GL_IUI_N3F_V2F_EXT = 0x81AF;
pub const GL_FLOAT_R16_NV = 0x8884;
pub const GL_SIGNED_RGB8_UNSIGNED_ALPHA8_NV = 0x870D;
pub inline fn glGetMapxvOES(arg_10249: GLenum, arg_10250: GLenum, arg_10251: [*c]GLfixed) void {
    return epoxy_glGetMapxvOES.?(arg_10249, arg_10250, arg_10251);
}
pub const GL_INTEL_conservative_rasterization = 1;
pub const GL_DETACHED_BUFFERS_NV = 0x95AB;
pub const GL_UNPACK_SKIP_PIXELS = 0x0CF4;
pub const GL_RGBA32I_EXT = 0x8D82;
pub inline fn glVDPAUSurfaceAccessNV(arg_10252: GLvdpauSurfaceNV, arg_10253: GLenum) void {
    return epoxy_glVDPAUSurfaceAccessNV.?(arg_10252, arg_10253);
}
pub const GL_ATOMIC_COUNTER_BUFFER_ACTIVE_ATOMIC_COUNTERS = 0x92C5;
pub const GL_UNSIGNED_INT_VEC4 = 0x8DC8;
pub const GL_INTENSITY16UI_EXT = 0x8D79;
pub const GL_DEPTH_CLAMP = 0x864F;
pub const GL_OP_CLAMP_EXT = 0x878E;
pub const GL_STENCIL_INDEX4 = 0x8D47;
pub const GL_ARB_shader_atomic_counters = 1;
pub const GL_DEPTH_COMPONENT24 = 0x81A6;
pub const GL_DISPLAY_LIST = 0x82E7;
pub inline fn glMakeTextureHandleNonResidentNV(arg_10254: GLuint64) void {
    return epoxy_glMakeTextureHandleNonResidentNV.?(arg_10254);
}
pub inline fn glEvalCoord1xvOES(arg_10255: [*c]const GLfixed) void {
    return epoxy_glEvalCoord1xvOES.?(arg_10255);
}
pub const GL_COLOR_ATTACHMENT6_EXT = 0x8CE6;
pub inline fn glVertexAttribI2uiv(arg_10256: GLuint, arg_10257: [*c]const GLuint) void {
    return epoxy_glVertexAttribI2uiv.?(arg_10256, arg_10257);
}
pub const GL_RENDER_MODE = 0x0C40;
pub const GL_OPERAND2_RGB_ARB = 0x8592;
pub inline fn glRectxvOES(arg_10258: [*c]const GLfixed, arg_10259: [*c]const GLfixed) void {
    return epoxy_glRectxvOES.?(arg_10258, arg_10259);
}
pub const GL_BGR_INTEGER = 0x8D9A;
pub inline fn glVertexAttrib1fv(arg_10260: GLuint, arg_10261: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib1fv.?(arg_10260, arg_10261);
}
pub inline fn glBinormal3bEXT(arg_10262: GLbyte, arg_10263: GLbyte, arg_10264: GLbyte) void {
    return epoxy_glBinormal3bEXT.?(arg_10262, arg_10263, arg_10264);
}
pub inline fn glColor4fNormal3fVertex3fvSUN(arg_10265: [*c]const GLfloat, arg_10266: [*c]const GLfloat, arg_10267: [*c]const GLfloat) void {
    return epoxy_glColor4fNormal3fVertex3fvSUN.?(arg_10265, arg_10266, arg_10267);
}
pub const GL_WEIGHT_ARRAY_SIZE_ARB = 0x86AB;
pub const GL_MITER_REVERT_NV = 0x90A7;
pub const GL_TEXTURE_CUBE_MAP_NEGATIVE_X_EXT = 0x8516;
pub const __CLANG_ATOMIC_CHAR16_T_LOCK_FREE = 2;
pub const GL_COMPRESSED_SIGNED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C73;
pub const GL_TRIANGLE_MESH_SUN = 0x8615;
pub const GL_MAX_COMBINED_IMAGE_UNITS_AND_FRAGMENT_OUTPUTS = 0x8F39;
pub const GL_TEXTURE_BINDING_RECTANGLE_NV = 0x84F6;
pub const GL_TEXTURE_ASTC_DECODE_PRECISION_EXT = 0x8F69;
pub inline fn glTexCoord4fVertex4fvSUN(arg_10268: [*c]const GLfloat, arg_10269: [*c]const GLfloat) void {
    return epoxy_glTexCoord4fVertex4fvSUN.?(arg_10268, arg_10269);
}
pub const GL_VIEWPORT_SWIZZLE_Z_NV = 0x935A;
pub const GL_POLYGON_OFFSET_FACTOR = 0x8038;
pub const GL_VIRTUAL_PAGE_SIZE_INDEX_EXT = 0x91A7;
pub const GL_PATH_STROKE_WIDTH_NV = 0x9075;
pub const GL_MAX_COMPUTE_WORK_GROUP_INVOCATIONS = 0x90EB;
pub inline fn glVertexAttrib2svNV(arg_10270: GLuint, arg_10271: [*c]const GLshort) void {
    return epoxy_glVertexAttrib2svNV.?(arg_10270, arg_10271);
}
pub const GL_ACTIVE_UNIFORM_MAX_LENGTH = 0x8B87;
pub const PRIxLEAST32 = "x";
pub const GL_ACTIVE_STENCIL_FACE_EXT = 0x8911;
pub const GL_MATRIX4_NV = 0x8634;
pub inline fn glColorMask(arg_10272: GLboolean, arg_10273: GLboolean, arg_10274: GLboolean, arg_10275: GLboolean) void {
    return epoxy_glColorMask.?(arg_10272, arg_10273, arg_10274, arg_10275);
}
pub const GL_MAX_PROJECTION_STACK_DEPTH = 0x0D38;
pub const GL_MAX_PROGRAM_EXEC_INSTRUCTIONS_NV = 0x88F4;
pub const GL_R8 = 0x8229;
pub const GL_NUM_FRAGMENT_CONSTANTS_ATI = 0x896F;
pub inline fn glVertexArrayAttribLFormat(arg_10276: GLuint, arg_10277: GLuint, arg_10278: GLint, arg_10279: GLenum, arg_10280: GLuint) void {
    return epoxy_glVertexArrayAttribLFormat.?(arg_10276, arg_10277, arg_10278, arg_10279, arg_10280);
}
pub const GL_EXT_discard_framebuffer = 1;
pub const GL_VERTEX_ARRAY_EXT = 0x8074;
pub const __LDBL_DENORM_MIN__ = @as(c_longdouble, 3.64519953188247460253e-4951);
pub const GL_LAYER_PROVOKING_VERTEX = 0x825E;
pub const GL_MAX_PROGRAM_PARAMETERS_ARB = 0x88A9;
pub inline fn glClientAttribDefaultEXT(arg_10281: GLbitfield) void {
    return epoxy_glClientAttribDefaultEXT.?(arg_10281);
}
pub inline fn glEnableVertexAttribArrayARB(arg_10282: GLuint) void {
    return epoxy_glEnableVertexAttribArrayARB.?(arg_10282);
}
pub const GL_TESS_GEN_POINT_MODE = 0x8E79;
pub const GL_COLOR_ATTACHMENT14_EXT = 0x8CEE;
pub const GL_READ_PIXELS_FORMAT = 0x828D;
pub const GL_EXT_texture_env_dot3 = 1;
pub const GL_EYE_LINEAR_NV = 0x2400;
pub const GL_PROXY_TEXTURE_2D_ARRAY_EXT = 0x8C1B;
pub inline fn glGetPerfMonitorGroupStringAMD(arg_10283: GLuint, arg_10284: GLsizei, arg_10285: [*c]GLsizei, arg_10286: [*c]GLchar) void {
    return epoxy_glGetPerfMonitorGroupStringAMD.?(arg_10283, arg_10284, arg_10285, arg_10286);
}
pub const GL_CURRENT_QUERY_EXT = 0x8865;
pub const __always_inline = __inline ++ __attribute__(__always_inline__);
pub const __SSE4_1__ = 1;
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY_OES = 0x900E;
pub inline fn glRasterPos2xvOES(arg_10287: [*c]const GLfixed) void {
    return epoxy_glRasterPos2xvOES.?(arg_10287);
}
pub inline fn glDeleteTransformFeedbacks(arg_10288: GLsizei, arg_10289: [*c]const GLuint) void {
    return epoxy_glDeleteTransformFeedbacks.?(arg_10288, arg_10289);
}
pub const GL_PRIMITIVE_RESTART_FIXED_INDEX = 0x8D69;
pub const GL_EYE_PLANE = 0x2502;
pub const GL_TEXTURE_1D_ARRAY_EXT = 0x8C18;
pub const GL_FRAMEBUFFER_UNSUPPORTED = 0x8CDD;
pub const GL_AND_INVERTED = 0x1504;
pub inline fn glVertexAttrib1d(arg_10290: GLuint, arg_10291: GLdouble) void {
    return epoxy_glVertexAttrib1d.?(arg_10290, arg_10291);
}
pub const GL_RGB16 = 0x8054;
pub const PRIXMAX = __PRI64_PREFIX ++ "X";
pub const GL_R8_SNORM = 0x8F94;
pub inline fn glMultiTexCoord2hvNV(arg_10292: GLenum, arg_10293: [*c]const GLhalfNV) void {
    return epoxy_glMultiTexCoord2hvNV.?(arg_10292, arg_10293);
}
pub const GL_INT_SAMPLER_CUBE_MAP_ARRAY = 0x900E;
pub inline fn glEndTransformFeedbackEXT() void {
    return epoxy_glEndTransformFeedbackEXT.?();
}
pub inline fn glPopGroupMarkerEXT() void {
    return epoxy_glPopGroupMarkerEXT.?();
}
pub const GL_MAX_GEOMETRY_TEXTURE_IMAGE_UNITS = 0x8C29;
pub const __INT16_FMTi__ = "hi";
pub const __LDBL_MIN_EXP__ = -16381;
pub inline fn glGetPathMetricRangeNV(arg_10294: GLbitfield, arg_10295: GLuint, arg_10296: GLsizei, arg_10297: GLsizei, arg_10298: [*c]GLfloat) void {
    return epoxy_glGetPathMetricRangeNV.?(arg_10294, arg_10295, arg_10296, arg_10297, arg_10298);
}
pub const GL_OES_texture_npot = 1;
pub const GL_RGB_S3TC = 0x83A0;
pub inline fn glPolygonModeNV(arg_10299: GLenum, arg_10300: GLenum) void {
    return epoxy_glPolygonModeNV.?(arg_10299, arg_10300);
}
pub inline fn glGlobalAlphaFactordSUN(arg_10301: GLdouble) void {
    return epoxy_glGlobalAlphaFactordSUN.?(arg_10301);
}
pub const GL_MULTISAMPLE_BUFFER_BIT1_QCOM = 0x02000000;
pub const GL_DEBUG_NEXT_LOGGED_MESSAGE_LENGTH_ARB = 0x8243;
pub inline fn glGetHistogramParameteriv(arg_10302: GLenum, arg_10303: GLenum, arg_10304: [*c]GLint) void {
    return epoxy_glGetHistogramParameteriv.?(arg_10302, arg_10303, arg_10304);
}
pub inline fn glIsTexture(arg_10305: GLuint) GLboolean {
    return epoxy_glIsTexture.?(arg_10305);
}
pub inline fn glVertexArrayTexCoordOffsetEXT(arg_10306: GLuint, arg_10307: GLuint, arg_10308: GLint, arg_10309: GLenum, arg_10310: GLsizei, arg_10311: GLintptr) void {
    return epoxy_glVertexArrayTexCoordOffsetEXT.?(arg_10306, arg_10307, arg_10308, arg_10309, arg_10310, arg_10311);
}
pub const GL_SHADER_OPERATION_NV = 0x86DF;
pub inline fn glVertexAttrib2fv(arg_10312: GLuint, arg_10313: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib2fv.?(arg_10312, arg_10313);
}
pub const GL_NVX_conditional_render = 1;
pub const GL_POLYGON_MODE_NV = 0x0B40;
pub const __GNUC__ = 4;
pub const PRIu32 = "u";
pub inline fn glGetUnsignedBytevEXT(arg_10314: GLenum, arg_10315: [*c]GLubyte) void {
    return epoxy_glGetUnsignedBytevEXT.?(arg_10314, arg_10315);
}
pub const GL_COMPRESSED_RGB_S3TC_DXT1_EXT = 0x83F0;
pub inline fn glUniform2i64vNV(arg_10316: GLint, arg_10317: GLsizei, arg_10318: [*c]const GLint64EXT) void {
    return epoxy_glUniform2i64vNV.?(arg_10316, arg_10317, arg_10318);
}
pub inline fn glTexCoord4xOES(arg_10319: GLfixed, arg_10320: GLfixed, arg_10321: GLfixed, arg_10322: GLfixed) void {
    return epoxy_glTexCoord4xOES.?(arg_10319, arg_10320, arg_10321, arg_10322);
}
pub inline fn glMatrixIndexuivARB(arg_10323: GLint, arg_10324: [*c]const GLuint) void {
    return epoxy_glMatrixIndexuivARB.?(arg_10323, arg_10324);
}
pub const GL_COLOR_ARRAY_STRIDE = 0x8083;
pub const GL_UNSIGNED_SHORT_1_5_5_5_REV = 0x8366;
pub inline fn glIsProgramARB(arg_10325: GLuint) GLboolean {
    return epoxy_glIsProgramARB.?(arg_10325);
}
pub inline fn glClearTexImageEXT(arg_10326: GLuint, arg_10327: GLint, arg_10328: GLenum, arg_10329: GLenum, arg_10330: ?*const c_void) void {
    return epoxy_glClearTexImageEXT.?(arg_10326, arg_10327, arg_10328, arg_10329, arg_10330);
}
pub const GL_DRAW_FRAMEBUFFER_BINDING = 0x8CA6;
pub const GL_MAP_UNSYNCHRONIZED_BIT = 0x0020;
pub const GL_4PASS_1_SGIS = 0x80A5;
pub const GL_SAMPLER_KHR = 0x82E6;
pub const GL_EDGE_FLAG = 0x0B43;
pub const GL_MODELVIEW0_EXT = 0x1700;
pub const GL_ARB_fragment_program_shadow = 1;
pub const GL_EXT_texture_filter_minmax = 1;
pub const GL_REG_8_ATI = 0x8929;
pub const GL_NUM_PASSES_ATI = 0x8970;
pub inline fn glDrawArraysInstancedANGLE(arg_10331: GLenum, arg_10332: GLint, arg_10333: GLsizei, arg_10334: GLsizei) void {
    return epoxy_glDrawArraysInstancedANGLE.?(arg_10331, arg_10332, arg_10333, arg_10334);
}
pub const GL_IMAGE_2D_MULTISAMPLE = 0x9055;
pub const GL_SHADING_RATE_IMAGE_TEXEL_WIDTH_NV = 0x955C;
pub const GL_ARB_arrays_of_arrays = 1;
pub const GL_FRAGMENT_LIGHT2_SGIX = 0x840E;
pub const GL_NV_depth_clamp = 1;
pub const GL_TEXTURE_BUFFER_OFFSET_OES = 0x919D;
pub const GL_MAX_ELEMENT_INDEX = 0x8D6B;
pub const GL_ACTIVE_PROGRAM = 0x8259;
pub const GL_ONE_MINUS_SRC1_ALPHA_EXT = 0x88FB;
pub const GL_TRIANGLE_STRIP_ADJACENCY_OES = 0x000D;
pub inline fn glProgramNamedParameter4dNV(arg_10335: GLuint, arg_10336: GLsizei, arg_10337: [*c]const GLubyte, arg_10338: GLdouble, arg_10339: GLdouble, arg_10340: GLdouble, arg_10341: GLdouble) void {
    return epoxy_glProgramNamedParameter4dNV.?(arg_10335, arg_10336, arg_10337, arg_10338, arg_10339, arg_10340, arg_10341);
}
pub const GL_PERFMON_RESULT_AMD = 0x8BC6;
pub const __INT_LEAST32_FMTd__ = "d";
pub const GL_VERSION_4_6 = 1;
pub inline fn glIndexs(arg_10342: GLshort) void {
    return epoxy_glIndexs.?(arg_10342);
}
pub inline fn glMulticastViewportArrayvNVX(arg_10343: GLuint, arg_10344: GLuint, arg_10345: GLsizei, arg_10346: [*c]const GLfloat) void {
    return epoxy_glMulticastViewportArrayvNVX.?(arg_10343, arg_10344, arg_10345, arg_10346);
}
pub const GL_INDEX_MATERIAL_PARAMETER_EXT = 0x81B9;
pub inline fn glGetActiveVaryingNV(arg_10347: GLuint, arg_10348: GLuint, arg_10349: GLsizei, arg_10350: [*c]GLsizei, arg_10351: [*c]GLsizei, arg_10352: [*c]GLenum, arg_10353: [*c]GLchar) void {
    return epoxy_glGetActiveVaryingNV.?(arg_10347, arg_10348, arg_10349, arg_10350, arg_10351, arg_10352, arg_10353);
}
pub const GL_DRAW_BUFFER14_EXT = 0x8833;
pub const GL_FACTOR_MIN_AMD = 0x901C;
pub const GL_DEPTH_TEXTURE_MODE_ARB = 0x884B;
pub const GL_VERSION_3_1 = 1;
pub const __INTPTR_FMTi__ = "li";
pub const GL_SHADING_RATE_IMAGE_PALETTE_SIZE_NV = 0x955E;
pub const GL_SAMPLES_ARB = 0x80A9;
pub inline fn glExtGetTexLevelParameterivQCOM(arg_10354: GLuint, arg_10355: GLenum, arg_10356: GLint, arg_10357: GLenum, arg_10358: [*c]GLint) void {
    return epoxy_glExtGetTexLevelParameterivQCOM.?(arg_10354, arg_10355, arg_10356, arg_10357, arg_10358);
}
pub const GL_TEXTURE_FORMAT_SRGB_OVERRIDE_EXT = 0x8FBF;
pub inline fn glVertexWeightPointerEXT(arg_10359: GLint, arg_10360: GLenum, arg_10361: GLsizei, arg_10362: ?*const c_void) void {
    return epoxy_glVertexWeightPointerEXT.?(arg_10359, arg_10360, arg_10361, arg_10362);
}
pub const GL_DRAW_BUFFER10_EXT = 0x882F;
pub const GL_BLEND_DST_ALPHA_OES = 0x80CA;
pub inline fn glWindowPos2s(arg_10363: GLshort, arg_10364: GLshort) void {
    return epoxy_glWindowPos2s.?(arg_10363, arg_10364);
}
pub const GL_MATRIX_INDEX_ARRAY_STRIDE_OES = 0x8848;
pub inline fn glGetBufferPointervARB(arg_10365: GLenum, arg_10366: GLenum, arg_10367: [*c]?*c_void) void {
    return epoxy_glGetBufferPointervARB.?(arg_10365, arg_10366, arg_10367);
}
pub inline fn glConvolutionFilter1D(arg_10368: GLenum, arg_10369: GLenum, arg_10370: GLsizei, arg_10371: GLenum, arg_10372: GLenum, arg_10373: ?*const c_void) void {
    return epoxy_glConvolutionFilter1D.?(arg_10368, arg_10369, arg_10370, arg_10371, arg_10372, arg_10373);
}
pub inline fn glCopyBufferSubDataNV(arg_10374: GLenum, arg_10375: GLenum, arg_10376: GLintptr, arg_10377: GLintptr, arg_10378: GLsizeiptr) void {
    return epoxy_glCopyBufferSubDataNV.?(arg_10374, arg_10375, arg_10376, arg_10377, arg_10378);
}
pub const GL_MAX_PALETTE_MATRICES_ARB = 0x8842;
pub const GL_READ_PIXEL_DATA_RANGE_POINTER_NV = 0x887D;
pub const GL_OBJECT_LINEAR = 0x2401;
pub const GL_TEXTURE_COORD_ARRAY_BUFFER_BINDING = 0x889A;
pub inline fn glNewObjectBufferATI(arg_10379: GLsizei, arg_10380: ?*const c_void, arg_10381: GLenum) GLuint {
    return epoxy_glNewObjectBufferATI.?(arg_10379, arg_10380, arg_10381);
}
pub const GL_RENDERBUFFER_GREEN_SIZE_EXT = 0x8D51;
pub inline fn glDrawRangeElementsEXT(arg_10382: GLenum, arg_10383: GLuint, arg_10384: GLuint, arg_10385: GLsizei, arg_10386: GLenum, arg_10387: ?*const c_void) void {
    return epoxy_glDrawRangeElementsEXT.?(arg_10382, arg_10383, arg_10384, arg_10385, arg_10386, arg_10387);
}
pub inline fn glGetUniformBufferSizeEXT(arg_10388: GLuint, arg_10389: GLint) GLint {
    return epoxy_glGetUniformBufferSizeEXT.?(arg_10388, arg_10389);
}
pub const GL_FRAGMENT_LIGHT3_SGIX = 0x840F;
pub inline fn glVertexAttrib3svARB(arg_10390: GLuint, arg_10391: [*c]const GLshort) void {
    return epoxy_glVertexAttrib3svARB.?(arg_10390, arg_10391);
}
pub const __GLIBC_USE_LIB_EXT2 = 0;
pub inline fn glReplacementCodeuiSUN(arg_10392: GLuint) void {
    return epoxy_glReplacementCodeuiSUN.?(arg_10392);
}
pub const GL_MAX_GEOMETRY_OUTPUT_VERTICES_ARB = 0x8DE0;
pub const GL_TEXTURE14_ARB = 0x84CE;
pub const GL_PLUS_DARKER_NV = 0x9292;
pub inline fn glNormalStream3dATI(arg_10393: GLenum, arg_10394: GLdouble, arg_10395: GLdouble, arg_10396: GLdouble) void {
    return epoxy_glNormalStream3dATI.?(arg_10393, arg_10394, arg_10395, arg_10396);
}
pub inline fn glRasterPos3sv(arg_10397: [*c]const GLshort) void {
    return epoxy_glRasterPos3sv.?(arg_10397);
}
pub const GL_COLOR4_BIT_PGI = 0x00020000;
pub const GL_TRACE_MASK_MESA = 0x8755;
pub inline fn glGetUniformLocation(arg_10398: GLuint, arg_10399: [*c]const GLchar) GLint {
    return epoxy_glGetUniformLocation.?(arg_10398, arg_10399);
}
pub inline fn glReadnPixelsARB(arg_10400: GLint, arg_10401: GLint, arg_10402: GLsizei, arg_10403: GLsizei, arg_10404: GLenum, arg_10405: GLenum, arg_10406: GLsizei, arg_10407: ?*c_void) void {
    return epoxy_glReadnPixelsARB.?(arg_10400, arg_10401, arg_10402, arg_10403, arg_10404, arg_10405, arg_10406, arg_10407);
}
pub const GL_PERFMON_GLOBAL_MODE_QCOM = 0x8FA0;
pub const GL_RGBA_FLOAT16_ATI = 0x881A;
pub const GL_COMPRESSED_RGBA_ASTC_12x10 = 0x93BC;
pub const PRIi32 = "i";
pub inline fn glBindParameterEXT(arg_10408: GLenum) GLuint {
    return epoxy_glBindParameterEXT.?(arg_10408);
}
pub inline fn glSecondaryColor3ui(arg_10409: GLuint, arg_10410: GLuint, arg_10411: GLuint) void {
    return epoxy_glSecondaryColor3ui.?(arg_10409, arg_10410, arg_10411);
}
pub inline fn glColor4i(arg_10412: GLint, arg_10413: GLint, arg_10414: GLint, arg_10415: GLint) void {
    return epoxy_glColor4i.?(arg_10412, arg_10413, arg_10414, arg_10415);
}
pub const GL_SIGNED_LUMINANCE8_ALPHA8_NV = 0x8704;
pub inline fn glUniformMatrix3x4dv(arg_10416: GLint, arg_10417: GLsizei, arg_10418: GLboolean, arg_10419: [*c]const GLdouble) void {
    return epoxy_glUniformMatrix3x4dv.?(arg_10416, arg_10417, arg_10418, arg_10419);
}
pub const GL_FOG_COORDINATE_ARRAY_EXT = 0x8457;
pub inline fn glGetImageHandleARB(arg_10420: GLuint, arg_10421: GLint, arg_10422: GLboolean, arg_10423: GLint, arg_10424: GLenum) GLuint64 {
    return epoxy_glGetImageHandleARB.?(arg_10420, arg_10421, arg_10422, arg_10423, arg_10424);
}
pub inline fn glBinormal3svEXT(arg_10425: [*c]const GLshort) void {
    return epoxy_glBinormal3svEXT.?(arg_10425);
}
pub const GL_DEBUG_CALLBACK_USER_PARAM_KHR = 0x8245;
pub const GL_MAP1_VERTEX_ATTRIB12_4_NV = 0x866C;
pub inline fn glProgramVertexLimitNV(arg_10426: GLenum, arg_10427: GLint) void {
    return epoxy_glProgramVertexLimitNV.?(arg_10426, arg_10427);
}
pub inline fn glGetVariantBooleanvEXT(arg_10428: GLuint, arg_10429: GLenum, arg_10430: [*c]GLboolean) void {
    return epoxy_glGetVariantBooleanvEXT.?(arg_10428, arg_10429, arg_10430);
}
pub const __FD_SETSIZE = 1024;
pub const GL_MAX_SPARSE_TEXTURE_SIZE_AMD = 0x9198;
pub inline fn glVertexAttrib2fvARB(arg_10431: GLuint, arg_10432: [*c]const GLfloat) void {
    return epoxy_glVertexAttrib2fvARB.?(arg_10431, arg_10432);
}
pub inline fn glEnd() void {
    return epoxy_glEnd.?();
}
pub inline fn glUniformHandleui64vNV(arg_10433: GLint, arg_10434: GLsizei, arg_10435: [*c]const GLuint64) void {
    return epoxy_glUniformHandleui64vNV.?(arg_10433, arg_10434, arg_10435);
}
pub inline fn glGetnMapdvARB(arg_10436: GLenum, arg_10437: GLenum, arg_10438: GLsizei, arg_10439: [*c]GLdouble) void {
    return epoxy_glGetnMapdvARB.?(arg_10436, arg_10437, arg_10438, arg_10439);
}
pub const GL_UNSIGNED_SHORT_15_1_MESA = 0x8753;
pub inline fn __attribute_format_strfmon__(a: var, b: var) @TypeOf(__attribute__(__format__(__strfmon__, a, b))) {
    return __attribute__(__format__(__strfmon__, a, b));
}
pub inline fn glCombinerParameterfvNV(arg_10440: GLenum, arg_10441: [*c]const GLfloat) void {
    return epoxy_glCombinerParameterfvNV.?(arg_10440, arg_10441);
}
pub const GL_RG16_SNORM = 0x8F99;
pub inline fn glBeginTransformFeedbackEXT(arg_10442: GLenum) void {
    return epoxy_glBeginTransformFeedbackEXT.?(arg_10442);
}
pub const GL_EXT_conservative_depth = 1;
pub const GL_PIXEL_MAP_R_TO_R_SIZE = 0x0CB6;
pub const SCNo16 = "ho";
pub const GL_DRAW_ELEMENTS_INSTANCED_COMMAND_NV = 0x0006;
pub const GL_TEXTURE_COMPARE_MODE_EXT = 0x884C;
pub inline fn glClearDepthfOES(arg_10443: GLclampf) void {
    return epoxy_glClearDepthfOES.?(arg_10443);
}
pub const GL_SCALED_RESOLVE_FASTEST_EXT = 0x90BA;
pub inline fn glMultMatrixf(arg_10444: [*c]const GLfloat) void {
    return epoxy_glMultMatrixf.?(arg_10444);
}
pub const __INT_LEAST32_TYPE__ = c_int;
pub const GL_TEXTURE_COMPONENTS = 0x1003;
pub inline fn __REDIRECT_LDBL(name: var, proto: var, alias: var) @TypeOf(__REDIRECT(name, proto, alias)) {
    return __REDIRECT(name, proto, alias);
}
pub const GL_INDEX_ARRAY_EXT = 0x8077;
pub const __SIZE_MAX__ = @as(c_ulong, 18446744073709551615);
pub inline fn glMultiTexCoord1svARB(arg_10445: GLenum, arg_10446: [*c]const GLshort) void {
    return epoxy_glMultiTexCoord1svARB.?(arg_10445, arg_10446);
}
pub inline fn glPushGroupMarkerEXT(arg_10447: GLsizei, arg_10448: [*c]const GLchar) void {
    return epoxy_glPushGroupMarkerEXT.?(arg_10447, arg_10448);
}
pub inline fn glResolveDepthValuesNV() void {
    return epoxy_glResolveDepthValuesNV.?();
}
pub const GL_TEXTURE_STORAGE_SPARSE_BIT_AMD = 0x00000001;
pub const GL_INDEX_CLEAR_VALUE = 0x0C20;
pub const __CLANG_ATOMIC_BOOL_LOCK_FREE = 2;
pub const GL_GEOMETRY_INPUT_TYPE_ARB = 0x8DDB;
pub inline fn glClipPlanex(arg_10449: GLenum, arg_10450: [*c]const GLfixed) void {
    return epoxy_glClipPlanex.?(arg_10449, arg_10450);
}
pub const GL_TEXTURE5_ARB = 0x84C5;
pub const GL_COMPRESSED_INTENSITY_ARB = 0x84EC;
pub const GL_DEPTH_COMPONENT24_SGIX = 0x81A6;
pub inline fn glVertexAttribs3fvNV(arg_10451: GLuint, arg_10452: GLsizei, arg_10453: [*c]const GLfloat) void {
    return epoxy_glVertexAttribs3fvNV.?(arg_10451, arg_10452, arg_10453);
}
pub inline fn glProgramUniformMatrix2x3dvEXT(arg_10454: GLuint, arg_10455: GLint, arg_10456: GLsizei, arg_10457: GLboolean, arg_10458: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix2x3dvEXT.?(arg_10454, arg_10455, arg_10456, arg_10457, arg_10458);
}
pub const GL_MAX_COMBINED_IMAGE_UNIFORMS = 0x90CF;
pub inline fn glFogCoordfv(arg_10459: [*c]const GLfloat) void {
    return epoxy_glFogCoordfv.?(arg_10459);
}
pub inline fn glGetObjectLabelKHR(arg_10460: GLenum, arg_10461: GLuint, arg_10462: GLsizei, arg_10463: [*c]GLsizei, arg_10464: [*c]GLchar) void {
    return epoxy_glGetObjectLabelKHR.?(arg_10460, arg_10461, arg_10462, arg_10463, arg_10464);
}
pub const GL_TRACK_MATRIX_TRANSFORM_NV = 0x8649;
pub const GL_LINEARBURN_NV = 0x92A5;
pub const GL_DRAW_BUFFER11_ARB = 0x8830;
pub inline fn glTexCoord3d(arg_10465: GLdouble, arg_10466: GLdouble, arg_10467: GLdouble) void {
    return epoxy_glTexCoord3d.?(arg_10465, arg_10466, arg_10467);
}
pub const GL_READ_WRITE_ARB = 0x88BA;
pub const GL_VIDEO_BUFFER_PITCH_NV = 0x9028;
pub const GL_ARB_fragment_shader = 1;
pub const GL_TEXTURE_INTERNAL_FORMAT = 0x1003;
pub const GL_ATOMIC_COUNTER_BARRIER_BIT_EXT = 0x00001000;
pub inline fn glGetInstrumentsSGIX() GLint {
    return epoxy_glGetInstrumentsSGIX.?();
}
pub const GL_3DFX_tbuffer = 1;
pub const GL_QUADS = 0x0007;
pub const INT_FAST64_MAX = __INT64_C(9223372036854775807);
pub inline fn glProgramUniform1fv(arg_10468: GLuint, arg_10469: GLint, arg_10470: GLsizei, arg_10471: [*c]const GLfloat) void {
    return epoxy_glProgramUniform1fv.?(arg_10468, arg_10469, arg_10470, arg_10471);
}
pub inline fn glWeightuivARB(arg_10472: GLint, arg_10473: [*c]const GLuint) void {
    return epoxy_glWeightuivARB.?(arg_10472, arg_10473);
}
pub const GL_POST_CONVOLUTION_BLUE_SCALE_EXT = 0x801E;
pub inline fn glDepthRangeArrayfvOES(arg_10474: GLuint, arg_10475: GLsizei, arg_10476: [*c]const GLfloat) void {
    return epoxy_glDepthRangeArrayfvOES.?(arg_10474, arg_10475, arg_10476);
}
pub const GL_LERP_ATI = 0x8969;
pub const __SSE__ = 1;
pub const PRIXLEAST64 = __PRI64_PREFIX ++ "X";
pub const GL_MIN_LOD_WARNING_AMD = 0x919C;
pub inline fn glSamplerParameterIivOES(arg_10477: GLuint, arg_10478: GLenum, arg_10479: [*c]const GLint) void {
    return epoxy_glSamplerParameterIivOES.?(arg_10477, arg_10478, arg_10479);
}
pub const GL_MAP_TESSELLATION_NV = 0x86C2;
pub const GL_DEPTH_COMPONENT16_NONLINEAR_NV = 0x8E2C;
pub inline fn glDrawMeshArraysSUN(arg_10480: GLenum, arg_10481: GLint, arg_10482: GLsizei, arg_10483: GLsizei) void {
    return epoxy_glDrawMeshArraysSUN.?(arg_10480, arg_10481, arg_10482, arg_10483);
}
pub const GL_MULTISAMPLES_NV = 0x9371;
pub inline fn glFragmentCoverageColorNV(arg_10484: GLuint) void {
    return epoxy_glFragmentCoverageColorNV.?(arg_10484);
}
pub const GL_DEBUG_SOURCE_WINDOW_SYSTEM_ARB = 0x8247;
pub const __LDBL_MIN_10_EXP__ = -4931;
pub inline fn glReadBufferNV(arg_10485: GLenum) void {
    return epoxy_glReadBufferNV.?(arg_10485);
}
pub const GL_NV_fragment_coverage_to_color = 1;
pub const GL_COLOR_TABLE_LUMINANCE_SIZE = 0x80DE;
pub const GL_ARM_shader_framebuffer_fetch = 1;
pub inline fn __REDIRECT_NTH_LDBL(name: var, proto: var, alias: var) @TypeOf(__REDIRECT_NTH(name, proto, alias)) {
    return __REDIRECT_NTH(name, proto, alias);
}
pub const GL_RENDERBUFFER_DEPTH_SIZE = 0x8D54;
pub const GL_NV_register_combiners2 = 1;
pub const GL_ARB_parallel_shader_compile = 1;
pub const GL_STANDARD_FONT_FORMAT_NV = 0x936C;
pub const GL_CLAMP_READ_COLOR_ARB = 0x891C;
pub const GL_PATH_STROKE_COVER_MODE_NV = 0x9083;
pub inline fn glUniform1ivARB(arg_10486: GLint, arg_10487: GLsizei, arg_10488: [*c]const GLint) void {
    return epoxy_glUniform1ivARB.?(arg_10486, arg_10487, arg_10488);
}
pub const GL_FUNC_SUBTRACT_OES = 0x800A;
pub const GL_EXT_raster_multisample = 1;
pub const GL_RELATIVE_MOVE_TO_NV = 0x03;
pub inline fn glInvalidateSubFramebuffer(arg_10489: GLenum, arg_10490: GLsizei, arg_10491: [*c]const GLenum, arg_10492: GLint, arg_10493: GLint, arg_10494: GLsizei, arg_10495: GLsizei) void {
    return epoxy_glInvalidateSubFramebuffer.?(arg_10489, arg_10490, arg_10491, arg_10492, arg_10493, arg_10494, arg_10495);
}
pub inline fn glMatrixScaledEXT(arg_10496: GLenum, arg_10497: GLdouble, arg_10498: GLdouble, arg_10499: GLdouble) void {
    return epoxy_glMatrixScaledEXT.?(arg_10496, arg_10497, arg_10498, arg_10499);
}
pub const GL_EXT_framebuffer_multisample = 1;
pub const SIZE_MAX = @as(c_ulong, 18446744073709551615);
pub const GL_MAX_SAMPLES_NV = 0x8D57;
pub const GL_TEXTURE_WRAP_R_OES = 0x8072;
pub const PRIxMAX = __PRI64_PREFIX ++ "x";
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5 = 0x93D3;
pub inline fn glColorPointerEXT(arg_10500: GLint, arg_10501: GLenum, arg_10502: GLsizei, arg_10503: GLsizei, arg_10504: ?*const c_void) void {
    return epoxy_glColorPointerEXT.?(arg_10500, arg_10501, arg_10502, arg_10503, arg_10504);
}
pub const GL_COLOR_TABLE_FORMAT_SGI = 0x80D8;
pub inline fn glNamedFramebufferTexture1DEXT(arg_10505: GLuint, arg_10506: GLenum, arg_10507: GLenum, arg_10508: GLuint, arg_10509: GLint) void {
    return epoxy_glNamedFramebufferTexture1DEXT.?(arg_10505, arg_10506, arg_10507, arg_10508, arg_10509);
}
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4 = 0x93D0;
pub const SCNoFAST16 = __PRIPTR_PREFIX ++ "o";
pub const GL_OP_NEGATE_EXT = 0x8783;
pub const GL_WEIGHT_ARRAY_TYPE_ARB = 0x86A9;
pub inline fn glRasterPos2dv(arg_10510: [*c]const GLdouble) void {
    return epoxy_glRasterPos2dv.?(arg_10510);
}
pub const GL_ARB_texture_storage_multisample = 1;
pub inline fn glVertexPointer(arg_10511: GLint, arg_10512: GLenum, arg_10513: GLsizei, arg_10514: ?*const c_void) void {
    return epoxy_glVertexPointer.?(arg_10511, arg_10512, arg_10513, arg_10514);
}
pub const GL_ADD_ATI = 0x8963;
pub const PRIXFAST16 = __PRIPTR_PREFIX ++ "X";
pub inline fn glWindowPos2f(arg_10515: GLfloat, arg_10516: GLfloat) void {
    return epoxy_glWindowPos2f.?(arg_10515, arg_10516);
}
pub const GL_STENCIL_BUFFER_BIT1_QCOM = 0x00020000;
pub const GL_PROXY_POST_COLOR_MATRIX_COLOR_TABLE_SGI = 0x80D5;
pub inline fn glDepthRangexOES(arg_10517: GLfixed, arg_10518: GLfixed) void {
    return epoxy_glDepthRangexOES.?(arg_10517, arg_10518);
}
pub const GL_ARB_sample_shading = 1;
pub inline fn glProgramUniformui64NV(arg_10519: GLuint, arg_10520: GLint, arg_10521: GLuint64EXT) void {
    return epoxy_glProgramUniformui64NV.?(arg_10519, arg_10520, arg_10521);
}
pub const GL_MAX_PROGRAM_ATTRIB_COMPONENTS_NV = 0x8908;
pub const GL_MAX_TESS_CONTROL_UNIFORM_COMPONENTS_EXT = 0x8E7F;
pub inline fn glProgramEnvParametersI4ivNV(arg_10522: GLenum, arg_10523: GLuint, arg_10524: GLsizei, arg_10525: [*c]const GLint) void {
    return epoxy_glProgramEnvParametersI4ivNV.?(arg_10522, arg_10523, arg_10524, arg_10525);
}
pub const GL_OPERAND1_RGB_ARB = 0x8591;
pub const GL_RENDERBUFFER_SAMPLES_NV = 0x8CAB;
pub const GL_MAP2_TEXTURE_COORD_4 = 0x0DB6;
pub const GL_MAP_COHERENT_BIT = 0x0080;
pub const GL_BLEND_EQUATION_RGB_EXT = 0x8009;
pub inline fn glCompressedTexImage3DOES(arg_10526: GLenum, arg_10527: GLint, arg_10528: GLenum, arg_10529: GLsizei, arg_10530: GLsizei, arg_10531: GLsizei, arg_10532: GLint, arg_10533: GLsizei, arg_10534: ?*const c_void) void {
    return epoxy_glCompressedTexImage3DOES.?(arg_10526, arg_10527, arg_10528, arg_10529, arg_10530, arg_10531, arg_10532, arg_10533, arg_10534);
}
pub const GL_HISTOGRAM_EXT = 0x8024;
pub const GL_UNSIGNED_INT_IMAGE_1D_ARRAY_EXT = 0x9068;
pub inline fn glProgramUniform1i64ARB(arg_10535: GLuint, arg_10536: GLint, arg_10537: GLint64) void {
    return epoxy_glProgramUniform1i64ARB.?(arg_10535, arg_10536, arg_10537);
}
pub const GL_POLYGON_OFFSET_FILL = 0x8037;
pub const GL_MODELVIEW29_ARB = 0x873D;
pub const GL_COLOR_ATTACHMENT5_NV = 0x8CE5;
pub const GL_MIN_EXT = 0x8007;
pub inline fn glTexEnvxv(arg_10538: GLenum, arg_10539: GLenum, arg_10540: [*c]const GLfixed) void {
    return epoxy_glTexEnvxv.?(arg_10538, arg_10539, arg_10540);
}
pub const GL_NUM_SPIR_V_EXTENSIONS = 0x9554;
pub inline fn glRasterPos2iv(arg_10541: [*c]const GLint) void {
    return epoxy_glRasterPos2iv.?(arg_10541);
}
pub const GL_OES_EGL_image = 1;
pub inline fn glVertexAttribDivisorEXT(arg_10542: GLuint, arg_10543: GLuint) void {
    return epoxy_glVertexAttribDivisorEXT.?(arg_10542, arg_10543);
}
pub const GL_EXT_texture = 1;
pub const GL_REFERENCE_PLANE_EQUATION_SGIX = 0x817E;
pub const GL_DUAL_ALPHA4_SGIS = 0x8110;
pub const GL_CON_7_ATI = 0x8948;
pub inline fn glGenOcclusionQueriesNV(arg_10544: GLsizei, arg_10545: [*c]GLuint) void {
    return epoxy_glGenOcclusionQueriesNV.?(arg_10544, arg_10545);
}
pub inline fn glGetObjectPtrLabel(arg_10546: ?*const c_void, arg_10547: GLsizei, arg_10548: [*c]GLsizei, arg_10549: [*c]GLchar) void {
    return epoxy_glGetObjectPtrLabel.?(arg_10546, arg_10547, arg_10548, arg_10549);
}
pub const GL_CONVOLUTION_BORDER_MODE = 0x8013;
pub const GL_COLOR_ATTACHMENT4_EXT = 0x8CE4;
pub const GL_COLOR_TABLE_ALPHA_SIZE = 0x80DD;
pub const GL_MAX_DEPTH = 0x8280;
pub const GL_MAX_PROGRAM_OUTPUT_VERTICES_NV = 0x8C27;
pub const GL_RGB32UI_EXT = 0x8D71;
pub const GL_FRONT_FACE_COMMAND_NV = 0x0012;
pub const GL_TEXTURE_BINDING_RECTANGLE_ARB = 0x84F6;
pub inline fn glPolygonOffsetClamp(arg_10550: GLfloat, arg_10551: GLfloat, arg_10552: GLfloat) void {
    return epoxy_glPolygonOffsetClamp.?(arg_10550, arg_10551, arg_10552);
}
pub const GL_ELEMENT_ARRAY_BARRIER_BIT_EXT = 0x00000002;
pub inline fn glTextureStorage3D(arg_10553: GLuint, arg_10554: GLsizei, arg_10555: GLenum, arg_10556: GLsizei, arg_10557: GLsizei, arg_10558: GLsizei) void {
    return epoxy_glTextureStorage3D.?(arg_10553, arg_10554, arg_10555, arg_10556, arg_10557, arg_10558);
}
pub const GL_ALPHA_FLOAT16_ATI = 0x881C;
pub const GL_MAX_VERTEX_UNITS_OES = 0x86A4;
pub inline fn glFeedbackBufferxOES(arg_10559: GLsizei, arg_10560: GLenum, arg_10561: [*c]const GLfixed) void {
    return epoxy_glFeedbackBufferxOES.?(arg_10559, arg_10560, arg_10561);
}
pub const GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_NV = 0x8C4D;
pub const GL_3D_COLOR = 0x0602;
pub inline fn glFlushMappedNamedBufferRangeEXT(arg_10562: GLuint, arg_10563: GLintptr, arg_10564: GLsizeiptr) void {
    return epoxy_glFlushMappedNamedBufferRangeEXT.?(arg_10562, arg_10563, arg_10564);
}
pub inline fn glFragmentLightfSGIX(arg_10565: GLenum, arg_10566: GLenum, arg_10567: GLfloat) void {
    return epoxy_glFragmentLightfSGIX.?(arg_10565, arg_10566, arg_10567);
}
pub inline fn glTexEnvi(arg_10568: GLenum, arg_10569: GLenum, arg_10570: GLint) void {
    return epoxy_glTexEnvi.?(arg_10568, arg_10569, arg_10570);
}
pub inline fn glQueryMatrixxOES(arg_10571: [*c]GLfixed, arg_10572: [*c]GLint) GLbitfield {
    return epoxy_glQueryMatrixxOES.?(arg_10571, arg_10572);
}
pub inline fn glVertexAttrib4sv(arg_10573: GLuint, arg_10574: [*c]const GLshort) void {
    return epoxy_glVertexAttrib4sv.?(arg_10573, arg_10574);
}
pub const GL_MAP1_TEXTURE_COORD_3 = 0x0D95;
pub const GL_SGIX_calligraphic_fragment = 1;
pub inline fn glProgramParameters4fvNV(arg_10575: GLenum, arg_10576: GLuint, arg_10577: GLsizei, arg_10578: [*c]const GLfloat) void {
    return epoxy_glProgramParameters4fvNV.?(arg_10575, arg_10576, arg_10577, arg_10578);
}
pub const GL_UNSIGNED_BYTE_3_3_2 = 0x8032;
pub inline fn glGetNamedProgramLocalParameterIuivEXT(arg_10579: GLuint, arg_10580: GLenum, arg_10581: GLuint, arg_10582: [*c]GLuint) void {
    return epoxy_glGetNamedProgramLocalParameterIuivEXT.?(arg_10579, arg_10580, arg_10581, arg_10582);
}
pub const GL_PN_TRIANGLES_NORMAL_MODE_ATI = 0x87F3;
pub const GL_PRIMITIVES_SUBMITTED_ARB = 0x82EF;
pub inline fn glGetPointervEXT(arg_10583: GLenum, arg_10584: [*c]?*c_void) void {
    return epoxy_glGetPointervEXT.?(arg_10583, arg_10584);
}
pub const GL_VERTEX_ATTRIB_ARRAY13_NV = 0x865D;
pub const GL_MAX_TESS_EVALUATION_SHADER_STORAGE_BLOCKS_EXT = 0x90D9;
pub const GL_TEXTURE9 = 0x84C9;
pub const GL_KHR_no_error = 1;
pub const GL_TEXTURE_RED_SIZE = 0x805C;
pub inline fn glProgramUniformMatrix3dvEXT(arg_10585: GLuint, arg_10586: GLint, arg_10587: GLsizei, arg_10588: GLboolean, arg_10589: [*c]const GLdouble) void {
    return epoxy_glProgramUniformMatrix3dvEXT.?(arg_10585, arg_10586, arg_10587, arg_10588, arg_10589);
}
pub const GL_SECONDARY_COLOR_ARRAY_ADDRESS_NV = 0x8F27;
pub const GL_CLAMP_TO_BORDER_ARB = 0x812D;
pub inline fn glColor4f(arg_10590: GLfloat, arg_10591: GLfloat, arg_10592: GLfloat, arg_10593: GLfloat) void {
    return epoxy_glColor4f.?(arg_10590, arg_10591, arg_10592, arg_10593);
}
pub const __UINT16_MAX__ = 65535;
pub const GL_RENDERBUFFER_ALPHA_SIZE = 0x8D53;
pub const GL_COLOR = 0x1800;
pub const GL_COVERAGE_BUFFERS_NV = 0x8ED3;
pub inline fn glProgramBufferParametersIuivNV(arg_10594: GLenum, arg_10595: GLuint, arg_10596: GLuint, arg_10597: GLsizei, arg_10598: [*c]const GLuint) void {
    return epoxy_glProgramBufferParametersIuivNV.?(arg_10594, arg_10595, arg_10596, arg_10597, arg_10598);
}
pub const GL_TEXTURE_MIN_LOD_SGIS = 0x813A;
pub inline fn glPatchParameteri(arg_10599: GLenum, arg_10600: GLint) void {
    return epoxy_glPatchParameteri.?(arg_10599, arg_10600);
}
pub const GL_BOLD_BIT_NV = 0x01;
pub inline fn glNamedFramebufferTextureLayerEXT(arg_10601: GLuint, arg_10602: GLenum, arg_10603: GLuint, arg_10604: GLint, arg_10605: GLint) void {
    return epoxy_glNamedFramebufferTextureLayerEXT.?(arg_10601, arg_10602, arg_10603, arg_10604, arg_10605);
}
pub const GL_CONDITION_SATISFIED = 0x911C;
pub const GL_COVERAGE_COMPONENT_NV = 0x8ED0;
pub const GL_COLOR_ATTACHMENT18 = 0x8CF2;
pub inline fn glUniform2d(arg_10606: GLint, arg_10607: GLdouble, arg_10608: GLdouble) void {
    return epoxy_glUniform2d.?(arg_10606, arg_10607, arg_10608);
}
pub const GL_POINT_SIZE_ARRAY_BUFFER_BINDING_OES = 0x8B9F;
pub inline fn glMulticastGetQueryObjectuivNV(arg_10609: GLuint, arg_10610: GLuint, arg_10611: GLenum, arg_10612: [*c]GLuint) void {
    return epoxy_glMulticastGetQueryObjectuivNV.?(arg_10609, arg_10610, arg_10611, arg_10612);
}
pub const GL_DEBUG_TYPE_PORTABILITY_KHR = 0x824F;
pub const GL_VERTEX_PROGRAM_TWO_SIDE_ARB = 0x8643;
pub inline fn glClipPlanexOES(arg_10613: GLenum, arg_10614: [*c]const GLfixed) void {
    return epoxy_glClipPlanexOES.?(arg_10613, arg_10614);
}
pub const __ORDER_BIG_ENDIAN__ = 4321;
pub const GL_RESCALE_NORMAL_EXT = 0x803A;
pub const GL_MATRIX0_ARB = 0x88C0;
pub const GL_ALIASED_POINT_SIZE_RANGE = 0x846D;
pub inline fn glProgramLocalParameterI4uivNV(arg_10615: GLenum, arg_10616: GLuint, arg_10617: [*c]const GLuint) void {
    return epoxy_glProgramLocalParameterI4uivNV.?(arg_10615, arg_10616, arg_10617);
}
pub const GL_MATRIX27_ARB = 0x88DB;
pub const GL_IMG_read_format = 1;
pub const GL_TEXTURE_COMPRESSED_IMAGE_SIZE_ARB = 0x86A0;
pub inline fn glUniform1i64ARB(arg_10618: GLint, arg_10619: GLint64) void {
    return epoxy_glUniform1i64ARB.?(arg_10618, arg_10619);
}
pub inline fn glScissorIndexedvNV(arg_10620: GLuint, arg_10621: [*c]const GLint) void {
    return epoxy_glScissorIndexedvNV.?(arg_10620, arg_10621);
}
pub const GL_PATH_FOG_GEN_MODE_NV = 0x90AC;
pub inline fn glEndConditionalRender() void {
    return epoxy_glEndConditionalRender.?();
}
pub const GL_INT_SAMPLER_2D = 0x8DCA;
pub inline fn glGetMultiTexImageEXT(arg_10622: GLenum, arg_10623: GLenum, arg_10624: GLint, arg_10625: GLenum, arg_10626: GLenum, arg_10627: ?*c_void) void {
    return epoxy_glGetMultiTexImageEXT.?(arg_10622, arg_10623, arg_10624, arg_10625, arg_10626, arg_10627);
}
pub const GL_MAX_MESH_VIEWS_NV = 0x9557;
pub const GL_IMAGE_BINDING_LEVEL = 0x8F3B;
pub const GL_DYNAMIC_DRAW = 0x88E8;
pub const __PRAGMA_REDEFINE_EXTNAME = 1;
pub const GL_DEPTH_CLEAR_VALUE = 0x0B73;
pub const GL_PIXEL_MAP_A_TO_A_SIZE = 0x0CB9;
pub const SCNxLEAST64 = __PRI64_PREFIX ++ "x";
pub const GL_TEXTURE_COLOR_TABLE_SGI = 0x80BC;
pub inline fn glDebugMessageCallbackKHR(arg_10628: GLDEBUGPROCKHR, arg_10629: ?*const c_void) void {
    return epoxy_glDebugMessageCallbackKHR.?(arg_10628, arg_10629);
}
pub const GL_DEBUG_SEVERITY_HIGH_ARB = 0x9146;
pub inline fn glMultiTexSubImage3DEXT(arg_10630: GLenum, arg_10631: GLenum, arg_10632: GLint, arg_10633: GLint, arg_10634: GLint, arg_10635: GLint, arg_10636: GLsizei, arg_10637: GLsizei, arg_10638: GLsizei, arg_10639: GLenum, arg_10640: GLenum, arg_10641: ?*const c_void) void {
    return epoxy_glMultiTexSubImage3DEXT.?(arg_10630, arg_10631, arg_10632, arg_10633, arg_10634, arg_10635, arg_10636, arg_10637, arg_10638, arg_10639, arg_10640, arg_10641);
}
pub const GL_QUERY_BY_REGION_NO_WAIT_INVERTED = 0x8E1A;
pub const GL_DEBUG_SEVERITY_MEDIUM_AMD = 0x9147;
pub const __KEY_T_TYPE = __S32_TYPE;
pub const GL_COVERAGE_MODULATION_NV = 0x9332;
pub const GL_AMD_transform_feedback4 = 1;
pub const GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS_OES = 0x8DA8;
pub inline fn glGetnPolygonStippleARB(arg_10642: GLsizei, arg_10643: [*c]GLubyte) void {
    return epoxy_glGetnPolygonStippleARB.?(arg_10642, arg_10643);
}
pub const GL_ALPHA_REF_COMMAND_NV = 0x000F;
pub const GL_RENDERBUFFER_HEIGHT = 0x8D43;
pub const GL_OUT_OF_MEMORY = 0x0505;
pub inline fn glEvalCoord1d(arg_10644: GLdouble) void {
    return epoxy_glEvalCoord1d.?(arg_10644);
}
pub inline fn glCompressedTextureImage2DEXT(arg_10645: GLuint, arg_10646: GLenum, arg_10647: GLint, arg_10648: GLenum, arg_10649: GLsizei, arg_10650: GLsizei, arg_10651: GLint, arg_10652: GLsizei, arg_10653: ?*const c_void) void {
    return epoxy_glCompressedTextureImage2DEXT.?(arg_10645, arg_10646, arg_10647, arg_10648, arg_10649, arg_10650, arg_10651, arg_10652, arg_10653);
}
pub const GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT = 0x8CD9;
pub const GL_QCOM_extended_get2 = 1;
pub inline fn glIsImageHandleResidentNV(arg_10654: GLuint64) GLboolean {
    return epoxy_glIsImageHandleResidentNV.?(arg_10654);
}
pub const __SGX__ = 1;
pub const GL_NV_multisample_filter_hint = 1;
pub const GL_GET_TEXTURE_IMAGE_TYPE = 0x8292;
pub const GL_COMPRESSED_LUMINANCE_ALPHA_LATC2_EXT = 0x8C72;
pub const GL_TEXTURE20_ARB = 0x84D4;
pub inline fn glDebugMessageControlARB(arg_10655: GLenum, arg_10656: GLenum, arg_10657: GLenum, arg_10658: GLsizei, arg_10659: [*c]const GLuint, arg_10660: GLboolean) void {
    return epoxy_glDebugMessageControlARB.?(arg_10655, arg_10656, arg_10657, arg_10658, arg_10659, arg_10660);
}
pub const GL_COLOR_ATTACHMENT9_EXT = 0x8CE9;
pub const GL_UNSIGNED_INT_10F_11F_11F_REV_EXT = 0x8C3B;
pub inline fn glBlitFramebuffer(arg_10661: GLint, arg_10662: GLint, arg_10663: GLint, arg_10664: GLint, arg_10665: GLint, arg_10666: GLint, arg_10667: GLint, arg_10668: GLint, arg_10669: GLbitfield, arg_10670: GLenum) void {
    return epoxy_glBlitFramebuffer.?(arg_10661, arg_10662, arg_10663, arg_10664, arg_10665, arg_10666, arg_10667, arg_10668, arg_10669, arg_10670);
}
pub inline fn glVertex4f(arg_10671: GLfloat, arg_10672: GLfloat, arg_10673: GLfloat, arg_10674: GLfloat) void {
    return epoxy_glVertex4f.?(arg_10671, arg_10672, arg_10673, arg_10674);
}
pub const GL_SHADER = 0x82E1;
pub inline fn glMatrixMultTranspose3x3fNV(arg_10675: GLenum, arg_10676: [*c]const GLfloat) void {
    return epoxy_glMatrixMultTranspose3x3fNV.?(arg_10675, arg_10676);
}
pub const GL_INDEX = 0x8222;
pub const GL_DEBUG_CATEGORY_UNDEFINED_BEHAVIOR_AMD = 0x914C;
pub const GL_HILO_NV = 0x86F4;
pub const GL_SECONDARY_COLOR_ARRAY_EXT = 0x845E;
pub const __SIZE_WIDTH__ = 64;
pub inline fn glRenderbufferStorageEXT(arg_10677: GLenum, arg_10678: GLenum, arg_10679: GLsizei, arg_10680: GLsizei) void {
    return epoxy_glRenderbufferStorageEXT.?(arg_10677, arg_10678, arg_10679, arg_10680);
}
pub inline fn glPointParameterfvARB(arg_10681: GLenum, arg_10682: [*c]const GLfloat) void {
    return epoxy_glPointParameterfvARB.?(arg_10681, arg_10682);
}
pub const PRIo8 = "o";
pub const GL_CON_3_ATI = 0x8944;
pub const GL_LUMINANCE12_ALPHA4 = 0x8046;
pub const GL_STENCIL_OP_VALUE_AMD = 0x874C;
pub const GL_TEXTURE_FOVEATED_NUM_FOCAL_POINTS_QUERY_QCOM = 0x8BFE;
pub const GL_EXT_cmyka = 1;
pub inline fn glFlushMappedBufferRange(arg_10683: GLenum, arg_10684: GLintptr, arg_10685: GLsizeiptr) void {
    return epoxy_glFlushMappedBufferRange.?(arg_10683, arg_10684, arg_10685);
}
pub inline fn glConvolutionParameteriv(arg_10686: GLenum, arg_10687: GLenum, arg_10688: [*c]const GLint) void {
    return epoxy_glConvolutionParameteriv.?(arg_10686, arg_10687, arg_10688);
}
pub const GL_FOG_COORD_SRC = 0x8450;
pub const GL_SAMPLE_MASK_VALUE_NV = 0x8E52;
pub inline fn glBindSamplers(arg_10689: GLuint, arg_10690: GLsizei, arg_10691: [*c]const GLuint) void {
    return epoxy_glBindSamplers.?(arg_10689, arg_10690, arg_10691);
}
pub const GL_SAMPLE_SHADING_ARB = 0x8C36;
pub const SCNx8 = "hhx";
pub inline fn glCopyTexImage1DEXT(arg_10692: GLenum, arg_10693: GLint, arg_10694: GLenum, arg_10695: GLint, arg_10696: GLint, arg_10697: GLsizei, arg_10698: GLint) void {
    return epoxy_glCopyTexImage1DEXT.?(arg_10692, arg_10693, arg_10694, arg_10695, arg_10696, arg_10697, arg_10698);
}
pub inline fn glUniformSubroutinesuiv(arg_10699: GLenum, arg_10700: GLsizei, arg_10701: [*c]const GLuint) void {
    return epoxy_glUniformSubroutinesuiv.?(arg_10699, arg_10700, arg_10701);
}
pub const GL_EXT_separate_specular_color = 1;
pub inline fn glEdgeFlagPointerListIBM(arg_10702: GLint, arg_10703: [*c][*c]const GLboolean, arg_10704: GLint) void {
    return epoxy_glEdgeFlagPointerListIBM.?(arg_10702, arg_10703, arg_10704);
}
pub inline fn glVariantfvEXT(arg_10705: GLuint, arg_10706: [*c]const GLfloat) void {
    return epoxy_glVariantfvEXT.?(arg_10705, arg_10706);
}
pub const GL_FUNC_SUBTRACT_EXT = 0x800A;
pub inline fn glLightModeli(arg_10707: GLenum, arg_10708: GLint) void {
    return epoxy_glLightModeli.?(arg_10707, arg_10708);
}
pub const GL_LUMINANCE = 0x1909;
pub const GL_UNSIGNED_INT_8_24_REV_MESA = 0x8752;
pub inline fn glMultiTexParameterivEXT(arg_10709: GLenum, arg_10710: GLenum, arg_10711: GLenum, arg_10712: [*c]const GLint) void {
    return epoxy_glMultiTexParameterivEXT.?(arg_10709, arg_10710, arg_10711, arg_10712);
}
pub const GL_DRAW_BUFFER8_ATI = 0x882D;
pub const GL_REG_28_ATI = 0x893D;
pub const GL_DS_BIAS_NV = 0x8716;
pub const GL_RENDERBUFFER_WIDTH_OES = 0x8D42;
pub inline fn glGetShadingRateImagePaletteNV(arg_10713: GLuint, arg_10714: GLuint, arg_10715: [*c]GLenum) void {
    return epoxy_glGetShadingRateImagePaletteNV.?(arg_10713, arg_10714, arg_10715);
}
pub inline fn glUniform1iv(arg_10716: GLint, arg_10717: GLsizei, arg_10718: [*c]const GLint) void {
    return epoxy_glUniform1iv.?(arg_10716, arg_10717, arg_10718);
}
pub const PRIdPTR = __PRIPTR_PREFIX ++ "d";
pub const GL_UNSIGNED_INT8_VEC3_NV = 0x8FEE;
pub inline fn glDisableiNV(arg_10719: GLenum, arg_10720: GLuint) void {
    return epoxy_glDisableiNV.?(arg_10719, arg_10720);
}
pub const GL_TEXTURE_SRGB_DECODE_EXT = 0x8A48;
pub const __OPENCL_MEMORY_SCOPE_SUB_GROUP = 4;
pub inline fn glMultiTexCoord1hNV(arg_10721: GLenum, arg_10722: GLhalfNV) void {
    return epoxy_glMultiTexCoord1hNV.?(arg_10721, arg_10722);
}
pub const __INT16_MAX__ = 32767;
pub const GL_MAX_CLIP_DISTANCES = 0x0D32;
pub inline fn glVertexWeightfvEXT(arg_10723: [*c]const GLfloat) void {
    return epoxy_glVertexWeightfvEXT.?(arg_10723);
}
pub const GL_COMBINER_BIAS_NV = 0x8549;
pub const GL_PN_TRIANGLES_TESSELATION_LEVEL_ATI = 0x87F4;
pub inline fn glConservativeRasterParameteriNV(arg_10724: GLenum, arg_10725: GLint) void {
    return epoxy_glConservativeRasterParameteriNV.?(arg_10724, arg_10725);
}
pub const GL_AMD_shader_gpu_shader_half_float_fetch = 1;
pub inline fn glVertexAttrib2s(arg_10726: GLuint, arg_10727: GLshort, arg_10728: GLshort) void {
    return epoxy_glVertexAttrib2s.?(arg_10726, arg_10727, arg_10728);
}
pub const GL_APPLE_copy_texture_levels = 1;
pub const GL_MAX_TESS_EVALUATION_INPUT_COMPONENTS = 0x886D;
pub const GL_ATTRIB_STACK_DEPTH = 0x0BB0;
pub const GL_TEXTURE31 = 0x84DF;
pub const GL_IMAGE_BINDING_NAME_EXT = 0x8F3A;
pub const GL_MULTISAMPLE_BIT_EXT = 0x20000000;
pub inline fn glTexStorageMem2DMultisampleEXT(arg_10729: GLenum, arg_10730: GLsizei, arg_10731: GLenum, arg_10732: GLsizei, arg_10733: GLsizei, arg_10734: GLboolean, arg_10735: GLuint, arg_10736: GLuint64) void {
    return epoxy_glTexStorageMem2DMultisampleEXT.?(arg_10729, arg_10730, arg_10731, arg_10732, arg_10733, arg_10734, arg_10735, arg_10736);
}
pub inline fn glWaitSyncAPPLE(arg_10737: GLsync, arg_10738: GLbitfield, arg_10739: GLuint64) void {
    return epoxy_glWaitSyncAPPLE.?(arg_10737, arg_10738, arg_10739);
}
pub inline fn glMultiTexCoord3hNV(arg_10740: GLenum, arg_10741: GLhalfNV, arg_10742: GLhalfNV, arg_10743: GLhalfNV) void {
    return epoxy_glMultiTexCoord3hNV.?(arg_10740, arg_10741, arg_10742, arg_10743);
}
pub const GL_TRIANGLES_ADJACENCY_EXT = 0x000C;
pub inline fn glTexSubImage2DEXT(arg_10744: GLenum, arg_10745: GLint, arg_10746: GLint, arg_10747: GLint, arg_10748: GLsizei, arg_10749: GLsizei, arg_10750: GLenum, arg_10751: GLenum, arg_10752: ?*const c_void) void {
    return epoxy_glTexSubImage2DEXT.?(arg_10744, arg_10745, arg_10746, arg_10747, arg_10748, arg_10749, arg_10750, arg_10751, arg_10752);
}
pub const GL_OPERAND0_RGB_EXT = 0x8590;
pub const GL_VIEW_CLASS_ETC2_RGB = 0x9385;
pub inline fn glClearNamedBufferSubData(arg_10753: GLuint, arg_10754: GLenum, arg_10755: GLintptr, arg_10756: GLsizeiptr, arg_10757: GLenum, arg_10758: GLenum, arg_10759: ?*const c_void) void {
    return epoxy_glClearNamedBufferSubData.?(arg_10753, arg_10754, arg_10755, arg_10756, arg_10757, arg_10758, arg_10759);
}
pub const GL_COPY_READ_BUFFER = 0x8F36;
pub inline fn glIndexiv(arg_10760: [*c]const GLint) void {
    return epoxy_glIndexiv.?(arg_10760);
}
pub const GL_EVAL_VERTEX_ATTRIB9_NV = 0x86CF;
pub inline fn glEdgeFlagv(arg_10761: [*c]const GLboolean) void {
    return epoxy_glEdgeFlagv.?(arg_10761);
}
pub const GL_TEXTURE4 = 0x84C4;
pub inline fn glProgramLocalParametersI4uivNV(arg_10762: GLenum, arg_10763: GLuint, arg_10764: GLsizei, arg_10765: [*c]const GLuint) void {
    return epoxy_glProgramLocalParametersI4uivNV.?(arg_10762, arg_10763, arg_10764, arg_10765);
}
pub const GL_NV_draw_vulkan_image = 1;
pub const GL_ALPHA_BIAS = 0x0D1D;
pub inline fn glGetnMapdv(arg_10766: GLenum, arg_10767: GLenum, arg_10768: GLsizei, arg_10769: [*c]GLdouble) void {
    return epoxy_glGetnMapdv.?(arg_10766, arg_10767, arg_10768, arg_10769);
}
pub const GL_ARB_vertex_buffer_object = 1;
pub const GL_MAP2_VERTEX_ATTRIB9_4_NV = 0x8679;
pub const __linux__ = 1;
pub inline fn glVertexAttrib1sNV(arg_10770: GLuint, arg_10771: GLshort) void {
    return epoxy_glVertexAttrib1sNV.?(arg_10770, arg_10771);
}
pub const GL_PROGRAM_INPUT = 0x92E3;
pub inline fn glDepthFunc(arg_10772: GLenum) void {
    return epoxy_glDepthFunc.?(arg_10772);
}
pub const GL_OP_MIN_EXT = 0x878B;
pub const GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4x4_OES = 0x93E4;
pub inline fn glGenSamplers(arg_10773: GLsizei, arg_10774: [*c]GLuint) void {
    return epoxy_glGenSamplers.?(arg_10773, arg_10774);
}
pub const GL_TRANSLATED_SHADER_SOURCE_LENGTH_ANGLE = 0x93A0;
pub const GL_AMD_depth_clamp_separate = 1;
pub const GL_SAMPLER_1D_ARRAY_SHADOW = 0x8DC3;
pub inline fn glEdgeFlag(arg_10775: GLboolean) void {
    return epoxy_glEdgeFlag.?(arg_10775);
}
pub const GL_SGIX_texture_multi_buffer = 1;
pub inline fn glTexGend(arg_10776: GLenum, arg_10777: GLenum, arg_10778: GLdouble) void {
    return epoxy_glTexGend.?(arg_10776, arg_10777, arg_10778);
}
pub const GL_SGIS_fog_function = 1;
pub inline fn glGetUniformBlockIndex(arg_10779: GLuint, arg_10780: [*c]const GLchar) GLuint {
    return epoxy_glGetUniformBlockIndex.?(arg_10779, arg_10780);
}
pub const GL_NORMAL_MAP_OES = 0x8511;
pub const GL_VALIDATE_STATUS = 0x8B83;
pub const GL_RELATIVE_ROUNDED_RECT8_NV = 0xEF;
pub const GL_COLOR_ATTACHMENT6_NV = 0x8CE6;
pub const GL_FILTER4_SGIS = 0x8146;
pub const __GCC_ATOMIC_CHAR32_T_LOCK_FREE = 2;
pub const GL_DST_ATOP_NV = 0x928F;
pub inline fn glGetSyncivAPPLE(arg_10781: GLsync, arg_10782: GLenum, arg_10783: GLsizei, arg_10784: [*c]GLsizei, arg_10785: [*c]GLint) void {
    return epoxy_glGetSyncivAPPLE.?(arg_10781, arg_10782, arg_10783, arg_10784, arg_10785);
}
pub inline fn glMultiDrawElementArrayAPPLE(arg_10786: GLenum, arg_10787: [*c]const GLint, arg_10788: [*c]const GLsizei, arg_10789: GLsizei) void {
    return epoxy_glMultiDrawElementArrayAPPLE.?(arg_10786, arg_10787, arg_10788, arg_10789);
}
pub const __BIGGEST_ALIGNMENT__ = 16;
pub const _BITS_STDINT_UINTN_H = 1;
pub inline fn glProgramLocalParameter4fvARB(arg_10790: GLenum, arg_10791: GLuint, arg_10792: [*c]const GLfloat) void {
    return epoxy_glProgramLocalParameter4fvARB.?(arg_10790, arg_10791, arg_10792);
}
pub const GL_DOUBLE_MAT3 = 0x8F47;
pub const GL_MAX_RATIONAL_EVAL_ORDER_NV = 0x86D7;
pub const GL_UNSIGNED_INT_SAMPLER_BUFFER_EXT = 0x8DD8;
pub const GL_CONSERVATIVE_RASTER_MODE_POST_SNAP_NV = 0x954E;
pub const GL_EXT_multisample = 1;
pub inline fn glVertexStream1dvATI(arg_10793: GLenum, arg_10794: [*c]const GLdouble) void {
    return epoxy_glVertexStream1dvATI.?(arg_10793, arg_10794);
}
pub const GL_MAP2_VERTEX_ATTRIB13_4_NV = 0x867D;
pub const GL_T2F_N3F_V3F = 0x2A2B;
pub inline fn glUniform4uiEXT(arg_10795: GLint, arg_10796: GLuint, arg_10797: GLuint, arg_10798: GLuint, arg_10799: GLuint) void {
    return epoxy_glUniform4uiEXT.?(arg_10795, arg_10796, arg_10797, arg_10798, arg_10799);
}
pub const GL_ARB_gl_spirv = 1;
pub const GL_HSL_SATURATION_NV = 0x92AE;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT = 0;
pub inline fn glTexParameterxvOES(arg_10800: GLenum, arg_10801: GLenum, arg_10802: [*c]const GLfixed) void {
    return epoxy_glTexParameterxvOES.?(arg_10800, arg_10801, arg_10802);
}
pub inline fn glBlitFramebufferNV(arg_10803: GLint, arg_10804: GLint, arg_10805: GLint, arg_10806: GLint, arg_10807: GLint, arg_10808: GLint, arg_10809: GLint, arg_10810: GLint, arg_10811: GLbitfield, arg_10812: GLenum) void {
    return epoxy_glBlitFramebufferNV.?(arg_10803, arg_10804, arg_10805, arg_10806, arg_10807, arg_10808, arg_10809, arg_10810, arg_10811, arg_10812);
}
pub const GL_FONT_UNDERLINE_POSITION_BIT_NV = 0x04000000;
pub inline fn glIsProgramPipelineEXT(arg_10813: GLuint) GLboolean {
    return epoxy_glIsProgramPipelineEXT.?(arg_10813);
}
pub const GL_SGIX_scalebias_hint = 1;
pub const GL_RGBA16I_EXT = 0x8D88;
pub inline fn glIndexPointerListIBM(arg_10814: GLenum, arg_10815: GLint, arg_10816: [*c]?*const c_void, arg_10817: GLint) void {
    return epoxy_glIndexPointerListIBM.?(arg_10814, arg_10815, arg_10816, arg_10817);
}
pub inline fn glBindImageTextureEXT(arg_10818: GLuint, arg_10819: GLuint, arg_10820: GLint, arg_10821: GLboolean, arg_10822: GLint, arg_10823: GLenum, arg_10824: GLint) void {
    return epoxy_glBindImageTextureEXT.?(arg_10818, arg_10819, arg_10820, arg_10821, arg_10822, arg_10823, arg_10824);
}
pub const GL_COMPRESSED_ALPHA = 0x84E9;
pub const GL_KHR_blend_equation_advanced_coherent = 1;
pub const __GLsync = struct___GLsync;
pub const _cl_context = struct__cl_context;
pub const _cl_event = struct__cl_event;
