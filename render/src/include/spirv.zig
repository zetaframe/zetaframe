pub const SpvId = c_uint;
pub const SpvMagicNumber: c_uint = @bitCast(c_uint, @as(c_int, 119734787));
pub const SpvVersion: c_uint = @bitCast(c_uint, @as(c_int, 66816));
pub const SpvRevision: c_uint = @bitCast(c_uint, @as(c_int, 3));
pub const SpvOpCodeMask: c_uint = @bitCast(c_uint, @as(c_int, 65535));
pub const SpvWordCountShift: c_uint = @bitCast(c_uint, @as(c_int, 16));
pub const SpvSourceLanguageUnknown = @enumToInt(enum_SpvSourceLanguage_.SpvSourceLanguageUnknown);
pub const SpvSourceLanguageESSL = @enumToInt(enum_SpvSourceLanguage_.SpvSourceLanguageESSL);
pub const SpvSourceLanguageGLSL = @enumToInt(enum_SpvSourceLanguage_.SpvSourceLanguageGLSL);
pub const SpvSourceLanguageOpenCL_C = @enumToInt(enum_SpvSourceLanguage_.SpvSourceLanguageOpenCL_C);
pub const SpvSourceLanguageOpenCL_CPP = @enumToInt(enum_SpvSourceLanguage_.SpvSourceLanguageOpenCL_CPP);
pub const SpvSourceLanguageHLSL = @enumToInt(enum_SpvSourceLanguage_.SpvSourceLanguageHLSL);
pub const SpvSourceLanguageMax = @enumToInt(enum_SpvSourceLanguage_.SpvSourceLanguageMax);
pub const enum_SpvSourceLanguage_ = extern enum(c_int) {
    SpvSourceLanguageUnknown = 0,
    SpvSourceLanguageESSL = 1,
    SpvSourceLanguageGLSL = 2,
    SpvSourceLanguageOpenCL_C = 3,
    SpvSourceLanguageOpenCL_CPP = 4,
    SpvSourceLanguageHLSL = 5,
    SpvSourceLanguageMax = 2147483647,
    _,
};
pub const SpvSourceLanguage = enum_SpvSourceLanguage_;
pub const SpvExecutionModelVertex = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelVertex);
pub const SpvExecutionModelTessellationControl = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelTessellationControl);
pub const SpvExecutionModelTessellationEvaluation = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelTessellationEvaluation);
pub const SpvExecutionModelGeometry = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelGeometry);
pub const SpvExecutionModelFragment = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelFragment);
pub const SpvExecutionModelGLCompute = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelGLCompute);
pub const SpvExecutionModelKernel = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelKernel);
pub const SpvExecutionModelTaskNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelTaskNV);
pub const SpvExecutionModelMeshNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelMeshNV);
pub const SpvExecutionModelRayGenerationKHR = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelRayGenerationKHR);
pub const SpvExecutionModelRayGenerationNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelRayGenerationNV);
pub const SpvExecutionModelIntersectionKHR = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelIntersectionKHR);
pub const SpvExecutionModelIntersectionNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelIntersectionNV);
pub const SpvExecutionModelAnyHitKHR = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelAnyHitKHR);
pub const SpvExecutionModelAnyHitNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelAnyHitNV);
pub const SpvExecutionModelClosestHitKHR = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelClosestHitKHR);
pub const SpvExecutionModelClosestHitNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelClosestHitNV);
pub const SpvExecutionModelMissKHR = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelMissKHR);
pub const SpvExecutionModelMissNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelMissNV);
pub const SpvExecutionModelCallableKHR = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelCallableKHR);
pub const SpvExecutionModelCallableNV = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelCallableNV);
pub const SpvExecutionModelMax = @enumToInt(enum_SpvExecutionModel_.SpvExecutionModelMax);
pub const enum_SpvExecutionModel_ = extern enum(c_int) {
    SpvExecutionModelVertex = 0,
    SpvExecutionModelTessellationControl = 1,
    SpvExecutionModelTessellationEvaluation = 2,
    SpvExecutionModelGeometry = 3,
    SpvExecutionModelFragment = 4,
    SpvExecutionModelGLCompute = 5,
    SpvExecutionModelKernel = 6,
    SpvExecutionModelTaskNV = 5267,
    SpvExecutionModelMeshNV = 5268,
    SpvExecutionModelRayGenerationKHR = 5313,
    SpvExecutionModelRayGenerationNV = 5313,
    SpvExecutionModelIntersectionKHR = 5314,
    SpvExecutionModelIntersectionNV = 5314,
    SpvExecutionModelAnyHitKHR = 5315,
    SpvExecutionModelAnyHitNV = 5315,
    SpvExecutionModelClosestHitKHR = 5316,
    SpvExecutionModelClosestHitNV = 5316,
    SpvExecutionModelMissKHR = 5317,
    SpvExecutionModelMissNV = 5317,
    SpvExecutionModelCallableKHR = 5318,
    SpvExecutionModelCallableNV = 5318,
    SpvExecutionModelMax = 2147483647,
    _,
};
pub const SpvExecutionModel = enum_SpvExecutionModel_;
pub const SpvAddressingModelLogical = @enumToInt(enum_SpvAddressingModel_.SpvAddressingModelLogical);
pub const SpvAddressingModelPhysical32 = @enumToInt(enum_SpvAddressingModel_.SpvAddressingModelPhysical32);
pub const SpvAddressingModelPhysical64 = @enumToInt(enum_SpvAddressingModel_.SpvAddressingModelPhysical64);
pub const SpvAddressingModelPhysicalStorageBuffer64 = @enumToInt(enum_SpvAddressingModel_.SpvAddressingModelPhysicalStorageBuffer64);
pub const SpvAddressingModelPhysicalStorageBuffer64EXT = @enumToInt(enum_SpvAddressingModel_.SpvAddressingModelPhysicalStorageBuffer64EXT);
pub const SpvAddressingModelMax = @enumToInt(enum_SpvAddressingModel_.SpvAddressingModelMax);
pub const enum_SpvAddressingModel_ = extern enum(c_int) {
    SpvAddressingModelLogical = 0,
    SpvAddressingModelPhysical32 = 1,
    SpvAddressingModelPhysical64 = 2,
    SpvAddressingModelPhysicalStorageBuffer64 = 5348,
    SpvAddressingModelPhysicalStorageBuffer64EXT = 5348,
    SpvAddressingModelMax = 2147483647,
    _,
};
pub const SpvAddressingModel = enum_SpvAddressingModel_;
pub const SpvMemoryModelSimple = @enumToInt(enum_SpvMemoryModel_.SpvMemoryModelSimple);
pub const SpvMemoryModelGLSL450 = @enumToInt(enum_SpvMemoryModel_.SpvMemoryModelGLSL450);
pub const SpvMemoryModelOpenCL = @enumToInt(enum_SpvMemoryModel_.SpvMemoryModelOpenCL);
pub const SpvMemoryModelVulkan = @enumToInt(enum_SpvMemoryModel_.SpvMemoryModelVulkan);
pub const SpvMemoryModelVulkanKHR = @enumToInt(enum_SpvMemoryModel_.SpvMemoryModelVulkanKHR);
pub const SpvMemoryModelMax = @enumToInt(enum_SpvMemoryModel_.SpvMemoryModelMax);
pub const enum_SpvMemoryModel_ = extern enum(c_int) {
    SpvMemoryModelSimple = 0,
    SpvMemoryModelGLSL450 = 1,
    SpvMemoryModelOpenCL = 2,
    SpvMemoryModelVulkan = 3,
    SpvMemoryModelVulkanKHR = 3,
    SpvMemoryModelMax = 2147483647,
    _,
};
pub const SpvMemoryModel = enum_SpvMemoryModel_;
pub const SpvExecutionModeInvocations = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeInvocations);
pub const SpvExecutionModeSpacingEqual = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSpacingEqual);
pub const SpvExecutionModeSpacingFractionalEven = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSpacingFractionalEven);
pub const SpvExecutionModeSpacingFractionalOdd = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSpacingFractionalOdd);
pub const SpvExecutionModeVertexOrderCw = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeVertexOrderCw);
pub const SpvExecutionModeVertexOrderCcw = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeVertexOrderCcw);
pub const SpvExecutionModePixelCenterInteger = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModePixelCenterInteger);
pub const SpvExecutionModeOriginUpperLeft = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOriginUpperLeft);
pub const SpvExecutionModeOriginLowerLeft = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOriginLowerLeft);
pub const SpvExecutionModeEarlyFragmentTests = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeEarlyFragmentTests);
pub const SpvExecutionModePointMode = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModePointMode);
pub const SpvExecutionModeXfb = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeXfb);
pub const SpvExecutionModeDepthReplacing = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDepthReplacing);
pub const SpvExecutionModeDepthGreater = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDepthGreater);
pub const SpvExecutionModeDepthLess = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDepthLess);
pub const SpvExecutionModeDepthUnchanged = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDepthUnchanged);
pub const SpvExecutionModeLocalSize = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeLocalSize);
pub const SpvExecutionModeLocalSizeHint = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeLocalSizeHint);
pub const SpvExecutionModeInputPoints = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeInputPoints);
pub const SpvExecutionModeInputLines = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeInputLines);
pub const SpvExecutionModeInputLinesAdjacency = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeInputLinesAdjacency);
pub const SpvExecutionModeTriangles = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeTriangles);
pub const SpvExecutionModeInputTrianglesAdjacency = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeInputTrianglesAdjacency);
pub const SpvExecutionModeQuads = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeQuads);
pub const SpvExecutionModeIsolines = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeIsolines);
pub const SpvExecutionModeOutputVertices = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOutputVertices);
pub const SpvExecutionModeOutputPoints = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOutputPoints);
pub const SpvExecutionModeOutputLineStrip = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOutputLineStrip);
pub const SpvExecutionModeOutputTriangleStrip = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOutputTriangleStrip);
pub const SpvExecutionModeVecTypeHint = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeVecTypeHint);
pub const SpvExecutionModeContractionOff = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeContractionOff);
pub const SpvExecutionModeInitializer = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeInitializer);
pub const SpvExecutionModeFinalizer = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeFinalizer);
pub const SpvExecutionModeSubgroupSize = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSubgroupSize);
pub const SpvExecutionModeSubgroupsPerWorkgroup = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSubgroupsPerWorkgroup);
pub const SpvExecutionModeSubgroupsPerWorkgroupId = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSubgroupsPerWorkgroupId);
pub const SpvExecutionModeLocalSizeId = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeLocalSizeId);
pub const SpvExecutionModeLocalSizeHintId = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeLocalSizeHintId);
pub const SpvExecutionModePostDepthCoverage = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModePostDepthCoverage);
pub const SpvExecutionModeDenormPreserve = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDenormPreserve);
pub const SpvExecutionModeDenormFlushToZero = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDenormFlushToZero);
pub const SpvExecutionModeSignedZeroInfNanPreserve = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSignedZeroInfNanPreserve);
pub const SpvExecutionModeRoundingModeRTE = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeRoundingModeRTE);
pub const SpvExecutionModeRoundingModeRTZ = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeRoundingModeRTZ);
pub const SpvExecutionModeStencilRefReplacingEXT = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeStencilRefReplacingEXT);
pub const SpvExecutionModeOutputLinesNV = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOutputLinesNV);
pub const SpvExecutionModeOutputPrimitivesNV = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOutputPrimitivesNV);
pub const SpvExecutionModeDerivativeGroupQuadsNV = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDerivativeGroupQuadsNV);
pub const SpvExecutionModeDerivativeGroupLinearNV = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeDerivativeGroupLinearNV);
pub const SpvExecutionModeOutputTrianglesNV = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeOutputTrianglesNV);
pub const SpvExecutionModePixelInterlockOrderedEXT = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModePixelInterlockOrderedEXT);
pub const SpvExecutionModePixelInterlockUnorderedEXT = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModePixelInterlockUnorderedEXT);
pub const SpvExecutionModeSampleInterlockOrderedEXT = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSampleInterlockOrderedEXT);
pub const SpvExecutionModeSampleInterlockUnorderedEXT = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeSampleInterlockUnorderedEXT);
pub const SpvExecutionModeShadingRateInterlockOrderedEXT = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeShadingRateInterlockOrderedEXT);
pub const SpvExecutionModeShadingRateInterlockUnorderedEXT = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeShadingRateInterlockUnorderedEXT);
pub const SpvExecutionModeMaxWorkgroupSizeINTEL = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeMaxWorkgroupSizeINTEL);
pub const SpvExecutionModeMaxWorkDimINTEL = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeMaxWorkDimINTEL);
pub const SpvExecutionModeNoGlobalOffsetINTEL = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeNoGlobalOffsetINTEL);
pub const SpvExecutionModeNumSIMDWorkitemsINTEL = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeNumSIMDWorkitemsINTEL);
pub const SpvExecutionModeMax = @enumToInt(enum_SpvExecutionMode_.SpvExecutionModeMax);
pub const enum_SpvExecutionMode_ = extern enum(c_int) {
    SpvExecutionModeInvocations = 0,
    SpvExecutionModeSpacingEqual = 1,
    SpvExecutionModeSpacingFractionalEven = 2,
    SpvExecutionModeSpacingFractionalOdd = 3,
    SpvExecutionModeVertexOrderCw = 4,
    SpvExecutionModeVertexOrderCcw = 5,
    SpvExecutionModePixelCenterInteger = 6,
    SpvExecutionModeOriginUpperLeft = 7,
    SpvExecutionModeOriginLowerLeft = 8,
    SpvExecutionModeEarlyFragmentTests = 9,
    SpvExecutionModePointMode = 10,
    SpvExecutionModeXfb = 11,
    SpvExecutionModeDepthReplacing = 12,
    SpvExecutionModeDepthGreater = 14,
    SpvExecutionModeDepthLess = 15,
    SpvExecutionModeDepthUnchanged = 16,
    SpvExecutionModeLocalSize = 17,
    SpvExecutionModeLocalSizeHint = 18,
    SpvExecutionModeInputPoints = 19,
    SpvExecutionModeInputLines = 20,
    SpvExecutionModeInputLinesAdjacency = 21,
    SpvExecutionModeTriangles = 22,
    SpvExecutionModeInputTrianglesAdjacency = 23,
    SpvExecutionModeQuads = 24,
    SpvExecutionModeIsolines = 25,
    SpvExecutionModeOutputVertices = 26,
    SpvExecutionModeOutputPoints = 27,
    SpvExecutionModeOutputLineStrip = 28,
    SpvExecutionModeOutputTriangleStrip = 29,
    SpvExecutionModeVecTypeHint = 30,
    SpvExecutionModeContractionOff = 31,
    SpvExecutionModeInitializer = 33,
    SpvExecutionModeFinalizer = 34,
    SpvExecutionModeSubgroupSize = 35,
    SpvExecutionModeSubgroupsPerWorkgroup = 36,
    SpvExecutionModeSubgroupsPerWorkgroupId = 37,
    SpvExecutionModeLocalSizeId = 38,
    SpvExecutionModeLocalSizeHintId = 39,
    SpvExecutionModePostDepthCoverage = 4446,
    SpvExecutionModeDenormPreserve = 4459,
    SpvExecutionModeDenormFlushToZero = 4460,
    SpvExecutionModeSignedZeroInfNanPreserve = 4461,
    SpvExecutionModeRoundingModeRTE = 4462,
    SpvExecutionModeRoundingModeRTZ = 4463,
    SpvExecutionModeStencilRefReplacingEXT = 5027,
    SpvExecutionModeOutputLinesNV = 5269,
    SpvExecutionModeOutputPrimitivesNV = 5270,
    SpvExecutionModeDerivativeGroupQuadsNV = 5289,
    SpvExecutionModeDerivativeGroupLinearNV = 5290,
    SpvExecutionModeOutputTrianglesNV = 5298,
    SpvExecutionModePixelInterlockOrderedEXT = 5366,
    SpvExecutionModePixelInterlockUnorderedEXT = 5367,
    SpvExecutionModeSampleInterlockOrderedEXT = 5368,
    SpvExecutionModeSampleInterlockUnorderedEXT = 5369,
    SpvExecutionModeShadingRateInterlockOrderedEXT = 5370,
    SpvExecutionModeShadingRateInterlockUnorderedEXT = 5371,
    SpvExecutionModeMaxWorkgroupSizeINTEL = 5893,
    SpvExecutionModeMaxWorkDimINTEL = 5894,
    SpvExecutionModeNoGlobalOffsetINTEL = 5895,
    SpvExecutionModeNumSIMDWorkitemsINTEL = 5896,
    SpvExecutionModeMax = 2147483647,
    _,
};
pub const SpvExecutionMode = enum_SpvExecutionMode_;
pub const SpvStorageClassUniformConstant = @enumToInt(enum_SpvStorageClass_.SpvStorageClassUniformConstant);
pub const SpvStorageClassInput = @enumToInt(enum_SpvStorageClass_.SpvStorageClassInput);
pub const SpvStorageClassUniform = @enumToInt(enum_SpvStorageClass_.SpvStorageClassUniform);
pub const SpvStorageClassOutput = @enumToInt(enum_SpvStorageClass_.SpvStorageClassOutput);
pub const SpvStorageClassWorkgroup = @enumToInt(enum_SpvStorageClass_.SpvStorageClassWorkgroup);
pub const SpvStorageClassCrossWorkgroup = @enumToInt(enum_SpvStorageClass_.SpvStorageClassCrossWorkgroup);
pub const SpvStorageClassPrivate = @enumToInt(enum_SpvStorageClass_.SpvStorageClassPrivate);
pub const SpvStorageClassFunction = @enumToInt(enum_SpvStorageClass_.SpvStorageClassFunction);
pub const SpvStorageClassGeneric = @enumToInt(enum_SpvStorageClass_.SpvStorageClassGeneric);
pub const SpvStorageClassPushConstant = @enumToInt(enum_SpvStorageClass_.SpvStorageClassPushConstant);
pub const SpvStorageClassAtomicCounter = @enumToInt(enum_SpvStorageClass_.SpvStorageClassAtomicCounter);
pub const SpvStorageClassImage = @enumToInt(enum_SpvStorageClass_.SpvStorageClassImage);
pub const SpvStorageClassStorageBuffer = @enumToInt(enum_SpvStorageClass_.SpvStorageClassStorageBuffer);
pub const SpvStorageClassCallableDataKHR = @enumToInt(enum_SpvStorageClass_.SpvStorageClassCallableDataKHR);
pub const SpvStorageClassCallableDataNV = @enumToInt(enum_SpvStorageClass_.SpvStorageClassCallableDataNV);
pub const SpvStorageClassIncomingCallableDataKHR = @enumToInt(enum_SpvStorageClass_.SpvStorageClassIncomingCallableDataKHR);
pub const SpvStorageClassIncomingCallableDataNV = @enumToInt(enum_SpvStorageClass_.SpvStorageClassIncomingCallableDataNV);
pub const SpvStorageClassRayPayloadKHR = @enumToInt(enum_SpvStorageClass_.SpvStorageClassRayPayloadKHR);
pub const SpvStorageClassRayPayloadNV = @enumToInt(enum_SpvStorageClass_.SpvStorageClassRayPayloadNV);
pub const SpvStorageClassHitAttributeKHR = @enumToInt(enum_SpvStorageClass_.SpvStorageClassHitAttributeKHR);
pub const SpvStorageClassHitAttributeNV = @enumToInt(enum_SpvStorageClass_.SpvStorageClassHitAttributeNV);
pub const SpvStorageClassIncomingRayPayloadKHR = @enumToInt(enum_SpvStorageClass_.SpvStorageClassIncomingRayPayloadKHR);
pub const SpvStorageClassIncomingRayPayloadNV = @enumToInt(enum_SpvStorageClass_.SpvStorageClassIncomingRayPayloadNV);
pub const SpvStorageClassShaderRecordBufferKHR = @enumToInt(enum_SpvStorageClass_.SpvStorageClassShaderRecordBufferKHR);
pub const SpvStorageClassShaderRecordBufferNV = @enumToInt(enum_SpvStorageClass_.SpvStorageClassShaderRecordBufferNV);
pub const SpvStorageClassPhysicalStorageBuffer = @enumToInt(enum_SpvStorageClass_.SpvStorageClassPhysicalStorageBuffer);
pub const SpvStorageClassPhysicalStorageBufferEXT = @enumToInt(enum_SpvStorageClass_.SpvStorageClassPhysicalStorageBufferEXT);
pub const SpvStorageClassCodeSectionINTEL = @enumToInt(enum_SpvStorageClass_.SpvStorageClassCodeSectionINTEL);
pub const SpvStorageClassMax = @enumToInt(enum_SpvStorageClass_.SpvStorageClassMax);
pub const enum_SpvStorageClass_ = extern enum(c_int) {
    SpvStorageClassUniformConstant = 0,
    SpvStorageClassInput = 1,
    SpvStorageClassUniform = 2,
    SpvStorageClassOutput = 3,
    SpvStorageClassWorkgroup = 4,
    SpvStorageClassCrossWorkgroup = 5,
    SpvStorageClassPrivate = 6,
    SpvStorageClassFunction = 7,
    SpvStorageClassGeneric = 8,
    SpvStorageClassPushConstant = 9,
    SpvStorageClassAtomicCounter = 10,
    SpvStorageClassImage = 11,
    SpvStorageClassStorageBuffer = 12,
    SpvStorageClassCallableDataKHR = 5328,
    SpvStorageClassCallableDataNV = 5328,
    SpvStorageClassIncomingCallableDataKHR = 5329,
    SpvStorageClassIncomingCallableDataNV = 5329,
    SpvStorageClassRayPayloadKHR = 5338,
    SpvStorageClassRayPayloadNV = 5338,
    SpvStorageClassHitAttributeKHR = 5339,
    SpvStorageClassHitAttributeNV = 5339,
    SpvStorageClassIncomingRayPayloadKHR = 5342,
    SpvStorageClassIncomingRayPayloadNV = 5342,
    SpvStorageClassShaderRecordBufferKHR = 5343,
    SpvStorageClassShaderRecordBufferNV = 5343,
    SpvStorageClassPhysicalStorageBuffer = 5349,
    SpvStorageClassPhysicalStorageBufferEXT = 5349,
    SpvStorageClassCodeSectionINTEL = 5605,
    SpvStorageClassMax = 2147483647,
    _,
};
pub const SpvStorageClass = enum_SpvStorageClass_;
pub const SpvDim1D = @enumToInt(enum_SpvDim_.SpvDim1D);
pub const SpvDim2D = @enumToInt(enum_SpvDim_.SpvDim2D);
pub const SpvDim3D = @enumToInt(enum_SpvDim_.SpvDim3D);
pub const SpvDimCube = @enumToInt(enum_SpvDim_.SpvDimCube);
pub const SpvDimRect = @enumToInt(enum_SpvDim_.SpvDimRect);
pub const SpvDimBuffer = @enumToInt(enum_SpvDim_.SpvDimBuffer);
pub const SpvDimSubpassData = @enumToInt(enum_SpvDim_.SpvDimSubpassData);
pub const SpvDimMax = @enumToInt(enum_SpvDim_.SpvDimMax);
pub const enum_SpvDim_ = extern enum(c_int) {
    SpvDim1D = 0,
    SpvDim2D = 1,
    SpvDim3D = 2,
    SpvDimCube = 3,
    SpvDimRect = 4,
    SpvDimBuffer = 5,
    SpvDimSubpassData = 6,
    SpvDimMax = 2147483647,
    _,
};
pub const SpvDim = enum_SpvDim_;
pub const SpvSamplerAddressingModeNone = @enumToInt(enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeNone);
pub const SpvSamplerAddressingModeClampToEdge = @enumToInt(enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeClampToEdge);
pub const SpvSamplerAddressingModeClamp = @enumToInt(enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeClamp);
pub const SpvSamplerAddressingModeRepeat = @enumToInt(enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeRepeat);
pub const SpvSamplerAddressingModeRepeatMirrored = @enumToInt(enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeRepeatMirrored);
pub const SpvSamplerAddressingModeMax = @enumToInt(enum_SpvSamplerAddressingMode_.SpvSamplerAddressingModeMax);
pub const enum_SpvSamplerAddressingMode_ = extern enum(c_int) {
    SpvSamplerAddressingModeNone = 0,
    SpvSamplerAddressingModeClampToEdge = 1,
    SpvSamplerAddressingModeClamp = 2,
    SpvSamplerAddressingModeRepeat = 3,
    SpvSamplerAddressingModeRepeatMirrored = 4,
    SpvSamplerAddressingModeMax = 2147483647,
    _,
};
pub const SpvSamplerAddressingMode = enum_SpvSamplerAddressingMode_;
pub const SpvSamplerFilterModeNearest = @enumToInt(enum_SpvSamplerFilterMode_.SpvSamplerFilterModeNearest);
pub const SpvSamplerFilterModeLinear = @enumToInt(enum_SpvSamplerFilterMode_.SpvSamplerFilterModeLinear);
pub const SpvSamplerFilterModeMax = @enumToInt(enum_SpvSamplerFilterMode_.SpvSamplerFilterModeMax);
pub const enum_SpvSamplerFilterMode_ = extern enum(c_int) {
    SpvSamplerFilterModeNearest = 0,
    SpvSamplerFilterModeLinear = 1,
    SpvSamplerFilterModeMax = 2147483647,
    _,
};
pub const SpvSamplerFilterMode = enum_SpvSamplerFilterMode_;
pub const SpvImageFormatUnknown = @enumToInt(enum_SpvImageFormat_.SpvImageFormatUnknown);
pub const SpvImageFormatRgba32f = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba32f);
pub const SpvImageFormatRgba16f = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba16f);
pub const SpvImageFormatR32f = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR32f);
pub const SpvImageFormatRgba8 = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba8);
pub const SpvImageFormatRgba8Snorm = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba8Snorm);
pub const SpvImageFormatRg32f = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg32f);
pub const SpvImageFormatRg16f = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg16f);
pub const SpvImageFormatR11fG11fB10f = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR11fG11fB10f);
pub const SpvImageFormatR16f = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR16f);
pub const SpvImageFormatRgba16 = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba16);
pub const SpvImageFormatRgb10A2 = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgb10A2);
pub const SpvImageFormatRg16 = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg16);
pub const SpvImageFormatRg8 = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg8);
pub const SpvImageFormatR16 = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR16);
pub const SpvImageFormatR8 = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR8);
pub const SpvImageFormatRgba16Snorm = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba16Snorm);
pub const SpvImageFormatRg16Snorm = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg16Snorm);
pub const SpvImageFormatRg8Snorm = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg8Snorm);
pub const SpvImageFormatR16Snorm = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR16Snorm);
pub const SpvImageFormatR8Snorm = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR8Snorm);
pub const SpvImageFormatRgba32i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba32i);
pub const SpvImageFormatRgba16i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba16i);
pub const SpvImageFormatRgba8i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba8i);
pub const SpvImageFormatR32i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR32i);
pub const SpvImageFormatRg32i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg32i);
pub const SpvImageFormatRg16i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg16i);
pub const SpvImageFormatRg8i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg8i);
pub const SpvImageFormatR16i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR16i);
pub const SpvImageFormatR8i = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR8i);
pub const SpvImageFormatRgba32ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba32ui);
pub const SpvImageFormatRgba16ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba16ui);
pub const SpvImageFormatRgba8ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgba8ui);
pub const SpvImageFormatR32ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR32ui);
pub const SpvImageFormatRgb10a2ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRgb10a2ui);
pub const SpvImageFormatRg32ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg32ui);
pub const SpvImageFormatRg16ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg16ui);
pub const SpvImageFormatRg8ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatRg8ui);
pub const SpvImageFormatR16ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR16ui);
pub const SpvImageFormatR8ui = @enumToInt(enum_SpvImageFormat_.SpvImageFormatR8ui);
pub const SpvImageFormatMax = @enumToInt(enum_SpvImageFormat_.SpvImageFormatMax);
pub const enum_SpvImageFormat_ = extern enum(c_int) {
    SpvImageFormatUnknown = 0,
    SpvImageFormatRgba32f = 1,
    SpvImageFormatRgba16f = 2,
    SpvImageFormatR32f = 3,
    SpvImageFormatRgba8 = 4,
    SpvImageFormatRgba8Snorm = 5,
    SpvImageFormatRg32f = 6,
    SpvImageFormatRg16f = 7,
    SpvImageFormatR11fG11fB10f = 8,
    SpvImageFormatR16f = 9,
    SpvImageFormatRgba16 = 10,
    SpvImageFormatRgb10A2 = 11,
    SpvImageFormatRg16 = 12,
    SpvImageFormatRg8 = 13,
    SpvImageFormatR16 = 14,
    SpvImageFormatR8 = 15,
    SpvImageFormatRgba16Snorm = 16,
    SpvImageFormatRg16Snorm = 17,
    SpvImageFormatRg8Snorm = 18,
    SpvImageFormatR16Snorm = 19,
    SpvImageFormatR8Snorm = 20,
    SpvImageFormatRgba32i = 21,
    SpvImageFormatRgba16i = 22,
    SpvImageFormatRgba8i = 23,
    SpvImageFormatR32i = 24,
    SpvImageFormatRg32i = 25,
    SpvImageFormatRg16i = 26,
    SpvImageFormatRg8i = 27,
    SpvImageFormatR16i = 28,
    SpvImageFormatR8i = 29,
    SpvImageFormatRgba32ui = 30,
    SpvImageFormatRgba16ui = 31,
    SpvImageFormatRgba8ui = 32,
    SpvImageFormatR32ui = 33,
    SpvImageFormatRgb10a2ui = 34,
    SpvImageFormatRg32ui = 35,
    SpvImageFormatRg16ui = 36,
    SpvImageFormatRg8ui = 37,
    SpvImageFormatR16ui = 38,
    SpvImageFormatR8ui = 39,
    SpvImageFormatMax = 2147483647,
    _,
};
pub const SpvImageFormat = enum_SpvImageFormat_;
pub const SpvImageChannelOrderR = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderR);
pub const SpvImageChannelOrderA = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderA);
pub const SpvImageChannelOrderRG = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderRG);
pub const SpvImageChannelOrderRA = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderRA);
pub const SpvImageChannelOrderRGB = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderRGB);
pub const SpvImageChannelOrderRGBA = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderRGBA);
pub const SpvImageChannelOrderBGRA = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderBGRA);
pub const SpvImageChannelOrderARGB = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderARGB);
pub const SpvImageChannelOrderIntensity = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderIntensity);
pub const SpvImageChannelOrderLuminance = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderLuminance);
pub const SpvImageChannelOrderRx = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderRx);
pub const SpvImageChannelOrderRGx = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderRGx);
pub const SpvImageChannelOrderRGBx = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderRGBx);
pub const SpvImageChannelOrderDepth = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderDepth);
pub const SpvImageChannelOrderDepthStencil = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderDepthStencil);
pub const SpvImageChannelOrdersRGB = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrdersRGB);
pub const SpvImageChannelOrdersRGBx = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrdersRGBx);
pub const SpvImageChannelOrdersRGBA = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrdersRGBA);
pub const SpvImageChannelOrdersBGRA = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrdersBGRA);
pub const SpvImageChannelOrderABGR = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderABGR);
pub const SpvImageChannelOrderMax = @enumToInt(enum_SpvImageChannelOrder_.SpvImageChannelOrderMax);
pub const enum_SpvImageChannelOrder_ = extern enum(c_int) {
    SpvImageChannelOrderR = 0,
    SpvImageChannelOrderA = 1,
    SpvImageChannelOrderRG = 2,
    SpvImageChannelOrderRA = 3,
    SpvImageChannelOrderRGB = 4,
    SpvImageChannelOrderRGBA = 5,
    SpvImageChannelOrderBGRA = 6,
    SpvImageChannelOrderARGB = 7,
    SpvImageChannelOrderIntensity = 8,
    SpvImageChannelOrderLuminance = 9,
    SpvImageChannelOrderRx = 10,
    SpvImageChannelOrderRGx = 11,
    SpvImageChannelOrderRGBx = 12,
    SpvImageChannelOrderDepth = 13,
    SpvImageChannelOrderDepthStencil = 14,
    SpvImageChannelOrdersRGB = 15,
    SpvImageChannelOrdersRGBx = 16,
    SpvImageChannelOrdersRGBA = 17,
    SpvImageChannelOrdersBGRA = 18,
    SpvImageChannelOrderABGR = 19,
    SpvImageChannelOrderMax = 2147483647,
    _,
};
pub const SpvImageChannelOrder = enum_SpvImageChannelOrder_;
pub const SpvImageChannelDataTypeSnormInt8 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSnormInt8);
pub const SpvImageChannelDataTypeSnormInt16 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSnormInt16);
pub const SpvImageChannelDataTypeUnormInt8 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt8);
pub const SpvImageChannelDataTypeUnormInt16 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt16);
pub const SpvImageChannelDataTypeUnormShort565 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormShort565);
pub const SpvImageChannelDataTypeUnormShort555 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormShort555);
pub const SpvImageChannelDataTypeUnormInt101010 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt101010);
pub const SpvImageChannelDataTypeSignedInt8 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSignedInt8);
pub const SpvImageChannelDataTypeSignedInt16 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSignedInt16);
pub const SpvImageChannelDataTypeSignedInt32 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeSignedInt32);
pub const SpvImageChannelDataTypeUnsignedInt8 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnsignedInt8);
pub const SpvImageChannelDataTypeUnsignedInt16 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnsignedInt16);
pub const SpvImageChannelDataTypeUnsignedInt32 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnsignedInt32);
pub const SpvImageChannelDataTypeHalfFloat = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeHalfFloat);
pub const SpvImageChannelDataTypeFloat = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeFloat);
pub const SpvImageChannelDataTypeUnormInt24 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt24);
pub const SpvImageChannelDataTypeUnormInt101010_2 = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeUnormInt101010_2);
pub const SpvImageChannelDataTypeMax = @enumToInt(enum_SpvImageChannelDataType_.SpvImageChannelDataTypeMax);
pub const enum_SpvImageChannelDataType_ = extern enum(c_int) {
    SpvImageChannelDataTypeSnormInt8 = 0,
    SpvImageChannelDataTypeSnormInt16 = 1,
    SpvImageChannelDataTypeUnormInt8 = 2,
    SpvImageChannelDataTypeUnormInt16 = 3,
    SpvImageChannelDataTypeUnormShort565 = 4,
    SpvImageChannelDataTypeUnormShort555 = 5,
    SpvImageChannelDataTypeUnormInt101010 = 6,
    SpvImageChannelDataTypeSignedInt8 = 7,
    SpvImageChannelDataTypeSignedInt16 = 8,
    SpvImageChannelDataTypeSignedInt32 = 9,
    SpvImageChannelDataTypeUnsignedInt8 = 10,
    SpvImageChannelDataTypeUnsignedInt16 = 11,
    SpvImageChannelDataTypeUnsignedInt32 = 12,
    SpvImageChannelDataTypeHalfFloat = 13,
    SpvImageChannelDataTypeFloat = 14,
    SpvImageChannelDataTypeUnormInt24 = 15,
    SpvImageChannelDataTypeUnormInt101010_2 = 16,
    SpvImageChannelDataTypeMax = 2147483647,
    _,
};
pub const SpvImageChannelDataType = enum_SpvImageChannelDataType_;
pub const SpvImageOperandsBiasShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsBiasShift);
pub const SpvImageOperandsLodShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsLodShift);
pub const SpvImageOperandsGradShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsGradShift);
pub const SpvImageOperandsConstOffsetShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsConstOffsetShift);
pub const SpvImageOperandsOffsetShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsOffsetShift);
pub const SpvImageOperandsConstOffsetsShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsConstOffsetsShift);
pub const SpvImageOperandsSampleShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsSampleShift);
pub const SpvImageOperandsMinLodShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsMinLodShift);
pub const SpvImageOperandsMakeTexelAvailableShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelAvailableShift);
pub const SpvImageOperandsMakeTexelAvailableKHRShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelAvailableKHRShift);
pub const SpvImageOperandsMakeTexelVisibleShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelVisibleShift);
pub const SpvImageOperandsMakeTexelVisibleKHRShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsMakeTexelVisibleKHRShift);
pub const SpvImageOperandsNonPrivateTexelShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsNonPrivateTexelShift);
pub const SpvImageOperandsNonPrivateTexelKHRShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsNonPrivateTexelKHRShift);
pub const SpvImageOperandsVolatileTexelShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsVolatileTexelShift);
pub const SpvImageOperandsVolatileTexelKHRShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsVolatileTexelKHRShift);
pub const SpvImageOperandsSignExtendShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsSignExtendShift);
pub const SpvImageOperandsZeroExtendShift = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsZeroExtendShift);
pub const SpvImageOperandsMax = @enumToInt(enum_SpvImageOperandsShift_.SpvImageOperandsMax);
pub const enum_SpvImageOperandsShift_ = extern enum(c_int) {
    SpvImageOperandsBiasShift = 0,
    SpvImageOperandsLodShift = 1,
    SpvImageOperandsGradShift = 2,
    SpvImageOperandsConstOffsetShift = 3,
    SpvImageOperandsOffsetShift = 4,
    SpvImageOperandsConstOffsetsShift = 5,
    SpvImageOperandsSampleShift = 6,
    SpvImageOperandsMinLodShift = 7,
    SpvImageOperandsMakeTexelAvailableShift = 8,
    SpvImageOperandsMakeTexelAvailableKHRShift = 8,
    SpvImageOperandsMakeTexelVisibleShift = 9,
    SpvImageOperandsMakeTexelVisibleKHRShift = 9,
    SpvImageOperandsNonPrivateTexelShift = 10,
    SpvImageOperandsNonPrivateTexelKHRShift = 10,
    SpvImageOperandsVolatileTexelShift = 11,
    SpvImageOperandsVolatileTexelKHRShift = 11,
    SpvImageOperandsSignExtendShift = 12,
    SpvImageOperandsZeroExtendShift = 13,
    SpvImageOperandsMax = 2147483647,
    _,
};
pub const SpvImageOperandsShift = enum_SpvImageOperandsShift_;
pub const SpvImageOperandsMaskNone = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsMaskNone);
pub const SpvImageOperandsBiasMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsBiasMask);
pub const SpvImageOperandsLodMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsLodMask);
pub const SpvImageOperandsGradMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsGradMask);
pub const SpvImageOperandsConstOffsetMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsConstOffsetMask);
pub const SpvImageOperandsOffsetMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsOffsetMask);
pub const SpvImageOperandsConstOffsetsMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsConstOffsetsMask);
pub const SpvImageOperandsSampleMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsSampleMask);
pub const SpvImageOperandsMinLodMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsMinLodMask);
pub const SpvImageOperandsMakeTexelAvailableMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelAvailableMask);
pub const SpvImageOperandsMakeTexelAvailableKHRMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelAvailableKHRMask);
pub const SpvImageOperandsMakeTexelVisibleMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelVisibleMask);
pub const SpvImageOperandsMakeTexelVisibleKHRMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsMakeTexelVisibleKHRMask);
pub const SpvImageOperandsNonPrivateTexelMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsNonPrivateTexelMask);
pub const SpvImageOperandsNonPrivateTexelKHRMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsNonPrivateTexelKHRMask);
pub const SpvImageOperandsVolatileTexelMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsVolatileTexelMask);
pub const SpvImageOperandsVolatileTexelKHRMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsVolatileTexelKHRMask);
pub const SpvImageOperandsSignExtendMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsSignExtendMask);
pub const SpvImageOperandsZeroExtendMask = @enumToInt(enum_SpvImageOperandsMask_.SpvImageOperandsZeroExtendMask);
pub const enum_SpvImageOperandsMask_ = extern enum(c_int) {
    SpvImageOperandsMaskNone = 0,
    SpvImageOperandsBiasMask = 1,
    SpvImageOperandsLodMask = 2,
    SpvImageOperandsGradMask = 4,
    SpvImageOperandsConstOffsetMask = 8,
    SpvImageOperandsOffsetMask = 16,
    SpvImageOperandsConstOffsetsMask = 32,
    SpvImageOperandsSampleMask = 64,
    SpvImageOperandsMinLodMask = 128,
    SpvImageOperandsMakeTexelAvailableMask = 256,
    SpvImageOperandsMakeTexelAvailableKHRMask = 256,
    SpvImageOperandsMakeTexelVisibleMask = 512,
    SpvImageOperandsMakeTexelVisibleKHRMask = 512,
    SpvImageOperandsNonPrivateTexelMask = 1024,
    SpvImageOperandsNonPrivateTexelKHRMask = 1024,
    SpvImageOperandsVolatileTexelMask = 2048,
    SpvImageOperandsVolatileTexelKHRMask = 2048,
    SpvImageOperandsSignExtendMask = 4096,
    SpvImageOperandsZeroExtendMask = 8192,
    _,
};
pub const SpvImageOperandsMask = enum_SpvImageOperandsMask_;
pub const SpvFPFastMathModeNotNaNShift = @enumToInt(enum_SpvFPFastMathModeShift_.SpvFPFastMathModeNotNaNShift);
pub const SpvFPFastMathModeNotInfShift = @enumToInt(enum_SpvFPFastMathModeShift_.SpvFPFastMathModeNotInfShift);
pub const SpvFPFastMathModeNSZShift = @enumToInt(enum_SpvFPFastMathModeShift_.SpvFPFastMathModeNSZShift);
pub const SpvFPFastMathModeAllowRecipShift = @enumToInt(enum_SpvFPFastMathModeShift_.SpvFPFastMathModeAllowRecipShift);
pub const SpvFPFastMathModeFastShift = @enumToInt(enum_SpvFPFastMathModeShift_.SpvFPFastMathModeFastShift);
pub const SpvFPFastMathModeMax = @enumToInt(enum_SpvFPFastMathModeShift_.SpvFPFastMathModeMax);
pub const enum_SpvFPFastMathModeShift_ = extern enum(c_int) {
    SpvFPFastMathModeNotNaNShift = 0,
    SpvFPFastMathModeNotInfShift = 1,
    SpvFPFastMathModeNSZShift = 2,
    SpvFPFastMathModeAllowRecipShift = 3,
    SpvFPFastMathModeFastShift = 4,
    SpvFPFastMathModeMax = 2147483647,
    _,
};
pub const SpvFPFastMathModeShift = enum_SpvFPFastMathModeShift_;
pub const SpvFPFastMathModeMaskNone = @enumToInt(enum_SpvFPFastMathModeMask_.SpvFPFastMathModeMaskNone);
pub const SpvFPFastMathModeNotNaNMask = @enumToInt(enum_SpvFPFastMathModeMask_.SpvFPFastMathModeNotNaNMask);
pub const SpvFPFastMathModeNotInfMask = @enumToInt(enum_SpvFPFastMathModeMask_.SpvFPFastMathModeNotInfMask);
pub const SpvFPFastMathModeNSZMask = @enumToInt(enum_SpvFPFastMathModeMask_.SpvFPFastMathModeNSZMask);
pub const SpvFPFastMathModeAllowRecipMask = @enumToInt(enum_SpvFPFastMathModeMask_.SpvFPFastMathModeAllowRecipMask);
pub const SpvFPFastMathModeFastMask = @enumToInt(enum_SpvFPFastMathModeMask_.SpvFPFastMathModeFastMask);
pub const enum_SpvFPFastMathModeMask_ = extern enum(c_int) {
    SpvFPFastMathModeMaskNone = 0,
    SpvFPFastMathModeNotNaNMask = 1,
    SpvFPFastMathModeNotInfMask = 2,
    SpvFPFastMathModeNSZMask = 4,
    SpvFPFastMathModeAllowRecipMask = 8,
    SpvFPFastMathModeFastMask = 16,
    _,
};
pub const SpvFPFastMathModeMask = enum_SpvFPFastMathModeMask_;
pub const SpvFPRoundingModeRTE = @enumToInt(enum_SpvFPRoundingMode_.SpvFPRoundingModeRTE);
pub const SpvFPRoundingModeRTZ = @enumToInt(enum_SpvFPRoundingMode_.SpvFPRoundingModeRTZ);
pub const SpvFPRoundingModeRTP = @enumToInt(enum_SpvFPRoundingMode_.SpvFPRoundingModeRTP);
pub const SpvFPRoundingModeRTN = @enumToInt(enum_SpvFPRoundingMode_.SpvFPRoundingModeRTN);
pub const SpvFPRoundingModeMax = @enumToInt(enum_SpvFPRoundingMode_.SpvFPRoundingModeMax);
pub const enum_SpvFPRoundingMode_ = extern enum(c_int) {
    SpvFPRoundingModeRTE = 0,
    SpvFPRoundingModeRTZ = 1,
    SpvFPRoundingModeRTP = 2,
    SpvFPRoundingModeRTN = 3,
    SpvFPRoundingModeMax = 2147483647,
    _,
};
pub const SpvFPRoundingMode = enum_SpvFPRoundingMode_;
pub const SpvLinkageTypeExport = @enumToInt(enum_SpvLinkageType_.SpvLinkageTypeExport);
pub const SpvLinkageTypeImport = @enumToInt(enum_SpvLinkageType_.SpvLinkageTypeImport);
pub const SpvLinkageTypeMax = @enumToInt(enum_SpvLinkageType_.SpvLinkageTypeMax);
pub const enum_SpvLinkageType_ = extern enum(c_int) {
    SpvLinkageTypeExport = 0,
    SpvLinkageTypeImport = 1,
    SpvLinkageTypeMax = 2147483647,
    _,
};
pub const SpvLinkageType = enum_SpvLinkageType_;
pub const SpvAccessQualifierReadOnly = @enumToInt(enum_SpvAccessQualifier_.SpvAccessQualifierReadOnly);
pub const SpvAccessQualifierWriteOnly = @enumToInt(enum_SpvAccessQualifier_.SpvAccessQualifierWriteOnly);
pub const SpvAccessQualifierReadWrite = @enumToInt(enum_SpvAccessQualifier_.SpvAccessQualifierReadWrite);
pub const SpvAccessQualifierMax = @enumToInt(enum_SpvAccessQualifier_.SpvAccessQualifierMax);
pub const enum_SpvAccessQualifier_ = extern enum(c_int) {
    SpvAccessQualifierReadOnly = 0,
    SpvAccessQualifierWriteOnly = 1,
    SpvAccessQualifierReadWrite = 2,
    SpvAccessQualifierMax = 2147483647,
    _,
};
pub const SpvAccessQualifier = enum_SpvAccessQualifier_;
pub const SpvFunctionParameterAttributeZext = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeZext);
pub const SpvFunctionParameterAttributeSext = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeSext);
pub const SpvFunctionParameterAttributeByVal = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeByVal);
pub const SpvFunctionParameterAttributeSret = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeSret);
pub const SpvFunctionParameterAttributeNoAlias = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoAlias);
pub const SpvFunctionParameterAttributeNoCapture = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoCapture);
pub const SpvFunctionParameterAttributeNoWrite = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoWrite);
pub const SpvFunctionParameterAttributeNoReadWrite = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeNoReadWrite);
pub const SpvFunctionParameterAttributeMax = @enumToInt(enum_SpvFunctionParameterAttribute_.SpvFunctionParameterAttributeMax);
pub const enum_SpvFunctionParameterAttribute_ = extern enum(c_int) {
    SpvFunctionParameterAttributeZext = 0,
    SpvFunctionParameterAttributeSext = 1,
    SpvFunctionParameterAttributeByVal = 2,
    SpvFunctionParameterAttributeSret = 3,
    SpvFunctionParameterAttributeNoAlias = 4,
    SpvFunctionParameterAttributeNoCapture = 5,
    SpvFunctionParameterAttributeNoWrite = 6,
    SpvFunctionParameterAttributeNoReadWrite = 7,
    SpvFunctionParameterAttributeMax = 2147483647,
    _,
};
pub const SpvFunctionParameterAttribute = enum_SpvFunctionParameterAttribute_;
pub const SpvDecorationRelaxedPrecision = @enumToInt(enum_SpvDecoration_.SpvDecorationRelaxedPrecision);
pub const SpvDecorationSpecId = @enumToInt(enum_SpvDecoration_.SpvDecorationSpecId);
pub const SpvDecorationBlock = @enumToInt(enum_SpvDecoration_.SpvDecorationBlock);
pub const SpvDecorationBufferBlock = @enumToInt(enum_SpvDecoration_.SpvDecorationBufferBlock);
pub const SpvDecorationRowMajor = @enumToInt(enum_SpvDecoration_.SpvDecorationRowMajor);
pub const SpvDecorationColMajor = @enumToInt(enum_SpvDecoration_.SpvDecorationColMajor);
pub const SpvDecorationArrayStride = @enumToInt(enum_SpvDecoration_.SpvDecorationArrayStride);
pub const SpvDecorationMatrixStride = @enumToInt(enum_SpvDecoration_.SpvDecorationMatrixStride);
pub const SpvDecorationGLSLShared = @enumToInt(enum_SpvDecoration_.SpvDecorationGLSLShared);
pub const SpvDecorationGLSLPacked = @enumToInt(enum_SpvDecoration_.SpvDecorationGLSLPacked);
pub const SpvDecorationCPacked = @enumToInt(enum_SpvDecoration_.SpvDecorationCPacked);
pub const SpvDecorationBuiltIn = @enumToInt(enum_SpvDecoration_.SpvDecorationBuiltIn);
pub const SpvDecorationNoPerspective = @enumToInt(enum_SpvDecoration_.SpvDecorationNoPerspective);
pub const SpvDecorationFlat = @enumToInt(enum_SpvDecoration_.SpvDecorationFlat);
pub const SpvDecorationPatch = @enumToInt(enum_SpvDecoration_.SpvDecorationPatch);
pub const SpvDecorationCentroid = @enumToInt(enum_SpvDecoration_.SpvDecorationCentroid);
pub const SpvDecorationSample = @enumToInt(enum_SpvDecoration_.SpvDecorationSample);
pub const SpvDecorationInvariant = @enumToInt(enum_SpvDecoration_.SpvDecorationInvariant);
pub const SpvDecorationRestrict = @enumToInt(enum_SpvDecoration_.SpvDecorationRestrict);
pub const SpvDecorationAliased = @enumToInt(enum_SpvDecoration_.SpvDecorationAliased);
pub const SpvDecorationVolatile = @enumToInt(enum_SpvDecoration_.SpvDecorationVolatile);
pub const SpvDecorationConstant = @enumToInt(enum_SpvDecoration_.SpvDecorationConstant);
pub const SpvDecorationCoherent = @enumToInt(enum_SpvDecoration_.SpvDecorationCoherent);
pub const SpvDecorationNonWritable = @enumToInt(enum_SpvDecoration_.SpvDecorationNonWritable);
pub const SpvDecorationNonReadable = @enumToInt(enum_SpvDecoration_.SpvDecorationNonReadable);
pub const SpvDecorationUniform = @enumToInt(enum_SpvDecoration_.SpvDecorationUniform);
pub const SpvDecorationUniformId = @enumToInt(enum_SpvDecoration_.SpvDecorationUniformId);
pub const SpvDecorationSaturatedConversion = @enumToInt(enum_SpvDecoration_.SpvDecorationSaturatedConversion);
pub const SpvDecorationStream = @enumToInt(enum_SpvDecoration_.SpvDecorationStream);
pub const SpvDecorationLocation = @enumToInt(enum_SpvDecoration_.SpvDecorationLocation);
pub const SpvDecorationComponent = @enumToInt(enum_SpvDecoration_.SpvDecorationComponent);
pub const SpvDecorationIndex = @enumToInt(enum_SpvDecoration_.SpvDecorationIndex);
pub const SpvDecorationBinding = @enumToInt(enum_SpvDecoration_.SpvDecorationBinding);
pub const SpvDecorationDescriptorSet = @enumToInt(enum_SpvDecoration_.SpvDecorationDescriptorSet);
pub const SpvDecorationOffset = @enumToInt(enum_SpvDecoration_.SpvDecorationOffset);
pub const SpvDecorationXfbBuffer = @enumToInt(enum_SpvDecoration_.SpvDecorationXfbBuffer);
pub const SpvDecorationXfbStride = @enumToInt(enum_SpvDecoration_.SpvDecorationXfbStride);
pub const SpvDecorationFuncParamAttr = @enumToInt(enum_SpvDecoration_.SpvDecorationFuncParamAttr);
pub const SpvDecorationFPRoundingMode = @enumToInt(enum_SpvDecoration_.SpvDecorationFPRoundingMode);
pub const SpvDecorationFPFastMathMode = @enumToInt(enum_SpvDecoration_.SpvDecorationFPFastMathMode);
pub const SpvDecorationLinkageAttributes = @enumToInt(enum_SpvDecoration_.SpvDecorationLinkageAttributes);
pub const SpvDecorationNoContraction = @enumToInt(enum_SpvDecoration_.SpvDecorationNoContraction);
pub const SpvDecorationInputAttachmentIndex = @enumToInt(enum_SpvDecoration_.SpvDecorationInputAttachmentIndex);
pub const SpvDecorationAlignment = @enumToInt(enum_SpvDecoration_.SpvDecorationAlignment);
pub const SpvDecorationMaxByteOffset = @enumToInt(enum_SpvDecoration_.SpvDecorationMaxByteOffset);
pub const SpvDecorationAlignmentId = @enumToInt(enum_SpvDecoration_.SpvDecorationAlignmentId);
pub const SpvDecorationMaxByteOffsetId = @enumToInt(enum_SpvDecoration_.SpvDecorationMaxByteOffsetId);
pub const SpvDecorationNoSignedWrap = @enumToInt(enum_SpvDecoration_.SpvDecorationNoSignedWrap);
pub const SpvDecorationNoUnsignedWrap = @enumToInt(enum_SpvDecoration_.SpvDecorationNoUnsignedWrap);
pub const SpvDecorationExplicitInterpAMD = @enumToInt(enum_SpvDecoration_.SpvDecorationExplicitInterpAMD);
pub const SpvDecorationOverrideCoverageNV = @enumToInt(enum_SpvDecoration_.SpvDecorationOverrideCoverageNV);
pub const SpvDecorationPassthroughNV = @enumToInt(enum_SpvDecoration_.SpvDecorationPassthroughNV);
pub const SpvDecorationViewportRelativeNV = @enumToInt(enum_SpvDecoration_.SpvDecorationViewportRelativeNV);
pub const SpvDecorationSecondaryViewportRelativeNV = @enumToInt(enum_SpvDecoration_.SpvDecorationSecondaryViewportRelativeNV);
pub const SpvDecorationPerPrimitiveNV = @enumToInt(enum_SpvDecoration_.SpvDecorationPerPrimitiveNV);
pub const SpvDecorationPerViewNV = @enumToInt(enum_SpvDecoration_.SpvDecorationPerViewNV);
pub const SpvDecorationPerTaskNV = @enumToInt(enum_SpvDecoration_.SpvDecorationPerTaskNV);
pub const SpvDecorationPerVertexNV = @enumToInt(enum_SpvDecoration_.SpvDecorationPerVertexNV);
pub const SpvDecorationNonUniform = @enumToInt(enum_SpvDecoration_.SpvDecorationNonUniform);
pub const SpvDecorationNonUniformEXT = @enumToInt(enum_SpvDecoration_.SpvDecorationNonUniformEXT);
pub const SpvDecorationRestrictPointer = @enumToInt(enum_SpvDecoration_.SpvDecorationRestrictPointer);
pub const SpvDecorationRestrictPointerEXT = @enumToInt(enum_SpvDecoration_.SpvDecorationRestrictPointerEXT);
pub const SpvDecorationAliasedPointer = @enumToInt(enum_SpvDecoration_.SpvDecorationAliasedPointer);
pub const SpvDecorationAliasedPointerEXT = @enumToInt(enum_SpvDecoration_.SpvDecorationAliasedPointerEXT);
pub const SpvDecorationReferencedIndirectlyINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationReferencedIndirectlyINTEL);
pub const SpvDecorationCounterBuffer = @enumToInt(enum_SpvDecoration_.SpvDecorationCounterBuffer);
pub const SpvDecorationHlslCounterBufferGOOGLE = @enumToInt(enum_SpvDecoration_.SpvDecorationHlslCounterBufferGOOGLE);
pub const SpvDecorationHlslSemanticGOOGLE = @enumToInt(enum_SpvDecoration_.SpvDecorationHlslSemanticGOOGLE);
pub const SpvDecorationUserSemantic = @enumToInt(enum_SpvDecoration_.SpvDecorationUserSemantic);
pub const SpvDecorationUserTypeGOOGLE = @enumToInt(enum_SpvDecoration_.SpvDecorationUserTypeGOOGLE);
pub const SpvDecorationRegisterINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationRegisterINTEL);
pub const SpvDecorationMemoryINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationMemoryINTEL);
pub const SpvDecorationNumbanksINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationNumbanksINTEL);
pub const SpvDecorationBankwidthINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationBankwidthINTEL);
pub const SpvDecorationMaxPrivateCopiesINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationMaxPrivateCopiesINTEL);
pub const SpvDecorationSinglepumpINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationSinglepumpINTEL);
pub const SpvDecorationDoublepumpINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationDoublepumpINTEL);
pub const SpvDecorationMaxReplicatesINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationMaxReplicatesINTEL);
pub const SpvDecorationSimpleDualPortINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationSimpleDualPortINTEL);
pub const SpvDecorationMergeINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationMergeINTEL);
pub const SpvDecorationBankBitsINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationBankBitsINTEL);
pub const SpvDecorationForcePow2DepthINTEL = @enumToInt(enum_SpvDecoration_.SpvDecorationForcePow2DepthINTEL);
pub const SpvDecorationMax = @enumToInt(enum_SpvDecoration_.SpvDecorationMax);
pub const enum_SpvDecoration_ = extern enum(c_int) {
    SpvDecorationRelaxedPrecision = 0,
    SpvDecorationSpecId = 1,
    SpvDecorationBlock = 2,
    SpvDecorationBufferBlock = 3,
    SpvDecorationRowMajor = 4,
    SpvDecorationColMajor = 5,
    SpvDecorationArrayStride = 6,
    SpvDecorationMatrixStride = 7,
    SpvDecorationGLSLShared = 8,
    SpvDecorationGLSLPacked = 9,
    SpvDecorationCPacked = 10,
    SpvDecorationBuiltIn = 11,
    SpvDecorationNoPerspective = 13,
    SpvDecorationFlat = 14,
    SpvDecorationPatch = 15,
    SpvDecorationCentroid = 16,
    SpvDecorationSample = 17,
    SpvDecorationInvariant = 18,
    SpvDecorationRestrict = 19,
    SpvDecorationAliased = 20,
    SpvDecorationVolatile = 21,
    SpvDecorationConstant = 22,
    SpvDecorationCoherent = 23,
    SpvDecorationNonWritable = 24,
    SpvDecorationNonReadable = 25,
    SpvDecorationUniform = 26,
    SpvDecorationUniformId = 27,
    SpvDecorationSaturatedConversion = 28,
    SpvDecorationStream = 29,
    SpvDecorationLocation = 30,
    SpvDecorationComponent = 31,
    SpvDecorationIndex = 32,
    SpvDecorationBinding = 33,
    SpvDecorationDescriptorSet = 34,
    SpvDecorationOffset = 35,
    SpvDecorationXfbBuffer = 36,
    SpvDecorationXfbStride = 37,
    SpvDecorationFuncParamAttr = 38,
    SpvDecorationFPRoundingMode = 39,
    SpvDecorationFPFastMathMode = 40,
    SpvDecorationLinkageAttributes = 41,
    SpvDecorationNoContraction = 42,
    SpvDecorationInputAttachmentIndex = 43,
    SpvDecorationAlignment = 44,
    SpvDecorationMaxByteOffset = 45,
    SpvDecorationAlignmentId = 46,
    SpvDecorationMaxByteOffsetId = 47,
    SpvDecorationNoSignedWrap = 4469,
    SpvDecorationNoUnsignedWrap = 4470,
    SpvDecorationExplicitInterpAMD = 4999,
    SpvDecorationOverrideCoverageNV = 5248,
    SpvDecorationPassthroughNV = 5250,
    SpvDecorationViewportRelativeNV = 5252,
    SpvDecorationSecondaryViewportRelativeNV = 5256,
    SpvDecorationPerPrimitiveNV = 5271,
    SpvDecorationPerViewNV = 5272,
    SpvDecorationPerTaskNV = 5273,
    SpvDecorationPerVertexNV = 5285,
    SpvDecorationNonUniform = 5300,
    SpvDecorationNonUniformEXT = 5300,
    SpvDecorationRestrictPointer = 5355,
    SpvDecorationRestrictPointerEXT = 5355,
    SpvDecorationAliasedPointer = 5356,
    SpvDecorationAliasedPointerEXT = 5356,
    SpvDecorationReferencedIndirectlyINTEL = 5602,
    SpvDecorationCounterBuffer = 5634,
    SpvDecorationHlslCounterBufferGOOGLE = 5634,
    SpvDecorationHlslSemanticGOOGLE = 5635,
    SpvDecorationUserSemantic = 5635,
    SpvDecorationUserTypeGOOGLE = 5636,
    SpvDecorationRegisterINTEL = 5825,
    SpvDecorationMemoryINTEL = 5826,
    SpvDecorationNumbanksINTEL = 5827,
    SpvDecorationBankwidthINTEL = 5828,
    SpvDecorationMaxPrivateCopiesINTEL = 5829,
    SpvDecorationSinglepumpINTEL = 5830,
    SpvDecorationDoublepumpINTEL = 5831,
    SpvDecorationMaxReplicatesINTEL = 5832,
    SpvDecorationSimpleDualPortINTEL = 5833,
    SpvDecorationMergeINTEL = 5834,
    SpvDecorationBankBitsINTEL = 5835,
    SpvDecorationForcePow2DepthINTEL = 5836,
    SpvDecorationMax = 2147483647,
    _,
};
pub const SpvDecoration = enum_SpvDecoration_;
pub const SpvBuiltInPosition = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPosition);
pub const SpvBuiltInPointSize = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPointSize);
pub const SpvBuiltInClipDistance = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInClipDistance);
pub const SpvBuiltInCullDistance = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInCullDistance);
pub const SpvBuiltInVertexId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInVertexId);
pub const SpvBuiltInInstanceId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInInstanceId);
pub const SpvBuiltInPrimitiveId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPrimitiveId);
pub const SpvBuiltInInvocationId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInInvocationId);
pub const SpvBuiltInLayer = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLayer);
pub const SpvBuiltInViewportIndex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInViewportIndex);
pub const SpvBuiltInTessLevelOuter = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInTessLevelOuter);
pub const SpvBuiltInTessLevelInner = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInTessLevelInner);
pub const SpvBuiltInTessCoord = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInTessCoord);
pub const SpvBuiltInPatchVertices = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPatchVertices);
pub const SpvBuiltInFragCoord = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFragCoord);
pub const SpvBuiltInPointCoord = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPointCoord);
pub const SpvBuiltInFrontFacing = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFrontFacing);
pub const SpvBuiltInSampleId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSampleId);
pub const SpvBuiltInSamplePosition = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSamplePosition);
pub const SpvBuiltInSampleMask = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSampleMask);
pub const SpvBuiltInFragDepth = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFragDepth);
pub const SpvBuiltInHelperInvocation = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInHelperInvocation);
pub const SpvBuiltInNumWorkgroups = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInNumWorkgroups);
pub const SpvBuiltInWorkgroupSize = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorkgroupSize);
pub const SpvBuiltInWorkgroupId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorkgroupId);
pub const SpvBuiltInLocalInvocationId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLocalInvocationId);
pub const SpvBuiltInGlobalInvocationId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInGlobalInvocationId);
pub const SpvBuiltInLocalInvocationIndex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLocalInvocationIndex);
pub const SpvBuiltInWorkDim = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorkDim);
pub const SpvBuiltInGlobalSize = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInGlobalSize);
pub const SpvBuiltInEnqueuedWorkgroupSize = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInEnqueuedWorkgroupSize);
pub const SpvBuiltInGlobalOffset = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInGlobalOffset);
pub const SpvBuiltInGlobalLinearId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInGlobalLinearId);
pub const SpvBuiltInSubgroupSize = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupSize);
pub const SpvBuiltInSubgroupMaxSize = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupMaxSize);
pub const SpvBuiltInNumSubgroups = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInNumSubgroups);
pub const SpvBuiltInNumEnqueuedSubgroups = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInNumEnqueuedSubgroups);
pub const SpvBuiltInSubgroupId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupId);
pub const SpvBuiltInSubgroupLocalInvocationId = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupLocalInvocationId);
pub const SpvBuiltInVertexIndex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInVertexIndex);
pub const SpvBuiltInInstanceIndex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInInstanceIndex);
pub const SpvBuiltInSubgroupEqMask = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupEqMask);
pub const SpvBuiltInSubgroupEqMaskKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupEqMaskKHR);
pub const SpvBuiltInSubgroupGeMask = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupGeMask);
pub const SpvBuiltInSubgroupGeMaskKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupGeMaskKHR);
pub const SpvBuiltInSubgroupGtMask = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupGtMask);
pub const SpvBuiltInSubgroupGtMaskKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupGtMaskKHR);
pub const SpvBuiltInSubgroupLeMask = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupLeMask);
pub const SpvBuiltInSubgroupLeMaskKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupLeMaskKHR);
pub const SpvBuiltInSubgroupLtMask = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupLtMask);
pub const SpvBuiltInSubgroupLtMaskKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSubgroupLtMaskKHR);
pub const SpvBuiltInBaseVertex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaseVertex);
pub const SpvBuiltInBaseInstance = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaseInstance);
pub const SpvBuiltInDrawIndex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInDrawIndex);
pub const SpvBuiltInDeviceIndex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInDeviceIndex);
pub const SpvBuiltInViewIndex = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInViewIndex);
pub const SpvBuiltInBaryCoordNoPerspAMD = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspAMD);
pub const SpvBuiltInBaryCoordNoPerspCentroidAMD = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspCentroidAMD);
pub const SpvBuiltInBaryCoordNoPerspSampleAMD = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspSampleAMD);
pub const SpvBuiltInBaryCoordSmoothAMD = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordSmoothAMD);
pub const SpvBuiltInBaryCoordSmoothCentroidAMD = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordSmoothCentroidAMD);
pub const SpvBuiltInBaryCoordSmoothSampleAMD = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordSmoothSampleAMD);
pub const SpvBuiltInBaryCoordPullModelAMD = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordPullModelAMD);
pub const SpvBuiltInFragStencilRefEXT = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFragStencilRefEXT);
pub const SpvBuiltInViewportMaskNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInViewportMaskNV);
pub const SpvBuiltInSecondaryPositionNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSecondaryPositionNV);
pub const SpvBuiltInSecondaryViewportMaskNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSecondaryViewportMaskNV);
pub const SpvBuiltInPositionPerViewNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPositionPerViewNV);
pub const SpvBuiltInViewportMaskPerViewNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInViewportMaskPerViewNV);
pub const SpvBuiltInFullyCoveredEXT = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFullyCoveredEXT);
pub const SpvBuiltInTaskCountNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInTaskCountNV);
pub const SpvBuiltInPrimitiveCountNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPrimitiveCountNV);
pub const SpvBuiltInPrimitiveIndicesNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInPrimitiveIndicesNV);
pub const SpvBuiltInClipDistancePerViewNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInClipDistancePerViewNV);
pub const SpvBuiltInCullDistancePerViewNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInCullDistancePerViewNV);
pub const SpvBuiltInLayerPerViewNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLayerPerViewNV);
pub const SpvBuiltInMeshViewCountNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInMeshViewCountNV);
pub const SpvBuiltInMeshViewIndicesNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInMeshViewIndicesNV);
pub const SpvBuiltInBaryCoordNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordNV);
pub const SpvBuiltInBaryCoordNoPerspNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInBaryCoordNoPerspNV);
pub const SpvBuiltInFragSizeEXT = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFragSizeEXT);
pub const SpvBuiltInFragmentSizeNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFragmentSizeNV);
pub const SpvBuiltInFragInvocationCountEXT = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInFragInvocationCountEXT);
pub const SpvBuiltInInvocationsPerPixelNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInInvocationsPerPixelNV);
pub const SpvBuiltInLaunchIdKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLaunchIdKHR);
pub const SpvBuiltInLaunchIdNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLaunchIdNV);
pub const SpvBuiltInLaunchSizeKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLaunchSizeKHR);
pub const SpvBuiltInLaunchSizeNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInLaunchSizeNV);
pub const SpvBuiltInWorldRayOriginKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorldRayOriginKHR);
pub const SpvBuiltInWorldRayOriginNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorldRayOriginNV);
pub const SpvBuiltInWorldRayDirectionKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorldRayDirectionKHR);
pub const SpvBuiltInWorldRayDirectionNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorldRayDirectionNV);
pub const SpvBuiltInObjectRayOriginKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInObjectRayOriginKHR);
pub const SpvBuiltInObjectRayOriginNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInObjectRayOriginNV);
pub const SpvBuiltInObjectRayDirectionKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInObjectRayDirectionKHR);
pub const SpvBuiltInObjectRayDirectionNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInObjectRayDirectionNV);
pub const SpvBuiltInRayTminKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInRayTminKHR);
pub const SpvBuiltInRayTminNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInRayTminNV);
pub const SpvBuiltInRayTmaxKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInRayTmaxKHR);
pub const SpvBuiltInRayTmaxNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInRayTmaxNV);
pub const SpvBuiltInInstanceCustomIndexKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInInstanceCustomIndexKHR);
pub const SpvBuiltInInstanceCustomIndexNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInInstanceCustomIndexNV);
pub const SpvBuiltInObjectToWorldKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInObjectToWorldKHR);
pub const SpvBuiltInObjectToWorldNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInObjectToWorldNV);
pub const SpvBuiltInWorldToObjectKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorldToObjectKHR);
pub const SpvBuiltInWorldToObjectNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWorldToObjectNV);
pub const SpvBuiltInHitTKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInHitTKHR);
pub const SpvBuiltInHitTNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInHitTNV);
pub const SpvBuiltInHitKindKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInHitKindKHR);
pub const SpvBuiltInHitKindNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInHitKindNV);
pub const SpvBuiltInIncomingRayFlagsKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInIncomingRayFlagsKHR);
pub const SpvBuiltInIncomingRayFlagsNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInIncomingRayFlagsNV);
pub const SpvBuiltInRayGeometryIndexKHR = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInRayGeometryIndexKHR);
pub const SpvBuiltInWarpsPerSMNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWarpsPerSMNV);
pub const SpvBuiltInSMCountNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSMCountNV);
pub const SpvBuiltInWarpIDNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInWarpIDNV);
pub const SpvBuiltInSMIDNV = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInSMIDNV);
pub const SpvBuiltInMax = @enumToInt(enum_SpvBuiltIn_.SpvBuiltInMax);
pub const enum_SpvBuiltIn_ = extern enum(c_int) {
    SpvBuiltInPosition = 0,
    SpvBuiltInPointSize = 1,
    SpvBuiltInClipDistance = 3,
    SpvBuiltInCullDistance = 4,
    SpvBuiltInVertexId = 5,
    SpvBuiltInInstanceId = 6,
    SpvBuiltInPrimitiveId = 7,
    SpvBuiltInInvocationId = 8,
    SpvBuiltInLayer = 9,
    SpvBuiltInViewportIndex = 10,
    SpvBuiltInTessLevelOuter = 11,
    SpvBuiltInTessLevelInner = 12,
    SpvBuiltInTessCoord = 13,
    SpvBuiltInPatchVertices = 14,
    SpvBuiltInFragCoord = 15,
    SpvBuiltInPointCoord = 16,
    SpvBuiltInFrontFacing = 17,
    SpvBuiltInSampleId = 18,
    SpvBuiltInSamplePosition = 19,
    SpvBuiltInSampleMask = 20,
    SpvBuiltInFragDepth = 22,
    SpvBuiltInHelperInvocation = 23,
    SpvBuiltInNumWorkgroups = 24,
    SpvBuiltInWorkgroupSize = 25,
    SpvBuiltInWorkgroupId = 26,
    SpvBuiltInLocalInvocationId = 27,
    SpvBuiltInGlobalInvocationId = 28,
    SpvBuiltInLocalInvocationIndex = 29,
    SpvBuiltInWorkDim = 30,
    SpvBuiltInGlobalSize = 31,
    SpvBuiltInEnqueuedWorkgroupSize = 32,
    SpvBuiltInGlobalOffset = 33,
    SpvBuiltInGlobalLinearId = 34,
    SpvBuiltInSubgroupSize = 36,
    SpvBuiltInSubgroupMaxSize = 37,
    SpvBuiltInNumSubgroups = 38,
    SpvBuiltInNumEnqueuedSubgroups = 39,
    SpvBuiltInSubgroupId = 40,
    SpvBuiltInSubgroupLocalInvocationId = 41,
    SpvBuiltInVertexIndex = 42,
    SpvBuiltInInstanceIndex = 43,
    SpvBuiltInSubgroupEqMask = 4416,
    SpvBuiltInSubgroupEqMaskKHR = 4416,
    SpvBuiltInSubgroupGeMask = 4417,
    SpvBuiltInSubgroupGeMaskKHR = 4417,
    SpvBuiltInSubgroupGtMask = 4418,
    SpvBuiltInSubgroupGtMaskKHR = 4418,
    SpvBuiltInSubgroupLeMask = 4419,
    SpvBuiltInSubgroupLeMaskKHR = 4419,
    SpvBuiltInSubgroupLtMask = 4420,
    SpvBuiltInSubgroupLtMaskKHR = 4420,
    SpvBuiltInBaseVertex = 4424,
    SpvBuiltInBaseInstance = 4425,
    SpvBuiltInDrawIndex = 4426,
    SpvBuiltInDeviceIndex = 4438,
    SpvBuiltInViewIndex = 4440,
    SpvBuiltInBaryCoordNoPerspAMD = 4992,
    SpvBuiltInBaryCoordNoPerspCentroidAMD = 4993,
    SpvBuiltInBaryCoordNoPerspSampleAMD = 4994,
    SpvBuiltInBaryCoordSmoothAMD = 4995,
    SpvBuiltInBaryCoordSmoothCentroidAMD = 4996,
    SpvBuiltInBaryCoordSmoothSampleAMD = 4997,
    SpvBuiltInBaryCoordPullModelAMD = 4998,
    SpvBuiltInFragStencilRefEXT = 5014,
    SpvBuiltInViewportMaskNV = 5253,
    SpvBuiltInSecondaryPositionNV = 5257,
    SpvBuiltInSecondaryViewportMaskNV = 5258,
    SpvBuiltInPositionPerViewNV = 5261,
    SpvBuiltInViewportMaskPerViewNV = 5262,
    SpvBuiltInFullyCoveredEXT = 5264,
    SpvBuiltInTaskCountNV = 5274,
    SpvBuiltInPrimitiveCountNV = 5275,
    SpvBuiltInPrimitiveIndicesNV = 5276,
    SpvBuiltInClipDistancePerViewNV = 5277,
    SpvBuiltInCullDistancePerViewNV = 5278,
    SpvBuiltInLayerPerViewNV = 5279,
    SpvBuiltInMeshViewCountNV = 5280,
    SpvBuiltInMeshViewIndicesNV = 5281,
    SpvBuiltInBaryCoordNV = 5286,
    SpvBuiltInBaryCoordNoPerspNV = 5287,
    SpvBuiltInFragSizeEXT = 5292,
    SpvBuiltInFragmentSizeNV = 5292,
    SpvBuiltInFragInvocationCountEXT = 5293,
    SpvBuiltInInvocationsPerPixelNV = 5293,
    SpvBuiltInLaunchIdKHR = 5319,
    SpvBuiltInLaunchIdNV = 5319,
    SpvBuiltInLaunchSizeKHR = 5320,
    SpvBuiltInLaunchSizeNV = 5320,
    SpvBuiltInWorldRayOriginKHR = 5321,
    SpvBuiltInWorldRayOriginNV = 5321,
    SpvBuiltInWorldRayDirectionKHR = 5322,
    SpvBuiltInWorldRayDirectionNV = 5322,
    SpvBuiltInObjectRayOriginKHR = 5323,
    SpvBuiltInObjectRayOriginNV = 5323,
    SpvBuiltInObjectRayDirectionKHR = 5324,
    SpvBuiltInObjectRayDirectionNV = 5324,
    SpvBuiltInRayTminKHR = 5325,
    SpvBuiltInRayTminNV = 5325,
    SpvBuiltInRayTmaxKHR = 5326,
    SpvBuiltInRayTmaxNV = 5326,
    SpvBuiltInInstanceCustomIndexKHR = 5327,
    SpvBuiltInInstanceCustomIndexNV = 5327,
    SpvBuiltInObjectToWorldKHR = 5330,
    SpvBuiltInObjectToWorldNV = 5330,
    SpvBuiltInWorldToObjectKHR = 5331,
    SpvBuiltInWorldToObjectNV = 5331,
    SpvBuiltInHitTKHR = 5332,
    SpvBuiltInHitTNV = 5332,
    SpvBuiltInHitKindKHR = 5333,
    SpvBuiltInHitKindNV = 5333,
    SpvBuiltInIncomingRayFlagsKHR = 5351,
    SpvBuiltInIncomingRayFlagsNV = 5351,
    SpvBuiltInRayGeometryIndexKHR = 5352,
    SpvBuiltInWarpsPerSMNV = 5374,
    SpvBuiltInSMCountNV = 5375,
    SpvBuiltInWarpIDNV = 5376,
    SpvBuiltInSMIDNV = 5377,
    SpvBuiltInMax = 2147483647,
    _,
};
pub const SpvBuiltIn = enum_SpvBuiltIn_;
pub const SpvSelectionControlFlattenShift = @enumToInt(enum_SpvSelectionControlShift_.SpvSelectionControlFlattenShift);
pub const SpvSelectionControlDontFlattenShift = @enumToInt(enum_SpvSelectionControlShift_.SpvSelectionControlDontFlattenShift);
pub const SpvSelectionControlMax = @enumToInt(enum_SpvSelectionControlShift_.SpvSelectionControlMax);
pub const enum_SpvSelectionControlShift_ = extern enum(c_int) {
    SpvSelectionControlFlattenShift = 0,
    SpvSelectionControlDontFlattenShift = 1,
    SpvSelectionControlMax = 2147483647,
    _,
};
pub const SpvSelectionControlShift = enum_SpvSelectionControlShift_;
pub const SpvSelectionControlMaskNone = @enumToInt(enum_SpvSelectionControlMask_.SpvSelectionControlMaskNone);
pub const SpvSelectionControlFlattenMask = @enumToInt(enum_SpvSelectionControlMask_.SpvSelectionControlFlattenMask);
pub const SpvSelectionControlDontFlattenMask = @enumToInt(enum_SpvSelectionControlMask_.SpvSelectionControlDontFlattenMask);
pub const enum_SpvSelectionControlMask_ = extern enum(c_int) {
    SpvSelectionControlMaskNone = 0,
    SpvSelectionControlFlattenMask = 1,
    SpvSelectionControlDontFlattenMask = 2,
    _,
};
pub const SpvSelectionControlMask = enum_SpvSelectionControlMask_;
pub const SpvLoopControlUnrollShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlUnrollShift);
pub const SpvLoopControlDontUnrollShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlDontUnrollShift);
pub const SpvLoopControlDependencyInfiniteShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlDependencyInfiniteShift);
pub const SpvLoopControlDependencyLengthShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlDependencyLengthShift);
pub const SpvLoopControlMinIterationsShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlMinIterationsShift);
pub const SpvLoopControlMaxIterationsShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlMaxIterationsShift);
pub const SpvLoopControlIterationMultipleShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlIterationMultipleShift);
pub const SpvLoopControlPeelCountShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlPeelCountShift);
pub const SpvLoopControlPartialCountShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlPartialCountShift);
pub const SpvLoopControlInitiationIntervalINTELShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlInitiationIntervalINTELShift);
pub const SpvLoopControlMaxConcurrencyINTELShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlMaxConcurrencyINTELShift);
pub const SpvLoopControlDependencyArrayINTELShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlDependencyArrayINTELShift);
pub const SpvLoopControlPipelineEnableINTELShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlPipelineEnableINTELShift);
pub const SpvLoopControlLoopCoalesceINTELShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlLoopCoalesceINTELShift);
pub const SpvLoopControlMaxInterleavingINTELShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlMaxInterleavingINTELShift);
pub const SpvLoopControlSpeculatedIterationsINTELShift = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlSpeculatedIterationsINTELShift);
pub const SpvLoopControlMax = @enumToInt(enum_SpvLoopControlShift_.SpvLoopControlMax);
pub const enum_SpvLoopControlShift_ = extern enum(c_int) {
    SpvLoopControlUnrollShift = 0,
    SpvLoopControlDontUnrollShift = 1,
    SpvLoopControlDependencyInfiniteShift = 2,
    SpvLoopControlDependencyLengthShift = 3,
    SpvLoopControlMinIterationsShift = 4,
    SpvLoopControlMaxIterationsShift = 5,
    SpvLoopControlIterationMultipleShift = 6,
    SpvLoopControlPeelCountShift = 7,
    SpvLoopControlPartialCountShift = 8,
    SpvLoopControlInitiationIntervalINTELShift = 16,
    SpvLoopControlMaxConcurrencyINTELShift = 17,
    SpvLoopControlDependencyArrayINTELShift = 18,
    SpvLoopControlPipelineEnableINTELShift = 19,
    SpvLoopControlLoopCoalesceINTELShift = 20,
    SpvLoopControlMaxInterleavingINTELShift = 21,
    SpvLoopControlSpeculatedIterationsINTELShift = 22,
    SpvLoopControlMax = 2147483647,
    _,
};
pub const SpvLoopControlShift = enum_SpvLoopControlShift_;
pub const SpvLoopControlMaskNone = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlMaskNone);
pub const SpvLoopControlUnrollMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlUnrollMask);
pub const SpvLoopControlDontUnrollMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlDontUnrollMask);
pub const SpvLoopControlDependencyInfiniteMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlDependencyInfiniteMask);
pub const SpvLoopControlDependencyLengthMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlDependencyLengthMask);
pub const SpvLoopControlMinIterationsMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlMinIterationsMask);
pub const SpvLoopControlMaxIterationsMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlMaxIterationsMask);
pub const SpvLoopControlIterationMultipleMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlIterationMultipleMask);
pub const SpvLoopControlPeelCountMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlPeelCountMask);
pub const SpvLoopControlPartialCountMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlPartialCountMask);
pub const SpvLoopControlInitiationIntervalINTELMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlInitiationIntervalINTELMask);
pub const SpvLoopControlMaxConcurrencyINTELMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlMaxConcurrencyINTELMask);
pub const SpvLoopControlDependencyArrayINTELMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlDependencyArrayINTELMask);
pub const SpvLoopControlPipelineEnableINTELMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlPipelineEnableINTELMask);
pub const SpvLoopControlLoopCoalesceINTELMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlLoopCoalesceINTELMask);
pub const SpvLoopControlMaxInterleavingINTELMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlMaxInterleavingINTELMask);
pub const SpvLoopControlSpeculatedIterationsINTELMask = @enumToInt(enum_SpvLoopControlMask_.SpvLoopControlSpeculatedIterationsINTELMask);
pub const enum_SpvLoopControlMask_ = extern enum(c_int) {
    SpvLoopControlMaskNone = 0,
    SpvLoopControlUnrollMask = 1,
    SpvLoopControlDontUnrollMask = 2,
    SpvLoopControlDependencyInfiniteMask = 4,
    SpvLoopControlDependencyLengthMask = 8,
    SpvLoopControlMinIterationsMask = 16,
    SpvLoopControlMaxIterationsMask = 32,
    SpvLoopControlIterationMultipleMask = 64,
    SpvLoopControlPeelCountMask = 128,
    SpvLoopControlPartialCountMask = 256,
    SpvLoopControlInitiationIntervalINTELMask = 65536,
    SpvLoopControlMaxConcurrencyINTELMask = 131072,
    SpvLoopControlDependencyArrayINTELMask = 262144,
    SpvLoopControlPipelineEnableINTELMask = 524288,
    SpvLoopControlLoopCoalesceINTELMask = 1048576,
    SpvLoopControlMaxInterleavingINTELMask = 2097152,
    SpvLoopControlSpeculatedIterationsINTELMask = 4194304,
    _,
};
pub const SpvLoopControlMask = enum_SpvLoopControlMask_;
pub const SpvFunctionControlInlineShift = @enumToInt(enum_SpvFunctionControlShift_.SpvFunctionControlInlineShift);
pub const SpvFunctionControlDontInlineShift = @enumToInt(enum_SpvFunctionControlShift_.SpvFunctionControlDontInlineShift);
pub const SpvFunctionControlPureShift = @enumToInt(enum_SpvFunctionControlShift_.SpvFunctionControlPureShift);
pub const SpvFunctionControlConstShift = @enumToInt(enum_SpvFunctionControlShift_.SpvFunctionControlConstShift);
pub const SpvFunctionControlMax = @enumToInt(enum_SpvFunctionControlShift_.SpvFunctionControlMax);
pub const enum_SpvFunctionControlShift_ = extern enum(c_int) {
    SpvFunctionControlInlineShift = 0,
    SpvFunctionControlDontInlineShift = 1,
    SpvFunctionControlPureShift = 2,
    SpvFunctionControlConstShift = 3,
    SpvFunctionControlMax = 2147483647,
    _,
};
pub const SpvFunctionControlShift = enum_SpvFunctionControlShift_;
pub const SpvFunctionControlMaskNone = @enumToInt(enum_SpvFunctionControlMask_.SpvFunctionControlMaskNone);
pub const SpvFunctionControlInlineMask = @enumToInt(enum_SpvFunctionControlMask_.SpvFunctionControlInlineMask);
pub const SpvFunctionControlDontInlineMask = @enumToInt(enum_SpvFunctionControlMask_.SpvFunctionControlDontInlineMask);
pub const SpvFunctionControlPureMask = @enumToInt(enum_SpvFunctionControlMask_.SpvFunctionControlPureMask);
pub const SpvFunctionControlConstMask = @enumToInt(enum_SpvFunctionControlMask_.SpvFunctionControlConstMask);
pub const enum_SpvFunctionControlMask_ = extern enum(c_int) {
    SpvFunctionControlMaskNone = 0,
    SpvFunctionControlInlineMask = 1,
    SpvFunctionControlDontInlineMask = 2,
    SpvFunctionControlPureMask = 4,
    SpvFunctionControlConstMask = 8,
    _,
};
pub const SpvFunctionControlMask = enum_SpvFunctionControlMask_;
pub const SpvMemorySemanticsAcquireShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsAcquireShift);
pub const SpvMemorySemanticsReleaseShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsReleaseShift);
pub const SpvMemorySemanticsAcquireReleaseShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsAcquireReleaseShift);
pub const SpvMemorySemanticsSequentiallyConsistentShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsSequentiallyConsistentShift);
pub const SpvMemorySemanticsUniformMemoryShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsUniformMemoryShift);
pub const SpvMemorySemanticsSubgroupMemoryShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsSubgroupMemoryShift);
pub const SpvMemorySemanticsWorkgroupMemoryShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsWorkgroupMemoryShift);
pub const SpvMemorySemanticsCrossWorkgroupMemoryShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsCrossWorkgroupMemoryShift);
pub const SpvMemorySemanticsAtomicCounterMemoryShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsAtomicCounterMemoryShift);
pub const SpvMemorySemanticsImageMemoryShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsImageMemoryShift);
pub const SpvMemorySemanticsOutputMemoryShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsOutputMemoryShift);
pub const SpvMemorySemanticsOutputMemoryKHRShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsOutputMemoryKHRShift);
pub const SpvMemorySemanticsMakeAvailableShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeAvailableShift);
pub const SpvMemorySemanticsMakeAvailableKHRShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeAvailableKHRShift);
pub const SpvMemorySemanticsMakeVisibleShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeVisibleShift);
pub const SpvMemorySemanticsMakeVisibleKHRShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMakeVisibleKHRShift);
pub const SpvMemorySemanticsVolatileShift = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsVolatileShift);
pub const SpvMemorySemanticsMax = @enumToInt(enum_SpvMemorySemanticsShift_.SpvMemorySemanticsMax);
pub const enum_SpvMemorySemanticsShift_ = extern enum(c_int) {
    SpvMemorySemanticsAcquireShift = 1,
    SpvMemorySemanticsReleaseShift = 2,
    SpvMemorySemanticsAcquireReleaseShift = 3,
    SpvMemorySemanticsSequentiallyConsistentShift = 4,
    SpvMemorySemanticsUniformMemoryShift = 6,
    SpvMemorySemanticsSubgroupMemoryShift = 7,
    SpvMemorySemanticsWorkgroupMemoryShift = 8,
    SpvMemorySemanticsCrossWorkgroupMemoryShift = 9,
    SpvMemorySemanticsAtomicCounterMemoryShift = 10,
    SpvMemorySemanticsImageMemoryShift = 11,
    SpvMemorySemanticsOutputMemoryShift = 12,
    SpvMemorySemanticsOutputMemoryKHRShift = 12,
    SpvMemorySemanticsMakeAvailableShift = 13,
    SpvMemorySemanticsMakeAvailableKHRShift = 13,
    SpvMemorySemanticsMakeVisibleShift = 14,
    SpvMemorySemanticsMakeVisibleKHRShift = 14,
    SpvMemorySemanticsVolatileShift = 15,
    SpvMemorySemanticsMax = 2147483647,
    _,
};
pub const SpvMemorySemanticsShift = enum_SpvMemorySemanticsShift_;
pub const SpvMemorySemanticsMaskNone = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMaskNone);
pub const SpvMemorySemanticsAcquireMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsAcquireMask);
pub const SpvMemorySemanticsReleaseMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsReleaseMask);
pub const SpvMemorySemanticsAcquireReleaseMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsAcquireReleaseMask);
pub const SpvMemorySemanticsSequentiallyConsistentMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsSequentiallyConsistentMask);
pub const SpvMemorySemanticsUniformMemoryMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsUniformMemoryMask);
pub const SpvMemorySemanticsSubgroupMemoryMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsSubgroupMemoryMask);
pub const SpvMemorySemanticsWorkgroupMemoryMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsWorkgroupMemoryMask);
pub const SpvMemorySemanticsCrossWorkgroupMemoryMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsCrossWorkgroupMemoryMask);
pub const SpvMemorySemanticsAtomicCounterMemoryMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsAtomicCounterMemoryMask);
pub const SpvMemorySemanticsImageMemoryMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsImageMemoryMask);
pub const SpvMemorySemanticsOutputMemoryMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsOutputMemoryMask);
pub const SpvMemorySemanticsOutputMemoryKHRMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsOutputMemoryKHRMask);
pub const SpvMemorySemanticsMakeAvailableMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeAvailableMask);
pub const SpvMemorySemanticsMakeAvailableKHRMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeAvailableKHRMask);
pub const SpvMemorySemanticsMakeVisibleMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeVisibleMask);
pub const SpvMemorySemanticsMakeVisibleKHRMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsMakeVisibleKHRMask);
pub const SpvMemorySemanticsVolatileMask = @enumToInt(enum_SpvMemorySemanticsMask_.SpvMemorySemanticsVolatileMask);
pub const enum_SpvMemorySemanticsMask_ = extern enum(c_int) {
    SpvMemorySemanticsMaskNone = 0,
    SpvMemorySemanticsAcquireMask = 2,
    SpvMemorySemanticsReleaseMask = 4,
    SpvMemorySemanticsAcquireReleaseMask = 8,
    SpvMemorySemanticsSequentiallyConsistentMask = 16,
    SpvMemorySemanticsUniformMemoryMask = 64,
    SpvMemorySemanticsSubgroupMemoryMask = 128,
    SpvMemorySemanticsWorkgroupMemoryMask = 256,
    SpvMemorySemanticsCrossWorkgroupMemoryMask = 512,
    SpvMemorySemanticsAtomicCounterMemoryMask = 1024,
    SpvMemorySemanticsImageMemoryMask = 2048,
    SpvMemorySemanticsOutputMemoryMask = 4096,
    SpvMemorySemanticsOutputMemoryKHRMask = 4096,
    SpvMemorySemanticsMakeAvailableMask = 8192,
    SpvMemorySemanticsMakeAvailableKHRMask = 8192,
    SpvMemorySemanticsMakeVisibleMask = 16384,
    SpvMemorySemanticsMakeVisibleKHRMask = 16384,
    SpvMemorySemanticsVolatileMask = 32768,
    _,
};
pub const SpvMemorySemanticsMask = enum_SpvMemorySemanticsMask_;
pub const SpvMemoryAccessVolatileShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessVolatileShift);
pub const SpvMemoryAccessAlignedShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessAlignedShift);
pub const SpvMemoryAccessNontemporalShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessNontemporalShift);
pub const SpvMemoryAccessMakePointerAvailableShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerAvailableShift);
pub const SpvMemoryAccessMakePointerAvailableKHRShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerAvailableKHRShift);
pub const SpvMemoryAccessMakePointerVisibleShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerVisibleShift);
pub const SpvMemoryAccessMakePointerVisibleKHRShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessMakePointerVisibleKHRShift);
pub const SpvMemoryAccessNonPrivatePointerShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessNonPrivatePointerShift);
pub const SpvMemoryAccessNonPrivatePointerKHRShift = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessNonPrivatePointerKHRShift);
pub const SpvMemoryAccessMax = @enumToInt(enum_SpvMemoryAccessShift_.SpvMemoryAccessMax);
pub const enum_SpvMemoryAccessShift_ = extern enum(c_int) {
    SpvMemoryAccessVolatileShift = 0,
    SpvMemoryAccessAlignedShift = 1,
    SpvMemoryAccessNontemporalShift = 2,
    SpvMemoryAccessMakePointerAvailableShift = 3,
    SpvMemoryAccessMakePointerAvailableKHRShift = 3,
    SpvMemoryAccessMakePointerVisibleShift = 4,
    SpvMemoryAccessMakePointerVisibleKHRShift = 4,
    SpvMemoryAccessNonPrivatePointerShift = 5,
    SpvMemoryAccessNonPrivatePointerKHRShift = 5,
    SpvMemoryAccessMax = 2147483647,
    _,
};
pub const SpvMemoryAccessShift = enum_SpvMemoryAccessShift_;
pub const SpvMemoryAccessMaskNone = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessMaskNone);
pub const SpvMemoryAccessVolatileMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessVolatileMask);
pub const SpvMemoryAccessAlignedMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessAlignedMask);
pub const SpvMemoryAccessNontemporalMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessNontemporalMask);
pub const SpvMemoryAccessMakePointerAvailableMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerAvailableMask);
pub const SpvMemoryAccessMakePointerAvailableKHRMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerAvailableKHRMask);
pub const SpvMemoryAccessMakePointerVisibleMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerVisibleMask);
pub const SpvMemoryAccessMakePointerVisibleKHRMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessMakePointerVisibleKHRMask);
pub const SpvMemoryAccessNonPrivatePointerMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessNonPrivatePointerMask);
pub const SpvMemoryAccessNonPrivatePointerKHRMask = @enumToInt(enum_SpvMemoryAccessMask_.SpvMemoryAccessNonPrivatePointerKHRMask);
pub const enum_SpvMemoryAccessMask_ = extern enum(c_int) {
    SpvMemoryAccessMaskNone = 0,
    SpvMemoryAccessVolatileMask = 1,
    SpvMemoryAccessAlignedMask = 2,
    SpvMemoryAccessNontemporalMask = 4,
    SpvMemoryAccessMakePointerAvailableMask = 8,
    SpvMemoryAccessMakePointerAvailableKHRMask = 8,
    SpvMemoryAccessMakePointerVisibleMask = 16,
    SpvMemoryAccessMakePointerVisibleKHRMask = 16,
    SpvMemoryAccessNonPrivatePointerMask = 32,
    SpvMemoryAccessNonPrivatePointerKHRMask = 32,
    _,
};
pub const SpvMemoryAccessMask = enum_SpvMemoryAccessMask_;
pub const SpvScopeCrossDevice = @enumToInt(enum_SpvScope_.SpvScopeCrossDevice);
pub const SpvScopeDevice = @enumToInt(enum_SpvScope_.SpvScopeDevice);
pub const SpvScopeWorkgroup = @enumToInt(enum_SpvScope_.SpvScopeWorkgroup);
pub const SpvScopeSubgroup = @enumToInt(enum_SpvScope_.SpvScopeSubgroup);
pub const SpvScopeInvocation = @enumToInt(enum_SpvScope_.SpvScopeInvocation);
pub const SpvScopeQueueFamily = @enumToInt(enum_SpvScope_.SpvScopeQueueFamily);
pub const SpvScopeQueueFamilyKHR = @enumToInt(enum_SpvScope_.SpvScopeQueueFamilyKHR);
pub const SpvScopeShaderCallKHR = @enumToInt(enum_SpvScope_.SpvScopeShaderCallKHR);
pub const SpvScopeMax = @enumToInt(enum_SpvScope_.SpvScopeMax);
pub const enum_SpvScope_ = extern enum(c_int) {
    SpvScopeCrossDevice = 0,
    SpvScopeDevice = 1,
    SpvScopeWorkgroup = 2,
    SpvScopeSubgroup = 3,
    SpvScopeInvocation = 4,
    SpvScopeQueueFamily = 5,
    SpvScopeQueueFamilyKHR = 5,
    SpvScopeShaderCallKHR = 6,
    SpvScopeMax = 2147483647,
    _,
};
pub const SpvScope = enum_SpvScope_;
pub const SpvGroupOperationReduce = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationReduce);
pub const SpvGroupOperationInclusiveScan = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationInclusiveScan);
pub const SpvGroupOperationExclusiveScan = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationExclusiveScan);
pub const SpvGroupOperationClusteredReduce = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationClusteredReduce);
pub const SpvGroupOperationPartitionedReduceNV = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationPartitionedReduceNV);
pub const SpvGroupOperationPartitionedInclusiveScanNV = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationPartitionedInclusiveScanNV);
pub const SpvGroupOperationPartitionedExclusiveScanNV = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationPartitionedExclusiveScanNV);
pub const SpvGroupOperationMax = @enumToInt(enum_SpvGroupOperation_.SpvGroupOperationMax);
pub const enum_SpvGroupOperation_ = extern enum(c_int) {
    SpvGroupOperationReduce = 0,
    SpvGroupOperationInclusiveScan = 1,
    SpvGroupOperationExclusiveScan = 2,
    SpvGroupOperationClusteredReduce = 3,
    SpvGroupOperationPartitionedReduceNV = 6,
    SpvGroupOperationPartitionedInclusiveScanNV = 7,
    SpvGroupOperationPartitionedExclusiveScanNV = 8,
    SpvGroupOperationMax = 2147483647,
    _,
};
pub const SpvGroupOperation = enum_SpvGroupOperation_;
pub const SpvKernelEnqueueFlagsNoWait = @enumToInt(enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsNoWait);
pub const SpvKernelEnqueueFlagsWaitKernel = @enumToInt(enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsWaitKernel);
pub const SpvKernelEnqueueFlagsWaitWorkGroup = @enumToInt(enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsWaitWorkGroup);
pub const SpvKernelEnqueueFlagsMax = @enumToInt(enum_SpvKernelEnqueueFlags_.SpvKernelEnqueueFlagsMax);
pub const enum_SpvKernelEnqueueFlags_ = extern enum(c_int) {
    SpvKernelEnqueueFlagsNoWait = 0,
    SpvKernelEnqueueFlagsWaitKernel = 1,
    SpvKernelEnqueueFlagsWaitWorkGroup = 2,
    SpvKernelEnqueueFlagsMax = 2147483647,
    _,
};
pub const SpvKernelEnqueueFlags = enum_SpvKernelEnqueueFlags_;
pub const SpvKernelProfilingInfoCmdExecTimeShift = @enumToInt(enum_SpvKernelProfilingInfoShift_.SpvKernelProfilingInfoCmdExecTimeShift);
pub const SpvKernelProfilingInfoMax = @enumToInt(enum_SpvKernelProfilingInfoShift_.SpvKernelProfilingInfoMax);
pub const enum_SpvKernelProfilingInfoShift_ = extern enum(c_int) {
    SpvKernelProfilingInfoCmdExecTimeShift = 0,
    SpvKernelProfilingInfoMax = 2147483647,
    _,
};
pub const SpvKernelProfilingInfoShift = enum_SpvKernelProfilingInfoShift_;
pub const SpvKernelProfilingInfoMaskNone = @enumToInt(enum_SpvKernelProfilingInfoMask_.SpvKernelProfilingInfoMaskNone);
pub const SpvKernelProfilingInfoCmdExecTimeMask = @enumToInt(enum_SpvKernelProfilingInfoMask_.SpvKernelProfilingInfoCmdExecTimeMask);
pub const enum_SpvKernelProfilingInfoMask_ = extern enum(c_int) {
    SpvKernelProfilingInfoMaskNone = 0,
    SpvKernelProfilingInfoCmdExecTimeMask = 1,
    _,
};
pub const SpvKernelProfilingInfoMask = enum_SpvKernelProfilingInfoMask_;
pub const SpvCapabilityMatrix = @enumToInt(enum_SpvCapability_.SpvCapabilityMatrix);
pub const SpvCapabilityShader = @enumToInt(enum_SpvCapability_.SpvCapabilityShader);
pub const SpvCapabilityGeometry = @enumToInt(enum_SpvCapability_.SpvCapabilityGeometry);
pub const SpvCapabilityTessellation = @enumToInt(enum_SpvCapability_.SpvCapabilityTessellation);
pub const SpvCapabilityAddresses = @enumToInt(enum_SpvCapability_.SpvCapabilityAddresses);
pub const SpvCapabilityLinkage = @enumToInt(enum_SpvCapability_.SpvCapabilityLinkage);
pub const SpvCapabilityKernel = @enumToInt(enum_SpvCapability_.SpvCapabilityKernel);
pub const SpvCapabilityVector16 = @enumToInt(enum_SpvCapability_.SpvCapabilityVector16);
pub const SpvCapabilityFloat16Buffer = @enumToInt(enum_SpvCapability_.SpvCapabilityFloat16Buffer);
pub const SpvCapabilityFloat16 = @enumToInt(enum_SpvCapability_.SpvCapabilityFloat16);
pub const SpvCapabilityFloat64 = @enumToInt(enum_SpvCapability_.SpvCapabilityFloat64);
pub const SpvCapabilityInt64 = @enumToInt(enum_SpvCapability_.SpvCapabilityInt64);
pub const SpvCapabilityInt64Atomics = @enumToInt(enum_SpvCapability_.SpvCapabilityInt64Atomics);
pub const SpvCapabilityImageBasic = @enumToInt(enum_SpvCapability_.SpvCapabilityImageBasic);
pub const SpvCapabilityImageReadWrite = @enumToInt(enum_SpvCapability_.SpvCapabilityImageReadWrite);
pub const SpvCapabilityImageMipmap = @enumToInt(enum_SpvCapability_.SpvCapabilityImageMipmap);
pub const SpvCapabilityPipes = @enumToInt(enum_SpvCapability_.SpvCapabilityPipes);
pub const SpvCapabilityGroups = @enumToInt(enum_SpvCapability_.SpvCapabilityGroups);
pub const SpvCapabilityDeviceEnqueue = @enumToInt(enum_SpvCapability_.SpvCapabilityDeviceEnqueue);
pub const SpvCapabilityLiteralSampler = @enumToInt(enum_SpvCapability_.SpvCapabilityLiteralSampler);
pub const SpvCapabilityAtomicStorage = @enumToInt(enum_SpvCapability_.SpvCapabilityAtomicStorage);
pub const SpvCapabilityInt16 = @enumToInt(enum_SpvCapability_.SpvCapabilityInt16);
pub const SpvCapabilityTessellationPointSize = @enumToInt(enum_SpvCapability_.SpvCapabilityTessellationPointSize);
pub const SpvCapabilityGeometryPointSize = @enumToInt(enum_SpvCapability_.SpvCapabilityGeometryPointSize);
pub const SpvCapabilityImageGatherExtended = @enumToInt(enum_SpvCapability_.SpvCapabilityImageGatherExtended);
pub const SpvCapabilityStorageImageMultisample = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageImageMultisample);
pub const SpvCapabilityUniformBufferArrayDynamicIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformBufferArrayDynamicIndexing);
pub const SpvCapabilitySampledImageArrayDynamicIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilitySampledImageArrayDynamicIndexing);
pub const SpvCapabilityStorageBufferArrayDynamicIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageBufferArrayDynamicIndexing);
pub const SpvCapabilityStorageImageArrayDynamicIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageImageArrayDynamicIndexing);
pub const SpvCapabilityClipDistance = @enumToInt(enum_SpvCapability_.SpvCapabilityClipDistance);
pub const SpvCapabilityCullDistance = @enumToInt(enum_SpvCapability_.SpvCapabilityCullDistance);
pub const SpvCapabilityImageCubeArray = @enumToInt(enum_SpvCapability_.SpvCapabilityImageCubeArray);
pub const SpvCapabilitySampleRateShading = @enumToInt(enum_SpvCapability_.SpvCapabilitySampleRateShading);
pub const SpvCapabilityImageRect = @enumToInt(enum_SpvCapability_.SpvCapabilityImageRect);
pub const SpvCapabilitySampledRect = @enumToInt(enum_SpvCapability_.SpvCapabilitySampledRect);
pub const SpvCapabilityGenericPointer = @enumToInt(enum_SpvCapability_.SpvCapabilityGenericPointer);
pub const SpvCapabilityInt8 = @enumToInt(enum_SpvCapability_.SpvCapabilityInt8);
pub const SpvCapabilityInputAttachment = @enumToInt(enum_SpvCapability_.SpvCapabilityInputAttachment);
pub const SpvCapabilitySparseResidency = @enumToInt(enum_SpvCapability_.SpvCapabilitySparseResidency);
pub const SpvCapabilityMinLod = @enumToInt(enum_SpvCapability_.SpvCapabilityMinLod);
pub const SpvCapabilitySampled1D = @enumToInt(enum_SpvCapability_.SpvCapabilitySampled1D);
pub const SpvCapabilityImage1D = @enumToInt(enum_SpvCapability_.SpvCapabilityImage1D);
pub const SpvCapabilitySampledCubeArray = @enumToInt(enum_SpvCapability_.SpvCapabilitySampledCubeArray);
pub const SpvCapabilitySampledBuffer = @enumToInt(enum_SpvCapability_.SpvCapabilitySampledBuffer);
pub const SpvCapabilityImageBuffer = @enumToInt(enum_SpvCapability_.SpvCapabilityImageBuffer);
pub const SpvCapabilityImageMSArray = @enumToInt(enum_SpvCapability_.SpvCapabilityImageMSArray);
pub const SpvCapabilityStorageImageExtendedFormats = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageImageExtendedFormats);
pub const SpvCapabilityImageQuery = @enumToInt(enum_SpvCapability_.SpvCapabilityImageQuery);
pub const SpvCapabilityDerivativeControl = @enumToInt(enum_SpvCapability_.SpvCapabilityDerivativeControl);
pub const SpvCapabilityInterpolationFunction = @enumToInt(enum_SpvCapability_.SpvCapabilityInterpolationFunction);
pub const SpvCapabilityTransformFeedback = @enumToInt(enum_SpvCapability_.SpvCapabilityTransformFeedback);
pub const SpvCapabilityGeometryStreams = @enumToInt(enum_SpvCapability_.SpvCapabilityGeometryStreams);
pub const SpvCapabilityStorageImageReadWithoutFormat = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageImageReadWithoutFormat);
pub const SpvCapabilityStorageImageWriteWithoutFormat = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageImageWriteWithoutFormat);
pub const SpvCapabilityMultiViewport = @enumToInt(enum_SpvCapability_.SpvCapabilityMultiViewport);
pub const SpvCapabilitySubgroupDispatch = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupDispatch);
pub const SpvCapabilityNamedBarrier = @enumToInt(enum_SpvCapability_.SpvCapabilityNamedBarrier);
pub const SpvCapabilityPipeStorage = @enumToInt(enum_SpvCapability_.SpvCapabilityPipeStorage);
pub const SpvCapabilityGroupNonUniform = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniform);
pub const SpvCapabilityGroupNonUniformVote = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformVote);
pub const SpvCapabilityGroupNonUniformArithmetic = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformArithmetic);
pub const SpvCapabilityGroupNonUniformBallot = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformBallot);
pub const SpvCapabilityGroupNonUniformShuffle = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformShuffle);
pub const SpvCapabilityGroupNonUniformShuffleRelative = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformShuffleRelative);
pub const SpvCapabilityGroupNonUniformClustered = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformClustered);
pub const SpvCapabilityGroupNonUniformQuad = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformQuad);
pub const SpvCapabilityShaderLayer = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderLayer);
pub const SpvCapabilityShaderViewportIndex = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderViewportIndex);
pub const SpvCapabilitySubgroupBallotKHR = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupBallotKHR);
pub const SpvCapabilityDrawParameters = @enumToInt(enum_SpvCapability_.SpvCapabilityDrawParameters);
pub const SpvCapabilitySubgroupVoteKHR = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupVoteKHR);
pub const SpvCapabilityStorageBuffer16BitAccess = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageBuffer16BitAccess);
pub const SpvCapabilityStorageUniformBufferBlock16 = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageUniformBufferBlock16);
pub const SpvCapabilityStorageUniform16 = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageUniform16);
pub const SpvCapabilityUniformAndStorageBuffer16BitAccess = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformAndStorageBuffer16BitAccess);
pub const SpvCapabilityStoragePushConstant16 = @enumToInt(enum_SpvCapability_.SpvCapabilityStoragePushConstant16);
pub const SpvCapabilityStorageInputOutput16 = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageInputOutput16);
pub const SpvCapabilityDeviceGroup = @enumToInt(enum_SpvCapability_.SpvCapabilityDeviceGroup);
pub const SpvCapabilityMultiView = @enumToInt(enum_SpvCapability_.SpvCapabilityMultiView);
pub const SpvCapabilityVariablePointersStorageBuffer = @enumToInt(enum_SpvCapability_.SpvCapabilityVariablePointersStorageBuffer);
pub const SpvCapabilityVariablePointers = @enumToInt(enum_SpvCapability_.SpvCapabilityVariablePointers);
pub const SpvCapabilityAtomicStorageOps = @enumToInt(enum_SpvCapability_.SpvCapabilityAtomicStorageOps);
pub const SpvCapabilitySampleMaskPostDepthCoverage = @enumToInt(enum_SpvCapability_.SpvCapabilitySampleMaskPostDepthCoverage);
pub const SpvCapabilityStorageBuffer8BitAccess = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageBuffer8BitAccess);
pub const SpvCapabilityUniformAndStorageBuffer8BitAccess = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformAndStorageBuffer8BitAccess);
pub const SpvCapabilityStoragePushConstant8 = @enumToInt(enum_SpvCapability_.SpvCapabilityStoragePushConstant8);
pub const SpvCapabilityDenormPreserve = @enumToInt(enum_SpvCapability_.SpvCapabilityDenormPreserve);
pub const SpvCapabilityDenormFlushToZero = @enumToInt(enum_SpvCapability_.SpvCapabilityDenormFlushToZero);
pub const SpvCapabilitySignedZeroInfNanPreserve = @enumToInt(enum_SpvCapability_.SpvCapabilitySignedZeroInfNanPreserve);
pub const SpvCapabilityRoundingModeRTE = @enumToInt(enum_SpvCapability_.SpvCapabilityRoundingModeRTE);
pub const SpvCapabilityRoundingModeRTZ = @enumToInt(enum_SpvCapability_.SpvCapabilityRoundingModeRTZ);
pub const SpvCapabilityRayQueryProvisionalKHR = @enumToInt(enum_SpvCapability_.SpvCapabilityRayQueryProvisionalKHR);
pub const SpvCapabilityRayTraversalPrimitiveCullingProvisionalKHR = @enumToInt(enum_SpvCapability_.SpvCapabilityRayTraversalPrimitiveCullingProvisionalKHR);
pub const SpvCapabilityFloat16ImageAMD = @enumToInt(enum_SpvCapability_.SpvCapabilityFloat16ImageAMD);
pub const SpvCapabilityImageGatherBiasLodAMD = @enumToInt(enum_SpvCapability_.SpvCapabilityImageGatherBiasLodAMD);
pub const SpvCapabilityFragmentMaskAMD = @enumToInt(enum_SpvCapability_.SpvCapabilityFragmentMaskAMD);
pub const SpvCapabilityStencilExportEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityStencilExportEXT);
pub const SpvCapabilityImageReadWriteLodAMD = @enumToInt(enum_SpvCapability_.SpvCapabilityImageReadWriteLodAMD);
pub const SpvCapabilityShaderClockKHR = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderClockKHR);
pub const SpvCapabilitySampleMaskOverrideCoverageNV = @enumToInt(enum_SpvCapability_.SpvCapabilitySampleMaskOverrideCoverageNV);
pub const SpvCapabilityGeometryShaderPassthroughNV = @enumToInt(enum_SpvCapability_.SpvCapabilityGeometryShaderPassthroughNV);
pub const SpvCapabilityShaderViewportIndexLayerEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderViewportIndexLayerEXT);
pub const SpvCapabilityShaderViewportIndexLayerNV = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderViewportIndexLayerNV);
pub const SpvCapabilityShaderViewportMaskNV = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderViewportMaskNV);
pub const SpvCapabilityShaderStereoViewNV = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderStereoViewNV);
pub const SpvCapabilityPerViewAttributesNV = @enumToInt(enum_SpvCapability_.SpvCapabilityPerViewAttributesNV);
pub const SpvCapabilityFragmentFullyCoveredEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityFragmentFullyCoveredEXT);
pub const SpvCapabilityMeshShadingNV = @enumToInt(enum_SpvCapability_.SpvCapabilityMeshShadingNV);
pub const SpvCapabilityImageFootprintNV = @enumToInt(enum_SpvCapability_.SpvCapabilityImageFootprintNV);
pub const SpvCapabilityFragmentBarycentricNV = @enumToInt(enum_SpvCapability_.SpvCapabilityFragmentBarycentricNV);
pub const SpvCapabilityComputeDerivativeGroupQuadsNV = @enumToInt(enum_SpvCapability_.SpvCapabilityComputeDerivativeGroupQuadsNV);
pub const SpvCapabilityFragmentDensityEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityFragmentDensityEXT);
pub const SpvCapabilityShadingRateNV = @enumToInt(enum_SpvCapability_.SpvCapabilityShadingRateNV);
pub const SpvCapabilityGroupNonUniformPartitionedNV = @enumToInt(enum_SpvCapability_.SpvCapabilityGroupNonUniformPartitionedNV);
pub const SpvCapabilityShaderNonUniform = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderNonUniform);
pub const SpvCapabilityShaderNonUniformEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderNonUniformEXT);
pub const SpvCapabilityRuntimeDescriptorArray = @enumToInt(enum_SpvCapability_.SpvCapabilityRuntimeDescriptorArray);
pub const SpvCapabilityRuntimeDescriptorArrayEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityRuntimeDescriptorArrayEXT);
pub const SpvCapabilityInputAttachmentArrayDynamicIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityInputAttachmentArrayDynamicIndexing);
pub const SpvCapabilityInputAttachmentArrayDynamicIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityInputAttachmentArrayDynamicIndexingEXT);
pub const SpvCapabilityUniformTexelBufferArrayDynamicIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayDynamicIndexing);
pub const SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT);
pub const SpvCapabilityStorageTexelBufferArrayDynamicIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayDynamicIndexing);
pub const SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT);
pub const SpvCapabilityUniformBufferArrayNonUniformIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformBufferArrayNonUniformIndexing);
pub const SpvCapabilityUniformBufferArrayNonUniformIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformBufferArrayNonUniformIndexingEXT);
pub const SpvCapabilitySampledImageArrayNonUniformIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilitySampledImageArrayNonUniformIndexing);
pub const SpvCapabilitySampledImageArrayNonUniformIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilitySampledImageArrayNonUniformIndexingEXT);
pub const SpvCapabilityStorageBufferArrayNonUniformIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageBufferArrayNonUniformIndexing);
pub const SpvCapabilityStorageBufferArrayNonUniformIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageBufferArrayNonUniformIndexingEXT);
pub const SpvCapabilityStorageImageArrayNonUniformIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageImageArrayNonUniformIndexing);
pub const SpvCapabilityStorageImageArrayNonUniformIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageImageArrayNonUniformIndexingEXT);
pub const SpvCapabilityInputAttachmentArrayNonUniformIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityInputAttachmentArrayNonUniformIndexing);
pub const SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT);
pub const SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayNonUniformIndexing);
pub const SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT);
pub const SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayNonUniformIndexing);
pub const SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT);
pub const SpvCapabilityRayTracingNV = @enumToInt(enum_SpvCapability_.SpvCapabilityRayTracingNV);
pub const SpvCapabilityVulkanMemoryModel = @enumToInt(enum_SpvCapability_.SpvCapabilityVulkanMemoryModel);
pub const SpvCapabilityVulkanMemoryModelKHR = @enumToInt(enum_SpvCapability_.SpvCapabilityVulkanMemoryModelKHR);
pub const SpvCapabilityVulkanMemoryModelDeviceScope = @enumToInt(enum_SpvCapability_.SpvCapabilityVulkanMemoryModelDeviceScope);
pub const SpvCapabilityVulkanMemoryModelDeviceScopeKHR = @enumToInt(enum_SpvCapability_.SpvCapabilityVulkanMemoryModelDeviceScopeKHR);
pub const SpvCapabilityPhysicalStorageBufferAddresses = @enumToInt(enum_SpvCapability_.SpvCapabilityPhysicalStorageBufferAddresses);
pub const SpvCapabilityPhysicalStorageBufferAddressesEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityPhysicalStorageBufferAddressesEXT);
pub const SpvCapabilityComputeDerivativeGroupLinearNV = @enumToInt(enum_SpvCapability_.SpvCapabilityComputeDerivativeGroupLinearNV);
pub const SpvCapabilityRayTracingProvisionalKHR = @enumToInt(enum_SpvCapability_.SpvCapabilityRayTracingProvisionalKHR);
pub const SpvCapabilityCooperativeMatrixNV = @enumToInt(enum_SpvCapability_.SpvCapabilityCooperativeMatrixNV);
pub const SpvCapabilityFragmentShaderSampleInterlockEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityFragmentShaderSampleInterlockEXT);
pub const SpvCapabilityFragmentShaderShadingRateInterlockEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityFragmentShaderShadingRateInterlockEXT);
pub const SpvCapabilityShaderSMBuiltinsNV = @enumToInt(enum_SpvCapability_.SpvCapabilityShaderSMBuiltinsNV);
pub const SpvCapabilityFragmentShaderPixelInterlockEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityFragmentShaderPixelInterlockEXT);
pub const SpvCapabilityDemoteToHelperInvocationEXT = @enumToInt(enum_SpvCapability_.SpvCapabilityDemoteToHelperInvocationEXT);
pub const SpvCapabilitySubgroupShuffleINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupShuffleINTEL);
pub const SpvCapabilitySubgroupBufferBlockIOINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupBufferBlockIOINTEL);
pub const SpvCapabilitySubgroupImageBlockIOINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupImageBlockIOINTEL);
pub const SpvCapabilitySubgroupImageMediaBlockIOINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupImageMediaBlockIOINTEL);
pub const SpvCapabilityIntegerFunctions2INTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityIntegerFunctions2INTEL);
pub const SpvCapabilityFunctionPointersINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityFunctionPointersINTEL);
pub const SpvCapabilityIndirectReferencesINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityIndirectReferencesINTEL);
pub const SpvCapabilitySubgroupAvcMotionEstimationINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupAvcMotionEstimationINTEL);
pub const SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL);
pub const SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL);
pub const SpvCapabilityFPGAMemoryAttributesINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityFPGAMemoryAttributesINTEL);
pub const SpvCapabilityUnstructuredLoopControlsINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityUnstructuredLoopControlsINTEL);
pub const SpvCapabilityFPGALoopControlsINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityFPGALoopControlsINTEL);
pub const SpvCapabilityKernelAttributesINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityKernelAttributesINTEL);
pub const SpvCapabilityFPGAKernelAttributesINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityFPGAKernelAttributesINTEL);
pub const SpvCapabilityBlockingPipesINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityBlockingPipesINTEL);
pub const SpvCapabilityFPGARegINTEL = @enumToInt(enum_SpvCapability_.SpvCapabilityFPGARegINTEL);
pub const SpvCapabilityMax = @enumToInt(enum_SpvCapability_.SpvCapabilityMax);
pub const enum_SpvCapability_ = extern enum(c_int) {
    SpvCapabilityMatrix = 0,
    SpvCapabilityShader = 1,
    SpvCapabilityGeometry = 2,
    SpvCapabilityTessellation = 3,
    SpvCapabilityAddresses = 4,
    SpvCapabilityLinkage = 5,
    SpvCapabilityKernel = 6,
    SpvCapabilityVector16 = 7,
    SpvCapabilityFloat16Buffer = 8,
    SpvCapabilityFloat16 = 9,
    SpvCapabilityFloat64 = 10,
    SpvCapabilityInt64 = 11,
    SpvCapabilityInt64Atomics = 12,
    SpvCapabilityImageBasic = 13,
    SpvCapabilityImageReadWrite = 14,
    SpvCapabilityImageMipmap = 15,
    SpvCapabilityPipes = 17,
    SpvCapabilityGroups = 18,
    SpvCapabilityDeviceEnqueue = 19,
    SpvCapabilityLiteralSampler = 20,
    SpvCapabilityAtomicStorage = 21,
    SpvCapabilityInt16 = 22,
    SpvCapabilityTessellationPointSize = 23,
    SpvCapabilityGeometryPointSize = 24,
    SpvCapabilityImageGatherExtended = 25,
    SpvCapabilityStorageImageMultisample = 27,
    SpvCapabilityUniformBufferArrayDynamicIndexing = 28,
    SpvCapabilitySampledImageArrayDynamicIndexing = 29,
    SpvCapabilityStorageBufferArrayDynamicIndexing = 30,
    SpvCapabilityStorageImageArrayDynamicIndexing = 31,
    SpvCapabilityClipDistance = 32,
    SpvCapabilityCullDistance = 33,
    SpvCapabilityImageCubeArray = 34,
    SpvCapabilitySampleRateShading = 35,
    SpvCapabilityImageRect = 36,
    SpvCapabilitySampledRect = 37,
    SpvCapabilityGenericPointer = 38,
    SpvCapabilityInt8 = 39,
    SpvCapabilityInputAttachment = 40,
    SpvCapabilitySparseResidency = 41,
    SpvCapabilityMinLod = 42,
    SpvCapabilitySampled1D = 43,
    SpvCapabilityImage1D = 44,
    SpvCapabilitySampledCubeArray = 45,
    SpvCapabilitySampledBuffer = 46,
    SpvCapabilityImageBuffer = 47,
    SpvCapabilityImageMSArray = 48,
    SpvCapabilityStorageImageExtendedFormats = 49,
    SpvCapabilityImageQuery = 50,
    SpvCapabilityDerivativeControl = 51,
    SpvCapabilityInterpolationFunction = 52,
    SpvCapabilityTransformFeedback = 53,
    SpvCapabilityGeometryStreams = 54,
    SpvCapabilityStorageImageReadWithoutFormat = 55,
    SpvCapabilityStorageImageWriteWithoutFormat = 56,
    SpvCapabilityMultiViewport = 57,
    SpvCapabilitySubgroupDispatch = 58,
    SpvCapabilityNamedBarrier = 59,
    SpvCapabilityPipeStorage = 60,
    SpvCapabilityGroupNonUniform = 61,
    SpvCapabilityGroupNonUniformVote = 62,
    SpvCapabilityGroupNonUniformArithmetic = 63,
    SpvCapabilityGroupNonUniformBallot = 64,
    SpvCapabilityGroupNonUniformShuffle = 65,
    SpvCapabilityGroupNonUniformShuffleRelative = 66,
    SpvCapabilityGroupNonUniformClustered = 67,
    SpvCapabilityGroupNonUniformQuad = 68,
    SpvCapabilityShaderLayer = 69,
    SpvCapabilityShaderViewportIndex = 70,
    SpvCapabilitySubgroupBallotKHR = 4423,
    SpvCapabilityDrawParameters = 4427,
    SpvCapabilitySubgroupVoteKHR = 4431,
    SpvCapabilityStorageBuffer16BitAccess = 4433,
    SpvCapabilityStorageUniformBufferBlock16 = 4433,
    SpvCapabilityStorageUniform16 = 4434,
    SpvCapabilityUniformAndStorageBuffer16BitAccess = 4434,
    SpvCapabilityStoragePushConstant16 = 4435,
    SpvCapabilityStorageInputOutput16 = 4436,
    SpvCapabilityDeviceGroup = 4437,
    SpvCapabilityMultiView = 4439,
    SpvCapabilityVariablePointersStorageBuffer = 4441,
    SpvCapabilityVariablePointers = 4442,
    SpvCapabilityAtomicStorageOps = 4445,
    SpvCapabilitySampleMaskPostDepthCoverage = 4447,
    SpvCapabilityStorageBuffer8BitAccess = 4448,
    SpvCapabilityUniformAndStorageBuffer8BitAccess = 4449,
    SpvCapabilityStoragePushConstant8 = 4450,
    SpvCapabilityDenormPreserve = 4464,
    SpvCapabilityDenormFlushToZero = 4465,
    SpvCapabilitySignedZeroInfNanPreserve = 4466,
    SpvCapabilityRoundingModeRTE = 4467,
    SpvCapabilityRoundingModeRTZ = 4468,
    SpvCapabilityRayQueryProvisionalKHR = 4471,
    SpvCapabilityRayTraversalPrimitiveCullingProvisionalKHR = 4478,
    SpvCapabilityFloat16ImageAMD = 5008,
    SpvCapabilityImageGatherBiasLodAMD = 5009,
    SpvCapabilityFragmentMaskAMD = 5010,
    SpvCapabilityStencilExportEXT = 5013,
    SpvCapabilityImageReadWriteLodAMD = 5015,
    SpvCapabilityShaderClockKHR = 5055,
    SpvCapabilitySampleMaskOverrideCoverageNV = 5249,
    SpvCapabilityGeometryShaderPassthroughNV = 5251,
    SpvCapabilityShaderViewportIndexLayerEXT = 5254,
    SpvCapabilityShaderViewportIndexLayerNV = 5254,
    SpvCapabilityShaderViewportMaskNV = 5255,
    SpvCapabilityShaderStereoViewNV = 5259,
    SpvCapabilityPerViewAttributesNV = 5260,
    SpvCapabilityFragmentFullyCoveredEXT = 5265,
    SpvCapabilityMeshShadingNV = 5266,
    SpvCapabilityImageFootprintNV = 5282,
    SpvCapabilityFragmentBarycentricNV = 5284,
    SpvCapabilityComputeDerivativeGroupQuadsNV = 5288,
    SpvCapabilityFragmentDensityEXT = 5291,
    SpvCapabilityShadingRateNV = 5291,
    SpvCapabilityGroupNonUniformPartitionedNV = 5297,
    SpvCapabilityShaderNonUniform = 5301,
    SpvCapabilityShaderNonUniformEXT = 5301,
    SpvCapabilityRuntimeDescriptorArray = 5302,
    SpvCapabilityRuntimeDescriptorArrayEXT = 5302,
    SpvCapabilityInputAttachmentArrayDynamicIndexing = 5303,
    SpvCapabilityInputAttachmentArrayDynamicIndexingEXT = 5303,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexing = 5304,
    SpvCapabilityUniformTexelBufferArrayDynamicIndexingEXT = 5304,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexing = 5305,
    SpvCapabilityStorageTexelBufferArrayDynamicIndexingEXT = 5305,
    SpvCapabilityUniformBufferArrayNonUniformIndexing = 5306,
    SpvCapabilityUniformBufferArrayNonUniformIndexingEXT = 5306,
    SpvCapabilitySampledImageArrayNonUniformIndexing = 5307,
    SpvCapabilitySampledImageArrayNonUniformIndexingEXT = 5307,
    SpvCapabilityStorageBufferArrayNonUniformIndexing = 5308,
    SpvCapabilityStorageBufferArrayNonUniformIndexingEXT = 5308,
    SpvCapabilityStorageImageArrayNonUniformIndexing = 5309,
    SpvCapabilityStorageImageArrayNonUniformIndexingEXT = 5309,
    SpvCapabilityInputAttachmentArrayNonUniformIndexing = 5310,
    SpvCapabilityInputAttachmentArrayNonUniformIndexingEXT = 5310,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexing = 5311,
    SpvCapabilityUniformTexelBufferArrayNonUniformIndexingEXT = 5311,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexing = 5312,
    SpvCapabilityStorageTexelBufferArrayNonUniformIndexingEXT = 5312,
    SpvCapabilityRayTracingNV = 5340,
    SpvCapabilityVulkanMemoryModel = 5345,
    SpvCapabilityVulkanMemoryModelKHR = 5345,
    SpvCapabilityVulkanMemoryModelDeviceScope = 5346,
    SpvCapabilityVulkanMemoryModelDeviceScopeKHR = 5346,
    SpvCapabilityPhysicalStorageBufferAddresses = 5347,
    SpvCapabilityPhysicalStorageBufferAddressesEXT = 5347,
    SpvCapabilityComputeDerivativeGroupLinearNV = 5350,
    SpvCapabilityRayTracingProvisionalKHR = 5353,
    SpvCapabilityCooperativeMatrixNV = 5357,
    SpvCapabilityFragmentShaderSampleInterlockEXT = 5363,
    SpvCapabilityFragmentShaderShadingRateInterlockEXT = 5372,
    SpvCapabilityShaderSMBuiltinsNV = 5373,
    SpvCapabilityFragmentShaderPixelInterlockEXT = 5378,
    SpvCapabilityDemoteToHelperInvocationEXT = 5379,
    SpvCapabilitySubgroupShuffleINTEL = 5568,
    SpvCapabilitySubgroupBufferBlockIOINTEL = 5569,
    SpvCapabilitySubgroupImageBlockIOINTEL = 5570,
    SpvCapabilitySubgroupImageMediaBlockIOINTEL = 5579,
    SpvCapabilityIntegerFunctions2INTEL = 5584,
    SpvCapabilityFunctionPointersINTEL = 5603,
    SpvCapabilityIndirectReferencesINTEL = 5604,
    SpvCapabilitySubgroupAvcMotionEstimationINTEL = 5696,
    SpvCapabilitySubgroupAvcMotionEstimationIntraINTEL = 5697,
    SpvCapabilitySubgroupAvcMotionEstimationChromaINTEL = 5698,
    SpvCapabilityFPGAMemoryAttributesINTEL = 5824,
    SpvCapabilityUnstructuredLoopControlsINTEL = 5886,
    SpvCapabilityFPGALoopControlsINTEL = 5888,
    SpvCapabilityKernelAttributesINTEL = 5892,
    SpvCapabilityFPGAKernelAttributesINTEL = 5897,
    SpvCapabilityBlockingPipesINTEL = 5945,
    SpvCapabilityFPGARegINTEL = 5948,
    SpvCapabilityMax = 2147483647,
    _,
};
pub const SpvCapability = enum_SpvCapability_;
pub const SpvRayFlagsOpaqueKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsOpaqueKHRShift);
pub const SpvRayFlagsNoOpaqueKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsNoOpaqueKHRShift);
pub const SpvRayFlagsTerminateOnFirstHitKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsTerminateOnFirstHitKHRShift);
pub const SpvRayFlagsSkipClosestHitShaderKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsSkipClosestHitShaderKHRShift);
pub const SpvRayFlagsCullBackFacingTrianglesKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsCullBackFacingTrianglesKHRShift);
pub const SpvRayFlagsCullFrontFacingTrianglesKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsCullFrontFacingTrianglesKHRShift);
pub const SpvRayFlagsCullOpaqueKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsCullOpaqueKHRShift);
pub const SpvRayFlagsCullNoOpaqueKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsCullNoOpaqueKHRShift);
pub const SpvRayFlagsSkipTrianglesKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsSkipTrianglesKHRShift);
pub const SpvRayFlagsSkipAABBsKHRShift = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsSkipAABBsKHRShift);
pub const SpvRayFlagsMax = @enumToInt(enum_SpvRayFlagsShift_.SpvRayFlagsMax);
pub const enum_SpvRayFlagsShift_ = extern enum(c_int) {
    SpvRayFlagsOpaqueKHRShift = 0,
    SpvRayFlagsNoOpaqueKHRShift = 1,
    SpvRayFlagsTerminateOnFirstHitKHRShift = 2,
    SpvRayFlagsSkipClosestHitShaderKHRShift = 3,
    SpvRayFlagsCullBackFacingTrianglesKHRShift = 4,
    SpvRayFlagsCullFrontFacingTrianglesKHRShift = 5,
    SpvRayFlagsCullOpaqueKHRShift = 6,
    SpvRayFlagsCullNoOpaqueKHRShift = 7,
    SpvRayFlagsSkipTrianglesKHRShift = 8,
    SpvRayFlagsSkipAABBsKHRShift = 9,
    SpvRayFlagsMax = 2147483647,
    _,
};
pub const SpvRayFlagsShift = enum_SpvRayFlagsShift_;
pub const SpvRayFlagsMaskNone = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsMaskNone);
pub const SpvRayFlagsOpaqueKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsOpaqueKHRMask);
pub const SpvRayFlagsNoOpaqueKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsNoOpaqueKHRMask);
pub const SpvRayFlagsTerminateOnFirstHitKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsTerminateOnFirstHitKHRMask);
pub const SpvRayFlagsSkipClosestHitShaderKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsSkipClosestHitShaderKHRMask);
pub const SpvRayFlagsCullBackFacingTrianglesKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsCullBackFacingTrianglesKHRMask);
pub const SpvRayFlagsCullFrontFacingTrianglesKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsCullFrontFacingTrianglesKHRMask);
pub const SpvRayFlagsCullOpaqueKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsCullOpaqueKHRMask);
pub const SpvRayFlagsCullNoOpaqueKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsCullNoOpaqueKHRMask);
pub const SpvRayFlagsSkipTrianglesKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsSkipTrianglesKHRMask);
pub const SpvRayFlagsSkipAABBsKHRMask = @enumToInt(enum_SpvRayFlagsMask_.SpvRayFlagsSkipAABBsKHRMask);
pub const enum_SpvRayFlagsMask_ = extern enum(c_int) {
    SpvRayFlagsMaskNone = 0,
    SpvRayFlagsOpaqueKHRMask = 1,
    SpvRayFlagsNoOpaqueKHRMask = 2,
    SpvRayFlagsTerminateOnFirstHitKHRMask = 4,
    SpvRayFlagsSkipClosestHitShaderKHRMask = 8,
    SpvRayFlagsCullBackFacingTrianglesKHRMask = 16,
    SpvRayFlagsCullFrontFacingTrianglesKHRMask = 32,
    SpvRayFlagsCullOpaqueKHRMask = 64,
    SpvRayFlagsCullNoOpaqueKHRMask = 128,
    SpvRayFlagsSkipTrianglesKHRMask = 256,
    SpvRayFlagsSkipAABBsKHRMask = 512,
    _,
};
pub const SpvRayFlagsMask = enum_SpvRayFlagsMask_;
pub const SpvRayQueryIntersectionRayQueryCandidateIntersectionKHR = @enumToInt(enum_SpvRayQueryIntersection_.SpvRayQueryIntersectionRayQueryCandidateIntersectionKHR);
pub const SpvRayQueryIntersectionRayQueryCommittedIntersectionKHR = @enumToInt(enum_SpvRayQueryIntersection_.SpvRayQueryIntersectionRayQueryCommittedIntersectionKHR);
pub const SpvRayQueryIntersectionMax = @enumToInt(enum_SpvRayQueryIntersection_.SpvRayQueryIntersectionMax);
pub const enum_SpvRayQueryIntersection_ = extern enum(c_int) {
    SpvRayQueryIntersectionRayQueryCandidateIntersectionKHR = 0,
    SpvRayQueryIntersectionRayQueryCommittedIntersectionKHR = 1,
    SpvRayQueryIntersectionMax = 2147483647,
    _,
};
pub const SpvRayQueryIntersection = enum_SpvRayQueryIntersection_;
pub const SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR = @enumToInt(enum_SpvRayQueryCommittedIntersectionType_.SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR);
pub const SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR = @enumToInt(enum_SpvRayQueryCommittedIntersectionType_.SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR);
pub const SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR = @enumToInt(enum_SpvRayQueryCommittedIntersectionType_.SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR);
pub const SpvRayQueryCommittedIntersectionTypeMax = @enumToInt(enum_SpvRayQueryCommittedIntersectionType_.SpvRayQueryCommittedIntersectionTypeMax);
pub const enum_SpvRayQueryCommittedIntersectionType_ = extern enum(c_int) {
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionNoneKHR = 0,
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionTriangleKHR = 1,
    SpvRayQueryCommittedIntersectionTypeRayQueryCommittedIntersectionGeneratedKHR = 2,
    SpvRayQueryCommittedIntersectionTypeMax = 2147483647,
    _,
};
pub const SpvRayQueryCommittedIntersectionType = enum_SpvRayQueryCommittedIntersectionType_;
pub const SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR = @enumToInt(enum_SpvRayQueryCandidateIntersectionType_.SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR);
pub const SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR = @enumToInt(enum_SpvRayQueryCandidateIntersectionType_.SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR);
pub const SpvRayQueryCandidateIntersectionTypeMax = @enumToInt(enum_SpvRayQueryCandidateIntersectionType_.SpvRayQueryCandidateIntersectionTypeMax);
pub const enum_SpvRayQueryCandidateIntersectionType_ = extern enum(c_int) {
    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionTriangleKHR = 0,
    SpvRayQueryCandidateIntersectionTypeRayQueryCandidateIntersectionAABBKHR = 1,
    SpvRayQueryCandidateIntersectionTypeMax = 2147483647,
    _,
};
pub const SpvRayQueryCandidateIntersectionType = enum_SpvRayQueryCandidateIntersectionType_;
pub const SpvOpNop = @enumToInt(enum_SpvOp_.SpvOpNop);
pub const SpvOpUndef = @enumToInt(enum_SpvOp_.SpvOpUndef);
pub const SpvOpSourceContinued = @enumToInt(enum_SpvOp_.SpvOpSourceContinued);
pub const SpvOpSource = @enumToInt(enum_SpvOp_.SpvOpSource);
pub const SpvOpSourceExtension = @enumToInt(enum_SpvOp_.SpvOpSourceExtension);
pub const SpvOpName = @enumToInt(enum_SpvOp_.SpvOpName);
pub const SpvOpMemberName = @enumToInt(enum_SpvOp_.SpvOpMemberName);
pub const SpvOpString = @enumToInt(enum_SpvOp_.SpvOpString);
pub const SpvOpLine = @enumToInt(enum_SpvOp_.SpvOpLine);
pub const SpvOpExtension = @enumToInt(enum_SpvOp_.SpvOpExtension);
pub const SpvOpExtInstImport = @enumToInt(enum_SpvOp_.SpvOpExtInstImport);
pub const SpvOpExtInst = @enumToInt(enum_SpvOp_.SpvOpExtInst);
pub const SpvOpMemoryModel = @enumToInt(enum_SpvOp_.SpvOpMemoryModel);
pub const SpvOpEntryPoint = @enumToInt(enum_SpvOp_.SpvOpEntryPoint);
pub const SpvOpExecutionMode = @enumToInt(enum_SpvOp_.SpvOpExecutionMode);
pub const SpvOpCapability = @enumToInt(enum_SpvOp_.SpvOpCapability);
pub const SpvOpTypeVoid = @enumToInt(enum_SpvOp_.SpvOpTypeVoid);
pub const SpvOpTypeBool = @enumToInt(enum_SpvOp_.SpvOpTypeBool);
pub const SpvOpTypeInt = @enumToInt(enum_SpvOp_.SpvOpTypeInt);
pub const SpvOpTypeFloat = @enumToInt(enum_SpvOp_.SpvOpTypeFloat);
pub const SpvOpTypeVector = @enumToInt(enum_SpvOp_.SpvOpTypeVector);
pub const SpvOpTypeMatrix = @enumToInt(enum_SpvOp_.SpvOpTypeMatrix);
pub const SpvOpTypeImage = @enumToInt(enum_SpvOp_.SpvOpTypeImage);
pub const SpvOpTypeSampler = @enumToInt(enum_SpvOp_.SpvOpTypeSampler);
pub const SpvOpTypeSampledImage = @enumToInt(enum_SpvOp_.SpvOpTypeSampledImage);
pub const SpvOpTypeArray = @enumToInt(enum_SpvOp_.SpvOpTypeArray);
pub const SpvOpTypeRuntimeArray = @enumToInt(enum_SpvOp_.SpvOpTypeRuntimeArray);
pub const SpvOpTypeStruct = @enumToInt(enum_SpvOp_.SpvOpTypeStruct);
pub const SpvOpTypeOpaque = @enumToInt(enum_SpvOp_.SpvOpTypeOpaque);
pub const SpvOpTypePointer = @enumToInt(enum_SpvOp_.SpvOpTypePointer);
pub const SpvOpTypeFunction = @enumToInt(enum_SpvOp_.SpvOpTypeFunction);
pub const SpvOpTypeEvent = @enumToInt(enum_SpvOp_.SpvOpTypeEvent);
pub const SpvOpTypeDeviceEvent = @enumToInt(enum_SpvOp_.SpvOpTypeDeviceEvent);
pub const SpvOpTypeReserveId = @enumToInt(enum_SpvOp_.SpvOpTypeReserveId);
pub const SpvOpTypeQueue = @enumToInt(enum_SpvOp_.SpvOpTypeQueue);
pub const SpvOpTypePipe = @enumToInt(enum_SpvOp_.SpvOpTypePipe);
pub const SpvOpTypeForwardPointer = @enumToInt(enum_SpvOp_.SpvOpTypeForwardPointer);
pub const SpvOpConstantTrue = @enumToInt(enum_SpvOp_.SpvOpConstantTrue);
pub const SpvOpConstantFalse = @enumToInt(enum_SpvOp_.SpvOpConstantFalse);
pub const SpvOpConstant = @enumToInt(enum_SpvOp_.SpvOpConstant);
pub const SpvOpConstantComposite = @enumToInt(enum_SpvOp_.SpvOpConstantComposite);
pub const SpvOpConstantSampler = @enumToInt(enum_SpvOp_.SpvOpConstantSampler);
pub const SpvOpConstantNull = @enumToInt(enum_SpvOp_.SpvOpConstantNull);
pub const SpvOpSpecConstantTrue = @enumToInt(enum_SpvOp_.SpvOpSpecConstantTrue);
pub const SpvOpSpecConstantFalse = @enumToInt(enum_SpvOp_.SpvOpSpecConstantFalse);
pub const SpvOpSpecConstant = @enumToInt(enum_SpvOp_.SpvOpSpecConstant);
pub const SpvOpSpecConstantComposite = @enumToInt(enum_SpvOp_.SpvOpSpecConstantComposite);
pub const SpvOpSpecConstantOp = @enumToInt(enum_SpvOp_.SpvOpSpecConstantOp);
pub const SpvOpFunction = @enumToInt(enum_SpvOp_.SpvOpFunction);
pub const SpvOpFunctionParameter = @enumToInt(enum_SpvOp_.SpvOpFunctionParameter);
pub const SpvOpFunctionEnd = @enumToInt(enum_SpvOp_.SpvOpFunctionEnd);
pub const SpvOpFunctionCall = @enumToInt(enum_SpvOp_.SpvOpFunctionCall);
pub const SpvOpVariable = @enumToInt(enum_SpvOp_.SpvOpVariable);
pub const SpvOpImageTexelPointer = @enumToInt(enum_SpvOp_.SpvOpImageTexelPointer);
pub const SpvOpLoad = @enumToInt(enum_SpvOp_.SpvOpLoad);
pub const SpvOpStore = @enumToInt(enum_SpvOp_.SpvOpStore);
pub const SpvOpCopyMemory = @enumToInt(enum_SpvOp_.SpvOpCopyMemory);
pub const SpvOpCopyMemorySized = @enumToInt(enum_SpvOp_.SpvOpCopyMemorySized);
pub const SpvOpAccessChain = @enumToInt(enum_SpvOp_.SpvOpAccessChain);
pub const SpvOpInBoundsAccessChain = @enumToInt(enum_SpvOp_.SpvOpInBoundsAccessChain);
pub const SpvOpPtrAccessChain = @enumToInt(enum_SpvOp_.SpvOpPtrAccessChain);
pub const SpvOpArrayLength = @enumToInt(enum_SpvOp_.SpvOpArrayLength);
pub const SpvOpGenericPtrMemSemantics = @enumToInt(enum_SpvOp_.SpvOpGenericPtrMemSemantics);
pub const SpvOpInBoundsPtrAccessChain = @enumToInt(enum_SpvOp_.SpvOpInBoundsPtrAccessChain);
pub const SpvOpDecorate = @enumToInt(enum_SpvOp_.SpvOpDecorate);
pub const SpvOpMemberDecorate = @enumToInt(enum_SpvOp_.SpvOpMemberDecorate);
pub const SpvOpDecorationGroup = @enumToInt(enum_SpvOp_.SpvOpDecorationGroup);
pub const SpvOpGroupDecorate = @enumToInt(enum_SpvOp_.SpvOpGroupDecorate);
pub const SpvOpGroupMemberDecorate = @enumToInt(enum_SpvOp_.SpvOpGroupMemberDecorate);
pub const SpvOpVectorExtractDynamic = @enumToInt(enum_SpvOp_.SpvOpVectorExtractDynamic);
pub const SpvOpVectorInsertDynamic = @enumToInt(enum_SpvOp_.SpvOpVectorInsertDynamic);
pub const SpvOpVectorShuffle = @enumToInt(enum_SpvOp_.SpvOpVectorShuffle);
pub const SpvOpCompositeConstruct = @enumToInt(enum_SpvOp_.SpvOpCompositeConstruct);
pub const SpvOpCompositeExtract = @enumToInt(enum_SpvOp_.SpvOpCompositeExtract);
pub const SpvOpCompositeInsert = @enumToInt(enum_SpvOp_.SpvOpCompositeInsert);
pub const SpvOpCopyObject = @enumToInt(enum_SpvOp_.SpvOpCopyObject);
pub const SpvOpTranspose = @enumToInt(enum_SpvOp_.SpvOpTranspose);
pub const SpvOpSampledImage = @enumToInt(enum_SpvOp_.SpvOpSampledImage);
pub const SpvOpImageSampleImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleImplicitLod);
pub const SpvOpImageSampleExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleExplicitLod);
pub const SpvOpImageSampleDrefImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleDrefImplicitLod);
pub const SpvOpImageSampleDrefExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleDrefExplicitLod);
pub const SpvOpImageSampleProjImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleProjImplicitLod);
pub const SpvOpImageSampleProjExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleProjExplicitLod);
pub const SpvOpImageSampleProjDrefImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleProjDrefImplicitLod);
pub const SpvOpImageSampleProjDrefExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSampleProjDrefExplicitLod);
pub const SpvOpImageFetch = @enumToInt(enum_SpvOp_.SpvOpImageFetch);
pub const SpvOpImageGather = @enumToInt(enum_SpvOp_.SpvOpImageGather);
pub const SpvOpImageDrefGather = @enumToInt(enum_SpvOp_.SpvOpImageDrefGather);
pub const SpvOpImageRead = @enumToInt(enum_SpvOp_.SpvOpImageRead);
pub const SpvOpImageWrite = @enumToInt(enum_SpvOp_.SpvOpImageWrite);
pub const SpvOpImage = @enumToInt(enum_SpvOp_.SpvOpImage);
pub const SpvOpImageQueryFormat = @enumToInt(enum_SpvOp_.SpvOpImageQueryFormat);
pub const SpvOpImageQueryOrder = @enumToInt(enum_SpvOp_.SpvOpImageQueryOrder);
pub const SpvOpImageQuerySizeLod = @enumToInt(enum_SpvOp_.SpvOpImageQuerySizeLod);
pub const SpvOpImageQuerySize = @enumToInt(enum_SpvOp_.SpvOpImageQuerySize);
pub const SpvOpImageQueryLod = @enumToInt(enum_SpvOp_.SpvOpImageQueryLod);
pub const SpvOpImageQueryLevels = @enumToInt(enum_SpvOp_.SpvOpImageQueryLevels);
pub const SpvOpImageQuerySamples = @enumToInt(enum_SpvOp_.SpvOpImageQuerySamples);
pub const SpvOpConvertFToU = @enumToInt(enum_SpvOp_.SpvOpConvertFToU);
pub const SpvOpConvertFToS = @enumToInt(enum_SpvOp_.SpvOpConvertFToS);
pub const SpvOpConvertSToF = @enumToInt(enum_SpvOp_.SpvOpConvertSToF);
pub const SpvOpConvertUToF = @enumToInt(enum_SpvOp_.SpvOpConvertUToF);
pub const SpvOpUConvert = @enumToInt(enum_SpvOp_.SpvOpUConvert);
pub const SpvOpSConvert = @enumToInt(enum_SpvOp_.SpvOpSConvert);
pub const SpvOpFConvert = @enumToInt(enum_SpvOp_.SpvOpFConvert);
pub const SpvOpQuantizeToF16 = @enumToInt(enum_SpvOp_.SpvOpQuantizeToF16);
pub const SpvOpConvertPtrToU = @enumToInt(enum_SpvOp_.SpvOpConvertPtrToU);
pub const SpvOpSatConvertSToU = @enumToInt(enum_SpvOp_.SpvOpSatConvertSToU);
pub const SpvOpSatConvertUToS = @enumToInt(enum_SpvOp_.SpvOpSatConvertUToS);
pub const SpvOpConvertUToPtr = @enumToInt(enum_SpvOp_.SpvOpConvertUToPtr);
pub const SpvOpPtrCastToGeneric = @enumToInt(enum_SpvOp_.SpvOpPtrCastToGeneric);
pub const SpvOpGenericCastToPtr = @enumToInt(enum_SpvOp_.SpvOpGenericCastToPtr);
pub const SpvOpGenericCastToPtrExplicit = @enumToInt(enum_SpvOp_.SpvOpGenericCastToPtrExplicit);
pub const SpvOpBitcast = @enumToInt(enum_SpvOp_.SpvOpBitcast);
pub const SpvOpSNegate = @enumToInt(enum_SpvOp_.SpvOpSNegate);
pub const SpvOpFNegate = @enumToInt(enum_SpvOp_.SpvOpFNegate);
pub const SpvOpIAdd = @enumToInt(enum_SpvOp_.SpvOpIAdd);
pub const SpvOpFAdd = @enumToInt(enum_SpvOp_.SpvOpFAdd);
pub const SpvOpISub = @enumToInt(enum_SpvOp_.SpvOpISub);
pub const SpvOpFSub = @enumToInt(enum_SpvOp_.SpvOpFSub);
pub const SpvOpIMul = @enumToInt(enum_SpvOp_.SpvOpIMul);
pub const SpvOpFMul = @enumToInt(enum_SpvOp_.SpvOpFMul);
pub const SpvOpUDiv = @enumToInt(enum_SpvOp_.SpvOpUDiv);
pub const SpvOpSDiv = @enumToInt(enum_SpvOp_.SpvOpSDiv);
pub const SpvOpFDiv = @enumToInt(enum_SpvOp_.SpvOpFDiv);
pub const SpvOpUMod = @enumToInt(enum_SpvOp_.SpvOpUMod);
pub const SpvOpSRem = @enumToInt(enum_SpvOp_.SpvOpSRem);
pub const SpvOpSMod = @enumToInt(enum_SpvOp_.SpvOpSMod);
pub const SpvOpFRem = @enumToInt(enum_SpvOp_.SpvOpFRem);
pub const SpvOpFMod = @enumToInt(enum_SpvOp_.SpvOpFMod);
pub const SpvOpVectorTimesScalar = @enumToInt(enum_SpvOp_.SpvOpVectorTimesScalar);
pub const SpvOpMatrixTimesScalar = @enumToInt(enum_SpvOp_.SpvOpMatrixTimesScalar);
pub const SpvOpVectorTimesMatrix = @enumToInt(enum_SpvOp_.SpvOpVectorTimesMatrix);
pub const SpvOpMatrixTimesVector = @enumToInt(enum_SpvOp_.SpvOpMatrixTimesVector);
pub const SpvOpMatrixTimesMatrix = @enumToInt(enum_SpvOp_.SpvOpMatrixTimesMatrix);
pub const SpvOpOuterProduct = @enumToInt(enum_SpvOp_.SpvOpOuterProduct);
pub const SpvOpDot = @enumToInt(enum_SpvOp_.SpvOpDot);
pub const SpvOpIAddCarry = @enumToInt(enum_SpvOp_.SpvOpIAddCarry);
pub const SpvOpISubBorrow = @enumToInt(enum_SpvOp_.SpvOpISubBorrow);
pub const SpvOpUMulExtended = @enumToInt(enum_SpvOp_.SpvOpUMulExtended);
pub const SpvOpSMulExtended = @enumToInt(enum_SpvOp_.SpvOpSMulExtended);
pub const SpvOpAny = @enumToInt(enum_SpvOp_.SpvOpAny);
pub const SpvOpAll = @enumToInt(enum_SpvOp_.SpvOpAll);
pub const SpvOpIsNan = @enumToInt(enum_SpvOp_.SpvOpIsNan);
pub const SpvOpIsInf = @enumToInt(enum_SpvOp_.SpvOpIsInf);
pub const SpvOpIsFinite = @enumToInt(enum_SpvOp_.SpvOpIsFinite);
pub const SpvOpIsNormal = @enumToInt(enum_SpvOp_.SpvOpIsNormal);
pub const SpvOpSignBitSet = @enumToInt(enum_SpvOp_.SpvOpSignBitSet);
pub const SpvOpLessOrGreater = @enumToInt(enum_SpvOp_.SpvOpLessOrGreater);
pub const SpvOpOrdered = @enumToInt(enum_SpvOp_.SpvOpOrdered);
pub const SpvOpUnordered = @enumToInt(enum_SpvOp_.SpvOpUnordered);
pub const SpvOpLogicalEqual = @enumToInt(enum_SpvOp_.SpvOpLogicalEqual);
pub const SpvOpLogicalNotEqual = @enumToInt(enum_SpvOp_.SpvOpLogicalNotEqual);
pub const SpvOpLogicalOr = @enumToInt(enum_SpvOp_.SpvOpLogicalOr);
pub const SpvOpLogicalAnd = @enumToInt(enum_SpvOp_.SpvOpLogicalAnd);
pub const SpvOpLogicalNot = @enumToInt(enum_SpvOp_.SpvOpLogicalNot);
pub const SpvOpSelect = @enumToInt(enum_SpvOp_.SpvOpSelect);
pub const SpvOpIEqual = @enumToInt(enum_SpvOp_.SpvOpIEqual);
pub const SpvOpINotEqual = @enumToInt(enum_SpvOp_.SpvOpINotEqual);
pub const SpvOpUGreaterThan = @enumToInt(enum_SpvOp_.SpvOpUGreaterThan);
pub const SpvOpSGreaterThan = @enumToInt(enum_SpvOp_.SpvOpSGreaterThan);
pub const SpvOpUGreaterThanEqual = @enumToInt(enum_SpvOp_.SpvOpUGreaterThanEqual);
pub const SpvOpSGreaterThanEqual = @enumToInt(enum_SpvOp_.SpvOpSGreaterThanEqual);
pub const SpvOpULessThan = @enumToInt(enum_SpvOp_.SpvOpULessThan);
pub const SpvOpSLessThan = @enumToInt(enum_SpvOp_.SpvOpSLessThan);
pub const SpvOpULessThanEqual = @enumToInt(enum_SpvOp_.SpvOpULessThanEqual);
pub const SpvOpSLessThanEqual = @enumToInt(enum_SpvOp_.SpvOpSLessThanEqual);
pub const SpvOpFOrdEqual = @enumToInt(enum_SpvOp_.SpvOpFOrdEqual);
pub const SpvOpFUnordEqual = @enumToInt(enum_SpvOp_.SpvOpFUnordEqual);
pub const SpvOpFOrdNotEqual = @enumToInt(enum_SpvOp_.SpvOpFOrdNotEqual);
pub const SpvOpFUnordNotEqual = @enumToInt(enum_SpvOp_.SpvOpFUnordNotEqual);
pub const SpvOpFOrdLessThan = @enumToInt(enum_SpvOp_.SpvOpFOrdLessThan);
pub const SpvOpFUnordLessThan = @enumToInt(enum_SpvOp_.SpvOpFUnordLessThan);
pub const SpvOpFOrdGreaterThan = @enumToInt(enum_SpvOp_.SpvOpFOrdGreaterThan);
pub const SpvOpFUnordGreaterThan = @enumToInt(enum_SpvOp_.SpvOpFUnordGreaterThan);
pub const SpvOpFOrdLessThanEqual = @enumToInt(enum_SpvOp_.SpvOpFOrdLessThanEqual);
pub const SpvOpFUnordLessThanEqual = @enumToInt(enum_SpvOp_.SpvOpFUnordLessThanEqual);
pub const SpvOpFOrdGreaterThanEqual = @enumToInt(enum_SpvOp_.SpvOpFOrdGreaterThanEqual);
pub const SpvOpFUnordGreaterThanEqual = @enumToInt(enum_SpvOp_.SpvOpFUnordGreaterThanEqual);
pub const SpvOpShiftRightLogical = @enumToInt(enum_SpvOp_.SpvOpShiftRightLogical);
pub const SpvOpShiftRightArithmetic = @enumToInt(enum_SpvOp_.SpvOpShiftRightArithmetic);
pub const SpvOpShiftLeftLogical = @enumToInt(enum_SpvOp_.SpvOpShiftLeftLogical);
pub const SpvOpBitwiseOr = @enumToInt(enum_SpvOp_.SpvOpBitwiseOr);
pub const SpvOpBitwiseXor = @enumToInt(enum_SpvOp_.SpvOpBitwiseXor);
pub const SpvOpBitwiseAnd = @enumToInt(enum_SpvOp_.SpvOpBitwiseAnd);
pub const SpvOpNot = @enumToInt(enum_SpvOp_.SpvOpNot);
pub const SpvOpBitFieldInsert = @enumToInt(enum_SpvOp_.SpvOpBitFieldInsert);
pub const SpvOpBitFieldSExtract = @enumToInt(enum_SpvOp_.SpvOpBitFieldSExtract);
pub const SpvOpBitFieldUExtract = @enumToInt(enum_SpvOp_.SpvOpBitFieldUExtract);
pub const SpvOpBitReverse = @enumToInt(enum_SpvOp_.SpvOpBitReverse);
pub const SpvOpBitCount = @enumToInt(enum_SpvOp_.SpvOpBitCount);
pub const SpvOpDPdx = @enumToInt(enum_SpvOp_.SpvOpDPdx);
pub const SpvOpDPdy = @enumToInt(enum_SpvOp_.SpvOpDPdy);
pub const SpvOpFwidth = @enumToInt(enum_SpvOp_.SpvOpFwidth);
pub const SpvOpDPdxFine = @enumToInt(enum_SpvOp_.SpvOpDPdxFine);
pub const SpvOpDPdyFine = @enumToInt(enum_SpvOp_.SpvOpDPdyFine);
pub const SpvOpFwidthFine = @enumToInt(enum_SpvOp_.SpvOpFwidthFine);
pub const SpvOpDPdxCoarse = @enumToInt(enum_SpvOp_.SpvOpDPdxCoarse);
pub const SpvOpDPdyCoarse = @enumToInt(enum_SpvOp_.SpvOpDPdyCoarse);
pub const SpvOpFwidthCoarse = @enumToInt(enum_SpvOp_.SpvOpFwidthCoarse);
pub const SpvOpEmitVertex = @enumToInt(enum_SpvOp_.SpvOpEmitVertex);
pub const SpvOpEndPrimitive = @enumToInt(enum_SpvOp_.SpvOpEndPrimitive);
pub const SpvOpEmitStreamVertex = @enumToInt(enum_SpvOp_.SpvOpEmitStreamVertex);
pub const SpvOpEndStreamPrimitive = @enumToInt(enum_SpvOp_.SpvOpEndStreamPrimitive);
pub const SpvOpControlBarrier = @enumToInt(enum_SpvOp_.SpvOpControlBarrier);
pub const SpvOpMemoryBarrier = @enumToInt(enum_SpvOp_.SpvOpMemoryBarrier);
pub const SpvOpAtomicLoad = @enumToInt(enum_SpvOp_.SpvOpAtomicLoad);
pub const SpvOpAtomicStore = @enumToInt(enum_SpvOp_.SpvOpAtomicStore);
pub const SpvOpAtomicExchange = @enumToInt(enum_SpvOp_.SpvOpAtomicExchange);
pub const SpvOpAtomicCompareExchange = @enumToInt(enum_SpvOp_.SpvOpAtomicCompareExchange);
pub const SpvOpAtomicCompareExchangeWeak = @enumToInt(enum_SpvOp_.SpvOpAtomicCompareExchangeWeak);
pub const SpvOpAtomicIIncrement = @enumToInt(enum_SpvOp_.SpvOpAtomicIIncrement);
pub const SpvOpAtomicIDecrement = @enumToInt(enum_SpvOp_.SpvOpAtomicIDecrement);
pub const SpvOpAtomicIAdd = @enumToInt(enum_SpvOp_.SpvOpAtomicIAdd);
pub const SpvOpAtomicISub = @enumToInt(enum_SpvOp_.SpvOpAtomicISub);
pub const SpvOpAtomicSMin = @enumToInt(enum_SpvOp_.SpvOpAtomicSMin);
pub const SpvOpAtomicUMin = @enumToInt(enum_SpvOp_.SpvOpAtomicUMin);
pub const SpvOpAtomicSMax = @enumToInt(enum_SpvOp_.SpvOpAtomicSMax);
pub const SpvOpAtomicUMax = @enumToInt(enum_SpvOp_.SpvOpAtomicUMax);
pub const SpvOpAtomicAnd = @enumToInt(enum_SpvOp_.SpvOpAtomicAnd);
pub const SpvOpAtomicOr = @enumToInt(enum_SpvOp_.SpvOpAtomicOr);
pub const SpvOpAtomicXor = @enumToInt(enum_SpvOp_.SpvOpAtomicXor);
pub const SpvOpPhi = @enumToInt(enum_SpvOp_.SpvOpPhi);
pub const SpvOpLoopMerge = @enumToInt(enum_SpvOp_.SpvOpLoopMerge);
pub const SpvOpSelectionMerge = @enumToInt(enum_SpvOp_.SpvOpSelectionMerge);
pub const SpvOpLabel = @enumToInt(enum_SpvOp_.SpvOpLabel);
pub const SpvOpBranch = @enumToInt(enum_SpvOp_.SpvOpBranch);
pub const SpvOpBranchConditional = @enumToInt(enum_SpvOp_.SpvOpBranchConditional);
pub const SpvOpSwitch = @enumToInt(enum_SpvOp_.SpvOpSwitch);
pub const SpvOpKill = @enumToInt(enum_SpvOp_.SpvOpKill);
pub const SpvOpReturn = @enumToInt(enum_SpvOp_.SpvOpReturn);
pub const SpvOpReturnValue = @enumToInt(enum_SpvOp_.SpvOpReturnValue);
pub const SpvOpUnreachable = @enumToInt(enum_SpvOp_.SpvOpUnreachable);
pub const SpvOpLifetimeStart = @enumToInt(enum_SpvOp_.SpvOpLifetimeStart);
pub const SpvOpLifetimeStop = @enumToInt(enum_SpvOp_.SpvOpLifetimeStop);
pub const SpvOpGroupAsyncCopy = @enumToInt(enum_SpvOp_.SpvOpGroupAsyncCopy);
pub const SpvOpGroupWaitEvents = @enumToInt(enum_SpvOp_.SpvOpGroupWaitEvents);
pub const SpvOpGroupAll = @enumToInt(enum_SpvOp_.SpvOpGroupAll);
pub const SpvOpGroupAny = @enumToInt(enum_SpvOp_.SpvOpGroupAny);
pub const SpvOpGroupBroadcast = @enumToInt(enum_SpvOp_.SpvOpGroupBroadcast);
pub const SpvOpGroupIAdd = @enumToInt(enum_SpvOp_.SpvOpGroupIAdd);
pub const SpvOpGroupFAdd = @enumToInt(enum_SpvOp_.SpvOpGroupFAdd);
pub const SpvOpGroupFMin = @enumToInt(enum_SpvOp_.SpvOpGroupFMin);
pub const SpvOpGroupUMin = @enumToInt(enum_SpvOp_.SpvOpGroupUMin);
pub const SpvOpGroupSMin = @enumToInt(enum_SpvOp_.SpvOpGroupSMin);
pub const SpvOpGroupFMax = @enumToInt(enum_SpvOp_.SpvOpGroupFMax);
pub const SpvOpGroupUMax = @enumToInt(enum_SpvOp_.SpvOpGroupUMax);
pub const SpvOpGroupSMax = @enumToInt(enum_SpvOp_.SpvOpGroupSMax);
pub const SpvOpReadPipe = @enumToInt(enum_SpvOp_.SpvOpReadPipe);
pub const SpvOpWritePipe = @enumToInt(enum_SpvOp_.SpvOpWritePipe);
pub const SpvOpReservedReadPipe = @enumToInt(enum_SpvOp_.SpvOpReservedReadPipe);
pub const SpvOpReservedWritePipe = @enumToInt(enum_SpvOp_.SpvOpReservedWritePipe);
pub const SpvOpReserveReadPipePackets = @enumToInt(enum_SpvOp_.SpvOpReserveReadPipePackets);
pub const SpvOpReserveWritePipePackets = @enumToInt(enum_SpvOp_.SpvOpReserveWritePipePackets);
pub const SpvOpCommitReadPipe = @enumToInt(enum_SpvOp_.SpvOpCommitReadPipe);
pub const SpvOpCommitWritePipe = @enumToInt(enum_SpvOp_.SpvOpCommitWritePipe);
pub const SpvOpIsValidReserveId = @enumToInt(enum_SpvOp_.SpvOpIsValidReserveId);
pub const SpvOpGetNumPipePackets = @enumToInt(enum_SpvOp_.SpvOpGetNumPipePackets);
pub const SpvOpGetMaxPipePackets = @enumToInt(enum_SpvOp_.SpvOpGetMaxPipePackets);
pub const SpvOpGroupReserveReadPipePackets = @enumToInt(enum_SpvOp_.SpvOpGroupReserveReadPipePackets);
pub const SpvOpGroupReserveWritePipePackets = @enumToInt(enum_SpvOp_.SpvOpGroupReserveWritePipePackets);
pub const SpvOpGroupCommitReadPipe = @enumToInt(enum_SpvOp_.SpvOpGroupCommitReadPipe);
pub const SpvOpGroupCommitWritePipe = @enumToInt(enum_SpvOp_.SpvOpGroupCommitWritePipe);
pub const SpvOpEnqueueMarker = @enumToInt(enum_SpvOp_.SpvOpEnqueueMarker);
pub const SpvOpEnqueueKernel = @enumToInt(enum_SpvOp_.SpvOpEnqueueKernel);
pub const SpvOpGetKernelNDrangeSubGroupCount = @enumToInt(enum_SpvOp_.SpvOpGetKernelNDrangeSubGroupCount);
pub const SpvOpGetKernelNDrangeMaxSubGroupSize = @enumToInt(enum_SpvOp_.SpvOpGetKernelNDrangeMaxSubGroupSize);
pub const SpvOpGetKernelWorkGroupSize = @enumToInt(enum_SpvOp_.SpvOpGetKernelWorkGroupSize);
pub const SpvOpGetKernelPreferredWorkGroupSizeMultiple = @enumToInt(enum_SpvOp_.SpvOpGetKernelPreferredWorkGroupSizeMultiple);
pub const SpvOpRetainEvent = @enumToInt(enum_SpvOp_.SpvOpRetainEvent);
pub const SpvOpReleaseEvent = @enumToInt(enum_SpvOp_.SpvOpReleaseEvent);
pub const SpvOpCreateUserEvent = @enumToInt(enum_SpvOp_.SpvOpCreateUserEvent);
pub const SpvOpIsValidEvent = @enumToInt(enum_SpvOp_.SpvOpIsValidEvent);
pub const SpvOpSetUserEventStatus = @enumToInt(enum_SpvOp_.SpvOpSetUserEventStatus);
pub const SpvOpCaptureEventProfilingInfo = @enumToInt(enum_SpvOp_.SpvOpCaptureEventProfilingInfo);
pub const SpvOpGetDefaultQueue = @enumToInt(enum_SpvOp_.SpvOpGetDefaultQueue);
pub const SpvOpBuildNDRange = @enumToInt(enum_SpvOp_.SpvOpBuildNDRange);
pub const SpvOpImageSparseSampleImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleImplicitLod);
pub const SpvOpImageSparseSampleExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleExplicitLod);
pub const SpvOpImageSparseSampleDrefImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleDrefImplicitLod);
pub const SpvOpImageSparseSampleDrefExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleDrefExplicitLod);
pub const SpvOpImageSparseSampleProjImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleProjImplicitLod);
pub const SpvOpImageSparseSampleProjExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleProjExplicitLod);
pub const SpvOpImageSparseSampleProjDrefImplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleProjDrefImplicitLod);
pub const SpvOpImageSparseSampleProjDrefExplicitLod = @enumToInt(enum_SpvOp_.SpvOpImageSparseSampleProjDrefExplicitLod);
pub const SpvOpImageSparseFetch = @enumToInt(enum_SpvOp_.SpvOpImageSparseFetch);
pub const SpvOpImageSparseGather = @enumToInt(enum_SpvOp_.SpvOpImageSparseGather);
pub const SpvOpImageSparseDrefGather = @enumToInt(enum_SpvOp_.SpvOpImageSparseDrefGather);
pub const SpvOpImageSparseTexelsResident = @enumToInt(enum_SpvOp_.SpvOpImageSparseTexelsResident);
pub const SpvOpNoLine = @enumToInt(enum_SpvOp_.SpvOpNoLine);
pub const SpvOpAtomicFlagTestAndSet = @enumToInt(enum_SpvOp_.SpvOpAtomicFlagTestAndSet);
pub const SpvOpAtomicFlagClear = @enumToInt(enum_SpvOp_.SpvOpAtomicFlagClear);
pub const SpvOpImageSparseRead = @enumToInt(enum_SpvOp_.SpvOpImageSparseRead);
pub const SpvOpSizeOf = @enumToInt(enum_SpvOp_.SpvOpSizeOf);
pub const SpvOpTypePipeStorage = @enumToInt(enum_SpvOp_.SpvOpTypePipeStorage);
pub const SpvOpConstantPipeStorage = @enumToInt(enum_SpvOp_.SpvOpConstantPipeStorage);
pub const SpvOpCreatePipeFromPipeStorage = @enumToInt(enum_SpvOp_.SpvOpCreatePipeFromPipeStorage);
pub const SpvOpGetKernelLocalSizeForSubgroupCount = @enumToInt(enum_SpvOp_.SpvOpGetKernelLocalSizeForSubgroupCount);
pub const SpvOpGetKernelMaxNumSubgroups = @enumToInt(enum_SpvOp_.SpvOpGetKernelMaxNumSubgroups);
pub const SpvOpTypeNamedBarrier = @enumToInt(enum_SpvOp_.SpvOpTypeNamedBarrier);
pub const SpvOpNamedBarrierInitialize = @enumToInt(enum_SpvOp_.SpvOpNamedBarrierInitialize);
pub const SpvOpMemoryNamedBarrier = @enumToInt(enum_SpvOp_.SpvOpMemoryNamedBarrier);
pub const SpvOpModuleProcessed = @enumToInt(enum_SpvOp_.SpvOpModuleProcessed);
pub const SpvOpExecutionModeId = @enumToInt(enum_SpvOp_.SpvOpExecutionModeId);
pub const SpvOpDecorateId = @enumToInt(enum_SpvOp_.SpvOpDecorateId);
pub const SpvOpGroupNonUniformElect = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformElect);
pub const SpvOpGroupNonUniformAll = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformAll);
pub const SpvOpGroupNonUniformAny = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformAny);
pub const SpvOpGroupNonUniformAllEqual = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformAllEqual);
pub const SpvOpGroupNonUniformBroadcast = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBroadcast);
pub const SpvOpGroupNonUniformBroadcastFirst = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBroadcastFirst);
pub const SpvOpGroupNonUniformBallot = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBallot);
pub const SpvOpGroupNonUniformInverseBallot = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformInverseBallot);
pub const SpvOpGroupNonUniformBallotBitExtract = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBallotBitExtract);
pub const SpvOpGroupNonUniformBallotBitCount = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBallotBitCount);
pub const SpvOpGroupNonUniformBallotFindLSB = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBallotFindLSB);
pub const SpvOpGroupNonUniformBallotFindMSB = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBallotFindMSB);
pub const SpvOpGroupNonUniformShuffle = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformShuffle);
pub const SpvOpGroupNonUniformShuffleXor = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformShuffleXor);
pub const SpvOpGroupNonUniformShuffleUp = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformShuffleUp);
pub const SpvOpGroupNonUniformShuffleDown = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformShuffleDown);
pub const SpvOpGroupNonUniformIAdd = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformIAdd);
pub const SpvOpGroupNonUniformFAdd = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformFAdd);
pub const SpvOpGroupNonUniformIMul = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformIMul);
pub const SpvOpGroupNonUniformFMul = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformFMul);
pub const SpvOpGroupNonUniformSMin = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformSMin);
pub const SpvOpGroupNonUniformUMin = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformUMin);
pub const SpvOpGroupNonUniformFMin = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformFMin);
pub const SpvOpGroupNonUniformSMax = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformSMax);
pub const SpvOpGroupNonUniformUMax = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformUMax);
pub const SpvOpGroupNonUniformFMax = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformFMax);
pub const SpvOpGroupNonUniformBitwiseAnd = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBitwiseAnd);
pub const SpvOpGroupNonUniformBitwiseOr = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBitwiseOr);
pub const SpvOpGroupNonUniformBitwiseXor = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformBitwiseXor);
pub const SpvOpGroupNonUniformLogicalAnd = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformLogicalAnd);
pub const SpvOpGroupNonUniformLogicalOr = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformLogicalOr);
pub const SpvOpGroupNonUniformLogicalXor = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformLogicalXor);
pub const SpvOpGroupNonUniformQuadBroadcast = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformQuadBroadcast);
pub const SpvOpGroupNonUniformQuadSwap = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformQuadSwap);
pub const SpvOpCopyLogical = @enumToInt(enum_SpvOp_.SpvOpCopyLogical);
pub const SpvOpPtrEqual = @enumToInt(enum_SpvOp_.SpvOpPtrEqual);
pub const SpvOpPtrNotEqual = @enumToInt(enum_SpvOp_.SpvOpPtrNotEqual);
pub const SpvOpPtrDiff = @enumToInt(enum_SpvOp_.SpvOpPtrDiff);
pub const SpvOpSubgroupBallotKHR = @enumToInt(enum_SpvOp_.SpvOpSubgroupBallotKHR);
pub const SpvOpSubgroupFirstInvocationKHR = @enumToInt(enum_SpvOp_.SpvOpSubgroupFirstInvocationKHR);
pub const SpvOpSubgroupAllKHR = @enumToInt(enum_SpvOp_.SpvOpSubgroupAllKHR);
pub const SpvOpSubgroupAnyKHR = @enumToInt(enum_SpvOp_.SpvOpSubgroupAnyKHR);
pub const SpvOpSubgroupAllEqualKHR = @enumToInt(enum_SpvOp_.SpvOpSubgroupAllEqualKHR);
pub const SpvOpSubgroupReadInvocationKHR = @enumToInt(enum_SpvOp_.SpvOpSubgroupReadInvocationKHR);
pub const SpvOpTypeRayQueryProvisionalKHR = @enumToInt(enum_SpvOp_.SpvOpTypeRayQueryProvisionalKHR);
pub const SpvOpRayQueryInitializeKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryInitializeKHR);
pub const SpvOpRayQueryTerminateKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryTerminateKHR);
pub const SpvOpRayQueryGenerateIntersectionKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGenerateIntersectionKHR);
pub const SpvOpRayQueryConfirmIntersectionKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryConfirmIntersectionKHR);
pub const SpvOpRayQueryProceedKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryProceedKHR);
pub const SpvOpRayQueryGetIntersectionTypeKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionTypeKHR);
pub const SpvOpGroupIAddNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupIAddNonUniformAMD);
pub const SpvOpGroupFAddNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupFAddNonUniformAMD);
pub const SpvOpGroupFMinNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupFMinNonUniformAMD);
pub const SpvOpGroupUMinNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupUMinNonUniformAMD);
pub const SpvOpGroupSMinNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupSMinNonUniformAMD);
pub const SpvOpGroupFMaxNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupFMaxNonUniformAMD);
pub const SpvOpGroupUMaxNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupUMaxNonUniformAMD);
pub const SpvOpGroupSMaxNonUniformAMD = @enumToInt(enum_SpvOp_.SpvOpGroupSMaxNonUniformAMD);
pub const SpvOpFragmentMaskFetchAMD = @enumToInt(enum_SpvOp_.SpvOpFragmentMaskFetchAMD);
pub const SpvOpFragmentFetchAMD = @enumToInt(enum_SpvOp_.SpvOpFragmentFetchAMD);
pub const SpvOpReadClockKHR = @enumToInt(enum_SpvOp_.SpvOpReadClockKHR);
pub const SpvOpImageSampleFootprintNV = @enumToInt(enum_SpvOp_.SpvOpImageSampleFootprintNV);
pub const SpvOpGroupNonUniformPartitionNV = @enumToInt(enum_SpvOp_.SpvOpGroupNonUniformPartitionNV);
pub const SpvOpWritePackedPrimitiveIndices4x8NV = @enumToInt(enum_SpvOp_.SpvOpWritePackedPrimitiveIndices4x8NV);
pub const SpvOpReportIntersectionKHR = @enumToInt(enum_SpvOp_.SpvOpReportIntersectionKHR);
pub const SpvOpReportIntersectionNV = @enumToInt(enum_SpvOp_.SpvOpReportIntersectionNV);
pub const SpvOpIgnoreIntersectionKHR = @enumToInt(enum_SpvOp_.SpvOpIgnoreIntersectionKHR);
pub const SpvOpIgnoreIntersectionNV = @enumToInt(enum_SpvOp_.SpvOpIgnoreIntersectionNV);
pub const SpvOpTerminateRayKHR = @enumToInt(enum_SpvOp_.SpvOpTerminateRayKHR);
pub const SpvOpTerminateRayNV = @enumToInt(enum_SpvOp_.SpvOpTerminateRayNV);
pub const SpvOpTraceNV = @enumToInt(enum_SpvOp_.SpvOpTraceNV);
pub const SpvOpTraceRayKHR = @enumToInt(enum_SpvOp_.SpvOpTraceRayKHR);
pub const SpvOpTypeAccelerationStructureKHR = @enumToInt(enum_SpvOp_.SpvOpTypeAccelerationStructureKHR);
pub const SpvOpTypeAccelerationStructureNV = @enumToInt(enum_SpvOp_.SpvOpTypeAccelerationStructureNV);
pub const SpvOpExecuteCallableKHR = @enumToInt(enum_SpvOp_.SpvOpExecuteCallableKHR);
pub const SpvOpExecuteCallableNV = @enumToInt(enum_SpvOp_.SpvOpExecuteCallableNV);
pub const SpvOpTypeCooperativeMatrixNV = @enumToInt(enum_SpvOp_.SpvOpTypeCooperativeMatrixNV);
pub const SpvOpCooperativeMatrixLoadNV = @enumToInt(enum_SpvOp_.SpvOpCooperativeMatrixLoadNV);
pub const SpvOpCooperativeMatrixStoreNV = @enumToInt(enum_SpvOp_.SpvOpCooperativeMatrixStoreNV);
pub const SpvOpCooperativeMatrixMulAddNV = @enumToInt(enum_SpvOp_.SpvOpCooperativeMatrixMulAddNV);
pub const SpvOpCooperativeMatrixLengthNV = @enumToInt(enum_SpvOp_.SpvOpCooperativeMatrixLengthNV);
pub const SpvOpBeginInvocationInterlockEXT = @enumToInt(enum_SpvOp_.SpvOpBeginInvocationInterlockEXT);
pub const SpvOpEndInvocationInterlockEXT = @enumToInt(enum_SpvOp_.SpvOpEndInvocationInterlockEXT);
pub const SpvOpDemoteToHelperInvocationEXT = @enumToInt(enum_SpvOp_.SpvOpDemoteToHelperInvocationEXT);
pub const SpvOpIsHelperInvocationEXT = @enumToInt(enum_SpvOp_.SpvOpIsHelperInvocationEXT);
pub const SpvOpSubgroupShuffleINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupShuffleINTEL);
pub const SpvOpSubgroupShuffleDownINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupShuffleDownINTEL);
pub const SpvOpSubgroupShuffleUpINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupShuffleUpINTEL);
pub const SpvOpSubgroupShuffleXorINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupShuffleXorINTEL);
pub const SpvOpSubgroupBlockReadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupBlockReadINTEL);
pub const SpvOpSubgroupBlockWriteINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupBlockWriteINTEL);
pub const SpvOpSubgroupImageBlockReadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupImageBlockReadINTEL);
pub const SpvOpSubgroupImageBlockWriteINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupImageBlockWriteINTEL);
pub const SpvOpSubgroupImageMediaBlockReadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupImageMediaBlockReadINTEL);
pub const SpvOpSubgroupImageMediaBlockWriteINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupImageMediaBlockWriteINTEL);
pub const SpvOpUCountLeadingZerosINTEL = @enumToInt(enum_SpvOp_.SpvOpUCountLeadingZerosINTEL);
pub const SpvOpUCountTrailingZerosINTEL = @enumToInt(enum_SpvOp_.SpvOpUCountTrailingZerosINTEL);
pub const SpvOpAbsISubINTEL = @enumToInt(enum_SpvOp_.SpvOpAbsISubINTEL);
pub const SpvOpAbsUSubINTEL = @enumToInt(enum_SpvOp_.SpvOpAbsUSubINTEL);
pub const SpvOpIAddSatINTEL = @enumToInt(enum_SpvOp_.SpvOpIAddSatINTEL);
pub const SpvOpUAddSatINTEL = @enumToInt(enum_SpvOp_.SpvOpUAddSatINTEL);
pub const SpvOpIAverageINTEL = @enumToInt(enum_SpvOp_.SpvOpIAverageINTEL);
pub const SpvOpUAverageINTEL = @enumToInt(enum_SpvOp_.SpvOpUAverageINTEL);
pub const SpvOpIAverageRoundedINTEL = @enumToInt(enum_SpvOp_.SpvOpIAverageRoundedINTEL);
pub const SpvOpUAverageRoundedINTEL = @enumToInt(enum_SpvOp_.SpvOpUAverageRoundedINTEL);
pub const SpvOpISubSatINTEL = @enumToInt(enum_SpvOp_.SpvOpISubSatINTEL);
pub const SpvOpUSubSatINTEL = @enumToInt(enum_SpvOp_.SpvOpUSubSatINTEL);
pub const SpvOpIMul32x16INTEL = @enumToInt(enum_SpvOp_.SpvOpIMul32x16INTEL);
pub const SpvOpUMul32x16INTEL = @enumToInt(enum_SpvOp_.SpvOpUMul32x16INTEL);
pub const SpvOpFunctionPointerINTEL = @enumToInt(enum_SpvOp_.SpvOpFunctionPointerINTEL);
pub const SpvOpFunctionPointerCallINTEL = @enumToInt(enum_SpvOp_.SpvOpFunctionPointerCallINTEL);
pub const SpvOpDecorateString = @enumToInt(enum_SpvOp_.SpvOpDecorateString);
pub const SpvOpDecorateStringGOOGLE = @enumToInt(enum_SpvOp_.SpvOpDecorateStringGOOGLE);
pub const SpvOpMemberDecorateString = @enumToInt(enum_SpvOp_.SpvOpMemberDecorateString);
pub const SpvOpMemberDecorateStringGOOGLE = @enumToInt(enum_SpvOp_.SpvOpMemberDecorateStringGOOGLE);
pub const SpvOpVmeImageINTEL = @enumToInt(enum_SpvOp_.SpvOpVmeImageINTEL);
pub const SpvOpTypeVmeImageINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeVmeImageINTEL);
pub const SpvOpTypeAvcImePayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcImePayloadINTEL);
pub const SpvOpTypeAvcRefPayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcRefPayloadINTEL);
pub const SpvOpTypeAvcSicPayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcSicPayloadINTEL);
pub const SpvOpTypeAvcMcePayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcMcePayloadINTEL);
pub const SpvOpTypeAvcMceResultINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcMceResultINTEL);
pub const SpvOpTypeAvcImeResultINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcImeResultINTEL);
pub const SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL);
pub const SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL);
pub const SpvOpTypeAvcImeSingleReferenceStreaminINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcImeSingleReferenceStreaminINTEL);
pub const SpvOpTypeAvcImeDualReferenceStreaminINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcImeDualReferenceStreaminINTEL);
pub const SpvOpTypeAvcRefResultINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcRefResultINTEL);
pub const SpvOpTypeAvcSicResultINTEL = @enumToInt(enum_SpvOp_.SpvOpTypeAvcSicResultINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL);
pub const SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL);
pub const SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL);
pub const SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL);
pub const SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL);
pub const SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL);
pub const SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL);
pub const SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL);
pub const SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL);
pub const SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL);
pub const SpvOpSubgroupAvcMceConvertToImePayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceConvertToImePayloadINTEL);
pub const SpvOpSubgroupAvcMceConvertToImeResultINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceConvertToImeResultINTEL);
pub const SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceConvertToRefPayloadINTEL);
pub const SpvOpSubgroupAvcMceConvertToRefResultINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceConvertToRefResultINTEL);
pub const SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceConvertToSicPayloadINTEL);
pub const SpvOpSubgroupAvcMceConvertToSicResultINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceConvertToSicResultINTEL);
pub const SpvOpSubgroupAvcMceGetMotionVectorsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetMotionVectorsINTEL);
pub const SpvOpSubgroupAvcMceGetInterDistortionsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetInterDistortionsINTEL);
pub const SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL);
pub const SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetInterMajorShapeINTEL);
pub const SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetInterMinorShapeINTEL);
pub const SpvOpSubgroupAvcMceGetInterDirectionsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetInterDirectionsINTEL);
pub const SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL);
pub const SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL);
pub const SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL);
pub const SpvOpSubgroupAvcImeInitializeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeInitializeINTEL);
pub const SpvOpSubgroupAvcImeSetSingleReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeSetSingleReferenceINTEL);
pub const SpvOpSubgroupAvcImeSetDualReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeSetDualReferenceINTEL);
pub const SpvOpSubgroupAvcImeRefWindowSizeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeRefWindowSizeINTEL);
pub const SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeAdjustRefOffsetINTEL);
pub const SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeConvertToMcePayloadINTEL);
pub const SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL);
pub const SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL);
pub const SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL);
pub const SpvOpSubgroupAvcImeSetWeightedSadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeSetWeightedSadINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL);
pub const SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL);
pub const SpvOpSubgroupAvcImeConvertToMceResultINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeConvertToMceResultINTEL);
pub const SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL);
pub const SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL);
pub const SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL);
pub const SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL);
pub const SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL);
pub const SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL);
pub const SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL);
pub const SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL);
pub const SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL);
pub const SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL);
pub const SpvOpSubgroupAvcImeGetBorderReachedINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetBorderReachedINTEL);
pub const SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL);
pub const SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL);
pub const SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL);
pub const SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL);
pub const SpvOpSubgroupAvcFmeInitializeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcFmeInitializeINTEL);
pub const SpvOpSubgroupAvcBmeInitializeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcBmeInitializeINTEL);
pub const SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefConvertToMcePayloadINTEL);
pub const SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL);
pub const SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL);
pub const SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL);
pub const SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL);
pub const SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL);
pub const SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL);
pub const SpvOpSubgroupAvcRefConvertToMceResultINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcRefConvertToMceResultINTEL);
pub const SpvOpSubgroupAvcSicInitializeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicInitializeINTEL);
pub const SpvOpSubgroupAvcSicConfigureSkcINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicConfigureSkcINTEL);
pub const SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicConfigureIpeLumaINTEL);
pub const SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL);
pub const SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL);
pub const SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicConvertToMcePayloadINTEL);
pub const SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL);
pub const SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL);
pub const SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL);
pub const SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL);
pub const SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL);
pub const SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL);
pub const SpvOpSubgroupAvcSicEvaluateIpeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateIpeINTEL);
pub const SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL);
pub const SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL);
pub const SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL);
pub const SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL);
pub const SpvOpSubgroupAvcSicConvertToMceResultINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicConvertToMceResultINTEL);
pub const SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL);
pub const SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL);
pub const SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL);
pub const SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL);
pub const SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetIpeChromaModeINTEL);
pub const SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL);
pub const SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL);
pub const SpvOpSubgroupAvcSicGetInterRawSadsINTEL = @enumToInt(enum_SpvOp_.SpvOpSubgroupAvcSicGetInterRawSadsINTEL);
pub const SpvOpLoopControlINTEL = @enumToInt(enum_SpvOp_.SpvOpLoopControlINTEL);
pub const SpvOpReadPipeBlockingINTEL = @enumToInt(enum_SpvOp_.SpvOpReadPipeBlockingINTEL);
pub const SpvOpWritePipeBlockingINTEL = @enumToInt(enum_SpvOp_.SpvOpWritePipeBlockingINTEL);
pub const SpvOpFPGARegINTEL = @enumToInt(enum_SpvOp_.SpvOpFPGARegINTEL);
pub const SpvOpRayQueryGetRayTMinKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetRayTMinKHR);
pub const SpvOpRayQueryGetRayFlagsKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetRayFlagsKHR);
pub const SpvOpRayQueryGetIntersectionTKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionTKHR);
pub const SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR);
pub const SpvOpRayQueryGetIntersectionInstanceIdKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionInstanceIdKHR);
pub const SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR);
pub const SpvOpRayQueryGetIntersectionGeometryIndexKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionGeometryIndexKHR);
pub const SpvOpRayQueryGetIntersectionPrimitiveIndexKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionPrimitiveIndexKHR);
pub const SpvOpRayQueryGetIntersectionBarycentricsKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionBarycentricsKHR);
pub const SpvOpRayQueryGetIntersectionFrontFaceKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionFrontFaceKHR);
pub const SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR);
pub const SpvOpRayQueryGetIntersectionObjectRayDirectionKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionObjectRayDirectionKHR);
pub const SpvOpRayQueryGetIntersectionObjectRayOriginKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionObjectRayOriginKHR);
pub const SpvOpRayQueryGetWorldRayDirectionKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetWorldRayDirectionKHR);
pub const SpvOpRayQueryGetWorldRayOriginKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetWorldRayOriginKHR);
pub const SpvOpRayQueryGetIntersectionObjectToWorldKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionObjectToWorldKHR);
pub const SpvOpRayQueryGetIntersectionWorldToObjectKHR = @enumToInt(enum_SpvOp_.SpvOpRayQueryGetIntersectionWorldToObjectKHR);
pub const SpvOpMax = @enumToInt(enum_SpvOp_.SpvOpMax);
pub const enum_SpvOp_ = extern enum(c_int) {
    SpvOpNop = 0,
    SpvOpUndef = 1,
    SpvOpSourceContinued = 2,
    SpvOpSource = 3,
    SpvOpSourceExtension = 4,
    SpvOpName = 5,
    SpvOpMemberName = 6,
    SpvOpString = 7,
    SpvOpLine = 8,
    SpvOpExtension = 10,
    SpvOpExtInstImport = 11,
    SpvOpExtInst = 12,
    SpvOpMemoryModel = 14,
    SpvOpEntryPoint = 15,
    SpvOpExecutionMode = 16,
    SpvOpCapability = 17,
    SpvOpTypeVoid = 19,
    SpvOpTypeBool = 20,
    SpvOpTypeInt = 21,
    SpvOpTypeFloat = 22,
    SpvOpTypeVector = 23,
    SpvOpTypeMatrix = 24,
    SpvOpTypeImage = 25,
    SpvOpTypeSampler = 26,
    SpvOpTypeSampledImage = 27,
    SpvOpTypeArray = 28,
    SpvOpTypeRuntimeArray = 29,
    SpvOpTypeStruct = 30,
    SpvOpTypeOpaque = 31,
    SpvOpTypePointer = 32,
    SpvOpTypeFunction = 33,
    SpvOpTypeEvent = 34,
    SpvOpTypeDeviceEvent = 35,
    SpvOpTypeReserveId = 36,
    SpvOpTypeQueue = 37,
    SpvOpTypePipe = 38,
    SpvOpTypeForwardPointer = 39,
    SpvOpConstantTrue = 41,
    SpvOpConstantFalse = 42,
    SpvOpConstant = 43,
    SpvOpConstantComposite = 44,
    SpvOpConstantSampler = 45,
    SpvOpConstantNull = 46,
    SpvOpSpecConstantTrue = 48,
    SpvOpSpecConstantFalse = 49,
    SpvOpSpecConstant = 50,
    SpvOpSpecConstantComposite = 51,
    SpvOpSpecConstantOp = 52,
    SpvOpFunction = 54,
    SpvOpFunctionParameter = 55,
    SpvOpFunctionEnd = 56,
    SpvOpFunctionCall = 57,
    SpvOpVariable = 59,
    SpvOpImageTexelPointer = 60,
    SpvOpLoad = 61,
    SpvOpStore = 62,
    SpvOpCopyMemory = 63,
    SpvOpCopyMemorySized = 64,
    SpvOpAccessChain = 65,
    SpvOpInBoundsAccessChain = 66,
    SpvOpPtrAccessChain = 67,
    SpvOpArrayLength = 68,
    SpvOpGenericPtrMemSemantics = 69,
    SpvOpInBoundsPtrAccessChain = 70,
    SpvOpDecorate = 71,
    SpvOpMemberDecorate = 72,
    SpvOpDecorationGroup = 73,
    SpvOpGroupDecorate = 74,
    SpvOpGroupMemberDecorate = 75,
    SpvOpVectorExtractDynamic = 77,
    SpvOpVectorInsertDynamic = 78,
    SpvOpVectorShuffle = 79,
    SpvOpCompositeConstruct = 80,
    SpvOpCompositeExtract = 81,
    SpvOpCompositeInsert = 82,
    SpvOpCopyObject = 83,
    SpvOpTranspose = 84,
    SpvOpSampledImage = 86,
    SpvOpImageSampleImplicitLod = 87,
    SpvOpImageSampleExplicitLod = 88,
    SpvOpImageSampleDrefImplicitLod = 89,
    SpvOpImageSampleDrefExplicitLod = 90,
    SpvOpImageSampleProjImplicitLod = 91,
    SpvOpImageSampleProjExplicitLod = 92,
    SpvOpImageSampleProjDrefImplicitLod = 93,
    SpvOpImageSampleProjDrefExplicitLod = 94,
    SpvOpImageFetch = 95,
    SpvOpImageGather = 96,
    SpvOpImageDrefGather = 97,
    SpvOpImageRead = 98,
    SpvOpImageWrite = 99,
    SpvOpImage = 100,
    SpvOpImageQueryFormat = 101,
    SpvOpImageQueryOrder = 102,
    SpvOpImageQuerySizeLod = 103,
    SpvOpImageQuerySize = 104,
    SpvOpImageQueryLod = 105,
    SpvOpImageQueryLevels = 106,
    SpvOpImageQuerySamples = 107,
    SpvOpConvertFToU = 109,
    SpvOpConvertFToS = 110,
    SpvOpConvertSToF = 111,
    SpvOpConvertUToF = 112,
    SpvOpUConvert = 113,
    SpvOpSConvert = 114,
    SpvOpFConvert = 115,
    SpvOpQuantizeToF16 = 116,
    SpvOpConvertPtrToU = 117,
    SpvOpSatConvertSToU = 118,
    SpvOpSatConvertUToS = 119,
    SpvOpConvertUToPtr = 120,
    SpvOpPtrCastToGeneric = 121,
    SpvOpGenericCastToPtr = 122,
    SpvOpGenericCastToPtrExplicit = 123,
    SpvOpBitcast = 124,
    SpvOpSNegate = 126,
    SpvOpFNegate = 127,
    SpvOpIAdd = 128,
    SpvOpFAdd = 129,
    SpvOpISub = 130,
    SpvOpFSub = 131,
    SpvOpIMul = 132,
    SpvOpFMul = 133,
    SpvOpUDiv = 134,
    SpvOpSDiv = 135,
    SpvOpFDiv = 136,
    SpvOpUMod = 137,
    SpvOpSRem = 138,
    SpvOpSMod = 139,
    SpvOpFRem = 140,
    SpvOpFMod = 141,
    SpvOpVectorTimesScalar = 142,
    SpvOpMatrixTimesScalar = 143,
    SpvOpVectorTimesMatrix = 144,
    SpvOpMatrixTimesVector = 145,
    SpvOpMatrixTimesMatrix = 146,
    SpvOpOuterProduct = 147,
    SpvOpDot = 148,
    SpvOpIAddCarry = 149,
    SpvOpISubBorrow = 150,
    SpvOpUMulExtended = 151,
    SpvOpSMulExtended = 152,
    SpvOpAny = 154,
    SpvOpAll = 155,
    SpvOpIsNan = 156,
    SpvOpIsInf = 157,
    SpvOpIsFinite = 158,
    SpvOpIsNormal = 159,
    SpvOpSignBitSet = 160,
    SpvOpLessOrGreater = 161,
    SpvOpOrdered = 162,
    SpvOpUnordered = 163,
    SpvOpLogicalEqual = 164,
    SpvOpLogicalNotEqual = 165,
    SpvOpLogicalOr = 166,
    SpvOpLogicalAnd = 167,
    SpvOpLogicalNot = 168,
    SpvOpSelect = 169,
    SpvOpIEqual = 170,
    SpvOpINotEqual = 171,
    SpvOpUGreaterThan = 172,
    SpvOpSGreaterThan = 173,
    SpvOpUGreaterThanEqual = 174,
    SpvOpSGreaterThanEqual = 175,
    SpvOpULessThan = 176,
    SpvOpSLessThan = 177,
    SpvOpULessThanEqual = 178,
    SpvOpSLessThanEqual = 179,
    SpvOpFOrdEqual = 180,
    SpvOpFUnordEqual = 181,
    SpvOpFOrdNotEqual = 182,
    SpvOpFUnordNotEqual = 183,
    SpvOpFOrdLessThan = 184,
    SpvOpFUnordLessThan = 185,
    SpvOpFOrdGreaterThan = 186,
    SpvOpFUnordGreaterThan = 187,
    SpvOpFOrdLessThanEqual = 188,
    SpvOpFUnordLessThanEqual = 189,
    SpvOpFOrdGreaterThanEqual = 190,
    SpvOpFUnordGreaterThanEqual = 191,
    SpvOpShiftRightLogical = 194,
    SpvOpShiftRightArithmetic = 195,
    SpvOpShiftLeftLogical = 196,
    SpvOpBitwiseOr = 197,
    SpvOpBitwiseXor = 198,
    SpvOpBitwiseAnd = 199,
    SpvOpNot = 200,
    SpvOpBitFieldInsert = 201,
    SpvOpBitFieldSExtract = 202,
    SpvOpBitFieldUExtract = 203,
    SpvOpBitReverse = 204,
    SpvOpBitCount = 205,
    SpvOpDPdx = 207,
    SpvOpDPdy = 208,
    SpvOpFwidth = 209,
    SpvOpDPdxFine = 210,
    SpvOpDPdyFine = 211,
    SpvOpFwidthFine = 212,
    SpvOpDPdxCoarse = 213,
    SpvOpDPdyCoarse = 214,
    SpvOpFwidthCoarse = 215,
    SpvOpEmitVertex = 218,
    SpvOpEndPrimitive = 219,
    SpvOpEmitStreamVertex = 220,
    SpvOpEndStreamPrimitive = 221,
    SpvOpControlBarrier = 224,
    SpvOpMemoryBarrier = 225,
    SpvOpAtomicLoad = 227,
    SpvOpAtomicStore = 228,
    SpvOpAtomicExchange = 229,
    SpvOpAtomicCompareExchange = 230,
    SpvOpAtomicCompareExchangeWeak = 231,
    SpvOpAtomicIIncrement = 232,
    SpvOpAtomicIDecrement = 233,
    SpvOpAtomicIAdd = 234,
    SpvOpAtomicISub = 235,
    SpvOpAtomicSMin = 236,
    SpvOpAtomicUMin = 237,
    SpvOpAtomicSMax = 238,
    SpvOpAtomicUMax = 239,
    SpvOpAtomicAnd = 240,
    SpvOpAtomicOr = 241,
    SpvOpAtomicXor = 242,
    SpvOpPhi = 245,
    SpvOpLoopMerge = 246,
    SpvOpSelectionMerge = 247,
    SpvOpLabel = 248,
    SpvOpBranch = 249,
    SpvOpBranchConditional = 250,
    SpvOpSwitch = 251,
    SpvOpKill = 252,
    SpvOpReturn = 253,
    SpvOpReturnValue = 254,
    SpvOpUnreachable = 255,
    SpvOpLifetimeStart = 256,
    SpvOpLifetimeStop = 257,
    SpvOpGroupAsyncCopy = 259,
    SpvOpGroupWaitEvents = 260,
    SpvOpGroupAll = 261,
    SpvOpGroupAny = 262,
    SpvOpGroupBroadcast = 263,
    SpvOpGroupIAdd = 264,
    SpvOpGroupFAdd = 265,
    SpvOpGroupFMin = 266,
    SpvOpGroupUMin = 267,
    SpvOpGroupSMin = 268,
    SpvOpGroupFMax = 269,
    SpvOpGroupUMax = 270,
    SpvOpGroupSMax = 271,
    SpvOpReadPipe = 274,
    SpvOpWritePipe = 275,
    SpvOpReservedReadPipe = 276,
    SpvOpReservedWritePipe = 277,
    SpvOpReserveReadPipePackets = 278,
    SpvOpReserveWritePipePackets = 279,
    SpvOpCommitReadPipe = 280,
    SpvOpCommitWritePipe = 281,
    SpvOpIsValidReserveId = 282,
    SpvOpGetNumPipePackets = 283,
    SpvOpGetMaxPipePackets = 284,
    SpvOpGroupReserveReadPipePackets = 285,
    SpvOpGroupReserveWritePipePackets = 286,
    SpvOpGroupCommitReadPipe = 287,
    SpvOpGroupCommitWritePipe = 288,
    SpvOpEnqueueMarker = 291,
    SpvOpEnqueueKernel = 292,
    SpvOpGetKernelNDrangeSubGroupCount = 293,
    SpvOpGetKernelNDrangeMaxSubGroupSize = 294,
    SpvOpGetKernelWorkGroupSize = 295,
    SpvOpGetKernelPreferredWorkGroupSizeMultiple = 296,
    SpvOpRetainEvent = 297,
    SpvOpReleaseEvent = 298,
    SpvOpCreateUserEvent = 299,
    SpvOpIsValidEvent = 300,
    SpvOpSetUserEventStatus = 301,
    SpvOpCaptureEventProfilingInfo = 302,
    SpvOpGetDefaultQueue = 303,
    SpvOpBuildNDRange = 304,
    SpvOpImageSparseSampleImplicitLod = 305,
    SpvOpImageSparseSampleExplicitLod = 306,
    SpvOpImageSparseSampleDrefImplicitLod = 307,
    SpvOpImageSparseSampleDrefExplicitLod = 308,
    SpvOpImageSparseSampleProjImplicitLod = 309,
    SpvOpImageSparseSampleProjExplicitLod = 310,
    SpvOpImageSparseSampleProjDrefImplicitLod = 311,
    SpvOpImageSparseSampleProjDrefExplicitLod = 312,
    SpvOpImageSparseFetch = 313,
    SpvOpImageSparseGather = 314,
    SpvOpImageSparseDrefGather = 315,
    SpvOpImageSparseTexelsResident = 316,
    SpvOpNoLine = 317,
    SpvOpAtomicFlagTestAndSet = 318,
    SpvOpAtomicFlagClear = 319,
    SpvOpImageSparseRead = 320,
    SpvOpSizeOf = 321,
    SpvOpTypePipeStorage = 322,
    SpvOpConstantPipeStorage = 323,
    SpvOpCreatePipeFromPipeStorage = 324,
    SpvOpGetKernelLocalSizeForSubgroupCount = 325,
    SpvOpGetKernelMaxNumSubgroups = 326,
    SpvOpTypeNamedBarrier = 327,
    SpvOpNamedBarrierInitialize = 328,
    SpvOpMemoryNamedBarrier = 329,
    SpvOpModuleProcessed = 330,
    SpvOpExecutionModeId = 331,
    SpvOpDecorateId = 332,
    SpvOpGroupNonUniformElect = 333,
    SpvOpGroupNonUniformAll = 334,
    SpvOpGroupNonUniformAny = 335,
    SpvOpGroupNonUniformAllEqual = 336,
    SpvOpGroupNonUniformBroadcast = 337,
    SpvOpGroupNonUniformBroadcastFirst = 338,
    SpvOpGroupNonUniformBallot = 339,
    SpvOpGroupNonUniformInverseBallot = 340,
    SpvOpGroupNonUniformBallotBitExtract = 341,
    SpvOpGroupNonUniformBallotBitCount = 342,
    SpvOpGroupNonUniformBallotFindLSB = 343,
    SpvOpGroupNonUniformBallotFindMSB = 344,
    SpvOpGroupNonUniformShuffle = 345,
    SpvOpGroupNonUniformShuffleXor = 346,
    SpvOpGroupNonUniformShuffleUp = 347,
    SpvOpGroupNonUniformShuffleDown = 348,
    SpvOpGroupNonUniformIAdd = 349,
    SpvOpGroupNonUniformFAdd = 350,
    SpvOpGroupNonUniformIMul = 351,
    SpvOpGroupNonUniformFMul = 352,
    SpvOpGroupNonUniformSMin = 353,
    SpvOpGroupNonUniformUMin = 354,
    SpvOpGroupNonUniformFMin = 355,
    SpvOpGroupNonUniformSMax = 356,
    SpvOpGroupNonUniformUMax = 357,
    SpvOpGroupNonUniformFMax = 358,
    SpvOpGroupNonUniformBitwiseAnd = 359,
    SpvOpGroupNonUniformBitwiseOr = 360,
    SpvOpGroupNonUniformBitwiseXor = 361,
    SpvOpGroupNonUniformLogicalAnd = 362,
    SpvOpGroupNonUniformLogicalOr = 363,
    SpvOpGroupNonUniformLogicalXor = 364,
    SpvOpGroupNonUniformQuadBroadcast = 365,
    SpvOpGroupNonUniformQuadSwap = 366,
    SpvOpCopyLogical = 400,
    SpvOpPtrEqual = 401,
    SpvOpPtrNotEqual = 402,
    SpvOpPtrDiff = 403,
    SpvOpSubgroupBallotKHR = 4421,
    SpvOpSubgroupFirstInvocationKHR = 4422,
    SpvOpSubgroupAllKHR = 4428,
    SpvOpSubgroupAnyKHR = 4429,
    SpvOpSubgroupAllEqualKHR = 4430,
    SpvOpSubgroupReadInvocationKHR = 4432,
    SpvOpTypeRayQueryProvisionalKHR = 4472,
    SpvOpRayQueryInitializeKHR = 4473,
    SpvOpRayQueryTerminateKHR = 4474,
    SpvOpRayQueryGenerateIntersectionKHR = 4475,
    SpvOpRayQueryConfirmIntersectionKHR = 4476,
    SpvOpRayQueryProceedKHR = 4477,
    SpvOpRayQueryGetIntersectionTypeKHR = 4479,
    SpvOpGroupIAddNonUniformAMD = 5000,
    SpvOpGroupFAddNonUniformAMD = 5001,
    SpvOpGroupFMinNonUniformAMD = 5002,
    SpvOpGroupUMinNonUniformAMD = 5003,
    SpvOpGroupSMinNonUniformAMD = 5004,
    SpvOpGroupFMaxNonUniformAMD = 5005,
    SpvOpGroupUMaxNonUniformAMD = 5006,
    SpvOpGroupSMaxNonUniformAMD = 5007,
    SpvOpFragmentMaskFetchAMD = 5011,
    SpvOpFragmentFetchAMD = 5012,
    SpvOpReadClockKHR = 5056,
    SpvOpImageSampleFootprintNV = 5283,
    SpvOpGroupNonUniformPartitionNV = 5296,
    SpvOpWritePackedPrimitiveIndices4x8NV = 5299,
    SpvOpReportIntersectionKHR = 5334,
    SpvOpReportIntersectionNV = 5334,
    SpvOpIgnoreIntersectionKHR = 5335,
    SpvOpIgnoreIntersectionNV = 5335,
    SpvOpTerminateRayKHR = 5336,
    SpvOpTerminateRayNV = 5336,
    SpvOpTraceNV = 5337,
    SpvOpTraceRayKHR = 5337,
    SpvOpTypeAccelerationStructureKHR = 5341,
    SpvOpTypeAccelerationStructureNV = 5341,
    SpvOpExecuteCallableKHR = 5344,
    SpvOpExecuteCallableNV = 5344,
    SpvOpTypeCooperativeMatrixNV = 5358,
    SpvOpCooperativeMatrixLoadNV = 5359,
    SpvOpCooperativeMatrixStoreNV = 5360,
    SpvOpCooperativeMatrixMulAddNV = 5361,
    SpvOpCooperativeMatrixLengthNV = 5362,
    SpvOpBeginInvocationInterlockEXT = 5364,
    SpvOpEndInvocationInterlockEXT = 5365,
    SpvOpDemoteToHelperInvocationEXT = 5380,
    SpvOpIsHelperInvocationEXT = 5381,
    SpvOpSubgroupShuffleINTEL = 5571,
    SpvOpSubgroupShuffleDownINTEL = 5572,
    SpvOpSubgroupShuffleUpINTEL = 5573,
    SpvOpSubgroupShuffleXorINTEL = 5574,
    SpvOpSubgroupBlockReadINTEL = 5575,
    SpvOpSubgroupBlockWriteINTEL = 5576,
    SpvOpSubgroupImageBlockReadINTEL = 5577,
    SpvOpSubgroupImageBlockWriteINTEL = 5578,
    SpvOpSubgroupImageMediaBlockReadINTEL = 5580,
    SpvOpSubgroupImageMediaBlockWriteINTEL = 5581,
    SpvOpUCountLeadingZerosINTEL = 5585,
    SpvOpUCountTrailingZerosINTEL = 5586,
    SpvOpAbsISubINTEL = 5587,
    SpvOpAbsUSubINTEL = 5588,
    SpvOpIAddSatINTEL = 5589,
    SpvOpUAddSatINTEL = 5590,
    SpvOpIAverageINTEL = 5591,
    SpvOpUAverageINTEL = 5592,
    SpvOpIAverageRoundedINTEL = 5593,
    SpvOpUAverageRoundedINTEL = 5594,
    SpvOpISubSatINTEL = 5595,
    SpvOpUSubSatINTEL = 5596,
    SpvOpIMul32x16INTEL = 5597,
    SpvOpUMul32x16INTEL = 5598,
    SpvOpFunctionPointerINTEL = 5600,
    SpvOpFunctionPointerCallINTEL = 5601,
    SpvOpDecorateString = 5632,
    SpvOpDecorateStringGOOGLE = 5632,
    SpvOpMemberDecorateString = 5633,
    SpvOpMemberDecorateStringGOOGLE = 5633,
    SpvOpVmeImageINTEL = 5699,
    SpvOpTypeVmeImageINTEL = 5700,
    SpvOpTypeAvcImePayloadINTEL = 5701,
    SpvOpTypeAvcRefPayloadINTEL = 5702,
    SpvOpTypeAvcSicPayloadINTEL = 5703,
    SpvOpTypeAvcMcePayloadINTEL = 5704,
    SpvOpTypeAvcMceResultINTEL = 5705,
    SpvOpTypeAvcImeResultINTEL = 5706,
    SpvOpTypeAvcImeResultSingleReferenceStreamoutINTEL = 5707,
    SpvOpTypeAvcImeResultDualReferenceStreamoutINTEL = 5708,
    SpvOpTypeAvcImeSingleReferenceStreaminINTEL = 5709,
    SpvOpTypeAvcImeDualReferenceStreaminINTEL = 5710,
    SpvOpTypeAvcRefResultINTEL = 5711,
    SpvOpTypeAvcSicResultINTEL = 5712,
    SpvOpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL = 5713,
    SpvOpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL = 5714,
    SpvOpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL = 5715,
    SpvOpSubgroupAvcMceSetInterShapePenaltyINTEL = 5716,
    SpvOpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL = 5717,
    SpvOpSubgroupAvcMceSetInterDirectionPenaltyINTEL = 5718,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL = 5719,
    SpvOpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL = 5720,
    SpvOpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL = 5721,
    SpvOpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL = 5722,
    SpvOpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL = 5723,
    SpvOpSubgroupAvcMceSetMotionVectorCostFunctionINTEL = 5724,
    SpvOpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL = 5725,
    SpvOpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL = 5726,
    SpvOpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL = 5727,
    SpvOpSubgroupAvcMceSetAcOnlyHaarINTEL = 5728,
    SpvOpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL = 5729,
    SpvOpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL = 5730,
    SpvOpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL = 5731,
    SpvOpSubgroupAvcMceConvertToImePayloadINTEL = 5732,
    SpvOpSubgroupAvcMceConvertToImeResultINTEL = 5733,
    SpvOpSubgroupAvcMceConvertToRefPayloadINTEL = 5734,
    SpvOpSubgroupAvcMceConvertToRefResultINTEL = 5735,
    SpvOpSubgroupAvcMceConvertToSicPayloadINTEL = 5736,
    SpvOpSubgroupAvcMceConvertToSicResultINTEL = 5737,
    SpvOpSubgroupAvcMceGetMotionVectorsINTEL = 5738,
    SpvOpSubgroupAvcMceGetInterDistortionsINTEL = 5739,
    SpvOpSubgroupAvcMceGetBestInterDistortionsINTEL = 5740,
    SpvOpSubgroupAvcMceGetInterMajorShapeINTEL = 5741,
    SpvOpSubgroupAvcMceGetInterMinorShapeINTEL = 5742,
    SpvOpSubgroupAvcMceGetInterDirectionsINTEL = 5743,
    SpvOpSubgroupAvcMceGetInterMotionVectorCountINTEL = 5744,
    SpvOpSubgroupAvcMceGetInterReferenceIdsINTEL = 5745,
    SpvOpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL = 5746,
    SpvOpSubgroupAvcImeInitializeINTEL = 5747,
    SpvOpSubgroupAvcImeSetSingleReferenceINTEL = 5748,
    SpvOpSubgroupAvcImeSetDualReferenceINTEL = 5749,
    SpvOpSubgroupAvcImeRefWindowSizeINTEL = 5750,
    SpvOpSubgroupAvcImeAdjustRefOffsetINTEL = 5751,
    SpvOpSubgroupAvcImeConvertToMcePayloadINTEL = 5752,
    SpvOpSubgroupAvcImeSetMaxMotionVectorCountINTEL = 5753,
    SpvOpSubgroupAvcImeSetUnidirectionalMixDisableINTEL = 5754,
    SpvOpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL = 5755,
    SpvOpSubgroupAvcImeSetWeightedSadINTEL = 5756,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceINTEL = 5757,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceINTEL = 5758,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL = 5759,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL = 5760,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL = 5761,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL = 5762,
    SpvOpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL = 5763,
    SpvOpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL = 5764,
    SpvOpSubgroupAvcImeConvertToMceResultINTEL = 5765,
    SpvOpSubgroupAvcImeGetSingleReferenceStreaminINTEL = 5766,
    SpvOpSubgroupAvcImeGetDualReferenceStreaminINTEL = 5767,
    SpvOpSubgroupAvcImeStripSingleReferenceStreamoutINTEL = 5768,
    SpvOpSubgroupAvcImeStripDualReferenceStreamoutINTEL = 5769,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL = 5770,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL = 5771,
    SpvOpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL = 5772,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL = 5773,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL = 5774,
    SpvOpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL = 5775,
    SpvOpSubgroupAvcImeGetBorderReachedINTEL = 5776,
    SpvOpSubgroupAvcImeGetTruncatedSearchIndicationINTEL = 5777,
    SpvOpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL = 5778,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL = 5779,
    SpvOpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL = 5780,
    SpvOpSubgroupAvcFmeInitializeINTEL = 5781,
    SpvOpSubgroupAvcBmeInitializeINTEL = 5782,
    SpvOpSubgroupAvcRefConvertToMcePayloadINTEL = 5783,
    SpvOpSubgroupAvcRefSetBidirectionalMixDisableINTEL = 5784,
    SpvOpSubgroupAvcRefSetBilinearFilterEnableINTEL = 5785,
    SpvOpSubgroupAvcRefEvaluateWithSingleReferenceINTEL = 5786,
    SpvOpSubgroupAvcRefEvaluateWithDualReferenceINTEL = 5787,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceINTEL = 5788,
    SpvOpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL = 5789,
    SpvOpSubgroupAvcRefConvertToMceResultINTEL = 5790,
    SpvOpSubgroupAvcSicInitializeINTEL = 5791,
    SpvOpSubgroupAvcSicConfigureSkcINTEL = 5792,
    SpvOpSubgroupAvcSicConfigureIpeLumaINTEL = 5793,
    SpvOpSubgroupAvcSicConfigureIpeLumaChromaINTEL = 5794,
    SpvOpSubgroupAvcSicGetMotionVectorMaskINTEL = 5795,
    SpvOpSubgroupAvcSicConvertToMcePayloadINTEL = 5796,
    SpvOpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL = 5797,
    SpvOpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL = 5798,
    SpvOpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL = 5799,
    SpvOpSubgroupAvcSicSetBilinearFilterEnableINTEL = 5800,
    SpvOpSubgroupAvcSicSetSkcForwardTransformEnableINTEL = 5801,
    SpvOpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL = 5802,
    SpvOpSubgroupAvcSicEvaluateIpeINTEL = 5803,
    SpvOpSubgroupAvcSicEvaluateWithSingleReferenceINTEL = 5804,
    SpvOpSubgroupAvcSicEvaluateWithDualReferenceINTEL = 5805,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceINTEL = 5806,
    SpvOpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL = 5807,
    SpvOpSubgroupAvcSicConvertToMceResultINTEL = 5808,
    SpvOpSubgroupAvcSicGetIpeLumaShapeINTEL = 5809,
    SpvOpSubgroupAvcSicGetBestIpeLumaDistortionINTEL = 5810,
    SpvOpSubgroupAvcSicGetBestIpeChromaDistortionINTEL = 5811,
    SpvOpSubgroupAvcSicGetPackedIpeLumaModesINTEL = 5812,
    SpvOpSubgroupAvcSicGetIpeChromaModeINTEL = 5813,
    SpvOpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL = 5814,
    SpvOpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL = 5815,
    SpvOpSubgroupAvcSicGetInterRawSadsINTEL = 5816,
    SpvOpLoopControlINTEL = 5887,
    SpvOpReadPipeBlockingINTEL = 5946,
    SpvOpWritePipeBlockingINTEL = 5947,
    SpvOpFPGARegINTEL = 5949,
    SpvOpRayQueryGetRayTMinKHR = 6016,
    SpvOpRayQueryGetRayFlagsKHR = 6017,
    SpvOpRayQueryGetIntersectionTKHR = 6018,
    SpvOpRayQueryGetIntersectionInstanceCustomIndexKHR = 6019,
    SpvOpRayQueryGetIntersectionInstanceIdKHR = 6020,
    SpvOpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR = 6021,
    SpvOpRayQueryGetIntersectionGeometryIndexKHR = 6022,
    SpvOpRayQueryGetIntersectionPrimitiveIndexKHR = 6023,
    SpvOpRayQueryGetIntersectionBarycentricsKHR = 6024,
    SpvOpRayQueryGetIntersectionFrontFaceKHR = 6025,
    SpvOpRayQueryGetIntersectionCandidateAABBOpaqueKHR = 6026,
    SpvOpRayQueryGetIntersectionObjectRayDirectionKHR = 6027,
    SpvOpRayQueryGetIntersectionObjectRayOriginKHR = 6028,
    SpvOpRayQueryGetWorldRayDirectionKHR = 6029,
    SpvOpRayQueryGetWorldRayOriginKHR = 6030,
    SpvOpRayQueryGetIntersectionObjectToWorldKHR = 6031,
    SpvOpRayQueryGetIntersectionWorldToObjectKHR = 6032,
    SpvOpMax = 2147483647,
    _,
};
pub const SpvOp = enum_SpvOp_;